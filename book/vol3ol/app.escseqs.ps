%!PS-Adobe-3.0
%%BoundingBox: (atend)
%%Pages: (atend)
%%PageOrder: (atend)
%%DocumentFonts: (atend)
%%Creator: Frame 4.0
%%DocumentData: Clean7Bit
%%EndComments
%%BeginProlog
%
% Frame ps_prolog 4.0, for use with Frame 4.0 products
% This ps_prolog file is Copyright (c) 1986-1993 Frame Technology
% Corporation.  All rights reserved.  This ps_prolog file may be
% freely copied and distributed in conjunction with documents created
% using FrameMaker, FrameBuilder and FrameViewer as long as this 
% copyright notice is preserved.
%
% Frame products normally print colors as their true color on a color printer
% or as shades of gray, based on luminance, on a black-and white printer. The
% following flag, if set to True, forces all non-white colors to print as pure
% black. This has no effect on bitmap images.
/FMPrintAllColorsAsBlack             false def
%
% Frame products can either set their own line screens or use a printer's 
% default settings. Three flags below control this separately for no 
% separations, spot separations and process separations. If a flag
% is true, then the default printer settings will not be changed. If it is
% false, Frame products will use their own settings from a table based on
% the printer's resolution.
/FMUseDefaultNoSeparationScreen      true  def
/FMUseDefaultSpotSeparationScreen    true  def
/FMUseDefaultProcessSeparationScreen false def
%
% For any given PostScript printer resolution, Frame products have two sets of 
% screen angles and frequencies for printing process separations, which are 
% recomended by Adobe. The following variable chooses the higher frequencies
% when set to true or the lower frequencies when set to false. This is only
% effective if the appropriate FMUseDefault...SeparationScreen flag is false.
/FMUseHighFrequencyScreens true def
%
% PostScript Level 2 printers contain an "Accurate Screens" feature which can
% improve process separation rendering at the expense of compute time. This 
% flag is ignored by PostScript Level 1 printers.
/FMUseAcccurateScreens true def
%
% The following PostScript procedure defines the spot function that Frame
% products will use for process separations. You may un-comment-out one of
% the alternative functions below, or use your own.
%
% Dot function
/FMSpotFunction {abs exch abs 2 copy add 1 gt 
		{1 sub dup mul exch 1 sub dup mul add 1 sub }
		{dup mul exch dup mul add 1 exch sub }ifelse } def
%
% Line function
% /FMSpotFunction { pop } def
%
% Elipse function
% /FMSpotFunction { dup 5 mul 8 div mul exch dup mul exch add 
%		sqrt 1 exch sub } def
%
%
/FMversion (4.0) def 
/FMLevel1 /languagelevel where {pop languagelevel} {1} ifelse 2 lt def
/FMPColor
	FMLevel1 {
		false
		/colorimage where {pop pop true} if
	} {
		true
	} ifelse
def
/FrameDict 400 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in PS 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} bind def
	} if
/FMshowpage /showpage load def
/FMquit /quit load def
/FMFAILURE { 
	dup = flush 
	FMshowpage 
	/Helvetica findfont 12 scalefont setfont
	72 200 moveto
	show FMshowpage 
	FMquit 
	} def 
/FMVERSION {
	FMversion ne {
		(Frame product version does not match ps_prolog!) FMFAILURE
		} if
	} def 
/FMBADEPSF { 
	(PostScript Lang. Ref. Man., 2nd Ed., H.2.4 says EPS must not call X              )
	dup dup (X) search pop exch pop exch pop length 
	4 -1 roll 
	putinterval 
	FMFAILURE
	} def
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
/concatprocs
	{
	/proc2 exch cvlit def/proc1 exch cvlit def/newproc proc1 length proc2 length add array def
	newproc 0 proc1 putinterval newproc proc1 length proc2 putinterval newproc cvx
}def
FrameDict begin 
/FMnone 0 def
/FMcyan 1 def
/FMmagenta 2 def
/FMyellow 3 def
/FMblack 4 def
/FMcustom 5 def
/FrameNegative false def 
/FrameSepIs FMnone def 
/FrameSepBlack 0 def
/FrameSepYellow 0 def
/FrameSepMagenta 0 def
/FrameSepCyan 0 def
/FrameSepRed 1 def
/FrameSepGreen 1 def
/FrameSepBlue 1 def
/FrameCurGray 1 def
/FrameCurPat null def
/FrameCurColors [ 0 0 0 1 0 0 0 ] def 
/FrameColorEpsilon .001 def	
/eqepsilon {		
	sub dup 0 lt {neg} if
	FrameColorEpsilon le
} bind def
/FrameCmpColorsCMYK { 
	2 copy 0 get exch 0 get eqepsilon {
		2 copy 1 get exch 1 get eqepsilon {
			2 copy 2 get exch 2 get eqepsilon {
				3 get exch 3 get eqepsilon
			} {pop pop false} ifelse
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/FrameCmpColorsRGB { 
	2 copy 4 get exch 0 get eqepsilon {
		2 copy 5 get exch 1 get eqepsilon {
			6 get exch 2 get eqepsilon
		}{pop pop false} ifelse
	} {pop pop false} ifelse
} bind def
/RGBtoCMYK { 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	1 exch sub 
	3 1 roll 
	3 copy 
	2 copy 
	le { pop } { exch pop } ifelse 
	2 copy 
	le { pop } { exch pop } ifelse 
	dup dup dup 
	6 1 roll 
	4 1 roll 
	7 1 roll 
	sub 
	6 1 roll 
	sub 
	5 1 roll 
	sub 
	4 1 roll 
} bind def
/CMYKtoRGB { 
	dup dup 4 -1 roll add 						  
	5 1 roll 3 -1 roll add 						  
	4 1 roll add 								  
	1 exch sub dup 0 lt {pop 0} if 3 1 roll 	  
	1 exch sub dup 0 lt {pop 0} if exch 	      
	1 exch sub dup 0 lt {pop 0} if exch	  		  
} bind def
/FrameSepInit {
	1.0 RealSetgray
} bind def
/FrameSetSepColor { 
	/FrameSepBlue exch def
	/FrameSepGreen exch def
	/FrameSepRed exch def
	/FrameSepBlack exch def
	/FrameSepYellow exch def
	/FrameSepMagenta exch def
	/FrameSepCyan exch def
	/FrameSepIs FMcustom def
	setCurrentScreen	
} bind def
/FrameSetCyan {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 1.0 def
	/FrameSepIs FMcyan def
	setCurrentScreen	
} bind def
 
/FrameSetMagenta {
	/FrameSepBlue 1.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 1.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMmagenta def
	setCurrentScreen
} bind def
 
/FrameSetYellow {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 1.0 def
	/FrameSepRed 1.0 def
	/FrameSepBlack 0.0 def
	/FrameSepYellow 1.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMyellow def
	setCurrentScreen
} bind def
 
/FrameSetBlack {
	/FrameSepBlue 0.0 def
	/FrameSepGreen 0.0 def
	/FrameSepRed 0.0 def
	/FrameSepBlack 1.0 def
	/FrameSepYellow 0.0 def
	/FrameSepMagenta 0.0 def
	/FrameSepCyan 0.0 def
	/FrameSepIs FMblack def
	setCurrentScreen
} bind def
 
/FrameNoSep { 
	/FrameSepIs FMnone def
	setCurrentScreen
} bind def
/FrameSetSepColors { 
	FrameDict begin
	[ exch 1 add 1 roll ]
	/FrameSepColors  
	exch def end
	} bind def
/FrameColorInSepListCMYK { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsCMYK 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/FrameColorInSepListRGB { 
	FrameSepColors {  
       		exch dup 3 -1 roll 
       		FrameCmpColorsRGB 
       		{ pop true exit } if
    	} forall 
	dup true ne {pop false} if
	} bind def
/RealSetgray /setgray load def
/RealSetrgbcolor /setrgbcolor load def
/RealSethsbcolor /sethsbcolor load def
end 
/setgray { 
	FrameDict begin
	FrameSepIs FMnone eq
		{ RealSetgray } 
		{ 
		FrameSepIs FMblack eq 
			{ RealSetgray } 
			{ FrameSepIs FMcustom eq 
			  FrameSepRed 0 eq and
			  FrameSepGreen 0 eq and
			  FrameSepBlue 0 eq and {
			  	RealSetgray
			  } {
				1 RealSetgray pop 
			  } ifelse
			} ifelse
		} ifelse
	end
} bind def
/setrgbcolor { 
	FrameDict begin
	FrameSepIs FMnone eq
	{  RealSetrgbcolor }
	{
		3 copy [ 4 1 roll ] 
		FrameColorInSepListRGB
		{
				FrameSepBlue eq exch 
			 	FrameSepGreen eq and exch 
			 	FrameSepRed eq and
			 	{ 0 } { 1 } ifelse
		}
		{
			FMPColor {
				RealSetrgbcolor
				currentcmykcolor
			} {
				RGBtoCMYK
			} ifelse
			FrameSepIs FMblack eq
			{1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		RealSetgray
	} 
	ifelse
	end
} bind def
/sethsbcolor {
	FrameDict begin
	FrameSepIs FMnone eq 
	{ RealSethsbcolor } 
	{
		RealSethsbcolor 
		currentrgbcolor  
		setrgbcolor 
	} 
	ifelse
	end
} bind def
FrameDict begin
/setcmykcolor where {
	pop /RealSetcmykcolor /setcmykcolor load def
} {
	/RealSetcmykcolor {
		4 1 roll
		3 { 3 index add 0 max 1 min 1 exch sub 3 1 roll} repeat 
		setrgbcolor pop
	} bind def
} ifelse
userdict /setcmykcolor { 
		FrameDict begin
		FrameSepIs FMnone eq
		{ RealSetcmykcolor } 
		{
			4 copy [ 5 1 roll ]
			FrameColorInSepListCMYK
			{
				FrameSepBlack eq exch 
				FrameSepYellow eq and exch 
				FrameSepMagenta eq and exch 
				FrameSepCyan eq and 
				{ 0 } { 1 } ifelse
			}
			{
				FrameSepIs FMblack eq
				{1.0 exch sub 4 1 roll pop pop pop} {
				FrameSepIs FMyellow eq
				{pop 1.0 exch sub 3 1 roll pop pop} {
				FrameSepIs FMmagenta eq
				{pop pop 1.0 exch sub exch pop } {
				FrameSepIs FMcyan eq
				{pop pop pop 1.0 exch sub } 
				{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
			} ifelse
			RealSetgray
		}
		ifelse
		end
	} bind put
FMLevel1 not { 
	
	/patProcDict 5 dict dup begin
		<0f1e3c78f0e1c387> { 3 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<0f87c3e1f0783c1e> { 3 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
		<8142241818244281> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke
											-1 -1 moveto 9 9 lineto stroke } bind def
		<03060c183060c081> { 1 setlinewidth -1 -1 moveto 9 9 lineto stroke 
											4 -4 moveto 12 4 lineto stroke
											-4 4 moveto 4 12 lineto stroke} bind def
		<8040201008040201> { 1 setlinewidth -1 9 moveto 9 -1 lineto stroke 
											-4 4 moveto 4 -4 lineto stroke
											4 12 moveto 12 4 lineto stroke} bind def
	end def
	/patDict 15 dict dup begin
		/PatternType 1 def		
		/PaintType 2 def		
		/TilingType 3 def		
		/BBox [ 0 0 8 8 ] def 	
		/XStep 8 def			
		/YStep 8 def			
		/PaintProc {
			begin
			patProcDict bstring known {
				patProcDict bstring get exec
			} {
				8 8 true [1 0 0 -1 0 8] bstring imagemask
			} ifelse
			end
		} bind def
	end def
} if
/combineColor {
    FrameSepIs FMnone eq
	{
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceCMYK]] setcolorspace
			FrameCurColors 0 4 getinterval aload pop FrameCurPat setcolor
		} {
			FrameCurColors 3 get 1.0 ge {
				FrameCurGray RealSetgray
			} {
				FMPColor graymode and {
					0 1 3 { 
						FrameCurColors exch get
						1 FrameCurGray sub mul
					} for
					RealSetcmykcolor
				} {
					4 1 6 {
						FrameCurColors exch get
						graymode {
							1 exch sub 1 FrameCurGray sub mul 1 exch sub
						} {
							1.0 lt {FrameCurGray} {1} ifelse
						} ifelse
					} for
					RealSetrgbcolor
				} ifelse
			} ifelse
		} ifelse
	} { 
		FrameCurColors 0 4 getinterval aload
		FrameColorInSepListCMYK {
			FrameSepBlack eq exch 
			FrameSepYellow eq and exch 
			FrameSepMagenta eq and exch 
			FrameSepCyan eq and
			FrameSepIs FMcustom eq and
			{ FrameCurGray } { 1 } ifelse
		} {
			FrameSepIs FMblack eq
			{FrameCurGray 1.0 exch sub mul 1.0 exch sub 4 1 roll pop pop pop} {
			FrameSepIs FMyellow eq
			{pop FrameCurGray 1.0 exch sub mul 1.0 exch sub 3 1 roll pop pop} {
			FrameSepIs FMmagenta eq
			{pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub exch pop } {
			FrameSepIs FMcyan eq
			{pop pop pop FrameCurGray 1.0 exch sub mul 1.0 exch sub } 
			{pop pop pop pop 1} ifelse } ifelse } ifelse } ifelse 
		} ifelse
		graymode FMLevel1 or not {
			
			[/Pattern [/DeviceGray]] setcolorspace
			FrameCurPat setcolor
		} { 
			graymode not FMLevel1 and {
				
				dup 1 lt {pop FrameCurGray} if
			} if
			RealSetgray
		} ifelse
	} ifelse
} bind def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
	
/freq dpi dup 72 div round dup 0 eq {pop 1} if 8 mul div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/dpiranges   [  2540    2400    1693     1270    1200     635      600      0      ] def
/CMLowFreqs  [ 100.402  94.8683 89.2289 100.402  94.8683  66.9349  63.2456 47.4342 ] def
/YLowFreqs   [  95.25   90.0    84.65    95.25   90.0     70.5556  66.6667 50.0    ] def
/KLowFreqs   [  89.8026 84.8528 79.8088  89.8026 84.8528  74.8355  70.7107 53.033  ] def
/CLowAngles  [  71.5651 71.5651 71.5651 71.5651  71.5651  71.5651  71.5651 71.5651 ] def
/MLowAngles  [  18.4349 18.4349 18.4349 18.4349  18.4349  18.4349  18.4349 18.4349 ] def
/YLowTDot    [  true    true    false    true    true     false    false   false   ] def
/CMHighFreqs [ 133.87  126.491 133.843  108.503 102.523  100.402   94.8683 63.2456 ] def
/YHighFreqs  [ 127.0   120.0   126.975  115.455 109.091   95.25    90.0    60.0    ] def
/KHighFreqs  [ 119.737 113.137 119.713  128.289 121.218   89.8026  84.8528 63.6395 ] def
/CHighAngles [  71.5651 71.5651 71.5651  70.0169 70.0169  71.5651  71.5651 71.5651 ] def
/MHighAngles [  18.4349 18.4349 18.4349  19.9831 19.9831  18.4349  18.4349 18.4349 ] def
/YHighTDot   [  false   false   true     false   false    true     true    false   ] def
/PatFreq     [	10.5833 10.0     9.4055  10.5833 10.0	  10.5833  10.0	   9.375   ] def
/screenIndex {
	0 1 dpiranges length 1 sub { dup dpiranges exch get 1 sub dpi le {exit} {pop} ifelse } for
} bind def
/getCyanScreen {
	FMUseHighFrequencyScreens { CHighAngles CMHighFreqs} {CLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getMagentaScreen {
	FMUseHighFrequencyScreens { MHighAngles CMHighFreqs } {MLowAngles CMLowFreqs} ifelse
		screenIndex dup 3 1 roll get 3 1 roll get /FMSpotFunction load
} bind def
/getYellowScreen {
	FMUseHighFrequencyScreens { YHighTDot YHighFreqs} { YLowTDot YLowFreqs } ifelse
		screenIndex dup 3 1 roll get 3 1 roll get { 3 div
			{2 { 1 add 2 div 3 mul dup floor sub 2 mul 1 sub exch} repeat
			FMSpotFunction } } {/FMSpotFunction load } ifelse
			0.0 exch
} bind def
/getBlackScreen  {
	FMUseHighFrequencyScreens { KHighFreqs } { KLowFreqs } ifelse
		screenIndex get 45.0 /FMSpotFunction load 
} bind def
/getSpotScreen {
	getBlackScreen
} bind def
/getCompositeScreen {
	getBlackScreen
} bind def
/FMSetScreen 
	FMLevel1 { /setscreen load 
	}{ {
		8 dict begin
		/HalftoneType 1 def
		/SpotFunction exch def
		/Angle exch def
		/Frequency exch def
		/AccurateScreens FMUseAcccurateScreens def
		currentdict end sethalftone
	} bind } ifelse
def
/setDefaultScreen {
	FMPColor {
		orgrxfer cvx orggxfer cvx orgbxfer cvx orgxfer cvx setcolortransfer
	}
	{
		orgxfer cvx settransfer
	} ifelse
	orgfreq organgle orgproc cvx setscreen
} bind def
/setCurrentScreen {
	FrameSepIs FMnone eq {
		FMUseDefaultNoSeparationScreen {
			setDefaultScreen
		} {
			getCompositeScreen FMSetScreen
		} ifelse
	} {
		FrameSepIs FMcustom eq {
			FMUseDefaultSpotSeparationScreen {
				setDefaultScreen
			} {
				getSpotScreen FMSetScreen
			} ifelse
		} {
			FMUseDefaultProcessSeparationScreen {
				setDefaultScreen
			} {
				FrameSepIs FMcyan eq {
					getCyanScreen FMSetScreen
				} {
					FrameSepIs FMmagenta eq {
						getMagentaScreen FMSetScreen
					} {
						FrameSepIs FMyellow eq {
							getYellowScreen FMSetScreen
						} {
							getBlackScreen FMSetScreen
						} ifelse
					} ifelse
				} ifelse
			} ifelse
		} ifelse
	} ifelse 
} bind def
end
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgrxfer FMLOCAL
	/orggxfer FMLOCAL
	/orgbxfer FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/orgrproc FMLOCAL
	/orggproc FMLOCAL
	/orgbproc FMLOCAL
	/organgle FMLOCAL
	/orgrangle FMLOCAL
	/orggangle FMLOCAL
	/orgbangle FMLOCAL
	/orgfreq FMLOCAL
	/orgrfreq FMLOCAL
	/orggfreq FMLOCAL
	/orgbfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/edown FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne /manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	0 ne /FrameNegative exch def 
	0 ne /edown exch def 
	/yscale exch def
	/xscale exch def
	FMLevel1 {
		manualfeed {setmanualfeed} if
		/FMdicttop countdictstack 1 add def 
		/FMoptop count def 
		setpapername 
		manualfeed {true} {papersize} ifelse 
		{manualpapersize} {false} ifelse 
		{desperatepapersize} {false} ifelse 
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		count -1 FMoptop {pop pop} for
		countdictstack -1 FMdicttop {pop end} for 
		}
		{{1 dict dup /PageSize [paperwidth paperheight]put setpagedevice}stopped
		{ (Can't select requested paper size for Frame print job!) FMFAILURE } if
		 {1 dict dup /ManualFeed manualfeed put setpagedevice } stopped pop }
	ifelse 
	
	FMPColor {
		currentcolorscreen
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
			cvlit /orgbproc exch def
				  /orgbangle exch def 
				  /orgbfreq exch def
			cvlit /orggproc exch def
				  /orggangle exch def 
				  /orggfreq exch def
			cvlit /orgrproc exch def
				  /orgrangle exch def 
				  /orgrfreq exch def
			currentcolortransfer 
			FrameNegative {
				1 1 4 { 
					pop { 1 exch sub } concatprocs 4 1 roll
				} for
				4 copy
				setcolortransfer
			} if
			cvlit /orgxfer exch def
			cvlit /orgbxfer exch def
			cvlit /orggxfer exch def
			cvlit /orgrxfer exch def
	} {
		currentscreen 
			cvlit /orgproc exch def
				  /organgle exch def 
				  /orgfreq exch def
				  
		currenttransfer 
		FrameNegative {
			{ 1 exch sub } concatprocs
			dup settransfer
		} if 
		cvlit /orgxfer exch def
	} ifelse
	end 
} def 
/pagesave FMLOCAL
/orgmatrix FMLOCAL
/landscape FMLOCAL
/pwid FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch dup /pwid exch def neg translate pop 
	}{
		pop /pwid exch def
	} ifelse
	edown { [-1 0 0 1 pwid 0] concat } if
	0 0 moveto paperwidth 0 lineto paperwidth paperheight lineto 
	0 paperheight lineto 0 0 lineto 1 setgray fill
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin dup
	array /fillvals exch def
	dict /patCache exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
% See Adobe's "PostScript Language Reference Manual, 2nd Edition", page 714.
% "...the following operators MUST NOT be used in an EPS file:" (emphasis ours)
	/banddevice {(banddevice) FMBADEPSF} def
	/clear {(clear) FMBADEPSF} def
	/cleardictstack {(cleardictstack) FMBADEPSF} def 
	/copypage {(copypage) FMBADEPSF} def
	/erasepage {(erasepage) FMBADEPSF} def
	/exitserver {(exitserver) FMBADEPSF} def
	/framedevice {(framedevice) FMBADEPSF} def
	/grestoreall {(grestoreall) FMBADEPSF} def
	/initclip {(initclip) FMBADEPSF} def
	/initgraphics {(initgraphics) FMBADEPSF} def
	/initmatrix {(initmatrix) FMBADEPSF} def
	/quit {(quit) FMBADEPSF} def
	/renderbands {(renderbands) FMBADEPSF} def
	/setglobal {(setglobal) FMBADEPSF} def
	/setpagedevice {(setpagedevice) FMBADEPSF} def
	/setshared {(setshared) FMBADEPSF} def
	/startjob {(startjob) FMBADEPSF} def
	/lettertray {(lettertray) FMBADEPSF} def
	/letter {(letter) FMBADEPSF} def
	/lettersmall {(lettersmall) FMBADEPSF} def
	/11x17tray {(11x17tray) FMBADEPSF} def
	/11x17 {(11x17) FMBADEPSF} def
	/ledgertray {(ledgertray) FMBADEPSF} def
	/ledger {(ledger) FMBADEPSF} def
	/legaltray {(legaltray) FMBADEPSF} def
	/legal {(legal) FMBADEPSF} def
	/statementtray {(statementtray) FMBADEPSF} def
	/statement {(statement) FMBADEPSF} def
	/executivetray {(executivetray) FMBADEPSF} def
	/executive {(executive) FMBADEPSF} def
	/a3tray {(a3tray) FMBADEPSF} def
	/a3 {(a3) FMBADEPSF} def
	/a4tray {(a4tray) FMBADEPSF} def
	/a4 {(a4) FMBADEPSF} def
	/a4small {(a4small) FMBADEPSF} def
	/b4tray {(b4tray) FMBADEPSF} def
	/b4 {(b4) FMBADEPSF} def
	/b5tray {(b5tray) FMBADEPSF} def
	/b5 {(b5) FMBADEPSF} def
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fw 2 div add fy fh 2 div add  translate
	rotate
	fw 2 div neg fh 2 div neg translate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count def 
	} bind def
/FMENDEPSF {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} bind def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} bind def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} bind def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	statusdict begin stopped end 
	} bind def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} bind def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped 
		end
		} {true} ifelse 
	} bind def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
FMPColor 
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	}
ifelse
/K { 
	FMPrintAllColorsAsBlack {
		dup 1 eq 2 index 1 eq and 3 index 1 eq and not
			{7 {pop} repeat 0 0 0 1 0 0 0} if
	} if 
	FrameCurColors astore 
	pop combineColor
} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setPatternMode {
	FMLevel1 {
		/bwidth  exch def
		/bpside  exch def
		/bstring exch def
		/onbits 0 def  /offbits 0 def
		freq sangle landscape {90 add} if 
			{/y exch def
			 /x exch def
			 /xindex x 1 add 2 div bpside mul cvi def
			 /yindex y 1 add 2 div bpside mul cvi def
			 bstring yindex bwidth mul xindex 8 idiv add get
			 1 7 xindex 8 mod sub bitshift and 0 ne FrameNegative {not} if
			 {/onbits  onbits  1 add def 1}
			 {/offbits offbits 1 add def 0}
			 ifelse
			}
			setscreen
		offbits offbits onbits add div FrameNegative {1.0 exch sub} if
		/FrameCurGray exch def
	} { 
		pop pop
		dup patCache exch known {
			patCache exch get
		} { 
			dup
			patDict /bstring 3 -1 roll put
			patDict 
			9 PatFreq screenIndex get div dup matrix scale
			makepattern
			dup 
			patCache 4 -1 roll 3 -1 roll put
		} ifelse
		/FrameCurGray 0 def
		/FrameCurPat exch def
	} ifelse
	/graymode false def
	combineColor
} bind def
/setGrayScaleMode {
	graymode not {
		/graymode true def
		FMLevel1 {
			setCurrentScreen
		} if
	} if
	/FrameCurGray exch def
	combineColor
} bind def
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	
/PFill {
	graymode FMLevel1 or not {
		gsave 1 setgray eofill grestore
	} if
} bind def
/PStroke {
	graymode FMLevel1 or not {
		gsave 1 setgray stroke grestore
	} if
	stroke
} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setPatternMode} 
	{setGrayScaleMode}
	ifelse
	} bind def
/V { 
	PFill gsave eofill grestore
	} bind def
/Vclip {
	clip
	} bind def
/Vstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/N { 
	PStroke
	} bind def
/Nclip {
	strokepath clip newpath
	} bind def
/Nstrk {
	currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
	/rad FMLOCAL
/rarc 
	{rad 
	 arcto
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	mark
	newpath
	{
	x1 y1 rad add moveto
	x1 y2 x2 y2 rarc
	x2 y2 x2 y1 rarc
	x2 y1 x1 y1 rarc
	x1 y1 x1 y2 rarc
	closepath
	} stopped {x1 y1 x2 y2 R} if 
	cleartomark
	} bind def
/RRR { 
	/rad exch def
	normalize /y4 exch def /x4 exch def
	normalize /y3 exch def /x3 exch def
	normalize /y2 exch def /x2 exch def
	normalize /y1 exch def /x1 exch def
	newpath
	normalize moveto 
	mark
	{
	x2 y2 x3 y3 rarc
	x3 y3 x4 y4 rarc
	x4 y4 x1 y1 rarc
	x1 y1 x2 y2 rarc
	closepath
	} stopped
	 {x1 y1 x2 y2 x3 y3 x4 y4 newpath moveto lineto lineto lineto closepath} if
	cleartomark
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	setCurrentScreen
} bind def
/CP { 
	grestore
	gsave
	Y 
	clip
	setCurrentScreen
} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	PFill fill
	grestore
	} bind def
/Gstrk {
	savematrix
    newpath
    2 index 2 div add exch 3 index 2 div sub exch 
    normalize 2 index 2 div sub exch 3 index 2 div add exch 
    translate
    scale 
    0.0 0.0 1.0 5 3 roll arc 
    restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
    } bind def
/Gclip { 
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	clip newpath
	restorematrix
	} bind def
/GG { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	rotate 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath
	PFill
	fill
	grestore
	} bind def
/GGclip { 
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	clip newpath
	restorematrix
	} bind def
/GGstrk { 
	savematrix
    newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath 
	restorematrix
    currentlinewidth exch setlinewidth PStroke setlinewidth
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/Aclip {
	newpath
	savematrix
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath 
	strokepath clip newpath
	restorematrix
} bind def
/Astrk {
	Gstrk
} bind def
/AA { 
	gsave
	savematrix
	newpath
	
	3 index 2 div add exch 4 index 2 div sub exch 
	
	normalize 3 index 2 div sub exch 4 index 2 div add exch
	translate 
	rotate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	PStroke
	grestore
	} bind def
/AAclip {
	savematrix
	newpath
    normalize translate 0.0 0.0 moveto 
    rotate 
    dnormalize scale 
    0.0 0.0 1.0 5 3 roll arc 
    closepath
	strokepath clip newpath
	restorematrix
} bind def
/AAstrk {
	GGstrk
} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 7 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/rip { 
	   
	  
	  bis ris copy pop 
      is
      0
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop 
	  ris gis copy pop 
	  dup is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
	  pop pop
	  gis bis copy pop 
	  dup add is exch 
	  
      cf cs readline pop 
      {       ic exch get exec 
              add 
              } forall 
      pop 
      
      } bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
      dup dup
      24 eq { pop pop 3 mul }
      { 8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse } ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
		 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
FMLevel1 {
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
%		/u 0 def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
}
{
/colorSetup2 {
	[ /Indexed /DeviceRGB 255 
		{dup red exch get 255 div 
		 exch dup green exch get 255 div 
		 exch blue exch get 255 div}
	] setcolorspace
} bind def
} ifelse
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch concatprocs settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/bitmapsave save def
	FMLevel1 {	
		colorsetup
		/is w d wbytes string def
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{cf is readhexstring pop} {is} {is} true 3 colorimage 
	} {
		colorSetup2
		/is w d wbytes string def
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {cf is readhexstring pop} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	FMLevel1 {	
		colorsetup
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		w h d [w 0 0 h neg 0 h] 
		{ip} {is} {is} true 3 colorimage
	} {
		colorSetup2
		/is im 0 lb getinterval def 
		ws 0 lb getinterval is copy pop 
		/cf currentfile def 
		7 dict dup begin
			/ImageType 1 def
			/Width w def
			/Height h def
			/ImageMatrix [w 0 0 h neg 0 h] def
			/DataSource {ip} bind def
			/BitsPerComponent d def
			/Decode [0 255] def
		end image	
	} ifelse
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
	/d 24 def
        gsave
 	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris} {gis} {bis} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
	/d 24 def
        gsave
	
	3 index 2 div add exch	
	4 index 2 div add exch	
	translate		
	rotate			
	1 index 2 div neg	
	1 index 2 div neg	
	translate		
	scale			
	/h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
        /bitmapsave save def 
        
	/is im 0 lb getinterval def	
	/ris im 0 w getinterval def	
	/gis im w w getinterval def	
	/bis im w 2 mul w getinterval def 
        ws 0 lb getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {w rip pop ris gis bis w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
		
		3 index 2 div add exch	
		4 index 2 div add exch	
		translate		
		rotate			
		1 index 2 div neg	
		1 index 2 div neg	
		translate		
		scale			
		/h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
/I { setdash } bind def
/J { [] 0 setdash } bind def
%%EndProlog
%%BeginSetup
(4.0) FMVERSION
1 1 0 0 612 792 0 1 10 FMDOCUMENT
0 0 /Helvetica-Narrow-BoldOblique FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Times-Italic FMFONTDEFINE
3 0 /Helvetica-Bold FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "423" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
J
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
111 699.46 507 708 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
111 699.46 507 708 R
7 X
0 0 0 1 0 0 0 K
V
45 63 567 729 C
0 8.5 Q
0 X
0 0 0 1 0 0 0 K
0.43 (APPENDIX E: XTERM CONTROL SEQUENCES) 297.15 693.79 S
0 9 Q
0.45 (423) 487.34 693.79 S
111 684 507 708 R
0.2 H
0 Z
N
69 81 93 669 R
7 X
V
0 1 1 0 1 0 0 K
525 631 567 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
525 631 582 655 R
0 X
0 1 1 0 1 0 0 K
V
525 631 579 655 R
V
525 646.46 567 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
525 646.46 579 655 R
0 X
0 1 1 0 1 0 0 K
V
525 631 567 655 C
0 0 0 0 1 1 1 K
0 10 Q
7 X
(E) 531 639.79 T
0 1 1 0 1 0 0 K
45 63 567 729 C
0 0 0 1 0 0 0 K
0 0 0 0 1 1 1 K
1 10 Q
7 X
(Appendix) 138 719.33 T
(EXTERM CONTROL SEQUENCES) 179.94 719.33 T
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 16 Q
0 X
0 1 1 0 1 0 0 K
(APPENDIX) 110 633.83 T
(E) 180.72 633.83 T
0 0 0 1 0 0 0 K
0 35 Q
0 0 0 1 0 0 0 K
(cmdtool and xterm) 144.5 573.5 T
(Control Sequences) 144.5 530.5 T
1 10 Q
0.21 (This appendix lists the escape sequences that can be used to control features of a) 147 434.33 P
2 F
0.21 (cmdtool) 474.78 434.33 P
1 F
(or) 147 422.03 T
2 F
(xterm) 157.83 422.03 T
1 F
( terminal emulator window.) 180.6 422.03 T
-0.27 (A standard terminal performs many operations in response to escape sequences sent out by) 147 403.73 P
1.26 (a program. In emulating a terminal,) 147 391.43 P
2 F
1.26 (cmdtool) 299.01 391.43 P
1 F
1.26 (or) 334.99 391.43 P
2 F
1.26 ( xterm) 343.32 391.43 P
1 F
1.26 ( responds to those same terminal) 369.86 391.43 P
0.33 (escape sequences. Under UNIX, programs use the) 147 379.13 P
2 F
0.33 (termcap) 352.32 379.13 P
1 F
0.33 ( or) 385.09 379.13 P
2 F
0.33 (terminfo) 399.08 379.13 P
1 F
0.33 ( database to deter-) 432.97 379.13 P
0.5 (mine which escape sequences to send out. For more information, see the standard UNIX) 147 366.83 P
0.07 (man pages) 147 354.53 P
2 F
0.07 (termcap) 192.12 354.53 P
1 F
0.07 ( \0505\051 or) 224.9 354.53 P
2 F
0.07 (terminfo) 252.59 354.53 P
1 F
0.07 ( \0505\051, or the Nutshell Handbook) 286.48 354.53 P
2 F
0.07 (Termcap and Terminfo) 412.14 354.53 P
1 F
0.07 (,) 504.5 354.53 P
(available from O\325Reilly & Associates, Inc.) 147 342.23 T
0 1 1 0 1 0 0 K
0 20 Q
0 1 1 0 1 0 0 K
(E.1  cmdtool/shelltool Control Sequences) 111 309.97 T
0 0 0 1 0 0 0 K
1 10 Q
0 0 0 1 0 0 0 K
0.35 (Since) 147 290.63 P
2 F
0.35 (cmdtool) 172.07 290.63 P
1 F
0.35 ( was written as a window terminal, not as an emulator of a real terminal, it) 204.29 290.63 P
0.56 (has little \322baggage\323 to carry around; accordingly, the commands interpreted by) 147 278.33 P
2 F
0.56 (cmdtool) 472 278.33 P
1 F
0.56 (/) 504.22 278.33 P
2 F
1.07 (shelltool) 147 266.03 P
1 F
1.07 ( are few in number, but more than adequate for most purposes. Table) 181.45 266.03 P
1.07 (E-) 472.87 266.03 P
1.07 (1 lists) 482.31 266.03 P
(them. Part of this table is adapted from the) 147 253.73 T
2 F
(shelltool) 319.76 253.73 T
1 F
( manual page.) 354.21 253.73 T
3 9 Q
(Table) 210 232.4 T
(E-) 236.01 232.4 T
(1. Cmdtool/shelltool escape sequences) 245.01 232.4 T
(Sequence) 180 209.4 T
(Function) 288 209.4 T
1 10 Q
-0.25 (BEL \050Ctrl-G\051) 180 187.73 S
-0.25 (Make beeping sound) 288 187.73 S
-0.25 (BS \050Ctrl-H\051) 180 167.73 S
-0.25 (Erase char to left of cursor) 288 167.73 S
-0.25 (TAB \050Ctrl-I\051) 180 147.73 S
-0.25 (Horizontal tab) 288 147.73 S
-0.25 (LF \050Ctrl-J\051) 180 127.73 S
-0.25 (Newline; UNIX maps to \322Return\323) 288 127.73 S
-0.25 (CR \050Ctrl-M; Return\051) 180 107.73 S
-0.25 (Normal end-of-line character.) 288 107.73 S
282 224.4 282 100.15 2 L
V
0.5 H
0 Z
N
174 223.4 444 223.4 2 L
V
2 H
N
174 200.4 444 200.4 2 L
V
N
174 180.4 444 180.4 2 L
V
0.5 H
N
174 160.4 444 160.4 2 L
V
N
174 140.4 444 140.4 2 L
V
N
174 120.4 444 120.4 2 L
V
N
174 100.4 444 100.4 2 L
V
N
FMENDPAGE
%%EndPage: "423" 1
%%Page: "424" 2
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
105 699.46 501 708 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
105 699.46 501 708 R
7 X
0 0 0 1 0 0 0 K
V
45 63 567 729 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
0.45 (424) 109 693.79 S
0 8.5 Q
0.43 (PHIGS PROGRAMMING MANUAL) 141 693.79 S
105 684 501 708 R
0.5 H
0 Z
N
525 81 549 669 R
7 X
V
0 1 1 0 1 0 0 K
45 631 90 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
33 631 90 655 R
0 X
0 1 1 0 1 0 0 K
V
33 631 90 655 R
V
45 646.46 90 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
33 646.46 90 655 R
0 X
0 1 1 0 1 0 0 K
V
45 631 90 655 C
0 0 0 0 1 1 1 K
0 1 1 0 1 0 0 K
0 0 0 0 1 1 1 K
0 10 Q
7 X
(E) 75.53 639.79 T
0 1 1 0 1 0 0 K
45 63 567 729 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
-0.25 (ESC [ 1 t) 174 606.33 S
-0.25 (open \050de-iconify\051) 282 606.33 S
-0.25 (ESC [ 2 t) 174 586.33 S
-0.25 (close \050iconify\051) 282 586.33 S
-0.25 (ESC [ 3 t) 174 566.33 S
-0.25 (move, with interactive feedback) 282 566.33 S
-0.25 (ESC [ 3 ; TOP ; LEFT t) 174 546.33 S
-0.25 (move window to TOP LEFT \050pixel) 282 546.33 S
-0.25 (coordi- nates\051) 282 534.03 S
-0.25 (ESC [ 4 t) 174 514.03 S
-0.25 (stretch, with interactive feed- back) 282 514.03 S
-0.25 (ESC [ 4 ; HT ; WIDTH t) 174 494.03 S
-0.25 (resize window, to HT WIDTH size \050in) 282 494.03 S
-0.25 (pixels\051) 282 481.73 S
-0.25 (ESC [ 5 t) 174 461.73 S
-0.25 (move window to front of window stack) 282 461.73 S
-0.25 (ESC [ 6 t) 174 441.73 S
-0.25 (move window to back of screen) 282 441.73 S
-0.25 (ESC [ 7 t) 174 421.73 S
-0.25 (refresh) 282 421.73 S
-0.25 (ESC [ 8 ; ROWS ;) 174 401.73 S
-0.25 (COLS t) 174 389.43 S
-0.25 (resize window, to ROWS COLS size) 282 401.73 S
-0.25 (\050in characters\051) 282 389.43 S
-0.25 (ESC [ 11 t) 174 369.43 S
-0.25 (report if window is open or iconic by) 282 369.43 S
-0.25 (sending ESC [ 1 t or ESC [ 2 t) 282 357.13 S
-0.25 (ESC [ 13 t) 174 337.13 S
-0.25 ( report position by sending ESC [ 3 ;) 282 337.13 S
-0.25 (TOP ; LEFT t) 282 324.83 S
-0.25 (ESC [ 14 t) 174 304.83 S
-0.25 (report size in pixels by sending ESC [) 282 304.83 S
-0.25 (4 ; HT ; WIDTH t) 282 292.53 S
-0.25 (ESC [ 18 t) 174 272.53 S
-0.25 ( report size in characters by sending) 282 272.53 S
-0.25 (ESC [ 8 ; ROWS ; COLS t) 282 260.23 S
-0.25 (ESC [ 20 t) 174 240.23 S
-0.25 ( report icon label by sending ESC ] L) 282 240.23 S
-0.25 (label ESC \134) 282 227.93 S
-0.25 (ESC [ 21 t) 174 207.93 S
-0.25 (report tool header by sending ESC ] l) 282 207.93 S
-0.25 (label ESC \134) 282 195.63 S
-0.25 (ESC ] l text ESC \134) 174 175.63 S
-0.25 (set tool header to text) 282 175.63 S
-0.25 (ESC ] I file ESC \134) 174 155.63 S
-0.25 (set icon to the icon contained in file;) 282 155.63 S
-0.25 (file must be in iconedit output format) 282 143.33 S
-0.25 (ESC ] L label ESC \134) 174 123.33 S
-0.25 (set icon label to label) 282 123.33 S
3 9 Q
(Table) 204 651 T
(E-) 230.01 651 T
(1. Cmdtool/shelltool escape sequences) 239.01 651 T
(Sequence) 174 628 T
(Function) 282 628 T
276 643 276 115.75 2 L
V
0.5 H
0 Z
N
168 642 438 642 2 L
V
2 H
N
168 619 438 619 2 L
V
N
168 599 438 599 2 L
V
0.5 H
N
168 579 438 579 2 L
V
N
168 559 438 559 2 L
V
N
168 526.7 438 526.7 2 L
V
N
168 506.7 438 506.7 2 L
V
N
168 474.4 438 474.4 2 L
V
N
168 454.4 438 454.4 2 L
V
N
168 434.4 438 434.4 2 L
V
N
168 414.4 438 414.4 2 L
V
N
168 382.1 438 382.1 2 L
V
N
168 349.8 438 349.8 2 L
V
N
168 317.5 438 317.5 2 L
V
N
168 285.2 438 285.2 2 L
V
N
168 252.9 438 252.9 2 L
V
N
168 220.6 438 220.6 2 L
V
N
168 188.3 438 188.3 2 L
V
N
168 168.3 438 168.3 2 L
V
N
168 136 438 136 2 L
V
N
168 116 438 116 2 L
V
N
FMENDPAGE
%%EndPage: "424" 2
%%Page: "425" 3
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
111 699.46 507 708 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
111 699.46 507 708 R
7 X
0 0 0 1 0 0 0 K
V
45 63 567 729 C
0 8.5 Q
0 X
0 0 0 1 0 0 0 K
0.43 (APPENDIX E: XTERM CONTROL SEQUENCES) 297.15 693.79 S
0 9 Q
0.45 (425) 487.34 693.79 S
111 684 507 708 R
0.5 H
0 Z
N
69 81 93 669 R
7 X
V
0 1 1 0 1 0 0 K
525 631 567 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
525 631 582 655 R
0 X
0 1 1 0 1 0 0 K
V
525 631 579 655 R
V
525 646.46 567 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
525 646.46 579 655 R
0 X
0 1 1 0 1 0 0 K
V
525 631 567 655 C
0 0 0 0 1 1 1 K
0 10 Q
7 X
(E) 531 639.79 T
0 1 1 0 1 0 0 K
45 63 567 729 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 20 Q
0 X
0 1 1 0 1 0 0 K
(E.2  xterm Control Sequences) 111 495.47 T
0 0 0 1 0 0 0 K
1 10 Q
0 0 0 1 0 0 0 K
-0.37 (Since) 147 476.13 P
2 F
-0.37 (xterm) 171.35 476.13 P
1 F
-0.37 ( has to retain compatiibility with not one but two different terminal types, it has) 194.12 476.13 P
(a vast array of escape sequences. This appendix purports to contain a complete list.) 147 463.83 T
-0.11 (This appendix is based on two sources: the \322Xterm Control Sequences\323 document, written) 147 445.53 P
0.1 (by Edward Moy, University of California, Berkeley, for the X10) 147 433.23 P
2 F
0.1 (xterm) 408.83 433.23 P
1 F
0.1 ( ; and X11 updates) 431.6 433.23 P
4.55 (provided to the X Consortium by Skip Montanaro, GE Corporate Research &) 147 420.93 P
(Development.) 147 408.63 T
0 1 1 0 1 0 0 K
0 13.3 Q
0 1 1 0 1 0 0 K
(E.2.1  De\336nitions) 147 388.13 T
0 0 0 1 0 0 0 K
1 10 Q
0 0 0 1 0 0 0 K
0.61 (Most of these control sequences are standard VT102 control sequences. There are, how-) 147 371.03 P
-0.23 (ever, additional ones to provide control of) 147 358.73 P
2 F
-0.23 (xterm) 315.92 358.73 P
1 F
-0.23 ( -dependent functions, like the scrollbar or) 338.69 358.73 P
(window size.) 147 346.43 T
(C) 147 328.13 T
(A single \050required\051 character.) 183 328.13 T
(Ps) 147 310.63 T
(A single \050usually optional\051 numeric parameter, composed of one of more digits.) 183 310.63 T
(Pm) 147 293.13 T
-0.36 (A multiple numeric parameter composed of any number of single numeric param-) 183 293.13 P
(eters, separated by ; character\050s\051.) 183 281.63 T
(Pt) 147 264.13 T
(A text parameter composed of printable characters.) 183 264.13 T
0 1 1 0 1 0 0 K
0 13.3 Q
0 1 1 0 1 0 0 K
(E.2.2  VT102 Mode) 147 244.43 T
0 0 0 1 0 0 0 K
1 10 Q
0 0 0 1 0 0 0 K
0.61 (Most of these control sequences are standard VT102 control sequences. There are, how-) 147 227.33 P
-0.09 (ever, additional ones to provide control of xterm-dependent functions, like the scrollbar or) 147 215.03 P
(window size.) 147 202.73 T
(BEL Bell \050Ctrl-G\051) 147 184.43 T
(BS Backspace \050Ctrl-H\051) 147 166.13 T
(TAB Horizontal Tab \050Ctrl-I\051) 147 147.83 T
(LF Line Feed or New Line \050Ctrl-J\051) 147 129.53 T
(VT Vertical Tab \050Ctrl-K\051) 147 111.23 T
-0.25 (ESC [ > OPT ; ... h) 180 606.33 S
-0.25 (turn SB OPT on \050OPT = 1 => page-) 288 606.33 S
-0.25 (mode\051, for example, ESC [ > 1 ; 3 ; 4h) 288 594.03 S
-0.25 (ESC [ > OPT ; ... k) 180 574.03 S
-0.25 (report option OPT; sends ESC [ >) 288 574.03 S
-0.25 (OPT l or ESC [ > OPT h for each OPT) 288 561.73 S
-0.25 (ESC [ > OPT ;... l) 180 541.73 S
-0.25 ( turn option OPT off \050OPT = 1 =>) 288 541.73 S
-0.25 (pagemode\051, for ESC [ > 1 ; 3 ;) 288 529.43 S
3 9 Q
(Table) 210 651 T
(E-) 236.01 651 T
(1. Cmdtool/shelltool escape sequences) 245.01 651 T
(Sequence) 180 628 T
(Function) 288 628 T
282 643 282 521.85 2 L
V
0.5 H
0 Z
N
174 642 444 642 2 L
V
2 H
N
174 619 444 619 2 L
V
N
174 586.7 444 586.7 2 L
V
0.5 H
N
174 554.4 444 554.4 2 L
V
N
174 522.1 444 522.1 2 L
V
N
FMENDPAGE
%%EndPage: "425" 3
%%Page: "426" 4
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
105 699.46 501 708 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
105 699.46 501 708 R
7 X
0 0 0 1 0 0 0 K
V
45 63 567 729 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
0.45 (426) 109 693.79 S
0 8.5 Q
0.43 (PHIGS PROGRAMMING MANUAL) 141 693.79 S
105 684 501 708 R
0.5 H
0 Z
N
525 81 549 669 R
7 X
V
0 1 1 0 1 0 0 K
45 631 90 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
33 631 90 655 R
0 X
0 1 1 0 1 0 0 K
V
33 631 90 655 R
V
45 646.46 90 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
33 646.46 90 655 R
0 X
0 1 1 0 1 0 0 K
V
45 631 90 655 C
0 0 0 0 1 1 1 K
0 1 1 0 1 0 0 K
0 0 0 0 1 1 1 K
0 10 Q
7 X
(E) 75.53 639.79 T
0 1 1 0 1 0 0 K
45 63 567 729 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(FF Form Feed or New Page \050Ctrl-L\051) 141 650.33 T
(CR Carriage Return \050Ctrl-M\051) 141 632.03 T
(SO Shift Out \050Ctrl-N\051 -> Switch to Alternate Character Set) 141 613.73 T
(SI Shift In \050Ctrl-O\051 -> Switch to Standard Character Set) 141 595.43 T
(ESC BEL Same as non-escaped BEL) 141 577.13 T
(ESC BS Same as non-escaped BS) 141 558.83 T
(ESC HT Same as non-escaped HT) 141 540.53 T
(ESC NL Same as non-escaped NL) 141 522.23 T
(ESC VT Same as non-escaped VT) 141 503.93 T
(ESC NP Same as non-escaped NP) 141 485.63 T
(ESC CR Same as non-escaped CR) 141 467.33 T
(ESC SO Same as non-escaped SO) 141 449.03 T
(ESC SI Same as non-escaped SI) 141 430.73 T
(ESC #BEL Same as non-escaped BEL) 141 412.43 T
(ESC #BS Same as non-escaped BS) 141 394.13 T
(ESC #HT Same as non-escaped HT) 141 375.83 T
(ESC #NL Same as non-escaped NL) 141 357.53 T
(ESC #VT Same as non-escaped VT) 141 339.23 T
(ESC #NP Same as non-escaped NP) 141 320.93 T
(ESC #CR Same as non-escaped CR) 141 302.63 T
(ESC #SO Same as non-escaped SO) 141 284.33 T
(ESC #SI Same as non-escaped SI) 141 266.03 T
(ESC #8 DEC Screen Alignment Test \050DECALN\051) 141 247.73 T
(ESC \050BEL Same as non-escaped BEL) 141 229.43 T
(ESC \050BS Same as non-escaped BS) 141 211.13 T
(ESC \050HT Same as non-escaped HT) 141 192.83 T
(ESC \050NL Same as non-escaped NL) 141 174.53 T
(ESC \050VT Same as non-escaped VT) 141 156.23 T
(ESC \050NP Same as non-escaped NP) 141 137.93 T
(ESC \050CR Same as non-escaped CR) 141 119.63 T
(ESC \050SO Same as non-escaped SO) 141 101.33 T
FMENDPAGE
%%EndPage: "426" 4
%%Page: "427" 5
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
111 699.46 507 708 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
111 699.46 507 708 R
7 X
0 0 0 1 0 0 0 K
V
45 63 567 729 C
0 8.5 Q
0 X
0 0 0 1 0 0 0 K
0.43 (APPENDIX E: XTERM CONTROL SEQUENCES) 297.15 693.79 S
0 9 Q
0.45 (427) 487.34 693.79 S
111 684 507 708 R
0.5 H
0 Z
N
69 81 93 669 R
7 X
V
0 1 1 0 1 0 0 K
525 631 567 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
525 631 582 655 R
0 X
0 1 1 0 1 0 0 K
V
525 631 579 655 R
V
525 646.46 567 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
525 646.46 579 655 R
0 X
0 1 1 0 1 0 0 K
V
525 631 567 655 C
0 0 0 0 1 1 1 K
0 10 Q
7 X
(E) 531 639.79 T
0 1 1 0 1 0 0 K
45 63 567 729 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(ESC \050SI Same as non-escaped SI) 147 650.33 T
(ESC \050C Select G0 Character Set \050SCS\051) 147 632.03 T
( C = 0 -> Special Character and Line Drawing Set) 147 613.73 T
( C = 1 -> Alternate Character ROM Standard Set) 147 595.43 T
( C = 2 -> Alternate Character ROM Special Set) 147 577.13 T
( C = A -> United Kingdom \050UK\051) 147 558.83 T
( C = B -> United States \050USASCII\051) 147 540.53 T
(ESC \051C Select G1 Character Set \050SCS\051) 147 522.23 T
( C = 0 -> Special Character and Line Drawing Set) 147 503.93 T
( C = 1 -> Alternate Character ROM Standard Set) 147 485.63 T
( C = 2 -> Alternate Character ROM Special Set) 147 467.33 T
( C = A -> United Kingdom \050UK\051) 147 449.03 T
( C = B -> United States \050USASCII\051) 147 430.73 T
(ESC *C Select G2 Character Set \050SCS\051) 147 412.43 T
( C = 0 -> Special Character and Line Drawing Set) 147 394.13 T
( C = 1 -> Alternate Character ROM Standard Set) 147 375.83 T
( C = 2 -> Alternate Character ROM Special Set) 147 357.53 T
( C = A -> United Kingdom \050UK\051) 147 339.23 T
( C = B -> United States \050USASCII\051) 147 320.93 T
(ESC +C Select G3 Character Set \050SCS\051) 147 302.63 T
( C = 0 -> Special Character and Line Drawing Set) 147 284.33 T
( C = 1 -> Alternate Character ROM Standard Set) 147 266.03 T
( C = 2 -> Alternate Character ROM Special Set) 147 247.73 T
( C = A -> United Kingdom \050UK\051) 147 229.43 T
( C = B -> United States \050USASCII\051) 147 211.13 T
(ESC 7 Save Cursor \050DECSC\051) 147 192.83 T
(ESC 8 Restore Cursor \050DECRC\051) 147 174.53 T
(ESC = Application Keypad \050DECPAM\051) 147 156.23 T
(ESC > Normal Keypad \050DECPNM\051) 147 137.93 T
(ESC D Index \050IND\051) 147 119.63 T
(ESC E Next Line \050NEL\051) 147 101.33 T
FMENDPAGE
%%EndPage: "427" 5
%%Page: "428" 6
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
105 699.46 501 708 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
105 699.46 501 708 R
7 X
0 0 0 1 0 0 0 K
V
45 63 567 729 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
0.45 (428) 109 693.79 S
0 8.5 Q
0.43 (PHIGS PROGRAMMING MANUAL) 141 693.79 S
105 684 501 708 R
0.5 H
0 Z
N
525 81 549 669 R
7 X
V
0 1 1 0 1 0 0 K
45 631 90 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
33 631 90 655 R
0 X
0 1 1 0 1 0 0 K
V
33 631 90 655 R
V
45 646.46 90 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
33 646.46 90 655 R
0 X
0 1 1 0 1 0 0 K
V
45 631 90 655 C
0 0 0 0 1 1 1 K
0 1 1 0 1 0 0 K
0 0 0 0 1 1 1 K
0 10 Q
7 X
(E) 75.53 639.79 T
0 1 1 0 1 0 0 K
45 63 567 729 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(ESC H Tab Set \050HTS\051) 141 650.33 T
(ESC M Reverse Index \050RI\051) 141 632.03 T
(ESC N Single Shift Select of G2 Character Set \050SS2\051) 141 613.73 T
(ESC O Single Shift Select of G3 Character Set \050SS3\051) 141 595.43 T
(ESC Return Terminal ID \050DECID\051) 141 577.13 T
(ESC [BEL Same as non-escaped BEL) 141 558.83 T
(ESC [BS Same as non-escaped BS) 141 540.53 T
(ESC [HT Same as non-escaped HT) 141 522.23 T
(ESC [NL Same as non-escaped NL) 141 503.93 T
(ESC [VT Same as non-escaped VT) 141 485.63 T
(ESC [NP Same as non-escaped NP) 141 467.33 T
(ESC [CR Same as non-escaped CR) 141 449.03 T
(ESC [SO Same as non-escaped SO) 141 430.73 T
(ESC[SI Same as non-escaped SI) 141 412.43 T
(ESC [?BEL Same as non-escaped BEL) 141 394.13 T
(ESC [?BS Same as non-escaped BS) 141 375.83 T
(ESC [?HT Same as non-escaped HT) 141 357.53 T
(ESC [?NL Same as non-escaped NL) 141 339.23 T
(ESC [?VT Same as non-escaped VT) 141 320.93 T
(ESC [?NP Same as non-escaped NP) 141 302.63 T
(ESC [?CR Same as non-escaped CR) 141 284.33 T
(ESC [?SO Same as non-escaped SO) 141 266.03 T
(ESC [?SI Same as non-escaped SI) 141 247.73 T
(ESC [Ps@ Insert Ps \050Blank\051 Character\050s\051 \050default = 1\051 \050ICH\051) 141 229.43 T
(ESC [PsA Cursor Up Ps Times \050default = 1\051 \050CUU\051) 141 211.13 T
(ESC [PsB Cursor Down Ps Times \050default = 1\051 \050CUD\051) 141 192.83 T
(ESC [PsC Cursor Forward Ps Times \050default = 1\051 \050CUF\051) 141 174.53 T
(ESC [PsD Cursor Backward Ps Times \050default = 1\051 \050CUB\051) 141 156.23 T
(ESC [Ps;PsH Cursor Position [row;column] \050default = [1,1]\051 \050CUP\051) 141 137.93 T
(ESC [PsJ Erase in Display \050ED\051) 141 119.63 T
( Ps = 0 -> Clear Below \050default\051) 141 101.33 T
FMENDPAGE
%%EndPage: "428" 6
%%Page: "429" 7
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
111 699.46 507 708 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
111 699.46 507 708 R
7 X
0 0 0 1 0 0 0 K
V
45 63 567 729 C
0 8.5 Q
0 X
0 0 0 1 0 0 0 K
0.43 (APPENDIX E: XTERM CONTROL SEQUENCES) 297.15 693.79 S
0 9 Q
0.45 (429) 487.34 693.79 S
111 684 507 708 R
0.5 H
0 Z
N
69 81 93 669 R
7 X
V
0 1 1 0 1 0 0 K
525 631 567 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
525 631 582 655 R
0 X
0 1 1 0 1 0 0 K
V
525 631 579 655 R
V
525 646.46 567 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
525 646.46 579 655 R
0 X
0 1 1 0 1 0 0 K
V
525 631 567 655 C
0 0 0 0 1 1 1 K
0 10 Q
7 X
(E) 531 639.79 T
0 1 1 0 1 0 0 K
45 63 567 729 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
( Ps = 1 -> Clear Above) 147 650.33 T
( Ps = 2 -> Clear All) 147 632.03 T
(ESC [PsK Erase in Line \050EL\051) 147 613.73 T
( Ps = 0 -> Clear to Right \050default\051) 147 595.43 T
( Ps = 1 -> Clear to Left) 147 577.13 T
( Ps = 2 -> Clear All) 147 558.83 T
(ESC [PsL Insert Ps Line\050s\051 \050default = 1\051 \050IL\051) 147 540.53 T
(ESC [PsM Delete Ps Line\050s\051 \050default = 1\051 \050DL\051) 147 522.23 T
(ESC [PsP Delete Ps Character\050s\051 \050default = 1\051 \050DCH\051) 147 503.93 T
(ESC [T Track mouse) 147 485.63 T
(ESC [Psc Device Attributes \050DA1\051) 147 467.33 T
(ESC [Ps;Psf Cursor Position [row;column] \050default = [1,1]\051 \050HVP\051) 147 449.03 T
(ESC [Psg Tab Clear) 147 430.73 T
( Ps = 0 -> Clear Current Column \050default\051) 147 412.43 T
( Ps = 3 -> Clear All) 147 394.13 T
(ESC[Psh Mode Set \050SET\051) 147 375.83 T
( Ps = 4 -> Insert Mode \050IRM\051) 147 357.53 T
( Ps = 20 -> Automatic Linefeed \050LNM\051) 147 339.23 T
(ESC [Psl Mode Reset \050RST\051) 147 320.93 T
( Ps = 4 -> Insert Mode \050IRM\051) 147 302.63 T
( Ps = 20 -> Automatic Linefeed \050LNM\051) 147 284.33 T
(ESC [Pmm Character Attributes \050SGR\051) 147 266.03 T
( Pm = 0 -> Normal \050default\051) 147 247.73 T
( Pm = 1 -> Blink \050appears as Bold\051) 147 229.43 T
( Pm = 4 -> Underscore) 147 211.13 T
( Pm = 5 -> Bold) 147 192.83 T
( Pm = 7 -> Inverse) 147 174.53 T
(ESC [Psn Device Status Report \050DSR\051) 147 156.23 T
( Ps = 5 -> Status Report ESC[0n -> OK) 147 137.93 T
( Ps = 6 -> Report Cursor Position \050CPR\051 [row;column] as ESC[r;cR) 147 119.63 T
FMENDPAGE
%%EndPage: "429" 7
%%Page: "430" 8
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
105 699.46 501 708 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
105 699.46 501 708 R
7 X
0 0 0 1 0 0 0 K
V
45 63 567 729 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
0.45 (430) 109 693.79 S
0 8.5 Q
0.43 (PHIGS PROGRAMMING MANUAL) 141 693.79 S
105 684 501 708 R
0.5 H
0 Z
N
525 81 549 669 R
7 X
V
0 1 1 0 1 0 0 K
45 631 90 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
33 631 90 655 R
0 X
0 1 1 0 1 0 0 K
V
33 631 90 655 R
V
45 646.46 90 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
33 646.46 90 655 R
0 X
0 1 1 0 1 0 0 K
V
45 631 90 655 C
0 0 0 0 1 1 1 K
0 1 1 0 1 0 0 K
0 0 0 0 1 1 1 K
0 10 Q
7 X
(E) 75.53 639.79 T
0 1 1 0 1 0 0 K
45 63 567 729 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
4.26 (ESC [Ps;Psr Set Scrolling Region [top;bottom] \050default = full size of window\051) 141 650.33 P
(\050DECSTBM\051) 141 638.03 T
(ESC [Psx Request Terminal Parameters \050DECREQTPARM\051) 141 619.73 T
(ESC [Ps ND string NP) 141 601.43 T
(OSC Mode) 141 583.13 T
( ND can be any non-digit Character \050it\325s discarded\051) 141 564.83 T
( NP can be any non-printing Character \050it\325s discarded\051) 141 546.53 T
( string can be any ASCII printable string \050max 511 characters\051) 141 528.23 T
( Ps = 0 -> use string as a new icon name and title) 141 509.93 T
( Ps = 1 -> use string as a new icon name only) 141 491.63 T
( Ps = 2 -> use string as a new title only) 141 473.33 T
( Ps = 46 -> use string as a new log file name) 141 455.03 T
(ESC [?Psh DEC Private Mode Set \050DECSET\051) 141 436.73 T
( Ps = 1 -> Application Cursor Keys \050DECCKM\051) 141 418.43 T
( Ps = 2 -> Set VT52 Mode) 141 400.13 T
( Ps = 3 -> 132 Column Mode \050DECCOLM\051) 141 381.83 T
( Ps = 4 -> Smooth \050Slow\051 Scroll \050DECSCLM\051) 141 363.53 T
( Ps = 5 -> Reverse Video \050DECSCNM\051) 141 345.23 T
( Ps = 6 -> Origin Mode \050DECOM\051) 141 326.93 T
( Ps = 7 -> Wraparound Mode \050DECAWM\051) 141 308.63 T
( Ps = 8 -> Auto-repeat Keys \050DECARM\051) 141 290.33 T
( Ps = 9 -> Send MIT Mouse Row & Column on Button Press) 141 272.03 T
( Ps = 38 -> Enter TekTronix Mode \050DECTEK\051) 141 253.73 T
( Ps = 40 -> Allow 80 <--> 132 Mode) 141 235.43 T
( Ps = 41 -> curses\0505\051 fix) 141 217.13 T
( Ps = 44 -> Turn On Margin Bell) 141 198.83 T
( Ps = 45 -> Reverse-wraparound Mode) 141 180.53 T
( Ps = 46 -> Start Logging) 141 162.23 T
( Ps = 47 -> Use Alternate Screen Buffer) 141 143.93 T
( Ps = 1000 -> send VT200 Mouse Row & Column on Button Press) 141 125.63 T
( Ps = 1003 -> send VT200 Hilite Mouse Row & Column on Button Press) 141 107.33 T
FMENDPAGE
%%EndPage: "430" 8
%%Page: "431" 9
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
111 699.46 507 708 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
111 699.46 507 708 R
7 X
0 0 0 1 0 0 0 K
V
45 63 567 729 C
0 8.5 Q
0 X
0 0 0 1 0 0 0 K
0.43 (APPENDIX E: XTERM CONTROL SEQUENCES) 297.15 693.79 S
0 9 Q
0.45 (431) 487.34 693.79 S
111 684 507 708 R
0.5 H
0 Z
N
69 81 93 669 R
7 X
V
0 1 1 0 1 0 0 K
525 631 567 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
525 631 582 655 R
0 X
0 1 1 0 1 0 0 K
V
525 631 579 655 R
V
525 646.46 567 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
525 646.46 579 655 R
0 X
0 1 1 0 1 0 0 K
V
525 631 567 655 C
0 0 0 0 1 1 1 K
0 10 Q
7 X
(E) 531 639.79 T
0 1 1 0 1 0 0 K
45 63 567 729 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(ESC [?Psl DEC Private Mode Reset \050DECRST\051) 147 650.33 T
( Ps = 1 -> Normal Cursor Keys \050DECCKM\051) 147 632.03 T
( Ps = 3 -> 80 Column Mode \050DECCOLM\051) 147 613.73 T
( Ps = 4 -> Jump \050Fast\051 Scroll \050DECSCLM\051) 147 595.43 T
( Ps = 5 -> Normal Video \050DECSCNM\051) 147 577.13 T
( Ps = 6 -> Normal Cursor Mode \050DECOM\051) 147 558.83 T
( Ps = 7 -> No Wraparound Mode \050DECAWM\051) 147 540.53 T
( Ps = 8 -> No Auto-repeat Keys \050DECARM\051) 147 522.23 T
( Ps = 9 -> Don\325t Send MIT Mouse Row & Column on Button Press) 147 503.93 T
( Ps = 40 -> Disallow 80 <--> 132 Mode) 147 485.63 T
( Ps = 41 -> No curses\0505\051 fix) 147 467.33 T
( Ps = 44 -> Turn Off Margin Bell) 147 449.03 T
( Ps = 45 -> No Reverse-wraparound Mode) 147 430.73 T
( Ps = 46 -> Stop Logging) 147 412.43 T
( Ps = 47 -> Use Normal Screen Buffer) 147 394.13 T
( Ps = 1000 -> Don\325t send Mouse Row & Column on Button Press) 147 375.83 T
( Ps = 1003 -> Don\325t send Hilite Mouse Row & Column on Button Press) 147 357.53 T
(ESC [?Psr Restore DEC Private Mode) 147 339.23 T
( Ps = 1 -> Normal/Application Cursor Keys \050DECCKM\051) 147 320.93 T
( Ps = 3 -> 80/132 Column Mode \050DECCOLM\051) 147 302.63 T
( Ps = 4 -> Jump \050Fast\051/Smooth \050Slow\051 Scroll \050DECSCLM\051) 147 284.33 T
( Ps = 5 -> Normal/Reverse Video \050DECSCNM\051) 147 266.03 T
( Ps = 6 -> Normal/Origin Cursor Mode \050DECOM\051) 147 247.73 T
( Ps = 7 -> No Wraparound/Wraparound Mode \050DECAWM\051) 147 229.43 T
( Ps = 8 -> Auto-repeat/No Auto-repeat Keys \050DECARM\051) 147 211.13 T
( Ps = 9 -> Don\325t Send/Send MIT Mouse Row & Column on Button Press) 147 192.83 T
( Ps = 40 -> Disallow/Allow 80 <--> 132 Mode) 147 174.53 T
( Ps = 41 -> Off/On curses\0505\051 fix) 147 156.23 T
( Ps = 44 -> Turn Off/On Margin Bell) 147 137.93 T
( Ps = 45 -> No Reverse-wraparound/Reverse- wraparound Mode) 147 119.63 T
( Ps = 46 -> Stop/Start Logging) 147 101.33 T
FMENDPAGE
%%EndPage: "431" 9
%%Page: "432" 10
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
105 699.46 501 708 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
105 699.46 501 708 R
7 X
0 0 0 1 0 0 0 K
V
45 63 567 729 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
0.45 (432) 109 693.79 S
0 8.5 Q
0.43 (PHIGS PROGRAMMING MANUAL) 141 693.79 S
105 684 501 708 R
0.5 H
0 Z
N
525 81 549 669 R
7 X
V
0 1 1 0 1 0 0 K
45 631 90 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
33 631 90 655 R
0 X
0 1 1 0 1 0 0 K
V
33 631 90 655 R
V
45 646.46 90 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
33 646.46 90 655 R
0 X
0 1 1 0 1 0 0 K
V
45 631 90 655 C
0 0 0 0 1 1 1 K
0 1 1 0 1 0 0 K
0 0 0 0 1 1 1 K
0 10 Q
7 X
(E) 75.53 639.79 T
0 1 1 0 1 0 0 K
45 63 567 729 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
( Ps = 47 -> Use Normal/Alternate Screen Buffer) 141 650.33 T
( Ps = 1000 -> Don\325t send/send VT200 Mouse Row &Column onButton Press) 141 632.03 T
( Ps = 1003 -> Don\325t send/send VT200 HiliteMouse Row & Column on Button Press) 141 613.73 T
(ESC [?Pss Save DEC Private Mode) 141 595.43 T
( Ps = 1 -> Normal/Application Cursor Keys \050DECCKM\051) 141 577.13 T
( Ps = 3 -> 80/132 Column Mode \050DECCOLM\051) 141 558.83 T
( Ps = 4 -> Jump \050Fast\051/Smooth \050Slow\051 Scroll \050DECSCLM\051) 141 540.53 T
( Ps = 5 -> Normal/Reverse Video \050DECSCNM\051) 141 522.23 T
( Ps = 6 -> Normal/Origin Cursor Mode \050DECOM\051) 141 503.93 T
( Ps = 7 -> No Wraparound/Wraparound Mode \050DECAWM\051) 141 485.63 T
( Ps = 8 -> Auto-repeat/No Auto-repeat Keys \050DECARM\051) 141 467.33 T
( Ps = 9 -> Don\325t Send/Send MIT Mouse Row & Column on Button Press) 141 449.03 T
( Ps = 40 -> Disallow/Allow 80 <--> 132 Mode) 141 430.73 T
( Ps = 41 -> Off/On curses\0505\051 fix) 141 412.43 T
( Ps = 44 -> Turn Off/On Margin Bell) 141 394.13 T
( Ps = 45 -> No Reverse-wraparound/Reverse-wraparound Mode) 141 375.83 T
( Ps = 46 -> Stop/Start Logging) 141 357.53 T
( Ps = 47 -> Use Normal/Alternate Screen Buffer) 141 339.23 T
( Ps = 1000 -> Don\325t send/send VT200 Mouse Row & Column on Button Press) 141 320.93 T
( Ps = 1003 -> Don\325t send/send VT200 Hilite Mouse Row & Column on Button Press) 141 302.63 T
(ESC ]Ps;PtBEL) 141 284.33 T
( Set Text Parameters) 141 266.03 T
( Ps = 0 -> Change Window Name and Title to Pt) 141 247.73 T
( Ps = 1 -> Change Window Name to Pt) 141 229.43 T
( Ps = 2 -> Change Window Title to Pt) 141 211.13 T
( Ps = 46 -> Change Log File to Pt) 141 192.83 T
( Ps = 50 -> Change Font to Pt) 141 174.53 T
(ESC c Full Reset \050RIS\051) 141 156.23 T
(ESC n Locking Shift Select of G2 Character Set \050LS2\051) 141 137.93 T
(ESC Locking Shift Select of G3 Character Set \050LS3\051) 141 119.63 T
FMENDPAGE
%%EndPage: "432" 10
%%Page: "433" 11
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
111 699.46 507 708 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
111 699.46 507 708 R
7 X
0 0 0 1 0 0 0 K
V
45 63 567 729 C
0 8.5 Q
0 X
0 0 0 1 0 0 0 K
0.43 (APPENDIX E: XTERM CONTROL SEQUENCES) 297.15 693.79 S
0 9 Q
0.45 (433) 487.34 693.79 S
111 684 507 708 R
0.5 H
0 Z
N
69 81 93 669 R
7 X
V
0 1 1 0 1 0 0 K
525 631 567 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
525 631 582 655 R
0 X
0 1 1 0 1 0 0 K
V
525 631 579 655 R
V
525 646.46 567 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
525 646.46 579 655 R
0 X
0 1 1 0 1 0 0 K
V
525 631 567 655 C
0 0 0 0 1 1 1 K
0 10 Q
7 X
(E) 531 639.79 T
0 1 1 0 1 0 0 K
45 63 567 729 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
0 13.3 Q
0 X
0 1 1 0 1 0 0 K
(E.2.3  T) 147 648.13 T
(ektronix 4014 Mode) 184.8 648.13 T
0 0 0 1 0 0 0 K
1 10 Q
0 0 0 1 0 0 0 K
0.73 (Most of these sequences are standard Tektronix 4014 control sequences. The major fea-) 147 631.03 P
-0.42 (tures missing are the alternate \050APL\051 character set and the write-thru and defocused modes.) 147 618.73 P
(BEL Bell \050Ctrl-G\051) 147 600.43 T
(BS Backspace \050Ctrl-H\051) 147 582.13 T
(TAB Horizontal Tab \050Ctrl-I\051) 147 563.83 T
(LF Line Feed or New Line \050Ctrl-J\051) 147 545.53 T
(VT Vertical Tab \050Ctrl-K\051) 147 527.23 T
(FF Form Feed or New Page \050Ctrl-L\051) 147 508.93 T
(CR Carriage Return \050Ctrl-M\051) 147 490.63 T
(ESC ETX Switch to VT102 Mode) 147 472.33 T
(ESC ENQ Return Terminal Status) 147 454.03 T
(ESC LF PAGE \050Clear Screen\051) 147 435.73 T
(ESC ETB COPY \050Save Tektronix Codes to File\051) 147 417.43 T
(ESC CAN Bypass Condition) 147 399.13 T
(ESC SUB GIN mode) 147 380.83 T
(ESC FS Special Point Plot Mode) 147 362.53 T
(ESC GS Graph Mode \050same as GS\051) 147 344.23 T
(ESC RS Incremental Plot Mode \050same as RS\051) 147 325.93 T
(ESC US Alpha Mode \050same as US\051) 147 307.63 T
(ESC 8 Select Large Character Set) 147 289.33 T
(ESC 9 Select #2 Character Set) 147 271.03 T
(ESC : Select #3 Character Set) 147 252.73 T
(ESC ; Select Small Character Set) 147 234.43 T
(ESC ]Ps;PtBEL) 147 216.13 T
( Set Text Parameters) 147 197.83 T
( Ps = 0 -> Change Window Name and Title to Pt) 147 179.53 T
( Ps = 1 -> Change Icon Name to Pt) 147 161.23 T
( Ps = 2 -> Change Window Title to Pt) 147 142.93 T
( Ps = 46 -> Change Log File to Pt) 147 124.63 T
(ESC ` Normal Z Axis and Normal \050solid\051 Vectors) 147 106.33 T
FMENDPAGE
%%EndPage: "433" 11
%%Page: "434" 12
612 792 0 FMBEGINPAGE
[0 0 0 1 0 0 0]
[ 0 1 1 0 1 0 0]
[ 1 0 1 0 0 1 0]
[ 1 1 0 0 0 0 1]
[ 1 0 0 0 0 1 1]
[ 0 1 0 0 1 0 1]
[ 0 0 1 0 1 1 0]
 7 FrameSetSepColors
FrameNoSep
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
105 699.46 501 708 C
0 0 0 1 0 0 0 K
0 0 0 1 0 0 0 K
105 699.46 501 708 R
7 X
0 0 0 1 0 0 0 K
V
45 63 567 729 C
0 9 Q
0 X
0 0 0 1 0 0 0 K
0.45 (434) 109 693.79 S
0 8.5 Q
0.43 (PHIGS PROGRAMMING MANUAL) 141 693.79 S
105 684 501 708 R
0.5 H
0 Z
N
525 81 549 669 R
7 X
V
0 1 1 0 1 0 0 K
45 631 90 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
33 631 90 655 R
0 X
0 1 1 0 1 0 0 K
V
33 631 90 655 R
V
45 646.46 90 655 C
0 0 0 1 0 0 0 K
0 1 1 0 1 0 0 K
33 646.46 90 655 R
0 X
0 1 1 0 1 0 0 K
V
45 631 90 655 C
0 0 0 0 1 1 1 K
0 1 1 0 1 0 0 K
0 0 0 0 1 1 1 K
0 10 Q
7 X
(E) 75.53 639.79 T
0 1 1 0 1 0 0 K
45 63 567 729 C
0 0 0 1 0 0 0 K
1 10 Q
0 X
0 0 0 1 0 0 0 K
(ESC a Normal Z Axis and Dotted Line Vectors) 141 650.33 T
(ESC b Normal Z Axis and Dot-Dashed Vectors) 141 632.03 T
(ESC c Normal Z Axis and Short-Dashed Vectors) 141 613.73 T
(ESC d Normal Z Axis and Long-Dashed Vectors) 141 595.43 T
(ESC h Defocused Z Axis and Normal \050solid\051 Vectors) 141 577.13 T
(ESC i Defocused Z Axis and Dotted Line Vectors) 141 558.83 T
(ESC j Defocused Z Axis and Dot-Dashed Vectors) 141 540.53 T
(ESC k Defocused Z Axis and Short-Dashed Vectors) 141 522.23 T
(ESCl Defocused Z Axis and Long-Dashed Vectors) 141 503.93 T
(ESC p Write-Thru Mode and Normal \050solid\051 Vectors) 141 485.63 T
(ESC q Write-Thru Mode and Dotted Line Vectors) 141 467.33 T
(ESC r Write-Thru Mode and Dot-Dashed Vectors) 141 449.03 T
(ESC s Write-Thru Mode and Short-Dashed Vectors) 141 430.73 T
(ESC t Write-Thru Mode and Long-Dashed Vectors) 141 412.43 T
(FS Point Plot Mode) 141 394.13 T
(GS Graph Mode) 141 375.83 T
(RS Incremental Plot Mode) 141 357.53 T
(US Alpha Mode) 141 339.23 T
FMENDPAGE
%%EndPage: "434" 12
%%Trailer
%%BoundingBox: 0 0 612 792
%%PageOrder: Ascend
%%Pages: 12
%%DocumentFonts: Helvetica-Narrow-BoldOblique
%%+ Times-Roman
%%+ Times-Italic
%%+ Helvetica-Bold
%%EOF
