


olwm(1)                                                   olwm(1)


NNAAMMEE
       olwm - OPEN LOOK window manager for OpenWindows

SSYYNNOOPPSSIISS
       oollwwmm [ _o_p_t_i_o_n_s ]

DDEESSCCRRIIPPTTIIOONN
       OOllwwmm  is  a  window  manager  for the X Window System that
       implements parts of the OPEN LOOK  graphical  user  inter-
       face.   It  is the standard window manager for Sun's Open-
       Windows product, but it will work properly  with  any  X11
       system.   The  only requirements for running oollwwmm are that
       the server have the  OPEN  LOOK  glyph  and  cursor  fonts
       available.

OOPPTTIIOONNSS
       Most   command-line   options  have  counterparts  in  the
       resource database.  A command-line  option  will  override
       any setting from the resource database.

       --22dd    Use  two-dimensional look.  This is the default for
              monochrome systems.

       --33dd    Use three-dimensional look.  This  is  the  default
              for  color  systems.   This  option  is ignored for
              monochrome systems.

       --bbdd _c_o_l_o_r_,  --bboorrddeerrccoolloorr _c_o_l_o_r
              Specifies the border color.  See the description of
              the BBoorrddeerrCCoolloorr resource.

       --bbgg _c_o_l_o_r_,  --bbaacckkggrroouunndd _c_o_l_o_r
              Specifies  the  background color.  See the descrip-
              tion of the BBaacckkggrroouunndd resource.

       --cc,  --cclliicckk
              Use click-to-focus mode.  This is the default focus
              mode.

       --ddeepptthh _d_e_p_t_h
              Specifies  the depth of the visual in which oollwwmm is
              to run.  See the discussion in the Screen Resources
              section for further information about depths.

       --ddiissppllaayy _d_i_s_p_l_a_y_-_s_t_r_i_n_g
              Specify  the  name of the display to manage.  Over-
              rides the DISPLAY environment variable, if any.  In
              addition,  the display string is exported to oollwwmm's
              environment, so processes  forked  from  oollwwmm  will
              inherit this value.

       --ddssddmm  Specify  that  oollwwmm  should  provide  the Drop Site
              Database Management (DSDM) service.   This  is  the
              default.



                           25 Nov 1992                          1





olwm(1)                                                   olwm(1)


       --ff,  --ffoollllooww
              Use  focus-follows-mouse  mode.   Default  mode  is
              click-to-focus.

       --ffnn _f_o_n_t_-_n_a_m_e_,  --ffoonntt  _f_o_n_t_-_n_a_m_e
              Set the font for window titles.

       --ffgg _c_o_l_o_r_,  --ffoorreeggrroouunndd _c_o_l_o_r
              Specifies the foreground color.  See  the  descrip-
              tion of the FFoorreeggrroouunnddCCoolloorr resource.

       --mmuullttii Manage  windows  on all screens that a display sup-
              ports.  This is the default.

       --nnaammee _r_e_s_o_u_r_c_e_-_n_a_m_e
              Use _r_e_s_o_u_r_c_e_-_n_a_m_e  to  look  up  resources  in  the
              resource database.

       --nnooddssddmm
              Specify  that oollwwmm should not provide the Drop Site
              Database Management service.   The  default  is  to
              provide the service.

       --ssiinnggllee
              Manage  windows for a single screen only, using the
              default screen for the  specified  display.   Over-
              rides the --mmuullttii option.

       --ssyynnccppiidd _p_r_o_c_e_s_s_-_i_d
              When oollwwmm has completed its initialization, it will
              send a signal (SIGALRM by default)  to  _p_r_o_c_e_s_s_-_i_d_.
              The signal will be sent only if this option is pre-
              sent.  This is useful for running oollwwmm  from  shell
              scripts  (such  as ..xxiinniittrrcc) in such a way that the
              script waits for oollwwmm to finish its initialization,
              while  leaving oollwwmm as a child process of the shell
              script.  This can be done using the following sshh(1)
              construct:

                   sleep 15 & pid=$!
                   olwm -syncpid $pid &
                   wait $pid


       --ssyynnccssiiggnnaall _s_i_g_n_a_l
              Specifies  the  signal  to send instead of SIGALRM.
              The signal is specified as a number,  not  symboli-
              cally.

       --vviissuuaall _v_i_s_u_a_l_-_c_l_a_s_s
              Specifies  the class of the visual in which oollwwmm is
              to run.  See the discussion in the Screen Resources
              section for further information about visuals.




                           25 Nov 1992                          2





olwm(1)                                                   olwm(1)


       --xxrrmm _r_e_s_o_u_r_c_e_-_s_t_r_i_n_g
              Specify  resources  on the command-line.  Resources
              specified here will  override  resources  found  in
              resource files.

DDEEBBUUGGGGIINNGG OOPPTTIIOONNSS
       The  following  options  are strictly for debugging.  They
       are not recommended  for  general  use.   Don't  use  them
       unless you know what you are doing.

       --aallll   Print a message for every event received.

       --ddeebbuugg Equivalent to turning on all debugging options.

       --oorrpphhaannss
              Print  orphaned events.  Orphaned events are events
              that are associated with a window or frame that has
              no  entry  in  the frame hash table, or events that
              are not handled by the various event handlers.

       --ssyynncchhrroonniizzee
              Run the window manager in synchronous mode.

IINNTTEERRNNAATTIIOONNAALLIIZZAATTIIOONN OOPPTTIIOONNSS
       --bbaassiiccllooccaallee _l_o_c_a_l_e_-_n_a_m_e
              Specifies the basic OPEN LOOK locale category  set-
              ting.   This  category  will  be the base for other
              locale categories.

       --ddiissppllaayyllaanngg _l_o_c_a_l_e_-_n_a_m_e
              Specifies the display  language  OPEN  LOOK  locale
              category.   This  category  affects the contents of
              workspace menu, window menu and notice messages.

       --nnuummeerriicc _l_o_c_a_l_e_-_n_a_m_e
              Specifies the numeric format OPEN LOOK locale cate-
              gory.   This  category  affects  the numeric format
              displayed in any message that contains numerics.

LLOOCCAALLEE HHAANNDDLLIINNGG
       The _l_o_c_a_l_e is the set of language and cultural conventions
       used  by  a  program.   The  locale controls the language-
       dependent part of oollwwmm's behavior.  The OPEN LOOK interna-
       tional  extensions  have defined several locale categories
       as follows:

       BBaassiicc LLooccaallee
              This is the basic setting  for  the  entire  locale
              mechanism.   This category specifies internal char-
              acter handling behavior.

       DDiissppllaayy LLaanngguuaaggee
              This category specifies the language used for  dis-
              playing menus, notice messages, and error messages.



                           25 Nov 1992                          3





olwm(1)                                                   olwm(1)


       IInnppuutt LLaanngguuaaggee
              This category specifies the language used for  text
              input.   This  category  has  no  effect  on  oollwwmm,
              because it does not accept text input from the key-
              board.

       DDaattee FFoorrmmaatt
              This  category  specifies  the  format  of date and
              time.  This category has no effect on oollwwmm, because
              it  does not display any date and time information.

       NNuummeerriicc FFoorrmmaatt
              This category specifies  the  format  of  displayed
              numeric data.

       The Basic Locale setting determines the character set used
       by oollwwmm.  The other locale categories can differ from  the
       basic setting, but they cannot require a different charac-
       ter set from the Basic Locale.  The following restrictions
       thus apply:

       1. If  basic  locale  setting  is the "C" locale, then all
          other locale categories must be in the "C" locale.

       2. If the Basic Locale is set to a locale other  than  the
          "C"  locale,  then  all other locale categories must be
          set either to a locale that uses the same character set
          as the basic setting, or to the "C" locale.

       The  following methods are available to inform oollwwmm of the
       locale settings, listed in order of priority:

       1. Command line options (such as --bbaassiiccllooccaallee);

       2. by resource database; and

       3. sseettllooccaallee(3C) function defaults (e.g. LANG  environment
          variable).

IINNPPUUTT FFOOCCUUSS
       The   _i_n_p_u_t   _f_o_c_u_s   is  the  window  that  will  receive
       keystrokes.  oollwwmm has two  different  input  focus  modes,
       which  are  different ways of transferring the input focus
       from one window to another.  By default, oollwwmm uses "click-
       to-focus"  (also  known  as  "click-to-type")  mode.  This
       means that you must click on the window in  order  to  get
       the  focus to it.  While a window has the input focus, the
       pointer can be anywhere on the screen; the keyboard events
       will still go to that window.  You can set the input focus
       to a window and simultaneously raise  it  to  the  top  by
       clicking  the  left mouse button in the window's title bar
       or border.

       oollwwmm has another focus mode called  "focus-follows-mouse."



                           25 Nov 1992                          4





olwm(1)                                                   olwm(1)


       In  this  mode,  whatever  window the mouse is pointing to
       will receive the input focus.  To switch the  input  focus
       from one window to another, you simply move the pointer to
       the other window; you don't have to click at  all.   Note,
       however,  that to transfer the focus amongst subwindows of
       a single top-level window, you must click in  the  subwin-
       dow,  or  you  must  use  focus transfer function keys (if
       available from the application).

       The input focus mode can be controlled  with  command-line
       options  or  by entries in the resource database.  Neither
       focus mode has inherent advantages.  Which one you  choose
       is a matter of personal preference.

MMOOUUSSEE BBUUTTTTOONNSS
       OPEN  LOOK  defines  three mouse button functions: SELECT,
       ADJUST, and MENU.  On systems with  three  mouse  buttons,
       these  functions  are mapped to buttons 1, 2, and 3 (left,
       middle, and right)  respectively.   On  systems  with  two
       mouse buttons, SELECT is on button 1 (left) and MENU is on
       button 2 (right).  ADJUST can be performed by holding down
       the  Shift key while pressing button 1.  On systems with a
       single mouse button, that button is SELECT.  Holding Shift
       while  pressing  the button gives ADJUST, and holding Con-
       trol gives MENU.

       There is an alternate style of button  handling  for  two-
       button  mice:  SELECT is button 1, ADJUST is button 2, and
       MENU is performed by holding down buttons 1 and 2 simulta-
       neously.   This  technique  is referred to as mouse button
       _c_h_o_r_d_i_n_g_.  It can be activated on systems with  two-button
       mice by setting the MMoouusseeCChhoorrddMMeennuu resource to true.

MMAANNIIPPUULLAATTIINNGG WWIINNDDOOWWSS AANNDD IICCOONNSS
       _W_i_n_d_o_w _T_i_t_l_e _B_a_r _a_n_d _B_o_r_d_e_r_s_.

       Clicking  SELECT selects the window, raises it above other
       windows, and deselects any other objects.  In  click-focus
       mode,  the  focus  is  also  transferred  to  this window.
       Pressing and holding SELECT and then  dragging  the  mouse
       will  move  windows  without  raising  them or setting the
       focus.  If this window  is  selected,  it  and  all  other
       selected  windows  are  moved  simultaneously.  Otherwise,
       just this window is moved, and it is not selected.  If you
       hold  down  the Control key while you are moving a window,
       motion is constrained either vertically  or  horizontally,
       depending on which direction you move first.

       Double-clicking  SELECT  on  the  window  is  the  same as
       selecting the Full  Size  (or  Restore  Size)  menu  item.
       Clicking  ADJUST  will  toggle  the selected state of this
       window.  If other windows or icons are  already  selected,
       they remain selected.  ADJUST is useful for selecting sev-
       eral windows and icons.  Pressing MENU will bring  up  the



                           25 Nov 1992                          5





olwm(1)                                                   olwm(1)


       window  menu.   See  the  Window  Menu section for further
       details.  If the AAlltt key is held down,  the  mouse  button
       functions  become accessible anywhere over the window, not
       just over the title bar and borders.   The  modifier  used
       can be changed; see the description of the WWMMGGrraabb resource
       in the section on Modifier Customization.

       _R_e_s_i_z_e _C_o_r_n_e_r_s_.

       You can resize a window by  pressing  and  holding  SELECT
       over any of the resize corners and then dragging the mouse
       to the new location.  Releasing the mouse button will  set
       the  new size of the window.  If you hold down the Control
       key while you are dragging, the resize operation  is  con-
       strained  to  resize vertically or horizontally, depending
       on which direction you move first.

       _W_i_n_d_o_w _B_u_t_t_o_n_.

       The Window Button  is  the  small  box  with  a  downward-
       pointing  triangle  near  the  left  end of the title bar.
       Pressing MENU over the window button  will  bring  up  the
       Window  Menu.   Clicking SELECT over the left mouse button
       on the  Window  Button  will  execute  the  window  menu's
       default  action.   This will usually close the window into
       an icon.  You can change the window menu's default  action
       by  holding  down  the  Control key while manipulating the
       window menu.

       _P_u_s_h_p_i_n_.

       OPEN LOOK pop-up windows have a pushpin instead of a  win-
       dow  button.   The  pin  is  either in or out, and you can
       click SELECT on the pin to move it to the other state.  If
       the  pin is out, pressing a command button inside the win-
       dow will execute the command and then dismiss (take  down)
       the  window.   If the pin is in, the window is "pinned" to
       the workspace, and it will remain on the screen even after
       you  have  pressed  a  command button in the window.  This
       allows you to press several command buttons  in  the  same
       window.   Pulling the pin out (by clicking SELECT over it)
       will dismiss the window immediately.

       _I_c_o_n_s_.

       An icon represents a closed window.  You can still do most
       of the same operations as with an open window.  Moving and
       selecting icons with SELECT and ADJUST is exactly the same
       as for open windows.  A similar version of the Window Menu
       is available on an icon by pressing MENU.  Double-clicking
       SELECT will open the icon.  Icons cannot be resized.

NNOONN--RREECCTTAANNGGUULLAARR WWIINNDDOOWWSS
       The  X11  Non-Rectangular Window Shape Extension (commonly



                           25 Nov 1992                          6





olwm(1)                                                   olwm(1)


       referred to simply as the SHAPE extension) allows  windows
       to  have arbitrary shapes.  OOllwwmm will handle these windows
       by giving them no decoration whatsoever.   Shaped  windows
       can  be  manipulated  by using the WMGrab modifier (Alt by
       default) with the mouse buttons.  (See the section on Mod-
       ifier  Customization for further details.)  Shaped windows
       can be moved, resized, closed, opened, etc.  like ordinary
       windows.  The selection feedback for shaped windows is the
       presence of resize corners floating at the corners of  the
       bounding rectangle of the window's shape.

SSEELLEECCTTIIOONNSS OONN TTHHEE WWOORRKKSSPPAACCEE
       You  can  select a group of windows and icons by using the
       left or middle mouse buttons over the Workspace (the  area
       of  the  screen outside of all windows and icons, commonly
       known as the "root window").  Pressing  either  SELECT  or
       ADJUST  and  dragging  the mouse will define a rubber-band
       rectangle.  When you release the mouse button, the set  of
       windows and icons enclosed by this rectangle will be oper-
       ated on.  If you created the rectangle using  SELECT,  the
       windows  and  icons within will be selected, and all other
       objects will be  deselected.   If  you  used  ADJUST,  the
       objects within will have their selected state toggled, and
       any other windows and icons already selected  will  remain
       selected.

MMEENNUU OOPPEERRAATTIIOONN
       In general, pop-up menus are operated using the MENU mouse
       button.  There are two methods of operating with  an  OPEN
       LOOK  menu:  the "click-move-click" method and the "press-
       drag-release" method.  You choose  the  method  either  by
       clicking  the  MENU  button  (pressing  and  releasing  it
       quickly) or by pressing it down and holding  it.   If  you
       click  the MENU button, the menu will pop up and will stay
       up indefinitely.  To continue operating  the  menu,  click
       the  MENU  button  over a menu item.  To dismiss the menu,
       click the MENU button on an area of the screen outside the
       menu.   To operate menus in press-drag-release mode, press
       the MENU button and hold it down while you move the mouse.
       The  menu  will  remain  on the screen as long as you hold
       down the MENU button.  To  execute  an  action,  move  the
       pointer over a menu item and release the mouse button.  To
       dismiss the menu, move the pointer outside  the  menu  and
       release the MENU button.

       Some  menu  items have a sub-menu.  This is indicated by a
       right-pointing triangle at the right edge of the item.  To
       activate a submenu, click on the item (in click-move-click
       mode) or move the pointer to the item and then move toward
       the right edge of the menu (in press-drag-release mode).

       Some  menus  have  pushpins.   If a menu has a pushpin, it
       will initially be in the "out" state.  If you click on the
       pin (in click-move-click mode) or move over it and release



                           25 Nov 1992                          7





olwm(1)                                                   olwm(1)


       (in press-drag-release mode) you will pin the menu to  the
       workspace.   The  menu  will  remain on the screen indefi-
       nitely and you can execute commands from it by clicking on
       its  items.   To  remove  the  menu, move over the pin and
       click SELECT on it.

       The behavior of  menus  can  be  customized  using  oollwwmm's
       resources.   In  the  Global  Resources  section,  see the
       entries for  CClliicckkMMoovveeTThhrreesshhoolldd,  DDrraaggRRiigghhttDDiissttaannccee,  MMuull--
       ttiiCClliicckkTTiimmeeoouutt,  and SSeelleeccttDDiissppllaayyssMMeennuu for further infor-
       mation.

       Some menus may have "accelerators" defined for them.   See
       the section on Menu Accelerators for further details.

WWOORRKKSSPPAACCEE MMEENNUU
       Pressing  MENU  over the workspace brings up the Workspace
       Menu.  This menu is customizable, but  it  typically  con-
       tains at least the following items.  (The items may appear
       in a different language depending on  the  current  locale
       setting.)

       PPrrooggrraammss
              This  item has a sub-menu that allows you to invoke
              applications.  The default Programs  sub-menu  con-
              tains  all  of  the  programs  in  the  OpenWindows
              DeskSet.  However, users typically  customize  this
              menu  to  contain many more programs and to contain
              nested sub-menus.  See the  section  on  Menu  Cus-
              tomization for further information.

       UUttiilliittiieess
              This  item  has  a  sub-menu  that contains several
              utility  functions  for  the  workspace,  including
              Refresh (redisplay all windows on the screen), Lock
              Screen, and Save Workspace.

       PPrrooppeerrttiieess......
              This item brings up the Workspace  Properties  win-
              dow,  which  allows  you to view and customize set-
              tings of the OpenWindows environment.

       HHeellpp......
              Brings up the table of contents of the  Help  Hand-
              books.

       DDeesskkttoopp IInnttrroo......
              Brings  up a tutorial introduction to the Sun Desk-
              top.

       EExxiitt   Shuts down all applications and  exits  the  window
              system.  A confirmation notice will appear first to
              give you a chance to cancel the operation.




                           25 Nov 1992                          8





olwm(1)                                                   olwm(1)


WWIINNDDOOWW MMEENNUU
       The window menu of most windows has the  following  items.
       (The items may appear in a different language depending on
       the current locale setting.)

       CClloossee  Closes the window to an icon.  Any OPEN LOOK pop-up
              windows  are  closed  into this icon as well.  They
              will reappear when the icon is opened.   This  item
              is "Open" if you bring up this menu over an icon.

       FFuullll SSiizzee
              Expands  the  window  to  the  full  height  of the
              screen.  If this has already done,  the  button  is
              Normal  Size  instead  of  Full  Size.  Normal Size
              restores the window to the size it was  before  you
              did  the  Full  Size operation.  If the application
              has specified a maximum size for the  window,  this
              size  is  used  for  Full  Size instead of the full
              screen height.

       MMoovvee   Starts the keyboard-based form of moving  the  win-
              dow.   Appears  only if OPEN LOOK Mouseless Mode is
              enabled.

       RReessiizzee Starts the keyboard-based form of resizing the win-
              dow.   Appears  only if OPEN LOOK Mouseless Mode is
              enabled.

       BBaacckk   Moves the window behind all other windows.

       RReeffrreesshh
              Clears and redisplays the window.

       QQuuiitt   Kills the program running in the window and removes
              the window.  If the application has elected to par-
              ticipate in  the  WM_DELETE_WINDOW  protocol,  oollwwmm
              sends  a  WM_DELETE_WINDOW ClientMessage instead of
              killing that window.

       OPEN LOOK pop-up windows (as opposed to base windows) have
       a smaller window menu.  It lacks the Close, Full Size, and
       Quit items, but it has two new items:

       DDiissmmiissss
              Causes the window to be dismissed.  This button has
              a  sub-menu with two items: This Window, which dis-
              misses just this window,  and  All  Pop-ups,  which
              dismisses all pop-up windows owned by this applica-
              tion.

       OOwwnneerr?? Raises and flashes the title bar of the base window
              that "owns" this pop-up window.





                           25 Nov 1992                          9





olwm(1)                                                   olwm(1)


MMEENNUU CCUUSSTTOOMMIIZZAATTIIOONN FFIILLEESS
       You  can customize oollwwmm's Workspace Menu by putting a menu
       description into a file that  oollwwmm  will  read.   When  it
       starts  up,  oollwwmm  will first look for a file named by the
       OLWMMENU environment variable.  If this variable does  not
       exist, or if the file is not readable, oollwwmm will then look
       in the file named ..ooppeennwwiinn--mmeennuu in  your  home  directory.
       If  this  file  is not present or is unreadable, oollwwmm will
       fall back on the system default menu file.  If,  for  some
       reason, the system default menu file cannot be found, oollwwmm
       will use a minimal, built-in menu.  The menu file that  is
       read  can  also be modified by the display language locale
       setting.  The locale name is used  as  a  suffix  for  the
       filename.   If  a localized menu file is found, it is used
       in preference to the non-localized menu file.   For  exam-
       ple,  if  the  display  language locale is "japanese", the
       file ..ooppeennwwiinn--mmeennuu..jjaappaanneessee will take precedence over  the
       file ..ooppeennwwiinn--mmeennuu.

       OOllwwmm will automatically re-read its menu file whenever the
       menu file changes.  This lets you make many small  changes
       to  a  menu  file, trying out the modified menu after each
       change.  The automatic re-reading can be  controlled  with
       the AAuuttooRReeRReeaaddMMeennuuFFiillee resource.

       If  oollwwmm  encounters  a syntax error during the reading of
       any menu file, a message is printed to the standard  error
       file  and  the  reading of this menu file is considered to
       have failed.  OOllwwmm will then attempt to read the next file
       in the sequence as described above.

MMEENNUU SSPPEECCIIFFIICCAATTIIOONN SSYYNNTTAAXX
       The  menu specification language has a number of keywords,
       all of which are in all upper case letters.  The  keywords
       are  _n_o_t translated into the language specified by the the
       locale category settings.  Keywords are always in English.

       Each  line typically specifies one menu button.  There are
       three fields on each line: a label, the  optional  keyword
       DEFAULT, and a command.  The label is either a single word
       or a string enclosed in double quotes.  This is the  label
       that  appears in the menu button.  If the optional keyword
       DEFAULT appears next, this menu item becomes  the  default
       item for this menu.  The rest of the line (excluding lead-
       ing whitespace) is considered to be a command.  It is exe-
       cuted  by  sending  it to sshh(1).  Any shell metacharacters
       will be passed through to the shell unchanged.   The  com-
       mand field can be extended onto the next line by placing a
       backslash `\' at the end of the line.   The  newline  will
       not be embedded in the command.

       A  sub-menu is specified using the special keyword MENU in
       place of a command.  A button  is  added  to  the  current
       menu,  and  clicking  or pulling right on this button will



                           25 Nov 1992                         10





olwm(1)                                                   olwm(1)


       bring up the sub-menu.  Subsequent lines in the menu  file
       define buttons for the sub-menu, until a line that has the
       special keyword END in the command field  is  encountered.
       The label of the MENU line must match the label on the END
       line, otherwise an error is signaled.   Sub-menus  can  be
       nested  arbitrarily,  bracketed by MENU and END lines with
       matching labels.

       Sub-menus can be defined in a different file using  either
       the  MENU  or  the INCLUDE keyword.  To include a sub-menu
       from another file, use a line with  a  label,  either  the
       MENU  or  the INCLUDE keyword, and then the filename.  The
       file so named is assumed to  contain  lines  that  specify
       menu buttons.  The sub-menu file need not have any MENU or
       END lines (unless it has sub-menus itself).   The  current
       file  need not have a matching END line if the sub-menu is
       read from another file.  Sub-menu files included with  the
       MENU  keyword are considered to be an integral part of the
       menu tree, and any error encountered during reading of the
       file  will cause the entire menu to be considered invalid.
       A sub-menu file included with the INCLUDE keyword is  con-
       sidered optional, and any error encountered during reading
       of the file is not considered fatal.  If an  error  occurs
       during INCLUDE processing, a disabled (grayed-out) item is
       inserted in place of the sub-menu and  processing  of  the
       current menu file continues.

       To make a sub-menu pinnable, add the special keyword "PIN"
       after the END keyword on the line that ends  the  sub-menu
       definition, or after the TITLE directive (see below).

       By  default,  the  label  in  a menu button is used as the
       title of the sub-menu.  This can be overridden by specify-
       ing  a line that has the special keyword TITLE in the com-
       mand field.  The label from this line will be used as  the
       sub-menu's  title.   This  line can appear anywhere in the
       sub-menu definition.  It does not add an item to the menu.
       In  addition, if the PIN keyword follows the TITLE keyword
       on this line, the sub-menu will be  made  pinnable.   This
       construct  is useful for declaring that a sub-menu defined
       in a separate file be pinnable.

       A line containing only  the  keyword  SEPARATOR  will  add
       extra space before the next item.

       The following keywords can be used in the command field of
       a menu item.  They specify functions that are internal  to
       oollwwmm,, that are not invoked by running a shell.

       BACK_SELN
              Move  the  selected  windows and icons behind other
              windows.

       EXIT



                           25 Nov 1992                         11





olwm(1)                                                   olwm(1)


              Kills all applications and exits the window manager
              after  getting confirmation from the user.  This is
              useful for exiting the entire window system.

       EXIT_NO_CONFIRM
              Like EXIT but skips the confirmation notice.

       FLIPDRAG
              Toggle the state of the DDrraaggWWiinnddooww resource.

       FLIPFOCUS
              Toggle the state of the SSeettIInnppuutt resource.

       FULL_RESTORE_SIZE_SELN
              Toggle the full-sized/normal-sized  states  of  the
              selected windows and icons.

       NOP
              No operation; don't do anything.

       OPEN_CLOSE_SELN
              Toggle  the  opened/closed  states  of the selected
              windows and icons.

       QUIT_SELN
              Quit the selected windows and icons.

       PROPERTIES
              Bring up Workspace Properties.

       REFRESH
              Refresh causes all windows  on  the  screen  to  be
              repainted.

       REREAD_MENU_FILE
              Force  an immediate rereading of the workspace menu
              customization file.  OOllwwmm  will  start  a  complete
              search  for  a  menu file (as described in the _M_e_n_u
              _C_u_s_t_o_m_i_z_a_t_i_o_n section) and use the first valid file
              it finds.

       RESTART
              Restart the window manager by issuing an eexxeecc(2) on
              aarrggvv..  This shouldn't affect any  running  applica-
              tions, nor should it cause the server to shut down.

       SAVE_WORKSPACE
              Take a snapshot of the  set  of  currently  running
              applications, and put the command lines so obtained
              into the file ".openwin-init" in  the  user's  home
              directory.   This runs the command specified by the
              SSaavveeWWoorrkkssppaacceeCCmmdd resource.





                           25 Nov 1992                         12





olwm(1)                                                   olwm(1)


       START_DSDM
              Start providing the DSDM service.  See the  section
              on Drag and Drop for further information.

       STOP_DSDM
              Stop  providing  the DSDM service.  See the section
              on Drag and Drop for further information.

       WMEXIT Exit the window manager without killing any  appli-
              cations.

       Here is an example root menu specification.

       "My Custom Menu" TITLE

       Programs        MENU
            "Command Tool"      DEFAULT cmdtool
            "Text Editor"       textedit
            Mail           mailtool
            "File Manager"      filemgr
            Other               MENU
                 "Other Tools"       TITLE
                 "Shell Tool"        shelltool
                 "Icon Editor"       iconedit
                 Clock               clock
                 "Perf Meter"        DEFAULT perfmeter
            Other               END
       Programs       END PIN

       "Repaint Screen"    REFRESH

       "Properties ..."    PROPERTIES

       Exit      EXIT

CCOOLLOORRMMAAPP IINNSSTTAALLLLAATTIIOONN
       OOllwwmm  will  handle  colormap installation for windows that
       have colormaps other than the default colormap.  There are
       two   colormap   focus  modes:  "color-follows-mouse"  and
       "color-locked".  They are roughly analogous to the  corre-
       sponding  modes  for  input  focus.  However, the colormap
       focus mode can be  completely  independent  of  the  input
       focus  mode.   The  mode  in which the system starts up is
       determined by the CCoolloorrFFooccuussLLoocckkeedd resource.

       OOllwwmm keeps track of a set of windows that are eligible  to
       have  their  colormaps  installed.   This set includes all
       top-level windows of clients.  If any clients have  speci-
       fied  other  windows  in  a  WM_COLORMAP_WINDOWS property,
       these windows are included in the set as well.   The  win-
       dows  listed  in  this property need not be top-level win-
       dows; they can be nested subwindows as well.

       In color-follows-mouse  mode,  oollwwmm  keeps  track  of  the



                           25 Nov 1992                         13





olwm(1)                                                   olwm(1)


       location  of  the  pointer  and always keeps installed the
       colormap of the eligible window  underneath  the  pointer.
       Thus,  you can install the colormap of a particular window
       simply by sliding the pointer into it.  The  default  col-
       ormap  will  be  restored if you move the pointer back out
       into a window frame or into the workspace.  In this  mode,
       the   WM_COLORMAP_WINDOWS   properties   are  tracked  for
       changes, but only to change the set of  eligible  windows.
       Changes  to  these  properties  only cause colormaps to be
       installed if the eligible window  under  the  pointer  has
       changed  as a result of the set of eligible windows chang-
       ing.  In this mode, no window is considered  to  have  the
       colormap  focus;  colormap  installation entirely is under
       control of the user.

       In color-locked mode, colormaps are not installed based on
       pointer  motion.  Instead, colormaps are installed explic-
       itly by the user using  function  keys  or  by  a  program
       changing  the contents of the WM_COLORMAP_WINDOWS property
       on its top-level window.

       The user can install the colormap of a window (or  subwin-
       dow  listed in the WM_COLORMAP_WINDOWS property) by moving
       the pointer over the window or subwindow and pressing  the
       Color-Lock  key (which is bound to Control-L2 by default).
       This will install the colormap of the window or  subwindow
       under  the  pointer,  and  it will also grant the colormap
       focus to the top-level window.  When a window has the col-
       ormap  focus,  oollwwmm  will  honor  changes to this window's
       WM_COLORMAP_WINDOWS property by installing the colormap of
       the first window named in this property.  In this way, the
       application whose window has the colormap focus  can  con-
       trol colormap installation by altering the contents of the
       WM_COLORMAP_WINDOWS property.

       Note that, according to the ICCCM, if  WM_COLORMAP_WINDOWS
       does  not  include  the top-level window, it is assumed to
       occur first in the list.  If  you  want  your  program  to
       request    colormap    installation    via    changes   to
       WM_COLORMAP_WINDOWS, you must make sure that the top-level
       window  appears  somewhere  in  this property.  Otherwise,
       oollwwmm will always install the  colormap  of  the  top-level
       window.

       The  colormap  focus  may  be given to a window in several
       other ways.  If you press the Color-Lock key over  a  win-
       dow's  title  bar or border, that window will be given the
       colormap   focus   and   the   first   window    in    the
       WM_COLORMAP_WINDOWS  property  will  be installed.  If the
       AAuuttooCCoolloorrFFooccuuss resource is set, new windows will be  given
       the  colormap  focus automatically.  If the CCoolloorrTTrraacckkssIInn--
       ppuuttFFooccuuss resource is set, the colormap focus  will  always
       be given to the window that has the input focus.




                           25 Nov 1992                         14





olwm(1)                                                   olwm(1)


       If  you  press  the Color-Lock key over the workspace, the
       default colormap will be installed, and  any  window  with
       the  colormap focus will lose it.  The root window is then
       considered to have the colormap focus.  At any  time,  you
       can  revert  to  color-follows-mouse  mode by pressing the
       Color-Unlock key.  Any window with the colormap focus will
       lose it.

SSPPOOTT HHEELLPP
       OOllwwmm  provides  spot help for frames, icons, the Workspace
       and Window menus, window buttons,  resize  corners,  push-
       pins,  and the Workspace itself.  This is done via a sepa-
       rate slave program, oollwwmmssllaavvee(1)..  The  slave  program  is
       forked  automatically when oollwwmm starts up.  The forking of
       the slave program can be controlled by the RRuunnSSllaavveePPrroocceessss
       resource.

MMUULLTTIIPPLLEE SSCCRREEEENNSS
       By default, oollwwmm will manage windows on all screens of the
       display server.  Most operations are unchanged from single
       screen  operation.  A window exists on a particular screen
       for its entire lifetime.  The window cannot be moved  from
       one  screen  to  another, nor can it be resized to cross a
       screen boundary.  Windows invoked from the Workspace  menu
       will  appear  on  the  same screen as the menu.  Spot help
       will appear on the same screen as  the  pointer  when  the
       Help key is pressed.

       Previous  releases  required  modifications  to the user's
       ..xxiinniittrrcc script to start multiple instances of  oollwwmm,,  one
       for each screen.  These modifications are no longer neces-
       sary.  The default XXiinniittrrcc (which contains a single  invo-
       cation  of oollwwmm) works for both single and multiple screen
       situations.

DDRRAAGG AANNDD DDRROOPP
       The OpenWindows drag and drop system relies  on  a  third-
       party  client (i.e. a client other than the source or des-
       tination clients of a drag and drop operation) to maintain
       a  database  of all possible locations on the screen where
       an object may be dropped.  These locations are referred to
       as ``drop sites.''  This third party client is thus called
       the Drop Site Database Manager or DSDM.  By default,  oollwwmm
       is  configured  to  provide  the  DSDM service to clients.
       This can be controlled using the SSttaarrttDDSSDDMM resource or the
       --ddssddmm and --nnooddssddmm command-line options.

       If  you  have customized your Workspace Menu (see the sec-
       tion on Menu Customization) you can add items that use the
       START_DSDM  and  STOP_DSDM menu keywords.  Invoking a menu
       item bound to one of these keywords will enable or disable
       oollwwmm's providing of the DSDM service.

       A standalone client ddssddmm(1) exists in order to provide the



                           25 Nov 1992                         15





olwm(1)                                                   olwm(1)


       DSDM service in the case where oollwwmm is not running  or  if
       it  has  been  directed  not  to provide the DSDM service.
       Note that the START_DSDM and STOP_DSDM  functions  do  not
       run  an  actual ddssddmm process; rather, they control whether
       oollwwmm provides the DSDM service itself.  It is  not  neces-
       sary to run ddssddmm if oollwwmm is providing the DSDM service.

GGLLOOBBAALL RREESSOOUURRCCEESS
       Global  resources  in  oollwwmm consist of two resource compo-
       nents.  The first component in the resource name is  taken
       from  the  trailing  pathname  component of aarrggvv[[00]].  This
       value is typically `olwm'.  This name can  be  altered  by
       using   the   --nnaammee  command-line  argument.   The  second
       resource component names the global attribute  being  set.
       It  should  be  one  of the names from the following list.
       Thus, to set the AAuuttooCCoolloorrFFooccuuss attribute, one  would  use
       "olwm.AutoColorFocus" as the resource specification.

       OOllwwmm  will  automatically pick up changes to many of these
       resources if the resource database  changes  at  run-time.
       One  can  thus  modify  oollwwmm's  behavior  by  changing the
       resource database with xxrrddbb(1) or with  Workspace  Proper-
       ties.   If a resource value is specified on oollwwmm's command
       line, it will override the value in the resource database,
       and  thus  changing  the  resource's value in the database
       will have no effect on this resource setting.

       Some  resources  are  also  interpreted  by   XView   (see
       xxvviieeww(7))  and are set by the Workspace Properties program
       (see pprrooppss(1)).   For  these  resources,  oollwwmm  will  also
       accept the string `OpenWindows' as the first resource com-
       ponent.  These resources are marked with an asterisk  `*'.

       Colors  can  be  specified using the formats parsed by the
       Xlib XParseColor() function.   Common  formats  are  color
       names  (see  sshhoowwrrggbb(1)) and explicit red, green, and blue
       values in hexadecimal, preceded by a `#'.  For example,  a
       cyan  (full  green  and  blue)  would  be  specified  with
       "#00ffff".

       Boolean values can be specified  with  the  words  "true",
       "false",  "on",  "off",  "yes",  "no",  "1", "0", "t", and
       "nil".

       AAuuttooCCoolloorrFFooccuuss _(_b_o_o_l_e_a_n_)
              Indicates whether newly appearing windows are to be
              given  the  colormap  focus automatically.  See the
              section  on  Colormap  Installation   for   further
              details.  _D_e_f_a_u_l_t _v_a_l_u_e_: _f_a_l_s_e_.

       AAuuttooIInnppuuttFFooccuuss _(_b_o_o_l_e_a_n_)
              Indicates whether newly appearing windows are to be
              given  the  input  focus  automatically.    _D_e_f_a_u_l_t
              _v_a_l_u_e_: _f_a_l_s_e_.



                           25 Nov 1992                         16





olwm(1)                                                   olwm(1)


       AAuuttooRRaaiissee _(_b_o_o_l_e_a_n_)
              Raise  windows  automatically when they receive the
              focus.  This is useful  in  click-to-focus  if  you
              always  like to type into the topmost window.  This
              is   useful   in   focus-follow-mouse   when    the
              AAuuttooRRaaiisseeDDeellaayy  resource  is  set  to  a reasonable
              value.  _D_e_f_a_u_l_t _v_a_l_u_e_: _f_a_l_s_e_.

       AAuuttooRRaaiisseeDDeellaayy _(_i_n_t_e_g_e_r_)
              Amount of time to delay, in microseconds, between a
              window  receiving  the  focus  and raising it above
              other windows.  Effective only when  the  value  of
              the  AAuuttooRRaaiissee resource is true.  _D_e_f_a_u_l_t _v_a_l_u_e_: _0_.

       AAuuttooRReeRReeaaddMMeennuuFFiillee _(_b_o_o_l_e_a_n_)
              Specifies whether the menu file is  to  be  re-read
              whenever it changes.  _D_e_f_a_u_l_t _v_a_l_u_e_: _t_r_u_e_.

       BBaacckkggrroouunndd _(_c_o_l_o_r_)
              Specifies  the  background color.  This is used for
              the background of masked icons.  Note:  it  is  not
              used  for  the  backgrounds of icon windows such as
              those used by XView (see xxvviieeww(7)).  This  resource
              is  also  distinct  from  the WWiinnddoowwCCoolloorr resource.
              _D_e_f_a_u_l_t _v_a_l_u_e_: _w_h_i_t_e_.

       BBaassiiccLLooccaallee _(_l_o_c_a_l_e _n_a_m_e_)
              Specifies the basic OPEN LOOK locale category  set-
              ting.   See the section on Locale Handling for more
              details.

       BBeeeepp _(_e_n_u_m_e_r_a_t_i_o_n_) **
              Specifies the circumstances under which oollwwmm should
              beep.  Permissible values are the strings "always",
              "never", and "notices".  The string  "never"  means
              that  oollwwmm  should never beep, "notices" means that
              oollwwmm should beep only when a  notice  appears,  and
              "always"  means  that oollwwmm will beep whenever it is
              appropriate.  _D_e_f_a_u_l_t _v_a_l_u_e_: _a_l_w_a_y_s_.

       BBoorrddeerrCCoolloorr _(_c_o_l_o_r_)
              Specifies the color used for window and  icon  bor-
              ders.  _D_e_f_a_u_l_t _v_a_l_u_e_: _b_l_a_c_k_.

       BBuuttttoonnFFoonntt _(_f_o_n_t _n_a_m_e_)
              Font  to  be used for buttons in menus and notices.
              _D_e_f_a_u_l_t _v_a_l_u_e_: _L_u_c_i_d_a_-_S_a_n_s_-_1_2_.

       CClliicckkMMoovveeTThhrreesshhoolldd _(_i_n_t_e_g_e_r_)
              This value is used when bringing up a menu.  If the
              pointer  moves more than this amount while the menu
              button is down, the menu is  considered  to  be  in
              press-drag-release mode.  Otherwise, the menu is in
              click-move-click mode.  _D_e_f_a_u_l_t _v_a_l_u_e_: _5_.



                           25 Nov 1992                         17





olwm(1)                                                   olwm(1)


       CCoolloorrFFooccuussLLoocckkeedd _(_b_o_o_l_e_a_n_)
              Specifies the initial state of the  colormap  focus
              policy.   If  true,  the default colormap is locked
              into the hardware.  If false, the colormap  of  the
              window  under  the  pointer is kept installed.  See
              the section on Colormap  Installation  for  further
              details.  _D_e_f_a_u_l_t _v_a_l_u_e_: _f_a_l_s_e_.

       CCoolloorrTTrraacckkssIInnppuuttFFooccuuss _(_b_o_o_l_e_a_n_)
              If true, indicates that the colormap focus is to be
              set automatically to any window that  receives  the
              input focus.  See the section on Colormap Installa-
              tion for further details.  _D_e_f_a_u_l_t _v_a_l_u_e_: _f_a_l_s_e_.

       CCuurrssoorrFFoonntt _(_f_o_n_t _n_a_m_e_)
              Specifies the font to be used for cursors.   It  is
              probably  not useful to change this unless you have
              an alternate cursor font with the same encoding  as
              the OPEN LOOK cursor font.  _D_e_f_a_u_l_t _v_a_l_u_e_:
              _-_s_u_n_-_o_p_e_n _l_o_o_k _c_u_r_s_o_r_-_*_-_*_-_*_-_*_-_*_-_1_2_0_-_*_-_*_-_*_-_*_-_*_-_*_.

       DDeeffaauullttIIccoonnIImmaaggee _(_f_i_l_e_n_a_m_e_)
              Specifies  a file containing a bitmap to be used as
              the default icon image.

       DDeeffaauullttIIccoonnMMaasskk _(_f_i_l_e_n_a_m_e_)
              Specifies a file containing a bitmap to be used  as
              the default icon mask.

       DDeeffaauullttTTiittllee _(_s_t_r_i_n_g_)
              Specifies the string to be used in the title bar of
              windows that have not  provided  a  string  in  the
              WM_NAME property.  _D_e_f_a_u_l_t _v_a_l_u_e_: _N_o _N_a_m_e_.

       DDiissppllaayyLLaanngg _(_l_o_c_a_l_e _n_a_m_e_)
              Specifies  the  display  language  OPEN LOOK locale
              category.  See the section on Locale  Handling  for
              more details.

       DDrraaggRRiigghhttDDiissttaannccee _(_i_n_t_e_g_e_r_) **
              The number of pixels you must drag the mouse to the
              right in a menu item to bring up a  sub-menu.   The
              sub-menu  always  comes  up  when you move over the
              menu mark (the right-pointing triangle), regardless
              of the drag-right distance.  _D_e_f_a_u_l_t _v_a_l_u_e_: _1_0_0_.

       DDrraaggTThhrreesshhoolldd _(_i_n_t_e_g_e_r_) **
              This  is  the  number of pixels the mouse must move
              while a mouse button is down in order to  have  the
              action  be  considered  a drag.  If the mouse moves
              fewer than this number of pixels while  the  button
              is  down, it is considered to be click instead of a
              drag.  _D_e_f_a_u_l_t _v_a_l_u_e_: _5_.




                           25 Nov 1992                         18





olwm(1)                                                   olwm(1)


       DDrraaggWWiinnddooww _(_b_o_o_l_e_a_n_)
              If true, drags the entire image of the window  when
              you move it.  Otherwise, just drags the window out-
              line.  _D_e_f_a_u_l_t _v_a_l_u_e_: _f_a_l_s_e_.

       EEddggeeMMoovveeTThhrreesshhoolldd _(_i_n_t_e_g_e_r_)
              Specifies the amount of "hysteresis" provided  when
              moving  windows  past the edge of the screen.  When
              you move a window or an icon, it will pause when it
              touches  the  edge of the screen.  This is to allow
              you to easily position windows right up against the
              edge  of the screen.  If you move farther, the win-
              dow or icon will continue to move  past  the  edge.
              You  can  prevent windows from ever lapping off the
              screen by setting an extremely  large  value  (say,
              10000)  for this resource, and you can disable this
              feature entirely by specifying  a  value  of  zero.
              _D_e_f_a_u_l_t _v_a_l_u_e_: _1_0_.

       FFllaasshhCCoouunntt _(_i_n_t_e_g_e_r_)
              Number  of  times the title bar is flashed when the
              "Owners?" menu item is activated.   _D_e_f_a_u_l_t  _v_a_l_u_e_:
              _6_.

       FFllaasshhTTiimmee _(_i_n_t_e_g_e_r_)
              Amount  of  time,  in  microseconds,  for which the
              title bar is flashed when the "Owner?" menu item is
              activated.  _D_e_f_a_u_l_t _v_a_l_u_e_: _1_0_0_0_0_0_.

       FFooccuussLLeenniieennccee _(_b_o_o_l_e_a_n_)
              If  this  is set to true, oollwwmm will not enforce the
              ICCCM requirement that windows must have the  input
              hint set in order to receive the input focus.  This
              option is useful if you  run  clients  that  aren't
              ICCCM-compliant,  like  many  X11R3-based  clients.
              _D_e_f_a_u_l_t _v_a_l_u_e_: _f_a_l_s_e_.

       FFoorreeggrroouunndd _(_c_o_l_o_r_)
              Specifies the foreground color.  This color is used
              mainly  for  the text of window and icon titles and
              in menus.  _D_e_f_a_u_l_t _v_a_l_u_e_: _b_l_a_c_k_.

       GGllyypphhFFoonntt _(_f_o_n_t _n_a_m_e_)
              Glyph font used for  drawing  OPEN  LOOK  graphics.
              Changing  this  font  is mainly useful for changing
              its size.  Specifying a different font, such  as  a
              text  font,  will  result  in undesirable behavior.
              _D_e_f_a_u_l_t _v_a_l_u_e_:
              _-_s_u_n_-_o_p_e_n _l_o_o_k _g_l_y_p_h_-_*_-_*_-_*_-_*_-_*_-_1_2_0_-_*_-_*_-_*_-_*_-_*_-_*_.

       IIccoonnFFllaasshhCCoouunntt _(_i_n_t_e_g_e_r_)
              Number of times  to  flash  the  open/close  "zoom"
              lines.  _D_e_f_a_u_l_t _v_a_l_u_e_: _3_.




                           25 Nov 1992                         19





olwm(1)                                                   olwm(1)


       IIccoonnFFllaasshhOOffffTTiimmee _(_i_n_t_e_g_e_r_)
              Amount  of  time  to  pause, in microseconds, while
              open/close "zoom" lines are not  visible.   _D_e_f_a_u_l_t
              _v_a_l_u_e_: _1_.

       IIccoonnFFllaasshhOOnnTTiimmee _(_i_n_t_e_g_e_r_)
              Amount  of  time  to  pause, in microseconds, while
              open/close  "zoom"  lines  are  visible.    _D_e_f_a_u_l_t
              _v_a_l_u_e_: _2_0_0_0_0_.

       IIccoonnFFoonntt _(_f_o_n_t _n_a_m_e_)
              Font used for icon names.  _D_e_f_a_u_l_t_: _L_u_c_i_d_a_-_S_a_n_s_-_1_2_.

       IIccoonnLLooccaattiioonn _(_e_n_u_m_e_r_a_t_i_o_n_) **
              One of the words "top-lr",  "top-rl",  "bottom-lr",
              "bottom-rl",  "left-tb",  "left-bt", "right-tb", or
              "right-bt".  These specify  that  icons  should  be
              arranged  along  a  particular  edge of the screen,
              ordered from left to right  or  top  to  bottom  as
              appropriate.   The  words  "top", "bottom", "left",
              and "right" are synonyms for "top-lr", "bottom-lr",
              "left-tb",  and  "right-tb", respectively.  _D_e_f_a_u_l_t
              _v_a_l_u_e_: _b_o_t_t_o_m_.

       IInnvveerrttFFooccuussHHiigghhlliigghhttiinngg _(_b_o_o_l_e_a_n_)
              In click-to-focus,  the  input  focus  is  normally
              indicated  by  a  solid rectangle in the title bar.
              In focus-follows-mouse, focus is normally indicated
              with  two lines in the title bar.  If this resource
              is true, the style of highlighting is inverted with
              respect  to  the  focus style.  This results in two
              lines for click-to-focus and a solid bar for focus-
              follows-mouse.  _D_e_f_a_u_l_t _v_a_l_u_e_: _f_a_l_s_e_.

       KKeeeeppTTrraannssiieennttssAAbboovvee _(_b_o_o_l_e_a_n_)
              Specifies whether oollwwmm should attempt to keep tran-
              sient windows above their  owner  window.   _D_e_f_a_u_l_t
              _v_a_l_u_e_: _f_a_l_s_e_.

       KKeeyybbooaarrddCCoommmmaannddss _(_e_n_u_m_e_r_a_t_i_o_n_) **
              Permissible  values for this resource are SSuunnVViieeww11,,
              BBaassiicc,, and FFuullll..  Values  are  case-sensitive.   In
              FFuullll  mode, all OPEN LOOK Mouseless commands imple-
              mented by the window manager are active.   See  the
              section  on Mouseless Navigation for further infor-
              mation.  In BBaassiicc mode, the keys active  are  Open,
              Front,  Help,  and  the colormap keys.  In SSuunnVViieeww11
              mode, the only keys  active  are  Open  and  Front.
              _D_e_f_a_u_l_t _v_a_l_u_e_: _B_a_s_i_c_.

       MMeennuuAAcccceelleerraattoorrss _(_b_o_o_l_e_a_n_)
              Determines  whether  menu  accelerators are active.
              Used in conjunction with the WWiinnddoowwMMeennuuAAcccceelleerraattoorrss
              resource.   Both  must  be  set  to  true  for menu



                           25 Nov 1992                         20





olwm(1)                                                   olwm(1)


              accelerators to be active.  _D_e_f_a_u_l_t _v_a_l_u_e_: _t_r_u_e_.

       MMiinniimmaallDDeeccoorr _(_l_i_s_t _o_f _s_t_r_i_n_g_s_)
              Specifies a list of windows that are  to  be  deco-
              rated   minimally.    Decoration  on  such  windows
              includes only a thin  border  and  resize  corners,
              with  no  title  bar  or  window button.  The value
              should be a whitespace-separated list  of  strings.
              Each  string  should specify an application's class
              or instance name, as passed in the  WM_CLASS  prop-
              erty.  Most applications set this property based on
              the name of the  executable  (i.e.  argv[0]).   For
              example, to specify that the clock and the calcula-
              tor should be decorated minimally,  you  would  use
              the following resource:

                   olwm.MinimalDecor: calctool clock

              Many  applications  will  allow you to override the
              value of the  WM_CLASS  property  using  the  --nnaammee
              option on the command line.  _D_e_f_a_u_l_t _v_a_l_u_e_: _(_n_u_l_l_)_.

       MMoouusseeCChhoorrddMMeennuu _(_b_o_o_l_e_a_n_)
              If true, uses a chorded  mouse  button  combination
              for MENU instead of shift keys.  See the Mouse But-
              tons section for further details.   _D_e_f_a_u_l_t  _v_a_l_u_e_:
              _f_a_l_s_e_.

       MMoouusseeCChhoorrddTTiimmeeoouutt _(_i_n_t_e_g_e_r_)
              Specifies the amount of time, in milliseconds, that
              oollwwmm is to wait for  subsequent  events  to  disam-
              biguate   chorded  mouse  button  event  sequences.
              _D_e_f_a_u_l_t _v_a_l_u_e_: _1_0_0_.

       MMuullttiiCClliicckkTTiimmeeoouutt _(_i_n_t_e_g_e_r_) **
              The time, in tenths of a second,  that  differenti-
              ates  a  double-click from two single clicks.  This
              value is also used to distinguish  the  click-move-
              click and press-drag-release modes of pop-up menus.
              If the MENU button is held down  longer  than  this
              amount  of  time,  the  menu is considered to be in
              press-drag-release mode, otherwise it is considered
              to  be in click-move-click mode.  _D_e_f_a_u_l_t _v_a_l_u_e_: _5_.

       NNuummeerriicc _(_l_o_c_a_l_e _n_a_m_e_)
              Specifies the numeric format OPEN LOOK locale cate-
              gory.   See the section on Locale Handling for more
              details.

       PPaaiinnttWWoorrkkssppaaccee _(_b_o_o_l_e_a_n_)
              If true, oollwwmm will use the WWoorrkkssppaacceeCCoolloorr  resource
              to  set  the  workspace  (root  window)  background
              color.  If false, oollwwmm will  not  change  the  root
              window background.  This is useful If you prefer to



                           25 Nov 1992                         21





olwm(1)                                                   olwm(1)


              set your own workspace color using xxsseettrroooott(1) or a
              similar program.  _D_e_f_a_u_l_t _v_a_l_u_e_: _t_r_u_e_.

       PPooiinntteerrWWoorrkkssppaaccee _(_b_o_o_l_e_a_n_)
              If  true, oollwwmm will set the workspace (root window)
              cursor.  If false, oollwwmm will not  change  the  root
              window cursor.  This is useful if you prefer to set
              your own workspace cursor using  xxsseettrroooott(1)  or  a
              similar program.  _D_e_f_a_u_l_t _v_a_l_u_e_: _t_r_u_e_.

       PPPPoossiittiioonnCCoommppaatt _(_b_o_o_l_e_a_n_)
              Turns  on backward compatibility for older applica-
              tions that have a habit of always setting the  PPo-
              sition  flag  in the WM_NORMAL_HINTS property, even
              when they haven't set a position.  This most  often
              occurs  with X11R3-based clients.  Without backward
              compatibility, these windows will always appear  in
              the upper-left corner of the screen.  With backward
              compatibility, these  windows  will  be  positioned
              according to the default OPEN LOOK window placement
              policy, along the diagonal  of  the  screen.   This
              option will not affect windows that have a geometry
              specified on  the  command  line.   _D_e_f_a_u_l_t  _v_a_l_u_e_:
              _f_a_l_s_e_.

       PPooppuuppJJuummppCCuurrssoorr _(_b_o_o_l_e_a_n_) **
              Specifies whether to warp the cursor to pop-up win-
              dows.  _D_e_f_a_u_l_t _v_a_l_u_e_: _t_r_u_e_.

       PPrriinnttWWaarrnniinnggss _(_b_o_o_l_e_a_n_)
              Determines whether oollwwmm will issue non-fatal  warn-
              ing  messages  (such  as  X protocol errors) to its
              standard error file.  _D_e_f_a_u_l_t _v_a_l_u_e_: _f_a_l_s_e_.

       RRaaiisseeOOnnAAccttiivvaattee _(_b_o_o_l_e_a_n_)
              Specifies whether a window is to be raised when  it
              is  activated  via  a  Mouseless  command.  _D_e_f_a_u_l_t
              _v_a_l_u_e_: _t_r_u_e_.

       RRaaiisseeOOnnMMoovvee _(_b_o_o_l_e_a_n_)
              Tells oollwwmm to raise a window whenever it  is  moved
              by the user.  _D_e_f_a_u_l_t _v_a_l_u_e_: _f_a_l_s_e_.

       RRaaiisseeOOnnRReessiizzee _(_b_o_o_l_e_a_n_)
              Tells oollwwmm to raise a window whenever it is resized
              by the user.  _D_e_f_a_u_l_t _v_a_l_u_e_: _f_a_l_s_e_.

       RReeffrreesshhRReeccuurrssiivveellyy _(_b_o_o_l_e_a_n_)
              Determines how the Refresh menu items on the window
              and workspace menus operate.  If the value is true,
              oollwwmm will walk the window hierarchy and send  expo-
              sure  events  to  every window.  This is useful for
              refreshing windows that have backing store.  If the
              value  is  false,  oollwwmm  will map a window and then



                           25 Nov 1992                         22





olwm(1)                                                   olwm(1)


              unmap it, causing all windows  underneath  that  do
              not  have  backing  store get exposures.  When this
              feature is on, the Refresh  operation  generates  a
              large  amount  of client-server traffic.  It may be
              useful to turn this feature off if  the  connection
              transport   has  low  bandwidth  or  high  latency.
              _D_e_f_a_u_l_t _v_a_l_u_e_: _t_r_u_e_.

       RReevveerrsseeVViiddeeoo _(_b_o_o_l_e_a_n_)
              If true, reverses the sense of black and  white  on
              monochrome  screens.   Ignored  for  color screens.
              _D_e_f_a_u_l_t _v_a_l_u_e_: _f_a_l_s_e_.

       RRuubbbbeerrBBaannddTThhiicckknneessss _(_i_n_t_e_g_e_r_)
              Specifies the thickness of the  "rubber-band"  line
              that  is  drawn  when  a  window is resized, when a
              group of windows is selected by dragging a  rectan-
              gle on the root, and when a window is moved and the
              value of the DDrraaggWWiinnddooww resource is false.  _D_e_f_a_u_l_t
              _v_a_l_u_e_: _2_.

       RRuunnSSllaavveePPrroocceessss _(_b_o_o_l_e_a_n_)
              If  false,  disables the running of oollwwmmssllaavvee(1) at
              startup time.  If the slave process is not running,
              Spot Help will not be available on objects owned by
              oollwwmm such as pushpins and resize corners.   _D_e_f_a_u_l_t
              _v_a_l_u_e_: _t_r_u_e_.

       SSaavveeWWoorrkkssppaacceeCCmmdd _(_s_t_r_i_n_g_)
              The   command   to  execute  to  perform  the  Save
              Workspace functionality.  This command defaults  to
              running  owplaces(1) which saves the currently run-
              ning clients into the  OpenWindows  startup  script
              $HOME/.openwin-init.  _D_e_f_a_u_l_t _v_a_l_u_e_:
              _o_w_p_l_a_c_e_s  _-_s_i_l_e_n_t _-_m_u_l_t_i _-_l_o_c_a_l _-_s_c_r_i_p_t _-_t_w _-_o_u_t_p_u_t
              _$_H_O_M_E_/_._o_p_e_n_w_i_n_-_i_n_i_t

       SSaavveeWWoorrkkssppaacceeTTiimmeeoouutt _(_i_n_t_e_g_e_r_)
              Number of seconds to wait while the Save  Workspace
              operation  is  in  progress.  If the Save Workspace
              command has not completed  within  this  amount  of
              time,  the  operation is considered to have failed.
              _D_e_f_a_u_l_t _v_a_l_u_e_: _3_0_.

       SSeelleeccttDDiissppllaayyssMMeennuu _(_b_o_o_l_e_a_n_) **
              If true, pressing  the  SELECT  mouse  button  will
              bring up a menu item's sub-menu (if any) instead of
              executing the sub-menu's default  action.   _D_e_f_a_u_l_t
              _v_a_l_u_e_: _f_a_l_s_e_.

       SSeelleeccttiioonnFFuuzzzz _(_i_n_t_e_g_e_r_)
              Number  of  pixels  of  "fuzz"  to  be applied when
              selecting windows and icons by dragging a rectangle
              on  the  workspace.   Consider  an object that lies



                           25 Nov 1992                         23





olwm(1)                                                   olwm(1)


              almost entirely within the selection rectangle, but
              that  laps  outside  the rectangle by a few pixels.
              The object will be  considered  to  be  within  the
              selection  rectangle  if  it  laps outside by fewer
              than or equal to "fuzz" pixels.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _1_.

       SSeelleeccttTToogggglleeSSttaacckkiinngg _(_b_o_o_l_e_a_n_)
              If  true,  double-clicking on a window will push it
              to the back instead of zooming it to and  from  its
              full size.  _D_e_f_a_u_l_t _v_a_l_u_e_: _f_a_l_s_e_.

       SSeelleeccttWWiinnddoowwss _(_b_o_o_l_e_a_n_)
              If  false,  the SELECT mouse button will not select
              windows and icons.  Its other functions  are  unaf-
              fected.   The ADJUST mouse button can still be used
              to select windows and icons.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _t_r_u_e_.

       SSeerrvveerrGGrraabbss _(_b_o_o_l_e_a_n_)
              Controls  whether oollwwmm grabs the server while menus
              and notices are up.  _D_e_f_a_u_l_t _v_a_l_u_e_: _t_r_u_e_.

       SSeettIInnppuutt _(_e_n_u_m_e_r_a_t_i_o_n_) **
              Controls the input focus mode.   If  the  value  is
              "select", it means click-to-focus.  If the value is
              "followmouse",   it   means    focus-follows-mouse.
              _D_e_f_a_u_l_t _v_a_l_u_e_: _s_e_l_e_c_t_.

       SShhoowwMMoovveeGGeeoommeettrryy _(_b_o_o_l_e_a_n_)
              Indicates  whether the geometry box should be shown
              while moving windows  and  icons.   _D_e_f_a_u_l_t  _v_a_l_u_e_:
              _f_a_l_s_e_.

       SShhoowwRReessiizzeeGGeeoommeettrryy _(_b_o_o_l_e_a_n_)
              Indicates  whether the geometry box should be shown
              while resizing windows.  _D_e_f_a_u_l_t _v_a_l_u_e_: _f_a_l_s_e_.

       SSnnaappTTooGGrriidd _(_b_o_o_l_e_a_n_)
              Determines whether icons will snap to a  grid  when
              they are moved.  _D_e_f_a_u_l_t _v_a_l_u_e_: _f_a_l_s_e_.

       SSttaarrttDDSSDDMM _(_b_o_o_l_e_a_n_)
              Determines  whether oollwwmm will provide the DSDM ser-
              vice.  See the section on Drag and Drop for further
              details.  _D_e_f_a_u_l_t _v_a_l_u_e_: _t_r_u_e_.

       TTeexxttFFoonntt _(_f_o_n_t _n_a_m_e_)
              Font used in the text of notices.  _D_e_f_a_u_l_t_: _L_u_c_i_d_a_-
              _S_a_n_s_-_1_2_.

       TTiittlleeFFoonntt _(_f_o_n_t _n_a_m_e_)
              Font used in title bars  atop  windows  and  menus.
              _D_e_f_a_u_l_t_: _L_u_c_i_d_a_-_S_a_n_s_-_1_2 _B_o_l_d_.





                           25 Nov 1992                         24





olwm(1)                                                   olwm(1)


       TTrraannssiieennttssSSaavveeUUnnddeerr _(_b_o_o_l_e_a_n_)
              Specifies   whether  the  save-under  attribute  of
              frames of transient windows is  to  be  forced  on.
              _D_e_f_a_u_l_t _v_a_l_u_e_: _t_r_u_e_.

       TTrraannssiieennttssTTiittlleedd _(_b_o_o_l_e_a_n_)
              Specifies  whether  transient  windows  should have
              title bars.  Normally,  transient  windows  have  a
              title  bar and resize corners, but no window button
              or pushpin.  Setting this resource  to  false  will
              remove   the  title  bar  from  transient  windows.
              _D_e_f_a_u_l_t _v_a_l_u_e_: _t_r_u_e_.

       UUssee33DD _(_b_o_o_l_e_a_n_)
              Specifies whether to use 3D OPEN LOOK  when  possi-
              ble.  If false, 3D look is never used.  If true, 3D
              is used unless the display hardware cannot  support
              it.  _D_e_f_a_u_l_t _v_a_l_u_e_: _t_r_u_e_.

       UUssee33DDFFrraammeess _(_b_o_o_l_e_a_n_)
              Specifies  whether  to  use a 3D look for the frame
              borders.  If true, the frames will be  given  a  3D
              look; otherwise, they have the same thick border as
              in 2D look.  Some people  prefer  the  look  of  3D
              frames,  but  it  is  more difficult to distinguish
              selected from unselected windows with  this  option
              turned on.  _D_e_f_a_u_l_t _v_a_l_u_e_: _f_a_l_s_e_.

       UUssee33DDRReessiizzee _(_b_o_o_l_e_a_n_)
              Specifies  whether the window resize corners are to
              be in the 3D look.  If false, the 2D look  is  used
              for window resize corners.  _D_e_f_a_u_l_t _v_a_l_u_e_: _t_r_u_e_.

       WWiinnddoowwCCaacchheeSSiizzee _(_i_n_t_e_g_e_r_)
              OOllwwmm  keeps a cache of windows in order to minimize
              unnecessary window creation and  destruction.   The
              value  of  this resource specifies the size of this
              cache.  Setting this resource to zero disables  the
              window cache.  _D_e_f_a_u_l_t _v_a_l_u_e_: _5_0_0_.

       WWiinnddoowwCCoolloorr _(_c_o_l_o_r_) **
              Specifies  the color of windows.  This is the "BG1"
              color for 3D OPEN LOOK.  It is used for  the  back-
              grounds  of  windows,  menus,  and notices.  The 3D
              effect is achieved by using  highlight  and  shadow
              colors  derived  from  this  color.  _D_e_f_a_u_l_t _v_a_l_u_e_:
              _#_c_c_c_c_c_c_.  This specifies a 20% gray value.

       WWiinnddoowwMMeennuuAAcccceelleerraattoorrss _(_b_o_o_l_e_a_n_)
              Determines whether menu  accelerators  are  active.
              Used   in  conjunction  with  the  MMeennuuAAcccceelleerraattoorrss
              resource.  Both must be set to true for menu accel-
              erators to be active.  _D_e_f_a_u_l_t _v_a_l_u_e_: _t_r_u_e_.




                           25 Nov 1992                         25





olwm(1)                                                   olwm(1)


       WWoorrkkssppaacceeBBiittmmaappBBgg _(_c_o_l_o_r _s_p_e_c_i_f_i_c_a_t_i_o_n_)
              Specifies   the   background  color  used  for  the
              workspace bitmap when the  WWoorrkkssppaacceeSSttyyllee  resource
              is "tilebitmap".  _D_e_f_a_u_l_t _v_a_l_u_e_: _b_l_a_c_k_.

       WWoorrkkssppaacceeBBiittmmaappFFgg _(_c_o_l_o_r _s_p_e_c_i_f_i_c_a_t_i_o_n_)
              Specifies   the   foreground  color  used  for  the
              workspace bitmap when the  WWoorrkkssppaacceeSSttyyllee  resource
              is "tilebitmap".  _D_e_f_a_u_l_t _v_a_l_u_e_: _w_h_i_t_e_.

       WWoorrkkssppaacceeBBiittmmaappFFiillee _(_f_i_l_e_n_a_m_e_)
              Specifies a X bitmap file that will be used for the
              workspace   background   when   WorkspaceStyle   is
              "tilebitmap".   If  the filename is not a full path
              name, the following directories are searched:

                   $OPENWINHOME/etc/workspace/patterns
                   $OPENWINHOME/include/X11/include/bitmaps
                   /usr/X11/include/X11/include/bitmaps

              _D_e_f_a_u_l_t _v_a_l_u_e_: _g_r_a_y_.

       WWoorrkkssppaacceeCCoolloorr _(_c_o_l_o_r_) **
              Specifies the color for the  workspace  (root  win-
              dow).   On startup, oollwwmm will set the root window's
              background color to the  color  specified  by  this
              resource,  and  it  will  restore the default back-
              ground on shutdown.  To turn off this behavior, see
              the  description  of  the  PPaaiinnttWWoorrkkssppaaccee resource.
              _D_e_f_a_u_l_t _v_a_l_u_e_: _#_4_0_a_0_c_0_.   This  specifies  a  light
              blue  color.   _N_o_t_e_: earlier versions of oollwwmm would
              accept a bitmap file  name  as  the  value  of  the
              WWoorrkkssppaacceeCCoolloorr  resource.   This  is no longer sup-
              ported,      and      the      WWoorrkkssppaacceeBBiittmmaappFFiillee,,
              WWoorrkkssppaacceeBBiittmmaappBBgg,,  and WWoorrkkssppaacceeBBiittmmaappFFgg resources
              should be used instead.

       WWoorrkkssppaacceeSSttyyllee _(_e_n_u_m_e_r_a_t_i_o_n_)
              This controls how the workspace is painted.  If the
              value is "paintcolor", the solid color specified by
              the WWoorrkkssppaacceeCCoolloorr resource is used.  If the  value
              is  "tilebitmap",  the  workspace  is  tiled with a
              bitmap     using      the      WWoorrkkssppaacceeBBiittmmaappFFiillee,,
              WWoorrkkssppaacceeBBiittmmaappBBgg,, and WWoorrkkssppaacceeBBiittmmaappFFgg resources.
              If the value is "default", the server default root-
              weave  pattern is used.  If the value of the PPaaiinntt--
              WWoorrkkssppaaccee resource is  false,  then  all  of  these
              resources  are  ignored  and the workspace color or
              pattern is left unchanged.  _D_e_f_a_u_l_t  _v_a_l_u_e_:  _p_a_i_n_t_-
              _c_o_l_o_r

SSCCRREEEENN RREESSOOUURRCCEESS
       In  addition to the global resources described above, oollwwmm
       also uses screen-specific resources.  The first  component



                           25 Nov 1992                         26





olwm(1)                                                   olwm(1)


       of  the  resource  specification  is the trailing pathname
       component of aarrggvv[[00]].  The second component is the  screen
       number  appended  to the string `screen'.  The screens are
       numbered sequentially starting from zero.  The third  com-
       ponent  of  the  resource name is the name of the resource
       itself.  For example,

            olwm.screen1.ReverseVideo: true

       enables reverse video on screen number  1  for  oollwwmm..   To
       affect all screens, you can use resource wildcarding.  For
       example, `olwm*ReverseVideo: true' will set reverse  video
       for all screens oollwwmm manages.

       The following resources are available both globally and on
       a per-screen basis.  A screen-specific resource  overrides
       the  corresponding  global  setting for that screen.  Note
       that screen specific settings for WorkspaceColor and  Win-
       dowColor  will  only  affect  oollwwmm; this may cause clashes
       with XView clients which only use the global setting.

            Background
            BorderColor
            Foreground
            ReverseVideo
            WindowColor
            WorkspaceColor


       The following resources allow  the  selection  of  visuals
       other than the screen's default.  Available visuals may be
       listed with the xxddppyyiinnffoo(1) command.

       DDeepptthh _(_i_n_t_e_g_e_r_)
              Specify the visual depth to be used when  searching
              for visuals.  _D_e_f_a_u_l_t _v_a_l_u_e_: _n_o_n_e_.

       VViissuuaall _(_e_n_u_m_e_r_a_t_i_o_n_)
              Specify  the visual class to be used when searching
              for visuals.  Valid visual classes are  SSttaattiiccGGrraayy,
              GGrraayySSccaallee, SSttaattiiccCCoolloorr, PPsseeuuddooCCoolloorr, TTrruueeCCoolloorr, and
              DDiirreeccttCCoolloorr.  Names  are  case-sensitive.   _D_e_f_a_u_l_t
              _v_a_l_u_e_: _n_o_n_e_.

       VViissuuaallIIDD _(_i_d_)
              Specify the visual ID to be used.  Note: specifying
              a visual by its ID is not portable, as IDs may vary
              from  server to server and even from one invocation
              of a server to the next.  _D_e_f_a_u_l_t _v_a_l_u_e_: _n_o_n_e_.

MMOOUUSSEELLEESSSS NNAAVVIIGGAATTIIOONN
       OOllwwmm implements OPEN LOOK Mouseless operations.  This is a
       set  of functions bound to keys that enable one to use the
       window system entirely without a  pointing  device.   Some



                           25 Nov 1992                         27





olwm(1)                                                   olwm(1)


       Mouseless  functions  are  also  useful  for  "cross-over"
       users, who may want to use them as accelerators for mouse-
       based  operations.   The full benefits of Mouseless opera-
       tions are realized in click-to-focus  mode,  although  the
       Mouseless  operations  can still be used in focus-follows-
       mouse mode.

       To use the Mouseless functions, you must  make  sure  that
       the KKeeyybbooaarrddCCoommmmaannddss resource value is "Full".  Other set-
       tings for this resource will leave most of  the  Mouseless
       functions disabled.  For further details, see the descrip-
       tion  of  the  KKeeyybbooaarrddCCoommmmaannddss  resource  in  the  Global
       Resources  section.   Enabling  Mouseless  operation  only
       activates keyboard-based functions.  It  does  not  affect
       mouse functions in any way.

       One  can  navigate  from  window  to window using the Next
       Application, Previous Application, Next Window, and Previ-
       ous  Window  functions,  bound  by  default to Alt-n, Alt-
       Shift-n, Alt-w, and Alt-Shift-w, respectively.   (See  the
       section on Mouseless Navigation for more detailed informa-
       tion.)  You can bring up both the window and the workspace
       menu  using  Alt-m  and Alt-Shift-m, respectively.  Once a
       menu is up, you can navigate through it by using the arrow
       keys  or by pressing the first letter of the menu item you
       want to go to.  You can execute the current item by press-
       ing  Return,  or  you  can  cancel  the menu using Stop or
       Escape.

       When Mouseless navigation is turned on,  Move  and  Resize
       items will appear on the window menu.  These items provide
       an alternative technique for moving and resizing  windows.
       They  can  be invoked using the mouse, using the Mouseless
       menu navigation functions from the keyboard, or  by  using
       Menu  Accelerator keys (although they are not bound to any
       accelerator keys by default).  After selecting  either  of
       these  items,  you  will  be put into a mode where you can
       move or resize the window using keyboard  keys.   In  Move
       mode, you can use the arrow keys to move the window in the
       desired direction.  You can also hold down the Control key
       to  "jump"  the  window by a larger distance each time you
       press an arrow key.  You can press Return  to  accept  the
       new location, or you can press Escape or Stop to abort the
       move operation.

       In Resize mode, the first arrow key selects the  edge  you
       are moving, and subsequent arrow keys move that edge.  For
       example, to shrink a window from the right  (that  is,  to
       move  its  right  edge  to the left) you would first enter
       resize mode, press the right arrow key to select the right
       edge,  and then press the left arrow key to move this edge
       to the left.  As in move mode, you can hold  down  Control
       to  "jump" the edge by a greater increment.  You can press
       Return to accept the new size, and you can press Escape or



                           25 Nov 1992                         28





olwm(1)                                                   olwm(1)


       Stop to abort the resize operation.

MMEENNUU AACCCCEELLEERRAATTOORRSS
       OOllwwmm  supports  accelerator  keys for certain items on the
       Window Menu.  By default, the items for which accelerators
       are  enabled are Close (Meta-W) and Quit (Meta-Q).  Press-
       ing these key combinations will operate on the  window  or
       icon  that  has  the input focus.  Other Window Menu items
       are not bound to key combinations, but can be  bound  with
       resources.   See the Key Binding Resources section (below)
       for further information.  When a menu accelerator  key  is
       active  for  a  particular function, an indication of this
       appears at the right edge of the menu item.  Key  combina-
       tions with modifiers are displayed in a self-evident fash-
       ion, except for the Meta modifier, which is displayed as a
       diamond  mark.  (The meta keys are marked with diamonds on
       Sun keyboards.)

       The default menu accelerator bindings  may  conflict  with
       certain  popular applications (such as Emacs or the Athena
       text widget).  It is thus possible to disable menu  accel-
       erators  on  a  per-application  basis.   To  disable menu
       accelerators, add a resource of the form

            olwm.Client._c_l_a_s_s.MenuAccelerators: false

       to the resource database, where _c_l_a_s_s is the application's
       class  or  instance  name as written in the WM_CLASS prop-
       erty.  For instance,  to  disable  menu  accelerators  for
       Emacs, one would add the following

            olwm.Client.Emacs.MenuAccelerators: false

       to the ..XXddeeffaauullttss file.

KKEEYY BBIINNDDIINNGG RREESSOOUURRCCEESS
       Key  bindings  for mouseless navigation functions and menu
       accelerator keys are specified using resources.  There  is
       one  resource per function, and the value of the resources
       are the keys to which the function is bound.  The resource
       value consists of a comma-separated list of key specifica-
       tions.   Each  key  specification  consists  of  a  keysym
       optionally  followed  by  modifier  keysyms;  the modifier
       keysyms are separated by `+' signs.  For example, to  bind
       a  function to F2, control-F3, and alt-shift-F4, one would
       use the value:

            F2,F3+Control,F4+Shift+Alt


       Any keysym whose key is in the  modifier  mapping  may  be
       used  as  a  modifier.   The following can also be used as
       aliases for common modifier keysyms: SShhiifftt, LLoocckk, CCoonnttrrooll,
       CCttrrll, CCttll, MMeettaa, AAlltt, SSuuppeerr, and HHyyppeerr..



                           25 Nov 1992                         29





olwm(1)                                                   olwm(1)


       Resource  names  are  prefixed  with the trailing pathname
       component of  aarrggvv[[00]],  followed  by  KKeeyybbooaarrddCCoommmmaanndd  for
       mouseless  navigation  functions,  or  MMeennuuAAcccceelleerraattoorr for
       menu accelerator keys, followed by  one  of  the  resource
       names  from  the following list.  (Note that the KKeeyybbooaarrdd--
       CCoommmmaanndd resource component is singular, and is not  to  be
       confused  with the KKeeyybbooaarrddCCoommmmaannddss global resource name.)
       For example, the resource specification  for  setting  the
       Stop function would be:

            olwm.KeyboardCommand.Stop

       and  the  resource specification for setting the Back menu
       accelerator function would be:

            olwm.MenuAccelerator.Back


       Each item in this list is followed by its default keyboard
       binding  and  a  description  of  what  the function does.
       Items marked with an asterisk `*' involve keyboard  grabs.
       Items  not  marked  with an asterisk are active only while
       oollwwmm is in a mode, such as  when  a  menu  is  up.   Items
       marked with an exclamation point `!' are menu accelerators
       and are specified using the MMeennuuAAcccceelleerraattoorr resource  com-
       ponent  as  described  above.   Items  not  marked with an
       exclamation  point  are  considered  mouseless  navigation
       functions  and use the KKeeyybbooaarrddCCoommmmaanndd resource component.

       Most of the mouseless navigation functions that use  grabs
       are  active only when the KKeeyybbooaarrddCCoommmmaannddss resource is set
       to FFuullll..  The menu accelerator functions  all  use  grabs,
       and they are controlled by the global resources MMeennuuAAcccceell--
       eerraattoorrss and WWiinnddoowwMMeennuuAAcccceelleerraattoorrss..  For further  informa-
       tion, see the description of these resources in the Global
       Resources section.

       Stop _(_L_1_, _E_s_c_a_p_e_)
              Abort the current mode or action.

       DefaultAction _(_R_e_t_u_r_n_, _M_e_t_a_-_R_e_t_u_r_n_, _E_n_t_e_r_)
              Execute the default action for the current menu  or
              notice.

       Select _(_s_p_a_c_e_)
              Select the current button.

       Adjust _(_A_l_t_-_I_n_s_e_r_t_)
              Toggle the selected state of the current object.

       Menu _(_A_l_t_-_s_p_a_c_e_)
              Bring up a menu on the current object.





                           25 Nov 1992                         30





olwm(1)                                                   olwm(1)


       InputFocusHelp _(_?_, _C_o_n_t_r_o_l_-_?_)
              Bring up Help on the object with the input focus.

       Up _(_u_p_-_a_r_r_o_w_)
              Move up one item.

       Down _(_d_o_w_n_-_a_r_r_o_w_)
              Move down one item.

       Left _(_l_e_f_t_-_a_r_r_o_w_)
              Move left one item.

       Right _(_r_i_g_h_t_-_a_r_r_o_w_)
              Move right one item.

       JumpUp _(_C_o_n_t_r_o_l _u_p_-_a_r_r_o_w_)
              Move up ten items.

       JumpDown _(_C_o_n_t_r_o_l _d_o_w_n_-_a_r_r_o_w_)
              Move down ten items.

       JumpLeft _(_C_o_n_t_r_o_l _l_e_f_t_-_a_r_r_o_w_)
              Move left ten items.

       JumpRight _(_C_o_n_t_r_o_l _r_i_g_h_t_-_a_r_r_o_w_)
              Move right ten items.

       RowStart _(_H_o_m_e_, _R_7_)
              Move to the start of the current row.

       RowEnd _(_E_n_d_, _R_1_3_)
              Move to the end of the current row.

       DataStart _(_C_o_n_t_r_o_l_-_H_o_m_e_)
              Move to the start of the data.

       DataEnd _(_C_o_n_t_r_o_l_-_E_n_d_)
              Move to the end of the data.

       FirstControl _(_C_o_n_t_r_o_l_-_[_)
              Move to the first item.

       LastControl _(_C_o_n_t_r_o_l_-_]_)
              Move to the last item.

       NextElement _(_T_a_b_, _C_o_n_t_r_o_l_-_T_a_b_)
              Move to the next item.

       PreviousElement _(_S_h_i_f_t_-_T_a_b_, _C_o_n_t_r_o_l_-_S_h_i_f_t_-_T_a_b_)
              Move to the previous item.

       Open _(_A_l_t_-_L_7_) *
              Open the object with the input focus.




                           25 Nov 1992                         31





olwm(1)                                                   olwm(1)


       Help _(_H_e_l_p_) *
              Bring up Spot Help on the object under the pointer.

       LockColormap _(_C_o_n_t_r_o_l_-_L_2_) *
              Install the colormap of  the  subwindow  under  the
              pointer,  and  give  the colormap focus to the top-
              level window containing the pointer.  See  _C_o_l_o_r_m_a_p
              _I_n_s_t_a_l_l_a_t_i_o_n for further details.

       UnlockColormap _(_C_o_n_t_r_o_l_-_L_4_) *
              Revert  to color-follows-mouse mode, and unset col-
              ormap focus.  See _C_o_l_o_r_m_a_p _I_n_s_t_a_l_l_a_t_i_o_n for further
              details.

       Front _(_A_l_t_-_L_5_) *
              Bring the object with the input focus to the front.

       FocusToPointer _(_A_l_t_-_S_h_i_f_t_-_j_) *
              Set the focus to the window under the pointer.

       NextApp _(_A_l_t_-_n_) *
              Move the focus to the next  base  window.   Windows
              are  ordered  clockwise starting at the top.  Icons
              come after all windows, also in a  clockwise  fash-
              ion.  Order proceeds from the last icon on a screen
              to the first window of the next screen.  After  the
              last  screen,  the  order  wraps back around to the
              first screen.

       PreviousApp _(_A_l_t_-_S_h_i_f_t_-_n_) *
              Move the focus to the previous  base  window.   See
              NNeexxttAApppp  for  details  about  the  window traversal
              order.

       ToggleInput _(_A_l_t_-_t_) *
              Move the input focus to the  previous  window  that
              had the input focus.

       NextWindow _(_A_l_t_-_w_) *
              Move  to  the  next window in the family of windows
              consisting of a base window and  a  set  of  pop-up
              windows.   Windows  are ordered clockwise, starting
              at the top of the screen.

       PreviousWindow _(_A_l_t_-_S_h_i_f_t_-_w_) *
              Move to the previous window in the family  of  win-
              dows  consisting of a base window and a set of pop-
              up windows.  Windows are ordered clockwise,  start-
              ing at the top of the screen.

       TogglePin _(_M_e_t_a_-_I_n_s_e_r_t_) *
              Toggle  the state of the pin of the window with the
              input focus.




                           25 Nov 1992                         32





olwm(1)                                                   olwm(1)


       SuspendMouseless _(_A_l_t_-_z_) *
              Temporarily suspend all key grabs  associated  with
              Mouseless operation.

       ResumeMouseless _(_A_l_t_-_S_h_i_f_t_-_z_) *
              Resume grabs after temporary suspension.

       QuoteNextKey _(_A_l_t_-_q_) *
              Pass  the next key sequence to the application with
              the focus, ignoring any grabs.

       Refresh _(_n_o _b_i_n_d_i_n_g_) *!
              Repaint the window with the focus.

       Back _(_n_o _b_i_n_d_i_n_g_) *!
              Move the focus window behind other windows.

       OpenClose _(_M_e_t_a_-_W_) *!
              Toggle the open/close state of the window with  the
              focus.

       FullRestore _(_n_o _b_i_n_d_i_n_g_) *!
              Toggle  the  full-sized/normal-sized  state  of the
              window with the focus.

       Quit _(_M_e_t_a_-_Q_) *!
              Quit the window with the focus.

       Owner _(_n_o _b_i_n_d_i_n_g_) *!
              Flash the owner window of the  pop-up  window  with
              the focus.

       WorkspaceMenu _(_A_l_t_-_S_h_i_f_t_-_m_) *
              Bring up the workspace menu.

       WindowMenu _(_A_l_t_-_m_) *
              Bring  up  the  window  menu on the window with the
              focus.

       Move _(_n_o _b_i_n_d_i_n_g_) *!
              Move the window with the focus.

       Resize _(_n_o _b_i_n_d_i_n_g_) *!
              Resize the window with the focus.

       OpenClosePointer _(_L_7_) *
              Toggle the open/close state of the window  or  icon
              under the pointer.

       RaiseLower _(_L_5_) *
              Raise  the  window under the pointer if obscured by
              other windows.  Otherwise, lower the window  if  it
              obscures other windows.




                           25 Nov 1992                         33





olwm(1)                                                   olwm(1)


MMOODDIIFFIIEERR CCUUSSTTOOMMIIZZAATTIIOONN
       OOllwwmm will alter the operation of certain mouse-based func-
       tions based on the state of the modifier keys.  The  rela-
       tionship  between  the alteration and the associated modi-
       fier keys is controlled by a set of  resources.   Resource
       names are prefixed with the trailing pathname component of
       aarrggvv[[00]], followed by MMooddiiffiieerr,, followed by a resource from
       the  list  below.  For example, the resource specification
       to bind the Reduce modifier would typically be

            olwm.Modifier.Reduce

       The value of each resource is a  comma-separated  list  of
       modifier  keysyms.   Each item in this list is followed by
       its default modifier and a description of what it does.

       Constrain _(_C_o_n_t_r_o_l_)
              Constrain a move or resize operation to be only  on
              a horizontal or vertical direction.

       Ignore _(_L_o_c_k_, _N_u_m_L_o_c_k_, _m_o_d_5_, _M_o_d_e___s_w_i_t_c_h_)
              The  set of modifiers to be ignored when processing
              mouse button events.  This resource should  contain
              the set of locking modifiers, so that mouse actions
              are still interpreted properly even  while  locking
              modifiers  are  in  effect.   The  _m_o_d_5 modifier is
              included in this set because XView places  function
              keys  into  this  row in the modifier mapping table
              for use with quick-move and quick-copy  operations.

       Invert _(_S_h_i_f_t_)
              When  moving  windows, temporarily invert the sense
              of the DDrraaggWWiinnddooww resource.  When resizing  a  win-
              dow,  temporarily  move  the window as long as this
              modifier is held down.  Return to resizing when the
              modifier is released.

       Reduce _(_M_e_t_a_)
              When  moving  windows,  reduce  the amount of mouse
              motion by a factor of ten.

       SetDefault _(_C_o_n_t_r_o_l_)
              Sets the default item for a menu.

       WMGrab _(_A_l_t_)
              Using the WMGrab  modifier  allows  access  to  the
              mouse  button  functions  anywhere over the window,
              not just over the window's title bar and border.

EENNVVIIRROONNMMEENNTT
       DISPLAY
              Specifies the X11 server to which to connect.





                           25 Nov 1992                         34





olwm(1)                                                   olwm(1)


       LANG, LC_CTYPE, LC_MESSAGE, LC_TIME
              These variables specify which locale  to  use  when
              other methods of locale announcement are not avail-
              able.  (See the section on Locale Handling for more
              details.)

       OLWMMENU
              Specifies a file to use for the Workspace Menu.

       OPENWINHOME
              Specifies the location of the OpenWindows software.

FFIILLEESS
       $HOME/.openwin-menu_._l_o_c_a_l_e_n_a_m_e

       $HOME/.openwin-menu
              Contains the user-customized Workspace Menu  speci-
              fication.

       $OPENWINHOME/lib/openwin-menu._l_o_c_a_l_e_-_n_a_m_e

       $OPENWINHOME/lib/openwin-menu
              Contains  the default Workspace Menu specification.

       $HOME/.openwin-init
              Stores the command lines obtained during  the  Save
              Workspace operation.

       $OPENWINHOME/lib/app-defaults/Olwm

       $OPENWINHOME/lib/locale/_l_o_c_a_l_e_-_n_a_m_e/app-defaults/Olwm
              Specifies system-wide default resource values.

TTRRAADDEEMMAARRKKSS
       OPEN LOOK is a trademark of AT&T.
       The  X  Window  system is a trademark of the Massachusetts
       Institute of Technology.
       OpenWindows is a trademark of Sun Microsystems, Inc.

RREEFFEERREENNCCEESS
       Rosenthal, David S.H.  _I_n_t_e_r_-_C_l_i_e_n_t _C_o_m_m_u_n_i_c_a_t_i_o_n  _C_o_n_v_e_n_-
       _t_i_o_n_s _M_a_n_u_a_l _f_o_r _X_1_1_.  Copyright 1989 by the Massachusetts
       Institute of Technology.  This document is commonly  known
       as  the ICCCM.  It is an X Consortium Standard that speci-
       fies conventions to which all X11 clients must adhere.

       OPEN LOOK Graphical User Interface  Functional  Specifica-
       tion.   Copyright 1989 by Sun Microsystems, Inc.  Addison-
       Wesley Publishing Company, Inc.  ISBN 0-201-52365-5.

       OPEN LOOK Graphical User  Interface  International  Exten-
       sions Functional Specification.  Draft 1.1 (May 10, 1990).
       Copyright 1990 by Unix International.




                           25 Nov 1992                         35





olwm(1)                                                   olwm(1)


SSEEEE AALLSSOO
       ddssddmm(1),  oollwwmmssllaavvee(1),  ooppeennwwiinn(1),  oowwppllaacceess(1),  sseettlloo--
       ccaallee(3C), xxiinniitt(1), xxnneewwss(1)

NNOOTTEESS
       The  resource  names do not follow any classing structure.
       There is no general way to specify  resources  on  a  per-
       client basis.

       There is no way to reconfigure the mouse buttons.

       The  uses  of  the modifier keys described in the Modifier
       Customization section interferes with the button  bindings
       for  one- and two-button mice.  The default value of Modi-
       fier.Invert is Shift, which interferes with  using  shift-
       button1   for   ADJUST.    The   default  value  of  Modi-
       fier.Constrain is Control,  which  interferes  with  using
       control-button1  for  MENU (on one-button mice only).  One
       can  set  the   Modifier.Invert   and   Modifier.Constrain
       resources  to  null (or to other modifiers) to avoid these
       conflicts, allowing full access to ADJUST and MENU on sys-
       tems with one- and two-button mice.  There is still a fur-
       ther conflict, as the default value of Modifier.SetDefault
       is  also  Control.   Using control-button1 on a one-button
       system will bring up the menu, but  will  set  the  menu's
       default  item.  One must release the Control key after the
       menu is up in order to get  normal  menu  operation.   The
       choice of Alt as the default value for Modifier.WMGrab may
       conflict with some applications' key bindings.

       The Exit menu item on the Workspace  Menu  doesn't  really
       shut down the server.  It kills off all clients being man-
       aged by the window manager, and then it exits  the  window
       manager itself.  This works properly if some outside agent
       such as xxiinniitt(1) or xxddmm(1) is waiting for the window  man-
       ager  or  a  client  to exit.  The outside agent will take
       care of shutting down the server or reinitializing it.  If
       you've  started up the server a different way, this option
       may not work.  Instead, the server will  be  left  running
       with  no  clients  and  no window manager running, and you
       will have to login from elsewhere to kill the  server.   A
       common  cause  of  this problem is an ..xxiinniittrrcc script that
       inadvertently leaves a non-windowed application (such as a
       daemon) running in the background.  If the ..xxiinniittrrcc script
       ends with the wwaaiitt shell command, it will never terminate.
       The  fix is to change the script to either wait for a par-
       ticular process-id, or to run the daemon in a subshell:

            (daemon &)


       OOllwwmm is fairly simplistic about how it  manages  its  key-
       board  bindings.   For  example, if you bind a function to
       control-F2, oollwwmm will grab F2 with  the  Control  modifier



                           25 Nov 1992                         36





olwm(1)                                                   olwm(1)


       and  with  all  combinations of the Lock and NumLock modi-
       fiers.  If another locking modifier is in  effect,  oollwwmm's
       passive  grab will not be activated, and thus the function
       will not work.

       OOllwwmm cannot manage multiple locales at one time, therefore
       all clients should be running in the same locale.  The "C"
       locale is  the  exception.   Applications  using  the  "C"
       locale (such as non-internationalized applications) can be
       mixed with applications using one other locale.

       OOllwwmm does not handle different sizes of  the  glyph  fonts
       well.   Each  locale  can  define a different size for the
       default font (for example, the default glyph font size  is
       12  for  the  "C"  locale  and  is  14  for the "japanese"
       locale).  OOllwwmm does not re-position the window decorations
       after  switching  locale, therefore the window decorations
       may appear to be wrong.  To remedy this problem partially,
       oollwwmm  will  not  change  the font when locale is switching
       from non-"C" locale to the "C" locale.

       There is no input focus feedback for non-rectangular  win-
       dows.   The title string of non-rectangular windows cannot
       be displayed.  Non-rectangular icon windows are  not  sup-
       ported.

       OOllwwmm   will  not  dynamically  track  screen-specific  and
       client-specific resources.  Changes to  global  resources,
       key  binding resources, and modifier resources are applied
       dynamically.

       The interaction of the  AAuuttooCCoolloorrFFooccuuss,  CCoolloorrFFooccuussLLoocckkeedd,
       and  CCoolloorrTTrraacckkssIInnppuuttFFooccuuss resources and the color locking
       and unlocking keys is overly complex.

       Changing the Display Language locale  setting  or  editing
       the  menu  specification file will cause oollwwmm to unpin any
       menus that were pinned at the time.

       Resources that specify time values use inconsistent units.
       Some resources are in tenths of a second, some are in mil-
       liseconds, and some are in microseconds.















                           25 Nov 1992                         37


