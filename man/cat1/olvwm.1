


OLVWM(1)                                                 OLVWM(1)


NNAAMMEE
       olvwm - OPEN LOOK virtual window manager for X11 and Open-
       Windows

SSYYNNOOPPSSIISS
       oollvvwwmm [ _o_p_t_i_o_n_s ]

DDEESSCCRRIIPPTTIIOONN
       oollvvwwmm is a virtual window manager for the X Window  System
       that  implements  parts  of  the  OPEN LOOK graphical user
       interface.  oollvvwwmm differs from oollwwmm in that olvwm  manages
       a  virtual desktop which is larger than the actual screen.
       However, oollvvwwmm is equivalent in all other respects to, and
       supports  all the features of oollwwmm..  This manual page dis-
       cusses only the changes between oollvvwwmm and  oollwwmm,,  most  of
       which  deal  specifically  with  the virtual desktop.  For
       details on  how  oollwwmm  operates,  including  its  host  of
       options, see oollwwmm((11))..

OOPPTTIIOONNSS
       There is one new option to oollvvwwmm..

       -allowSynthetic
              Allow  the  receipt of synthetic events.  Note that
              this argument only permits synthetic events  to  be
              enabled; whether or not synthetic events are deliv-
              ered is controlled via the SyntheticEvents resource
              variable.

TTEERRMMIINNOOLLOOGGYY
       Throughout this manual, the following terms are used:

       SSccrreeeenn:
              This  refers  to  a  specific monitor; essentially,
              there is one screen for every monitor run  by  your
              workstation.   Each  monitor has a view into a par-
              ticular desktop.  In X  terminology,  this  is  the
              screen component of a particular display.

       DDeesskkttoopp:
              This refers to the entire area in which windows can
              reside on a given screen.   In  non-virtual  window
              managers, a desktop and a screen are the same size.
              In a virtual window manager, though, a  desktop  is
              larger than the screen.

       VVDDMM    or VViirrttuuaall DDeesskkttoopp MMaannaaggeerr is the window which rep-
              resents visually the entire desktop:  it provides a
              scaled-down version of the entire desktop.

       LLooggiiccaall SSccrreeeenn:
              If  the desktop is running in default mode, it will
              display a grid, each square of which  maps  to  the
              size  of  the  monitor.   Each  square  is termed a



                         30 November 1992                       1





OLVWM(1)                                                 OLVWM(1)


              logical screen.

       CCuurrrreenntt VViieeww:
              is that part of the desktop which is currently dis-
              played  on  the screen; this will usually (but need
              not always) correspond to a logical screen.

       VViirrttuuaall WWiinnddooww:
              is a small rectangle displayed in  the  VDM;  every
              window  on  the desktop has a corresponding Virtual
              Window in the VDM.

VVIIRRTTUUAALL DDEESSKKTTOOPP MMAANNAAGGEERR
       When it is started, oollvvwwmm displays a virtual desktop  man-
       ager  window.  The VDM is a reduced display of all windows
       active on the desktop at any time.  The  current  view  is
       outlined  in  the virtual desktop manager.  The VDM always
       appears on the screen.

       By default, the VDM (and hence  the  desktop)  is  divided
       into  a  grid; each square of the grid represents a screen
       size.  The dividing lines between each logical screen  are
       represented  by  dashed  lines  in the VDM.  This division
       into logical screens  is  purely  informational:   if  you
       like,  windows  can straddle these boundaries, the current
       view into the desktop can straddle these  boundaries,  and
       window  can  be  moved  at  will between these boundaries.
       However, by default, most actions in the VDM will keep the
       current view along these boundary lines.

EEVVEENNTTSS IINN TTHHEE VVDDMM
       The processing of events within the VDM depends on whether
       the mouse is pointing to the background area of the VDM or
       to a particular virtual window within the VDM.

EEVVEENNTTSS OONN VVIIRRTTUUAALL WWIINNDDOOWWSS
       Events  which  occur in a particular virtual window behave
       just as if they were delivered to the corresponding appli-
       cation's  frame.   Thus,  pressing  the MENU button over a
       virtual window will bring up the frame menu and allow  the
       real  (and virtual) windows to be opened, closed, resized,
       etc.  Pressing the SELECT button  will  select  that  real
       (and  virtual) window; pressing the ADJUST button will add
       (or subtract) that window from the selection list.  Press-
       ing  the FRONT or OPEN keys will raise/lower or open/close
       the real (and virtual) window.

       SELECTing and dragging one or more  virtual  windows  will
       move the real and virtual windows (just as in oollwwmm).  Note
       that if you drag the mouse outside of the VDM, the  window
       can  be  moved onto to the screen.  Conversely, when drag-
       ging a window on the screen, if the mouse moves  into  the
       VDM,  the window will then be moved to the location on the
       displayed within the VDM.  However, if part of the VDM  is



                         30 November 1992                       2





OLVWM(1)                                                 OLVWM(1)


       obscured,  you  cannot move a window into that part of the
       VDM.

       Note that events are delivered ONLY to the  real  applica-
       tion's    frame.    Thus,   typing   characters   or   the
       COPY/CUT/PASTE keys has no effect.

       It is possible to drop something onto a virtual window  as
       if  it  were  dropped  onto the corresponding application;
       this allows you to, for example,  drag  a  file  from  the
       mailtool  on  the screen to a file manager on another part
       of the desktop.

EEVVEENNTTSS OONN TTHHEE VVDDMM BBAACCKKGGRROOUUNNDD
       Events on the VDM background all work to change  the  cur-
       rent view, bringing windows which were formerly outside of
       the current view onto the screen (and moving windows which
       were on the screen outside of the current view).  Keyboard
       events are described given the default Sun Type-4 keyboard
       mappings,  but you can use xmodmap to set up your particu-
       lar keyboard.

       KKeeyybbooaarrdd EEvveennttss::
              The arrow keys (and other  keys)  can  be  used  to
              shift  the current view in the direction specified.
              See the section on ADDITIONAL KEY  BINDINGS  below.
              Keyboard  events  are  also active if they occur on
              the root window in addition to the VDM  background.

       SSEELLEECCTT mouse  events:  SELECTing  on  the  VDM  background
              allows you to drag the current view within the VDM.
              If  the  VirtualGrid  resource is set to Visible or
              Invisible, movement of the visible region  will  be
              constrained to logical screen boundaries unless the
              CTRL button is pressed before and held while  drag-
              ging the mouse.  If the VirtualGrid resource is set
              to None, movement of the  visible  region  will  be
              unconstrained  unless  the  CTRL  button is pressed
              before and held while dragging the mouse.

       DDOOUUBBLLEE CCLLIICCKK
              SELECT events: Double clicking the SELECT button on
              an area in the VDM background will move the current
              view to the logical  screen  containing  the  point
              where the mouse was double-clicked.

       MMEENNUU   mouse   events:   The   MENU  button  brings  up  a
              (pinnable) menu which will allow movement based  on
              full screen sizes in the direction indicated.

RREESSIIZZIINNGG TTHHEE VVIIRRTTUUAALL DDEESSKKTTOOPP
       You  can  use  the resize corners on the VDM to resize the
       virtual desktop at will.  If you make the virtual  desktop
       smaller,  windows  which  might  be  off  the  new virtual



                         30 November 1992                       3





OLVWM(1)                                                 OLVWM(1)


       desktop will NOT be moved (though they will not  be  lost,
       either,  and you can get them back by resizing the desktop
       again). Space added or subtracted is always done  so  from
       the  right  and bottom of the desktop (regardless of which
       resize corner you used).

SSTTIICCKKYY WWIINNDDOOWWSS
       You'll notice that the virtual desktop manager never moves
       on  your  screen  if  you  change  views into the desktop.
       That's because the VDM is permanently "sticky."

       Windows which are "sticky"  never  move  position  on  the
       screen when you change your view into the desktop.  To set
       a particular window as sticky, simply  select  "Stick"  in
       its  frame  menu. You may similarly unstick the window via
       its menu.

       [Note:  Only base frames--those which can be iconified, as
       opposed  to  those  which  have a pushpin--are eligible to
       become sticky; other  frames  inherit  the  stickyness  of
       their  base  frames.   Thus, for most applications, either
       all windows are sticky or none of them are.  The exception
       to  this  is  applications  which  create two or more base
       frames; all base frames  will  be  originally  created  as
       "unsticky" (but see the VirtualSticky resource below).]

CCHHAANNGGEESS TTOO TTHHEE WWIINNDDOOWW MMEENNUU
       The  window  menu of all windows has all the tools defined
       in oollwwmm..  In addition, the menu of base  windows  has  the
       following command

       SSttiicckk//UUnnssttiicckk
              Affect  the  stickyness  of  the particular window.
              Windows which are sticky will always appear in  the
              same  place  on  the screen no matter which part of
              the virtual desktop  you're  looking  at.   Windows
              which  are  not  sticky  (by  default,  all windows
              except the VDM) will move when you change the  cur-
              rent view on the virtual desktop.

CCHHAANNGGEESS TTOO RROOOOTT MMEENNUU
       The  following additional keywords can be used in the com-
       mand field of a root menu menu item:

       COLUMNS
              This specifies the number of columns you'd like the
              menu  to  have.   Each column within a menu will be
              filled in order of the items in the menu.  The menu
              name  must appear before this keyword, and the key-
              word itself must appear before the end of the menu.

       STICK_UNSTICK_SELN
              This   specifies  that  the  sticky  state  of  the
              selected windows should be toggled.



                         30 November 1992                       4





OLVWM(1)                                                 OLVWM(1)


       WINMENU
              brings up a pull-right menu containing the name  of
              every  window  on  the current monitor (if oollvvwwmm is
              managing multiple monitors,  only  windows  on  the
              current  monitor will be shown).  Windows which are
              iconified  are  preceded  with  a  graphic  symbol.
              Selecting one of these windows causes the view into
              the desktop to shift so that the selected window is
              visible;  the  selected  window  will  be opened if
              iconic and raised to the top of the stacking order.
              This  behavior  can  be altered; see _o_l_v_w_m_r_c_(_5_) for
              more  details.   You  may  specify  the  number  of
              columns  in  the  pull-right menu by using a number
              after the WINMENU keyword.  By default,  the  order
              of  the  menu  is  alphabetic; see the SortMenuType
              resource below for more options.

       DIRMENU
              brings up a pull-right menu containing the name  of
              every  file  given  in  the  named directory.  This
              allows you to use a local programs directory for  a
              tool  repository;  whenever  tools are added to the
              directory, users will see  the  new  choices.   The
              directory  name may contain environmental variables
              (e.g. $OPENWINHOME).  You may also specify a  regu-
              lar  expression  as  the file part of DIRMENU; e.g.
              $OPENWINHOME/bin/x* would display only  those  pro-
              grams  in the openwindows bin directory which begin
              with an x.  Regular expressions do not apply to the
              directory  name;  $OPENWINHOME/b*/x*  is an invalid
              DIRMENU entry.

       X11 Bitmaps and Pixmaps
              can be specified in the menu by specifying a  file-
              name  enclosed in <> brackets.  The filename speci-
              fied must be in X11 bitmap form,  XPM2  form  (pro-
              duced  by IconEdit), XPM3 form, or Gif format.  You
              can mix bitmap and string entries  within  a  menu,
              though perhaps menus look better if you do not.

       MOVE_DESKTOP
              specifies that oollvvwwmm should move the view to either
              the logical screen specified after the MOVE_DESKTOP
              entry (e.g. MOVE_DESKTOP 3 moves to the third logi-
              cal screen) or to the logical screen containing the
              point  specified after the MOVE_DESKTOP entry (e.g.
              MOVE_DESKTOP 2304 0 also moves to the third logical
              screen in a default configuration).

       Here is a version of the example _o_l_w_m root menu specifica-
       tion:  the programs menu will have 2 columns;  there  will
       be a way to find particular windows off the "Find" submenu
       (and that menu will have 3 columns); whatever local  tools
       are  available can be found in /usr/local; and the cmdtool



                         30 November 1992                       5





OLVWM(1)                                                 OLVWM(1)


       option will be displayed as an icon:


       "My Custom Menu" TITLE

       Programs                 MENU
       Programs       COLUMNS 2
               </usr/openwin/include/X11/bitmaps/terminal>  DEFAULT cmdtool
               "Text Editor"           textedit
               Mail                    mailtool
               "File Manager"          filemgr
               Other                   MENU
                       "Other Tools"           TITLE
                       "Shell Tool"            shelltool
                       "Icon Editor"           iconedit
                       Clock                   clock
                       "Perf Meter"            DEFAULT perfmeter
               Other                   END
            "Local Tools"       DIRMENU   /usr/local
       Programs                END PIN

       "Repaint Screen"        REFRESH

       "Properties ..."        PROPERTIES

       "Find"         WINMENU   3

       Exit            EXIT

MMIISSCCEELLLLAANNEEOOUUSS NNEEWW FFEEAATTUURREESS
       This section describes miscellaneous window  manager  fea-
       tures which are not directly related to the virtual nature
       of oollvvwwmm..

       Upon receiving a USR1 signal, oollvvwwmm will execute a RESTART
       function just like the restart function available from the
       root menu.

       The root workspace will not be repainted on  exit  if  the
       PaintWorkspace resource is False.

       The  oollwwmm resource DefaultIconImage will now accept either
       an X11 Bitmap file, a version 2 or 3 XPM image file  or  a
       GIF  file.   If  you  use an image file, remember that the
       DefaultIconMask must still be a X11 Bitmap; generally  you
       will want to create a full mask in that case.

       The  oollwwmm  resource WorkspaceBitmap will accept X11 Bitmap
       files, version 2 or 3 XPM image files, or GIF files.   The
       MaxMapColors  resource  can  restrict the number of colors
       oollvvwwmm uses for each GIF file to help with  colormap  prob-
       lems, but in general, specifying more than 1 GIF file will
       lead to colormap problems.




                         30 November 1992                       6





OLVWM(1)                                                 OLVWM(1)


RREESSOOUURRCCEESS TTOO CCOONNTTRROOLL TTHHEE VVIIRRTTUUAALL DDEESSKKTTOOPP
       See the man page for oollwwmm for a  complete  description  of
       resources.   All  resources  of class OpenWindows and olwm
       described there are supported by oollvvwwmm..  In addition,  for
       oollvvwwmm  only,  resources of instance "olvwm" are also read.
       You   can   thus   name   the   following   resources   as
       olvwm.<resource>,    olwm.<resource>,   or   as   OpenWin-
       dows.<resource> depending on your naming preference.

       Resources marked with an * may be specified on  a  screen-
       by-screen    basis;    e.g.   olvwm.screen0.resource   and
       olvwm.screen1.resource, following the pattern in oollwwmm..

       VViirrttuuaallDDeesskkttoopp _(_s_t_r_i_n_g_)**
              Specifies the size of the virtual desktop.  You can
              specify  this  in  terms of screen sizes, so that a
              virtual desktop of 3 screens across and  2  screens
              high  would appear as the string 3x2.  You may also
              specify this in terms of absolute pixel sizes, e.g.
              3800x1800,  as  long  as  the pixel size is greater
              than the size of your framebuffer.  _D_e_f_a_u_l_t  _v_a_l_u_e_:
              _3_x_2


       PPaannnneerrSSccaallee _(_i_n_t_)**
              Sets the scale in which the virtual desktop manager
              will be drawn.  _D_e_f_a_u_l_t _v_a_l_u_e_: _1_5_.


       VViirrttuuaallGGeeoommeettrryy _(_s_t_r_i_n_g_)**
              Specifies the geometry string of the  desktop  man-
              ager  in  standard X11 format (wxh+x+y).  The width
              and height, if specified, are ignored,  but  the  x
              and  y  can be used to specify the initial location
              of the desktop manager.  _D_e_f_a_u_l_t _v_a_l_u_e_: _+_0_+_0

       VViirrttuuaallIIccoonnGGeeoommeettrryy _(_s_t_r_i_n_g_)**
              Specifies the geometry string of the  desktop  man-
              ager  icon  in  standard X11 format (wxh+x+y).  The
              width and height are ignored, but the x and  y  can
              be  used  to  specify  the  initial location of the
              desktop manager icon.  _D_e_f_a_u_l_t _v_a_l_u_e_: _+_0_+_0


       VViirrttuuaallIIccoonniicc _(_B_o_o_l_e_a_n_)**
              If true, the virtual  desk  manager  will  come  up
              iconic.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _F_a_l_s_e


       AAlllloowwMMoovveeIInnttooDDeesskkttoopp _(_B_o_o_l_e_a_n_)
              If true, allows windows to be moved from the screen
              into the VDM and vice versa.  Otherwise,  moving  a
              window  on  the  screen  will  only  allow it to be
              placed in the visible screen; and moving  a  window



                         30 November 1992                       7





OLVWM(1)                                                 OLVWM(1)


              in  the  desktop manager will not let it be dragged
              onto the screen.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _T_r_u_e


       AAlllloowwAArrrroowwIInnRRoooott _(_B_o_o_l_e_a_n_)
              If true, then key events in the  root  window  will
              affect  the  VDM  and  thus  move the view into the
              desktop (if the appropriate key is pressed).   Oth-
              erwise,  only key events when the VDM has the input
              event focus will have an  effect.   _D_e_f_a_u_l_t  _v_a_l_u_e_:
              _T_r_u_e


       VViirrttuuaallFFoonntt _(_s_t_r_i_n_g_)**
              The  font  name  used  to  display title of windows
              within the virtual desktop manager.  _D_e_f_a_u_l_t _v_a_l_u_e_:
              _5_x_8


       VViirrttuuaallFFoonnttCCoolloorr _(_c_o_l_o_r _s_p_e_c_i_f_i_c_a_t_i_o_n_)**
              The  color  of the title within the virtual windows
              of the virtual  desktop  manager.   _D_e_f_a_u_l_t  _v_a_l_u_e_:
              _B_l_a_c_k


       VViirrttuuaallBBaacckkggrroouunnddCCoolloorr _(_c_o_l_o_r _s_p_e_c_i_f_i_c_a_t_i_o_n_)**
              The  color of the background of the virtual desktop
              manager.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _B_a_s_e_d _o_n _t_h_e _f_r_a_m_e  _c_o_l_o_r
              _o_f _y_o_u_r _d_e_s_k_t_o_p_.


       VViirrttuuaallFFoorreeggrroouunnddCCoolloorr _(_c_o_l_o_r _s_p_e_c_i_f_i_c_a_t_i_o_n_)**
              The  color  of  the  virtual windows in the virtual
              desktop manager.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _T_h_e  _f_r_a_m_e  _c_o_l_o_r
              _o_f _y_o_u_r _d_e_s_k_t_o_p_.


       VViirrttuuaallBBaacckkggrroouunnddMMaapp _(_P_i_x_m_a_p _f_i_l_e_n_a_m_e_)**
              The  name  of  a file containing a pixmap to use as
              the background  of  the  virtual  desktop  manager.
              This  will be drawn with the VirtualBackgroundColor
              as its background color and the  VirtualPixmapColor
              as its foreground color.  The file can be either an
              X bitmap file, a Z Pixmap  file,  or  a  Gif  file.
              Color  reduction can be carried out on these images
              by specifying the MaxMapColors  resource.   If  the
              file  is NOT a bitmap file the virtual desktop win-
              dow title is changed to be the filename part of the
              file and the Maximum Size window hint is set to the
              dimensions of the pixmap.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _u_n_u_s_e_d


       MMaaxxMMaappCCoolloorrss _(_n_u_m_b_e_r _o_f _c_o_l_o_r_s_)**
              This integer value specifies the maximum number  of



                         30 November 1992                       8





OLVWM(1)                                                 OLVWM(1)


              colors  that  olvwm  will  try and allocate for the
              VirtualBackgroundMap.  If the actual number of col-
              ors  in  the  pixmap  is  greater,  the  colors are
              remapped to this number using a 'best match'  algo-
              rithm (Heckbert Median Cut).  _D_e_f_a_u_l_t _v_a_l_u_e_: _2_0_0


       VViirrttuuaallPPiixxmmaappCCoolloorr _(_c_o_l_o_r _s_p_e_c_i_f_i_c_a_t_i_o_n_)**
              See  above; this value only applies when the Virtu-
              alBackgroundMap has depth 1.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _w_h_i_t_e


       VViirrttuuaallSSttiicckkyy _(_l_i_s_t _o_f _s_t_r_i_n_g_s_)
              The  list  of  windows  which  should  be sticky by
              default.  Like the olwm MinimalDecor,  this  should
              be  the  list  windows  which should be sticky when
              they are created.  The matching of these strings is
              done  by  the  first  word  of the window's WM_NAME
              (string in its  title  bar),  or  by  its  WM_CLASS
              class/instance variables.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _N_u_l_l


       RReellaattiivveePPoossiittiioonn _(_B_o_o_l_e_a_n_)
              If  true,  then  user-specified window co-ordinates
              are assumed to be relative to the current view into
              the  desktop;  otherwise  they  are  absolute  with
              respect to the desktop.  Setting to true  will  not
              allow  you to bring up windows outside your current
              view (unless you specify  very  large  or  negative
              numbers), and setting to false will break some pro-
              grams which save window states in  an  odd  manner.
              You can defeat this variable on startup of applica-
              tions by specifying which screen they should  start
              on; see _o_l_v_w_m_r_c_(_5_)_.  _D_e_f_a_u_l_t _v_a_l_u_e_: _T_r_u_e


       VViirrttuuaallGGrriidd _(_V_i_s_i_b_l_e_, _I_n_v_i_s_i_b_l_e_, _o_r _N_o_n_e_)**
              This controls two aspects of the VDM:  If it's vis-
              ible or invisible, the grid is on  (but  it's  only
              drawn  if it's visible).  If it's None, the grid is
              off.  If the grid  is  on,  the  VDM  may  only  be
              resized in logical screen-sized increments.  Other-
              wise, it may resized to arbitrary  sizes.   If  the
              grid  is  on,  SELECT/dragging the mouse within the
              VDM will constrain  the  move  to  logical  screens
              (unless  the CTRL button is held down); if the grid
              is off,  moving  the  visible  screen  region  with
              SELECT/drag  will be unconstrained (unless the CTRL
              button is held down).  _D_e_f_a_u_l_t _v_a_l_u_e_: _V_i_s_i_b_l_e

       VViirrttuuaallGGrriiddCCoolloorr _(_c_o_l_o_r _s_p_e_c_i_f_i_c_a_t_i_o_n_)
              If the VirtualGrid is Visible, it will be drawn  in
              this  color.   _D_e_f_a_u_l_t _v_a_l_u_e_:  _S_a_m_e _a_s _V_i_r_t_u_a_l_F_o_n_t_-
              _C_o_l_o_r



                         30 November 1992                       9





OLVWM(1)                                                 OLVWM(1)


       VViirrttuuaallRRaaiisseeVVDDMM _(_B_o_o_l_e_a_n_)
              If this is true, the VDM will always appear on  top
              of  the  stacking  order,  never  to be obscured by
              other windows.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _F_a_l_s_e


       VViirrttuuaallMMoovveeGGrroouupp _(_B_o_o_l_e_a_n_)
              If true, then whenever a window is moved to a  dif-
              ferent  logical  screen, then all followers of that
              window will also be moved a similar  amount:   this
              affects the window's icon and popups.  In this way,
              icons and popups will always  appear  on  the  same
              logical  screen  as their corresponding base frame.
              Otherwise, only the selected windows will move when
              you  move  them, and related windows could possibly
              appear on different logical screens in the desktop.
              The trigger for changing between logical screens is
              the window's mid-point; all windows  in  the  group
              will  appear on the same logical screen as the mid-
              point of the moved window.  _D_e_f_a_u_l_t _v_a_l_u_e_: _T_r_u_e


       UUsseeIImmaaggeess _(_U_s_e_N_o_n_e_, _U_s_e_V_D_M_, _o_r _U_s_e_A_l_l_)
              If set to UseNone, then window frame menus and  the
              VDM  motion  menu  will  be  text-based.  If set to
              UseVDM, the window frame menus will be  text-based,
              but the VDM motion menu will be a graphic menu.  If
              set to UseAll, the window frame menus will be text-
              and  image-based,  and  the VDM motion menu will be
              image-based.  _D_e_f_a_u_l_t _v_a_l_u_e_: _U_s_e_V_D_M


       SSoorrttMMeennuuTTyyppee _(_E_n_u_m_)
              This option controls how windows appearing  in  the
              WINMENU command are sorted.  If it is set to Alpha-
              betic, then windows will be  sorted  alphabetically
              by  name.   If  it is set to Youngest, then windows
              will be sorted from youngest  to  oldest.   _D_e_f_a_u_l_t
              _v_a_l_u_e_:  _A_l_p_h_a_b_e_t_i_c


       VViirrttuuaallDDrraawwSSttiicckkyy _(_T_r_u_e_)
              If  this  option  is  set, sticky windows will have
              their virtual windows drawn in the  VDM  just  like
              any other window.  If it is false, then sticky win-
              dows will not have their virtual windows  drawn  in
              the VDM.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _T_r_u_e


       SSttiicckkyyIIccoonnss _(_B_o_o_l_e_a_n_)
              When  set,  StickyIcons  will  cause all non-sticky
              windows to  become  sticky  when  iconified.   This
              makes  all icons visible on every screen.  All win-
              dows  made  sticky  when  iconified   will   become



                         30 November 1992                      10





OLVWM(1)                                                 OLVWM(1)


              unsticky when reopened.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _F_a_l_s_e


       SSttiicckkyyIIccoonnSSccrreeeenn _(_B_o_o_l_e_a_n_)
              StickyIconScreen,  when  used  in  conjunction with
              StickyIcons, will cause all iconified windows  that
              are  made  sticky  to  remember the screen on which
              they were closed.  When one  of  these  windows  is
              reopened the user will be warped back to the screen
              from which the window was closed and the window  is
              made unsticky.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _F_a_l_s_e


       FFrreeeeIIccoonnSSlloottss _(_B_o_o_l_e_a_n_)
              By  default,  when  an icon is created, it has that
              icon position forever (unless  it  is  moved  manu-
              ally), even when the window is not iconified.  This
              results in potentially large gaps in the icon  area
              when  lots of little programs are run (clocks, load
              averages, etc) which are  rarely  iconified.   When
              this  resource  is  true and a window is opened, if
              the icon position what not set manually  the  slots
              are  freed.   The  effect is that iconified windows
              pack together in the corner specified by IconPlace-
              ment.   If  you move an icon manually, it maintains
              that position.  _D_e_f_a_u_l_t _v_a_l_u_e_: _F_a_l_s_e


       UUnniiqquueeIIccoonnSSlloottss _(_B_o_o_l_e_a_n_)
              This resource, when set  to  true,  prevents  icons
              from  overlapping.   If  you move an icon into icon
              grid slot(s) occupied by other icons,  those  icons
              move.   If  those other icons were positioned manu-
              ally, they are no longer viewed as manually  placed
              (unless,  of course, they are subsequently manually
              placed) _D_e_f_a_u_l_t _v_a_l_u_e_:  _F_a_l_s_e


       IIccoonnGGrriiddHHeeiigghhtt _(_I_n_t_e_g_e_r_)
              IIccoonnGGrriiddWWiiddtthh _(_I_n_t_e_g_e_r_) Previously the size of  the
              icon  grid was fixed.  An icon takes up a number of
              grid slots, depending on it's size, and is  aligned
              with  the  lower left corner of its lower left grid
              slot.  Changing the size of the  grid  changes  how
              icons  arrange  themselves.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _1_3 _f_o_r
              _e_a_c_h

AADDDDIITTIIOONNAALL MMIISSCCEELLLLAANNEEOOUUSS RREESSOOUURRCCEESS
       These resources are not related specifically to  the  VDM,
       but are included as new features within oollvvwwmm..

       IInnppuuttFFooccuussCCoolloorr _(_c_o_l_o_r _s_p_e_c_i_f_i_c_a_t_i_o_n_)**
              Specifying  this  attribute means that the frame of
              the window which  currently  has  the  input  focus



                         30 November 1992                      11





OLVWM(1)                                                 OLVWM(1)


              should  be  drawn in the color specified instead of
              in the normal frame color.  The appearance  of  the
              title  bar (with lines or indentation, depending on
              your  input  focus  mode)  will  remain  unchanged.
              _D_e_f_a_u_l_t _v_a_l_u_e_:  _N_o_n_e _(_U_s_e _s_t_a_n_d_a_r_d _f_r_a_m_e _c_o_l_o_r_)


       RRaaiisseeOOnnMMoovvee _(_B_o_o_l_e_a_n_)
              If  this  is True, then whenever a window is moved,
              it is also raised to the top of the stacking order.
              _D_e_f_a_u_l_t _v_a_l_u_e_:  _F_a_l_s_e

       AAuuttooSShhoowwRRoooottMMeennuu _(_B_o_o_l_e_a_n_)
              If true, the root menu will come up pinned at start
              up.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _F_a_l_s_e


       AAuuttooRRoooottMMeennuuXX _(_i_n_t_)
              If AutoShowRootMenu is true, this is the X location
              where the menu will come up.  _D_e_f_a_u_l_t _v_a_l_u_e_: _0


       AAuuttooRRoooottMMeennuuYY _(_i_n_t_)
              If AutoShowRootMenu is true, this is the Y location
              where the menu will come up.  _D_e_f_a_u_l_t _v_a_l_u_e_: _0


       FFuullllSSiizzeeZZoooommXX _(_B_o_o_l_e_a_n_)
              If this is set to True, then  selecting  Full  Size
              from  the window menu will zoom the window horizon-
              tally as well as vertically.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _F_a_l_s_e


       NNooDDeeccoorr _(_l_i_s_t _o_f _s_t_r_i_n_g_s_)
              Like  Minimal Decor, this attribute takes a list of
              windows on which to operate; these  windows  should
              not be decorated at all.  There is a slight differ-
              ence between this attribute and setting  the  over-
              ride_redirect  flag on a window:  the latter causes
              _o_l_v_w_m to ignore completely the window,  while  this
              attribute  does  not  adorn the window or give it a
              menu, but still allows it to be manipulated via the
              WINMENU  and Hot Key actions.  Normal olwm keys are
              ignored by these windows, however.


       RReessiizzeeMMoovveeGGeeoommeettrryy _(_X _g_e_o_m_e_t_r_y _s_t_r_i_n_g _o_r _t_h_e _w_o_r_d _c_e_n_t_e_r_)
              This resource only has an effect if  ShowMoveGeome-
              try and/or ShowResizeGeometry is set to True.  This
              string specifies the location of the  geometry  box
              when  it  is  displayed; it should be given as an X
              geometry string (wxh+x+y) although  the  width  and
              height  are  ignored if specified.  If you want the
              box to  be  centered  regardless  of  your  monitor



                         30 November 1992                      12





OLVWM(1)                                                 OLVWM(1)


              resolution,  use  the  string  center  instead of a
              geometry string.  _D_e_f_a_u_l_t _v_a_l_u_e_: _+_0_+_0


       PPaaiinnttWWoorrkkssppaaccee _(_B_o_o_l_e_a_n_)
              If true, oollvvwwmm will paint the root  workspace  with
              the  color  of  the  WorkspaceColor  resource.   If
              False,  oollvvwwmm  will  not  change  root   workspace.
              _D_e_f_a_u_l_t _v_a_l_u_e_:  _T_r_u_e


       PPooiinntteerrWWoorrkkssppaaccee _(_B_o_o_l_e_a_n_)
              If  true,  oollvvwwmm  will change the cursor when it is
              over window frames and other  olvwm-owned  windows.
              If  False,  oollvvwwmm will not change the cursor.  This
              is useful in conjunction with _x_s_e_t_r_o_o_t  _-_c_u_r_s_o_r  if
              you  want  the  specified  cursor to be active over
              frames.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _T_r_u_e


       SSaavveeWWoorrkkssppaacceeCCmmdd _(_S_t_r_i_n_g_)
              If set, this is the command that will be  run  when
              the SAVE_WORKSPACE command is selected off the main
              menu.   Otherwise,  the  default  command  is  run.
              _D_e_f_a_u_l_t  _v_a_l_u_e_: _o_w_p_l_a_c_e_s _-_s_i_l_e_n_t _-_m_u_l_t_i _-_s_c_r_i_p_t _-_t_w
              _-_o_u_t_p_u_t _$_H_O_M_E_/_._o_p_e_n_w_i_n_-_i_n_i_t


       SSyynntthheettiiccEEvveennttss _(_b_o_o_l_e_a_n_)
              This resource controls the  delivery  of  synthetic
              events.    This  resource  is  only  valid  if  the
              -allowSynthetic argument  was  given  to  olvwm  on
              startup;  if  that  argument  was  present and this
              resource is set to True, then  olvwm  will  process
              synthetic  events.  Otherwise, synthetic events are
              ignored.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _F_a_l_s_e


       PPaarreennttSSccrreeeennPPooppuupp _(_B_o_o_l_e_a_n_)
              If true the popups are placed on the same screen as
              their  parent  even  if the parent is not currently
              visible. Otherwise popups always appear on the cur-
              rent  screen.   A  suggested method is to place the
              following lines at the end of  your  .xinitrc  file
              (before the final wait command):
              xrdb -merge <<'EOF'
              olvwm.ParentScreenPopup: False
              EOF
              In  this way, your session will initialize with all
              popups with their parents  but  subsequenct  popups
              will  appear on the current screen.  _D_e_f_a_u_l_t _v_a_l_u_e_:
              _T_r_u_e





                         30 November 1992                      13





OLVWM(1)                                                 OLVWM(1)


CCUURRSSOORR RREESSOOUURRCCEESS
       These set of resources change the default cursors the win-
       dow  manager  gives  certain  classes  it creates, such as
       resize buttons, close buttons, frames,  icons,  etc.   The
       <cursor string> is described as follows:

              <cursor  font  name>  <cursor  index> [<fore color>
              [<back color>]]

       where options enclosed in []'s are optional.  If the <back
       color> is left out, the default back color (which, in this
       version of OLVWM, is white) is used.  If the <fore  color>
       is left out, then the default cursor (foreground) color is
       used, which is black by default, unless set by the cursor-
       Color resource (see below).  Note that to supply the <back
       color>, you must supply the <fore color>.   Also,  if  the
       color  name  you  provide is invalid, OLVWM will return to
       the default colors, as described above.  As per usual with
       resources,  no  errors  are  reported.  The cursor font is
       assumed to be encoded so that the valid mask for the  cur-
       sor  follows  the  cursor  index  in the font; this is the
       usual behavior for font files.

       There is an alternate form of <cursor string>:

              <cursor name> [<fore color> [<back color>]]

       where <cursor name> is either the name of the X cursor  as
       defined in cursorfont.h (eg: XC_X_cursor, XC_cross, etc.),
       or the name of an OPEN LOOK cursor as  defined  in  olcur-
       sor.h (e.g.: OLC_basic, OLC_busy).

       The valid <cursor>s are:

       CCuurrssoorrBBaassiicc
              Specify  the  root  window  cursor.  _D_e_f_a_u_l_t_: _B_a_s_i_c
              _P_o_i_n_t_e_r _(_a_r_r_o_w _p_o_i_n_t_i_n_g _N_W_)


       CCuurrssoorrMMoovvee
              Specify  the  cursor  when  a  window   is   moved.
              _D_e_f_a_u_l_t_: _B_a_s_i_c _P_o_i_n_t_e_r


       CCuurrssoorrBBuussyy
              Specify  the  cursor  for  when a window is "busy".
              _D_e_f_a_u_l_t_: _B_u_s_y _P_o_i_n_t_e_r _(_p_o_c_k_e_t _w_a_t_c_h_)


       CCuurrssoorrIIccoonn
              Specify cursor  for  the  icon  windows.   _D_e_f_a_u_l_t_:
              _B_a_s_i_c _P_o_i_n_t_e_r





                         30 November 1992                      14





OLVWM(1)                                                 OLVWM(1)


       CCuurrssoorrRReessiizzee
              Specify cursor for the resize buttons and when win-
              dow  is  being  "rubber-band"  resized.    _D_e_f_a_u_l_t_:
              _B_u_l_l_'_s _E_y_e


       CCuurrssoorrMMeennuu
              Specify  cursor  for  menu windows.  _D_e_f_a_u_l_t_: _B_a_s_i_c
              _P_o_i_n_t_e_r


       CCuurrssoorrTTaarrggeett
              Specify cursor for window frames.   _D_e_f_a_u_l_t_:  _B_a_s_i_c
              _P_o_i_n_t_e_r


       CCuurrssoorrCClloosseeUUpp
              Specify  cursor  for close button, when NOT pressed
              (the button is UP).  _D_e_f_a_u_l_t_: _B_a_s_i_c _P_o_i_n_t_e_r


       CCuurrssoorrCClloosseeDDoowwnn
              Specify cursor for close button, when pressed  (the
              button is DOWN).  _D_e_f_a_u_l_t_: _B_a_s_i_c _P_o_i_n_t_e_r


       CCuurrssoorrSSppeecciiaallRReessiizzee _<_B_o_o_l_> _[_<_f_g _c_o_r_n_e_r_> _<_b_g _c_o_r_n_e_r_> _<_f_g
              _m_o_v_e_> _<_b_g _m_o_v_e_>_]
              This  is  a  special Cursor resource which turns on
              specialized resize cursors.  If  <Bool>  is  false,
              then  the  cursor for the resize button decorations
              and the "rubber-band" window are all  specified  by
              "Cursor.Resize"  as  discussed above.  If <Bool> is
              true, then the following modifications  are  turned
              on:  When  the  cursor  is within the resize button
              decorations on a frame, the cursor becomes a corner
              of the appropriate orientation.  When the button is
              selected and  the  window  is  being  "rubber-band"
              resized,  the cursor becomes the appropriate corner
              with an appropriately oriented arrow.   The  colors
              that  you  can  specify  are  limited to prevent an
              obscene number of resources.  You can  specify  the
              colors  (foreground  and background) of the cursors
              when placed in the resize  decoration  without  the
              mouse  button  down (described above as <fg corner>
              and <bg corner>), and you can specify the colors of
              the  cursors when the mouse button is down the win-
              dow is being resized (described above as <fg  move>
              and  <bg move>).  Note that you must specify either
              all four colors or no colors.

AADDDDIITTIIOONNAALL KKEEYY BBIINNDDIINNGGSS
       Like oollwwmm,, oollvvwwmm uses key bindings  for  certain  actions:
       all actions specified in oollwwmm as well as an additional set



                         30 November 1992                      15





OLVWM(1)                                                 OLVWM(1)


       of actions to control the view into the desktop.   In  the
       following  list,  the  key mentioned in parentheses is the
       default binding for the given action; items marked with  a
       plus  sign  '+'  are  items  which exist in oollwwmm;; they are
       included here to describe what action they have when  they
       occur  on  the  root  window or within the VDM.  All other
       bindings are specific to oollvvwwmm;; those items  marked   with
       an  asterisk  '*'  involve keyboard grabs.  Bindings which
       involve a keyboard  grab  (those  with  an  asterisk)  are
       always  active, no matter where the input focus is; other-
       wise the action occurs only if the root window or the  VDM
       has the input focus.

       It's  possible  to  change each of these bindings, see the
       oollwwmm man page for more details.

       GrabVirtualKeys " (Boolean)"
              This  resource  controls  whether  the  keys  below
              marked  as  involving  grabs will be active or not.
              If this resource is set to False, then none of  the
              bindings marked below with an asterisk will ever be
              active.  _D_e_f_a_u_l_t _v_a_l_u_e_:  _T_r_u_e

       Up  _(_u_p_-_a_r_r_o_w_) +
              Move the view up one screen.

       JumpUp _(_u_p_-_a_r_r_o_w_+_C_t_r_l_) +
              Move the view up ten screens.

       HalfUp _(_u_p_-_a_r_r_o_w_+_S_h_i_f_t_)
              Move the view up one-half screen.

       VirtualUp  _(_u_p_-_a_r_r_o_w_+_M_e_t_a_) *
              Move the view up one screen.

       VirtualJumpUp _(_u_p_-_a_r_r_o_w_+_C_t_r_l_+_M_e_t_a_) *
              Move the view up ten screens.

       VirtualHalfUp _(_u_p_-_a_r_r_o_w_+_S_h_i_f_t_+_M_e_t_a_) *
              Move the view up one-half screen.


       Down _(_d_o_w_n_-_a_r_r_o_w_) +
              Move the view down one screen.

       JumpDown _(_d_o_w_n_-_a_r_r_o_w_+_C_t_r_l_) +
              Move the view down ten screens.

       HalfDown _(_d_o_w_n_-_a_r_r_o_w_+_S_h_i_f_t_)
              Move the view down one-half screen.

       VirtualDown  _(_d_o_w_n_-_a_r_r_o_w_+_M_e_t_a_) *
              Move the view down one screen.




                         30 November 1992                      16





OLVWM(1)                                                 OLVWM(1)


       VirtualJumpDown _(_d_o_w_n_-_a_r_r_o_w_+_C_t_r_l_+_M_e_t_a_) *
              Move the view down ten screens.

       VirtualHalfDown _(_d_o_w_n_-_a_r_r_o_w_+_S_h_i_f_t_+_M_e_t_a_) *
              Move the view down one-half screen.


       Left _(_l_e_f_t_-_a_r_r_o_w_) +
              Move the view left one screen.

       JumpLeft _(_l_e_f_t_-_a_r_r_o_w_+_C_t_r_l_) +
              Move the view left ten screens.

       HalfLeft _(_l_e_f_t_-_a_r_r_o_w_+_S_h_i_f_t_)
              Move the view left one-half screen.

       VirtualLeft  _(_l_e_f_t_-_a_r_r_o_w_+_M_e_t_a_) *
              Move the view left one screen.

       VirtualJumpLeft _(_l_e_f_t_-_a_r_r_o_w_+_C_t_r_l_+_M_e_t_a_) *
              Move the view left ten screens.

       VirtualHalfLeft _(_l_e_f_t_-_a_r_r_o_w_+_S_h_i_f_t_+_M_e_t_a_) *
              Move the view left one-half screen.


       Right _(_r_i_g_h_t_-_a_r_r_o_w_) +
              Move the view right one screen.

       JumpRight _(_r_i_g_h_t_-_a_r_r_o_w_+_C_t_r_l_) +
              Move the view right ten screens.

       HalfRight _(_r_i_g_h_t_-_a_r_r_o_w_+_S_h_i_f_t_)
              Move the view right one-half screen.

       VirtualRight  _(_r_i_g_h_t_-_a_r_r_o_w_+_M_e_t_a_) *
              Move the view right one screen.

       VirtualJumpRight _(_r_i_g_h_t_-_a_r_r_o_w_+_C_t_r_l_+_M_e_t_a_) *
              Move the view right ten screens.

       VirtualHalfRight _(_r_i_g_h_t_-_a_r_r_o_w_+_S_h_i_f_t_+_M_e_t_a_) *
              Move the view right one-half screen.


       GoHome _(_R_1_1_)
              Move the view to the upper left corner.

       VirtualHome _(_R_1_1_+_M_e_t_a_) *
              Move the view to the upper left corner.


       UpLeft _(_H_o_m_e_, _R_7_) +
              Move the view NorthWest one screen.



                         30 November 1992                      17





OLVWM(1)                                                 OLVWM(1)


       JumpUpLeft _(_R_7_+_C_t_r_l_) +
              Move the view NorthWest ten screens.

       HalfUpLeft _(_R_7_+_S_h_i_f_t_)
              Move the view NorthWest one-half screen.

       VirtualUpLeft _(_R_7_+_M_e_t_a_) *
              Move the view NorthWest one screen.

       VirtualJumpUpLeft _(_R_7_+_C_t_r_l_+_M_e_t_a_) *
              Move the view NorthWest ten screens.

       VirtualHalfUpLeft _(_R_7_+_S_h_i_f_t_+_M_e_t_a_) *
              Move the view NorthWest one-half screen.


       DownLeft _(_E_n_d_, _R_1_3_) +
              Move the view SouthWest one screen.

       JumpDownLeft _(_R_1_3_+_C_t_r_l_) +
              Move the view SouthWest ten screens.

       HalfDownLeft _(_R_1_3_+_S_h_i_f_t_)
              Move the view SouthWest one-half screen.

       VirtualDownLeft _(_R_1_3_+_M_e_t_a_) *
              Move the view SouthWest one screen.

       VirtualJumpDownLeft _(_R_1_3_+_C_t_r_l_+_M_e_t_a_) *
              Move the view SouthWest ten screens.

       VirtualHalfDownLeft _(_R_1_3_+_S_h_i_f_t_+_M_e_t_a_) *
              Move the view SouthWest one-half screen.


       UpRight _(_R_9_)
              Move the view NorthEast one screen.

       JumpUpRight _(_R_9_+_C_t_r_l_)
              Move the view NorthEast ten screens.

       HalfUpRight _(_R_9_+_S_h_i_f_t_)
              Move the view NorthEast one-half screen.

       VirtualUpRight _(_R_9_+_M_e_t_a_) *
              Move the view NorthEast one screen.

       VirtualJumpUpRight _(_R_9_+_C_t_r_l_+_M_e_t_a_) *
              Move the view NorthEast ten screens.

       VirtualHalfUpRight _(_R_9_+_S_h_i_f_t_+_M_e_t_a_) *
              Move the view NorthEast one-half screen.





                         30 November 1992                      18





OLVWM(1)                                                 OLVWM(1)


       DownRight _(_R_1_5_, _P_g_D_n_)
              Move the view SouthEast one screen.

       JumpDownRight _(_R_1_5_+_C_t_r_l_)
              Move the view SouthEast ten screens.

       HalfDownRight _(_R_1_5_+_S_h_i_f_t_)
              Move the view SouthEast one-half screen.

       VirtualDownRight _(_R_1_5_+_M_e_t_a_) *
              Move the view SouthEast one screen.

       VirtualJumpDownRight _(_R_1_5_+_C_t_r_l_+_M_e_t_a_) *
              Move the view SouthEast ten screens.

       VirtualHalfDownRight _(_R_1_5_+_S_h_i_f_t_+_M_e_t_a_) *
              Move the view SouthEast one-half screen.


       Screen1   _(_F_1_)
              Move to the first logical screen in the desktop.

       VirtualScreen1 _(_F_1_+_M_e_t_a_) *
              Move to the first logical screen in the desktop.

       Screen2   _(_F_2_)
              Move to the second logical screen in the desktop.

       VirtualScreen2 _(_F_2_+_M_e_t_a_) *
              Move to the second logical screen in the desktop.

       Screen3   _(_F_3_)
              Move to the third logical screen in the desktop.

       VirtualScreen3 _(_F_3_+_M_e_t_a_) *
              Move to the third logical screen in the desktop.

       Screen4   _(_F_4_)
              Move to the fourth logical screen in the desktop.

       VirtualScreen4 _(_F_4_+_M_e_t_a_) *
              Move to the fourth logical screen in the desktop.

       Screen5   _(_F_5_)
              Move to the fifth logical screen in the desktop.

       VirtualScreen5 _(_F_5_+_M_e_t_a_) *
              Move to the fifth logical screen in the desktop.

       Screen6   _(_F_6_)
              Move to the sixth logical screen in the desktop.

       VirtualScreen6 _(_F_6_+_M_e_t_a_) *
              Move to the sixth logical screen in the desktop.



                         30 November 1992                      19





OLVWM(1)                                                 OLVWM(1)


       Screen7   _(_F_7_)
              Move to the seventh logical screen in the  desktop.

       VirtualScreen7 _(_F_7_+_M_e_t_a_) *
              Move  to the seventh logical screen in the desktop.

       Screen8   _(_F_8_)
              Move to the eighth logical screen in the desktop.

       VirtualScreen8 _(_F_8_+_M_e_t_a_) *
              Move to the eighth logical screen in the desktop.

       Screen9   _(_F_9_)
              Move to the ninth logical screen in the desktop.

       VirtualScreen9 _(_F_9_+_M_e_t_a_) *
              Move to the ninth logical screen in the desktop.

       Screen10 _(_F_1_0_)
              Move to the tenth logical screen in the desktop.

       VirtualScreen10     _(_F_1_0_+_M_e_t_a_) *
              Move to the tenth logical screen in the desktop.

       SaveWorkspace _(_F_1_0_+_M_e_t_a_+_A_l_t_+_S_h_i_f_t_) *
              Execute a Save Workspace command

       ToggleDragWindows _(_F_6_+_A_l_t_+_S_h_i_f_t_) *
              Toggles the setting of the DragWindow resource

       ToggleMoveGroups _(_g_+_A_l_t_) *
              Toggles  the  setting   of   the   VirtualMoveGroup
              resource

       ToggleSizeFullZoomX _(_F_3_+_A_l_t_+_S_h_i_f_t_) *
              Toggles the setting of the FullSizeZoomX resource

       ToggleSticky _(_s_+_A_l_t_) *
              Toggles  the  sticky state of the window with input
              focus.

AADDVVAANNCCEEDD UUSSAAGGEE
       _o_l_v_w_m will read a resource file ($HOME/.olvwmrc) for  spe-
       cial  customizations.  These customizations allow the fol-
       lowing:

       HOT KEYS
              You can specify that when a certain key  (or,  more
              likely,  key  in  combination  with  modifiers)  is
              pressed that certain actions  are  performed:   you
              can  warp to a particular application, open, raise,
              or close applications,  execute  applications,  and
              quit applications.




                         30 November 1992                      20





OLVWM(1)                                                 OLVWM(1)


       SCREEN BINDINGS
              You  can  specify  that  certain  applications will
              always start on a particular logical screen.

       MENU OPTIONS
              You can alter the behaviour of  WINMENU  selections
              on a particular window.

       Please see _o_l_v_w_m_r_c_(_5_) for details of these options.

CCOOPPYYRRIIGGHHTTSS
       The  X  Window  system is a trademark of the Massachusetts
       Institute of Technology.
       OPEN LOOK is a trademark of AT&T.
       OpenWindows is a trademark of Sun Microsystems, Inc.
       Portions (c) Copyright 1989-1991  Sun  Microsystems,  Inc.
       Sun  design  patents pending in the U.S. and foreign coun-
       tries. OPEN LOOK is a trademark of AT&T. Used  by  written
       permission of the owners.
       Portions (c) Copyright Bigelow & Holmes 1986, 1985. Lucida
       is a registered trademark of Bigelow & Holmes.  Permission
       to  use  the  Lucida  trademark  is hereby granted only in
       association with the images and fonts  described  in  this
       file.
       Portions may be (c) 1990 Solbourne Computers.
       Portions  not  covered  under the above copyrights are (c)
       1991 Scott Oaks.
       Please see the LEGAL_NOTICES file for full  disclosure  of
       copyright information.

CCRREEDDIITTSS
       Most  of  the  code in this application comes from release
       3.0 of olwm, authored at Sun Microsystems and  distributed
       in the contrib section of MIT's X11R5.  [Note that nothing
       in xview3 or release 3.0 requires R5;  they  will  happily
       run  on R4 and exist in R5 simply because that's when they
       were released.]
       The virtual desktop section was authored  by  Scott  Oaks,
       who is responsible for its maintenance.  Please direct any
       comments to scott.oaks@sun.com.  This  code  is  not  sup-
       ported by Sun Microsystems in any way.
       Notwithstanding  the above, the staff at Sun Microsystems,
       and especially Stuart Marks, deserve  credit  as  original
       author  of  olwm  for  most  of the work contained in this
       application.
       Innumerable people have made  fixes  and  enhancements  to
       olvwm, and I'm very bad at listing them all (but drop me a
       note and I'll do better in a future release  :-)).   Thus,
       the following list is by no means comprehensive, but these
       people have all provided something to olvwm:  Tor Arntsen,
       Paul  Andrews,  Rich Berlin, David Boyd, David Chase, John
       Durand, Alexander Dupuy, Paul Eggert,  Eric  Fifer,  Duane
       Gibson,  Jimmy Guggemos, Orest Jarosiewicz, Russel Kegley,
       Murray  Laing,  Tom  McConnell,  Blair  MacIntyre,   Chuck



                         30 November 1992                      21





OLVWM(1)                                                 OLVWM(1)


       Musciano, Matthias Pfuetzner, David Plotkin, Harry Protoo-
       lis, Nir  Samburski,  Andreas  Stolcke,  Hinrich  Tobaben,
       Larry Virden, Ken West, and Ron Winacott.






















































                         30 November 1992                      22


