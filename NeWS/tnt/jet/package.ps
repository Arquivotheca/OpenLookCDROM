% @(#)package.ps	1.29 91/09/14

%
% Copyright (c) 1991 by Sun Microsystems, Inc.
%
%
% This file is a product of Sun Microsystems, Inc. and is provided for
% unrestricted use provided that this legend is included on all tape
% media and as a part of the software program in whole or part.  Users
% may copy or modify this file without charge, but are not authorized to
% license or distribute it to anyone else except as part of a product
% or program developed by the user.
% 
% THIS FILE IS PROVIDED AS IS WITH NO WARRANTIES OF ANY KIND INCLUDING THE
% WARRANTIES OF DESIGN, MERCHANTIBILITY AND FITNESS FOR A PARTICULAR
% PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE OR TRADE PRACTICE.
% 
% This file is provided with no support and without any obligation on the
% part of Sun Microsystems, Inc. to assist in its use, correction,
% modification or enhancement.
% 
% SUN MICROSYSTEMS, INC. SHALL HAVE NO LIABILITY WITH RESPECT TO THE
% INFRINGEMENT OF COPYRIGHTS, TRADE SECRETS OR ANY PATENTS BY THIS FILE
% OR ANY PART THEREOF.
% 
% In no event will Sun Microsystems, Inc. be liable for any lost revenue
% or profits or other special, indirect and consequential damages, even
% if Sun has been advised of the possibility of such damages.
% 
% Sun Microsystems, Inc.
% 2550 Garcia Avenue
% Mountain View, California  94043

% Josh Siegel (siegel@sun.com)

/NeWS 3 0 knownpackage not {
    /NeWS 3 0 findpackage beginpackage
} if

/TNTCore 3 0 knownpackage not {
    /TNTCore 3 0 findpackage beginpackage
    /TNT 3 0 findpackage beginpackage
} if

/X11 3 0 knownpackage not {
    /X11 3 0 findpackage beginpackage
} if

true setpacking

/NeWSTerm-jet
dictbegin
    /PackageType 1 def
    /PackageName /NeWSTerm-jet def
    /MajorVersion 5 def
    /MinorVersion 1 def

    /shared_turd 10 dict def

    /mouse_magic true def

    shared_turd /cnt 0 put

    /NeWSTerm-startup-part1 {
	false setprintermatch

	shared_turd /cnt 2 copy get 1 add put

	currentprocess /ProcessName (jet io process ) 
	shared_turd /cnt get 3 string cvs append put 
	framebuffer setcanvas

	/can framebuffer /new ClassTermCanvas send def

	% ibeam cursor
        can /Cursor 152 152 /cursor findfont 12 scalefont newcursor put
    } def

    /NeWSTerm-startup-part2 {
	cols rows /set_cr can send

	/ForegroundColor can send 1 1 1 rgbcolor /setcolors can send

	/win can framebuffer /new TermBaseFrame send def 

	1 1 1 1 /setgaps win send

	{
	    ()
	    jetargs /console known {
		( -C) append
	    } if
	    jetargs /background known {
		( -b) append
	    } if
	    jetargs /utmp known {
		( -u) append
	    } if
	    jetargs /login known {
		( -l) append
	    } if

	    /label self send (jet term) ne {
		(-label ) append
		/label self send append
	    } if

	    /iconlabel self send (jet term) ne {
		(-icon_label ) append
		/iconlabel self send append
	    } if

	    jetargs /commands known {
		( ) append
		jetargs /commands get append
	    } if
	} /setclientargs win send

	/Footer? false /setattribute win send

	/about_can framebuffer /new AboutCanvas send def

	/about_win about_can framebuffer /new ClassPopupWindow send def

	about_win /addsubwindow win send

	(About Jet) /setlabel about_win send
	/Reshape? false /setattribute about_win send

	/slider framebuffer /new MyClassVScrollbar send def

	0 24 24 /setparameters slider send
	can /settarget slider send
	/update_view /setnotifier slider send
	/update_view /setpreviewer slider send
	999 /setvalue slider send

	sbar_side 0 eq {
	    /West slider /addclient win send
	} {
	    /East slider /addclient win send
	} ifelse

	(jet term) /setlabel win send
	(jet term) /seticonlabel win send


	{
	    /size eq {
		64 64
	    } {
		gsave
		    currentpoint translate 8 22 translate 48 34 scale
		    1 setgray
		    48 34 true [] {
			<
			007FFFFFFE00 00FFFFFFFF00 00FFFFFFFF00 00FFFFFFFF00
			00FFFFFFFF00 00FFFFFFFF00 00FFFFFFFF00 00FFFFFFFF00
			00FFFFFFFF00 00FFFFFFFF00 00FFFFFFFF00 00FFFFFFFF00
			00FFFFFFFF00 00FFFFFFFF00 00FFFFFFFF00 00FFFFFFFF00
			00FFFFFFFF00 00FFFFFFFF00 00FFFFFFFF00 00FFFFFFFF00
			00FFFFFFFF00 00FFFFFFFF00 007FFFFFFF00 003FFFFFFE00
			000000000000 000000000000 07FFFFFFFFE0 0FFFFFFFFFF0
			1FFFFFFFFFF8 3FFFFFFFFFFC 7FFFFFFFFFFE 7FFFFFFFFFFE
			7FFFFFFFFFFE 3FFFFFFFFFFC
			>
		    } imagemask
		    0 setgray
		    48 34 true [] {
			<
			007FFFFFFE00 008000000300 00BFFFFFFB00 00B555555B00
			00AAAAAAAB00 00B555555B00 00AAAAA02B00 00B555505B00
			00AAAAA02B00 00B555505B00 00AAAAA02B00 00B555555B00
			00AAAAAAAB00 00B555555B00 00AAAAAAAB00 00B555555B00
			00AAAAAAAB00 00B555555B00 00AAAAAAAB00 00B555555B00
			00BFFFFFFB00 008000000300 007FFFFFFF00 003FFFFFFE00
			000000000000 000000000000 07FFFFFFFFE0 080000000030
			115555555518 22AAAAAAAA8C 455555555546 400000000006
			7FFFFFFFFFFE 3FFFFFFFFFFC
			>
		    } imagemask
		grestore
	    } ifelse
	} /seticonimage win send

	/new ClassEventMgr send 
	/EventMgr exch def

	EventMgr /ProcessName (LEM for jet #) shared_turd /cnt get 3 string cvs append put
	EventMgr /activate win send

	mouse_magic {
	    /mouse_hidden_interest null rand 
	    dictbegin
		rand {
		    pop /show_cursor can send
		} def
	    dictend 
	    /new ClassInterest send def

	    mouse_hidden_interest /addclient EventMgr send
	} if


	/ApplicationProps {
	    pop 

	    /Busy /setvisualstate win send
	    /totop prop_popup send
	    /map prop_popup send
	    /Active /setvisualstate win send
	} /installmethod win send


	/place win send

	win_retained {
	    true /setdamageable can send
	    can /Retained true put
	} {
	    can /Retained false put
	} ifelse

	true /setmenuable can send

	/map win send

	can /Colormap get installcolormap

	can setcanvas
	/JetTextFont can send setfont
	newpath clipcanvas

	pause
	ready_tag tagprint flush

	{
	    currentfile cvx exec
	} can send
    } def

    /AboutCanvas ClassCanvas [] 
    classbegin
	/minsize {
	    400 300
	} def

	/firstline {
	    10 254 moveto
	} def

	/nextline {
	    currentpoint 20 sub exch pop 10 exch moveto
	} def

	/Paint {
	    3D? {
		.9 .8 .8 rgbcolor
	    } {
		2DBG
	    } ifelse 
	    FillCanvas

	    TextFont setfont
	    ForegroundColor setcolor

	    firstline (Jet - version 1.0) show
	    nextline (Copyright \(c\) 1991 Sun Microsystems, Inc.) show
	    nextline (All rights reserved.) show
	    nextline

	    nextline (Jet is a OPEN LOOK terminal emulator written using ) show
	    nextline (The NeWS Toolkit \(informally TNT\) for OpenWindows.) show
%	    nextline (It is a example of a complete TNT application for ) show
%	    nextline (the OpenWindows desktop) show
	} def
    classend 
    def

    /font_list [
	(10x20) (12x24) (12x24romankana) (5x8) (6x10) (6x12) (6x13)
	(6x13bold) (6x9) (7x13) (7x13bold) (7x14) (7x14romankana) (8x13) 
	(8x13bold) (8x16) (8x16romankana) (9x15) (9x15bold) 
	(Courier) (Courier-Bold) (Courier-BoldOblique) (Courier-Oblique)
	(LucidaSans-Typewriter) (LucidaSans-TypewriterBold) (Screen) 
	(Screen-Bold) (fixed)
    ] def

    /before { % point1 point2 => bool
	2 copy 1 get exch 1 get 2 copy eq {
	    pop pop 0 get exch 0 get le
	} {
	    ge 3 1 roll pop pop
	} ifelse
    } def

    /ClassTermCanvas [ClassTextCanvas ClassWireClient]
    [
	/Cols /Rows
	/JetTextFont 
	/TextWidth /TextHeight /TextDescent 
	/CurrentFont /SrcFont 
	/font_size /cur_sel /autoscale
	/cursor_hidden /saved_cursor
	/cursor_x /cursor_y /cursor_char
	/mouse_event /has_focus /local_deselect_tag
    ]
    classbegin
	/Menu {
	    /Grid framebuffer /new ClassMenu send 
	    [
		[(About jet...)
		    {
			pop
			/reshaped? about_win send not {
			    /place about_win send
			} if
			/pin about_win send
			/totop about_win send
			/map about_win send
		    }
		]
		[(Props...) {
		    pop /ApplicationProps win send
		}]
	    ] /setitemlist 2 index send

	    (Jet) /setlabel 2 index send

	    /Menu 1 index promote
	} def

	/cursor_enabled true def
	/Transparent false def
	/Mapped true def

	/BG {
	    /3D? self send {
		/BG super send
	    } {
		/2DBG self send
	    } ifelse
	} def

	/FG {
	    /3D? self send {
		/FG super send
	    } {
		/2DFG self send
	    } ifelse
	} def

	/new {
	    /new super send
	} def

	/destroy {
	    /destroy super send
	    self /drag_interest undef
	} def

	/set_deselect {
	    /local_deselect_tag exch def
	} def

	/DeSelect { % - => -
	    {
		local_deselect_tag tagprint
	    } /wire_Exec self send false eq {
		pop
	    } if
	} def

	/hide_cursor {
	    cursor_hidden true ne {
		/drag_interest
		can soften null 
		dictbegin
		    /MouseDragged {
			/Interest get /Canvas get
			/show_cursor exch send
		    } def
		dictend 
		/new ClassInterest send 
		dup /Priority 9999 put promote

		drag_interest /addclient /EventMgr self send send

		/cursor_hidden true def
		/saved_cursor Cursor promote
		/nouse /setcursor self send
	    } if
	    mouse_magic {
		/reset_mouse_event self send
	    } if
	} def

	/show_cursor {
	    cursor_hidden true eq {
		drag_interest /removeclient /EventMgr self send send
		/drag_interest unpromote

		mouse_magic {
		    mouse_event null ne {
			mouse_event recallevent
		    } if
		} if

		/cursor_hidden false def

		Cursor /Cursor saved_cursor def 
		pop
		/saved_cursor unpromote
	    } if
	} def

	mouse_magic {
	    /reset_mouse_event {
		mouse_event null eq {
		    /mouse_event createevent dup 
		    begin
			/Name mouse_hidden_interest /Name get {} forall pop def
			/Action mouse_hidden_interest /Action get def
		    end 
		    promote
		} if
		mouse_event recallevent
		mouse_event 
		begin
		    /TimeStamp currenttime [10 0] 2 array addtimeval def
		end
		mouse_event sendevent
	    } def
	} if

	false setprintermatch

	/to_cr { % event => x y
	    begin
		Canvas null ne { 
		    Canvas setcanvas 
		} if
		XLocation 2 sub TextWidth div cvi
		YLocation 2 sub TextHeight div cvi
	    end
	} def

	/to_xpos { % x => screen-x
	    TextWidth mul 2 add
	} def

	/to_ypos { % y => screen-y
	    TextHeight mul 2 add
	} def

	/set_cr { % cols rows => -
	    /Rows exch def
	    /Cols exch def
	} def

	/set_cols { % num => -
	    /Cols exch def
	} def

	/set_autoscale { % bool %  - => -
	    /autoscale exch def
	} def

	/reset_can {
	    can setcanvas
	    /JetTextFont can send setfont
	    newpath clipcanvas
	} def

	/set_tsize { % size => -
	    /font_size exch def
	    gsave
		/SrcFont CurrentFont findfont font_size scalefont 
		/ISOLatin1Encoding encodefont def
		/JetTextFont SrcFont def
		/TextWidth SrcFont setfont (W) stringwidth pop def

		/TextHeight SrcFont fontheight ceiling def
		/TextDescent SrcFont fontdescent ceiling def

		JetTextFont setfont

		text_size_tag tagprint 
		TextWidth cvr typedprint 
		TextHeight cvr typedprint 
		TextDescent cvr typedprint 
		flush
	    grestore
	} def

	/ChangeFont {
	    /CurrentFont exch def
	} def

	/Keyable? true def

	/KeyStart { 
	    self /Colormap get installcolormap
	    gsave
		self setcanvas
	        /ec self send
		/has_focus true promote
	        /ec self send
	    grestore

	    pop /Full true 
	} def

	/KeyStop {
	    gsave
		self setcanvas
	        /ec self send
		/has_focus false promote
	        /ec self send
	    grestore
	    /KeyStop super send
	} def

	/StandardKey { % event
	    /hide_cursor self send

	    dup /Name get 32 eq {
		/Control /modifierdown? ClassKeyboard send {
		    dup /Name 0 put
		} if
	    } if

	    /Name get
	    keyboard_tag tagprint typedprint flush
	} def

	/MetaKey { % event
	    dup /Name 2 copy get 128 or put
	    /StandardKey self send
	} def

	/ComposedChar {
	    /ComposedChar super send
	} def

	/NumPadKey {
	    /NumPadKey super send
	} def

	/ArrowString {
	    string_tag tagprint
	    /Name get typedprint flush
	} def

	/FunctionString {
	    string_tag tagprint
	    /Name get typedprint flush
	} def

	/Selectable? true def	% override
	/SelectableType /Text def	% override

	/TermSelection {
	    ClassTextField pop % Force autoloading of TextFieldSelection
	    
	    /TermSelection TextFieldSelection 
	    [/Point1 /Point2]
	    classbegin
		/before /before load def
		
		/set_point1 {% x y
		    2 array astore /Point1 exch def
		} def
		
		/set_point2 { % x y
		    2 array astore /Point2 exch def
		} def
		
		/midpoint { % point1 point2 => point3
		    2 copy 1 get exch 1 get add 2 div 3 1 roll
		    0 get exch 0 get add 2 div exch 2 array astore
		} def
		
		/PastMidPoint? { % first last current => - first last bool
		    3 dict 
		    begin
			/cur exch def
			/last 1 index def
			/first 2 index def
			
			cur first before {
			    false
			} {
			    last cur before {
				true
			    } {
				first last midpoint cur before
			    } ifelse
			} ifelse
		    end
		} def
	    classend store
	    TermSelection
	} def

	/NewSelection { % event rank => select
	    dup /PrimarySelection eq {
		/Holder self send /new TermSelection send   % event sel
		deselect_tag /set_deselect /Holder self send send
		userdict /current_sel 2 index put
		exch /to_cr can send % sel x y 

		selection_start_tag tagprint
		2 copy exch typedprint typedprint

		2 copy /set_point1 5 index send
		/set_point2 3 index send  % sel
	    } {
		pop pop null
	    } ifelse
	} def

	/SelectionStart { % event selection => bool
	    /Rank 1 index send /PrimarySelection eq {
		/SelectionAdjust self send
		true
	    } {
		pop pop false
	    } ifelse
	} def

	/SelectionAdjust { % event selection
	    5 dict 
	    begin
		/sel exch def
		/event exch def

		/cur [ event /to_cr can send ] def

		/pin 
		/Point1 sel send 
		/Point2 sel send 
		cur /computepin sel send
		def

		cur dup pin before {
		    aload pop /set_point1
		} {
		    aload pop /set_point2
		} ifelse
		sel send

		selection_motion_tag tagprint
		cur aload pop exch typedprint typedprint
		pin aload pop exch typedprint typedprint
		/Level sel send typedprint
	    end 
	    flush
	} def

	/SelectionStop { % event selection => -
	    pop pop
	    selection_stop_tag tagprint flush
	} def

	/set_selection { % str => -
	    /cur_sel exch def
	} def

	/CurrentSelection { % rank => string
	    pop cur_sel
	} def

	%   event selection  =>  keyword
	/SelectionContext {
	    3 dict 
	    begin
		/sel exch def
		/event exch def
		sel null ne {
		    /cur [event /to_cr can send] def

		    /Point1 sel send cur before 
		    cur /Point2 sel send before and
		    { 
			/SelectedObject 
		    }{ 
			/UnselectedObject 
		    } ifelse
		} {
		    /UnselectedObject
		} ifelse
	    end
	} def

	/Receptible? true def

	/AsciiReception { % event string => -
	    string_tag tagprint typedprint flush
	    pop
	} def

	/DeleteSelection { % rank => -
	    pop
	} def


%        /HandleFind { % event => -
%            pop find_tag tagprint flush
%        } def

	% other methods

	/reshape { % x y w h => -
	    gsave
		/reshape super send

		autoscale true eq {
		    true setprintermatch
		    Cols CurrentFont findfont 1000 scalefont setfont 
		    (w) stringwidth pop
		    1000 div mul /size self send pop exch div 
		    false setprintermatch

		    floor /set_tsize self send
		} if

		reshape_tag tagprint 
		/size self send typedprint typedprint flush
	    grestore
	} def

	/update_view { % value sbar => -
	    pop
	    update_tag tagprint
	    typedprint
	} def

	/dc { % x y => -    (Draw Cursor)
	    /cursor_y exch store
	    /cursor_x exch store
	    ec
	} def

	/ec { % - => -        (Erase Cursor)
	    cursor_enabled {
		cursor_x null ne {
		    currentrasteropcode
		    /inverter self send
		    
		    has_focus true eq {
			cursor_x to_xpos cursor_y to_ypos 
			1 0 0 rgbcolor setcolor % Liam
			TextWidth TextHeight rectpath fill
		    } {
			cursor_x to_xpos cursor_y to_ypos 1 add
			TextWidth 1 sub TextHeight 1 sub rectpath stroke
		    } ifelse
		    setrasteropcode
		    FG setcolor
		} if
	    } if
	} def

	/d { % character
	    1 string dup 0 4 -1 roll put
	    BG setcolor
	    cursor_x to_xpos cursor_y to_ypos TextWidth TextHeight rectpath fill
	    FG setcolor
	    cursor_x to_xpos cursor_y to_ypos TextDescent add moveto show
	    /cursor_x cursor_x 1 add store
	    ec
	} def

	/cpa {
	    win setcanvas
	    newpath clippath
	    /location can send translate
	    rectpath copyarea
	    can setcanvas
	} def

	/inverter {
	    framebuffer /Visual get /Class get /PseudoColor eq {
		6 setrasteropcode
		BG setcolor currentpixel 
		FG setcolor currentpixel xor setpixel
	    } {
		5 setrasteropcode
	    } ifelse
	} def

	/ib { % x1 y1 x2 y2
	    gsave
		/inverter self send
		rectpath fill
	    grestore
	} def

	/cr { % x1 y1 x2 y2
	    BG setcolor
	    rectpath fill
	    FG setcolor
	} def

	/cs {
	    BG setcolor
	    clippath fill
	    FG setcolor
	} def

	/rs { % xsize ysize
	    2 packedarray cvx /preferredsize exch /installmethod can send
	    /invalidate win send
	    /invalidate can send
	    /location win send /preferredsize win send /reshape win send
	} def

	/setsize { 
	    rs 
	} def

	/minsize {
	    /minsize super send 
	    64 max exch 
	    64 max exch
	} def

	/preferredsize {
	    /preferredsize super send
	    Rows TextHeight mul 3 add max exch
	    Cols TextWidth mul 3 add max exch
	} def

	/HandleDamage { % event => -
	    % Make sure all parents are valid to insure they do not immediately
	    % reshape me as part of the Fix recursion.  This avoids double repaints
	    % of opaque children of opaque canvases.
	    %
	    % This next line stolen from ClassCanvas.
	    %
	    /parents self send arrayreverse {/?validate exch send} forall
	    /?validate self send
	    pop damage_tag tagprint
	} def

	% damage start
	%
	/ds { % - => -
	    gsave
		self setcanvas
		damagepath emptypath {
		    0 0 moveto
		} if
		pathbbox clipcanvas
		BG FillCanvas
		damagestart_tag tagprint
		4 {typedprint} repeat
		FG setcolor
	} def

	% damage end
	/de { % bool => -
		/FixChildren self send
		newpath clipcanvas
	    grestore
	} def

    classend 
    def

    /TermBaseFrame /TNT 3 0 findpackage
    /ClassTabBaseWindow known {
	ClassTabBaseWindow
    } {
	ClassBaseWindow
    } ifelse 
    nullarray
    classbegin
	/QuitFromUser {
	    quit_tag tagprint flush
	    /QuitFromUser super send
	} def

	%% Multi-head magic %%
        %%
	/current_head { % - => num
	    TrackDict /Can get /Parent get
	    0 rootcanvases {
		2 index eq { exit } { 1 add } ifelse
	    } forall
	    exch pop
	} def

	/TrackStart {
	    /TrackStart super send
	    dup {
		pop pop
		[/TrackCrossing /TrackStop /TrackMotion /TrackScreen] true
	    } if
	} def

	/MoveStart { % event => -
	    /MoveStart super send % => -
	    /old_head /current_head self send promote
	    /new_head old_head promote
	} def

	/TrackScreen { % event => -
	    WindowTracking? {
		MoveSelected? /SelectedWindows self send length 1 ne and {
		    pop
		} {
		    TrackDict /Motion get /MoveMotion eq {
			begin
			    TrackDict begin
				Can setcanvas erasepage 
				/Can Canvas createoverlay def
			    end
			    /new_head /current_head self send promote
			    new_head old_head eq {
				Mapped not {
				    /map self send
				} if
			    } {
				currentdict  % event
				/Shift /modifierdown? ClassKeyboard send 
				DragFrame? xor not {
				    Mapped {
					/unmap self send
				    } if
				} if
			    } ifelse
			end
		    } if
		} ifelse
	    } {
		/TrackScreen super send
	    } ifelse
	} def

	/new_head null def
	/old_head null def

	/MoveMotionSub { % bool x y => -
	    MoveStartX MoveStartY xyadd
	    /ConstrainMotion self send
	    3 -1 roll DragFrame? xor new_head old_head ne or {
		/size self send
		4 copy /path self send
		4 2 roll -1 1 xyadd 4 2 roll
		/path self send
	    } {
		/DoMove self send
	    } ifelse
	} def

	/MoveStop {
	    /MoveStop super send
	    new_head old_head ne {
		new_head change_head_tag tagprint typedprint
	    } {
		/map self send
	    } ifelse
	    /new_head unpromote
	    /old_head unpromote
	} def

	/MoveCancel { % event => -
	    TrackDict begin
		Can setcanvas erasepage 
		/Can rootcanvases old_head get createoverlay def
	    end
	    /MoveCancel super send
	    /map self send
	    /new_head unpromote
	    /old_head unpromote
	} def

        %%
	%% Multi-headed move end

	/move { % - => -
	    moved_tag tagprint
	    2 copy exch typedprint typedprint
	    /move super send
	} def

	/reshape { % x y w h => -
	    /reshape super send
	    gsave
	      framebuffer setcanvas
	      persistent_tag tagprint
	      /location self send exch typedprint typedprint
	      /size     self send exch typedprint typedprint
            grestore
	} def
    classend 
    def

    /MyClassVScrollbar ClassVScrollbar [/the_real_value]
    classbegin
	/HandleNotify { % ev => -
	    /HandleMotion self send    % value
	    pop Max High sub cvi      % value
	    /notifier self send        % value notifier
	    /ExecuteNotifier self send % -
	    /value self send dup 0 eq exch Max eq or {
		/stoptracktimer self send
	    } if
	} def
	/HandlePreview { % ev => -
	    /HandleMotion self send 
	    pop Max High sub cvi       % value
	    dup the_real_value ne {
		dup /the_real_value exch def
		/previewer self send
		/ExecuteNotifier self send
	    } {
		pop
	    } ifelse
	} def
	/goto_bottom {
	    Max PageDelta sub 1 add /setvalue self send
	} def
    classend 
    def

    /prop_popup {
	userdict 
	begin
	    create_prop_panel
	    reset_tag tagprint flush pause

	    /prop_popup property_panel framebuffer /new ClassPopupWindow send def
	    3 3 3 3 /setgaps prop_popup send

	    (Terminal Properties) /setlabel prop_popup send
	    /place prop_popup send
	    prop_popup /addsubwindow win send
	end
	prop_popup
    } def

    /create_prop_panel {
	/property_panel /Calculated framebuffer /new ClassPanel send def

%% Add some critters

	/font_label (Fonts) framebuffer /new ClassLabel send def
	/font_label font_label [/North { 
		/North PARENT POSITION 
	    } ] 
	/addclient property_panel send

	/list_label (font list) framebuffer /new ClassLabel send def
	/list_label list_label [/NorthEast { 
		/SouthWest font_label POSITION 40 10 xysub
	    } ] 
	/addclient property_panel send

	/size_label (base font sizes) framebuffer /new ClassLabel send def
	/size_label size_label [/NorthWest { 
		/SouthEast font_label POSITION 40 -10 xyadd
	    } ] 
	/addclient property_panel send

	/list framebuffer /new ClassScrollList send def

	font_list /setitemlist list send


	/minsize list send pop
	5 /heightfromrows list send 2 array astore cvx
	/preferredsize exch /promote list send
	/Exclusive /setchoicemode list send

	/list list [/North { 
		/South list_label POSITION 0 10 xysub
	    } ]
	/addclient property_panel send

	% instantiate a vertical scrollbar
	/scrollbar framebuffer /new ClassVScrollbar send def
	% ensure that the scrollbar notifies the scrolling list
	list /settarget scrollbar send
	/scroll /setnotifier scrollbar send
	/scroll /setpreviewer scrollbar send

	% ensure that the scrolling list can move the scrollbar
	scrollbar /setscrollbar list send

	/preferredsize {
	    /preferredsize super send pop /preferredsize list 
	    send exch pop
	} /installmethod scrollbar send

	/minsize {
	    /minsize super send pop /minsize list 
	    send exch pop
	} /installmethod scrollbar send

	/scrollbar scrollbar [/West { 
		/East list POSITION 
	    } ] 
	/addclient property_panel send

	/size_set /Grid framebuffer /new ClassSettings send def
	[(8) (10) (12) (14) (16) (18) (20) (22) (24) (26) (32) (64)] 
	/setitemlist size_set send
	[true 6 2 ] /setlayoutparameters size_set send
	/size_set size_set [/North { 
		/South size_label POSITION 0 10 xysub 
	    } ] 
	/addclient property_panel send

	/scale_label (Font size: ) framebuffer /new ClassLabel send def
	/scale_label scale_label [/North { 
		/South list POSITION /South size_set POSITION exch pop min 10 sub
	    }] /addclient property_panel send

	/fixed_set /Grid framebuffer /new ClassSettings send def
	[(fixed) (scaling)] /setitemlist fixed_set send
	[true 1 2 ] /setlayoutparameters fixed_set send
	/fixed_set fixed_set [/West { 
		/East scale_label POSITION 
	    } ] 
	/addclient property_panel send
	% /Inactive /setvisualstate fixed_set send

	{
	    pop 0 get 0 eq {
		/Inactive /setvisualstate columns_label send
		/Inactive /setvisualstate columns_text send
		/Active /setvisualstate size_set send
	    } {
		/Active /setvisualstate columns_label send
		/Active /setvisualstate columns_text send
		/Inactive /setvisualstate size_set send
	    } ifelse
	} /setnotifier fixed_set send

	/columns_label (Columns: ) framebuffer /new ClassLabel send def
	/columns_label columns_label [/West { 
		/East fixed_set POSITION 
		10 0 xyadd 
	    }] /addclient property_panel send

	/Inactive /setvisualstate columns_label send

	/columns_text property_panel /new ClassNumericField send def
	5 /setminimumvisible columns_text send
	/columns_text columns_text [ /West { 
		/East PREVIOUS POSITION
	    } ]
	/addclient property_panel send

	80 /setvalue columns_text send
	1 120 /setrange columns_text send
	/Inactive /setvisualstate columns_text send

	/sbar-pos /Grid framebuffer /new ClassSettings send def
	[(left side) (right side)] /setitemlist sbar-pos send
	[true 1 2 ] /setlayoutparameters sbar-pos send
	/sbar-pos sbar-pos [/North { 
		/South fixed_set POSITION 30 10 xysub 
	    } ] 
	/addclient property_panel send

	/sbar_label (Scrollbar Position: ) framebuffer /new ClassLabel send def
	/sbar_label sbar_label [/East { 
		/West sbar-pos POSITION 
	    } ]
	/addclient property_panel send

	/saved_lines_label (Saved Lines:) framebuffer /new ClassLabel send def
	/saved_lines_label saved_lines_label [/West 
	    { 
		/East sbar-pos POSITION 15 0 xyadd
	    } ] /addclient property_panel send

	/saved_lines_menu /Grid framebuffer /new ClassMenu send def
	[
	    1 1 7 { 
		250 mul 4 string cvs 
	    } for
	] /setitemlist saved_lines_menu send

	{
	    pop 250 mul 250 add /setvalue saved_lines_text send
	} /setnotifier saved_lines_menu send

	/saved_lines /Grid property_panel /new ClassMenuButtons send def
	[ [() saved_lines_menu ] ] /setitemlist saved_lines send
	0 true /setabbreviated saved_lines send
	/saved_lines saved_lines [ /West { 
		/East saved_lines_label POSITION 
		5 0 xyadd 
	    } ] /addclient property_panel send

	/saved_lines_text property_panel /new ClassNumericField send def
	/saved_lines_text saved_lines_text [ 
	    /West { 
		/East saved_lines POSITION 5 0 xyadd 
	    } 
	] /addclient property_panel send

	128 99999 /setrange saved_lines_text send
	100 /setdelta saved_lines_text send

	/displaylabel (Display properties) framebuffer /new ClassLabel send def
	/displaylabel displaylabel [/North { 
		/North PARENT POSITION pop 
		/South sbar-pos POSITION exch pop 25 sub 
	    } ] 
	/addclient property_panel send

	/scrolling_set /Grid framebuffer /new ClassSettings send def
	[(supersmooth) (smooth) (jump) (superjump)] /setitemlist scrolling_set send
	[true 1 4 ] /setlayoutparameters scrolling_set send
	/scrolling_set scrolling_set [/North { 
		/South displaylabel POSITION 10 sub 
	    } ] 
	/addclient property_panel send
	% /Inactive /setvisualstate scrolling_set send

	/scrolllabel (Scrolling: ) framebuffer /new ClassLabel send def
	/scrolllabel scrolllabel [/East { 
		/West scrolling_set POSITION 10 0 xysub
	    } ] 
	/addclient property_panel send

	/retained_check /Grid framebuffer /new ClassCheckBoxes send def
	[(retained)] /setitemlist retained_check send
	[true 1 1] /setlayoutparameters retained_check send
	/retained_check retained_check 
	[/West {
		/East scrolling_set POSITION 10 0 xyadd
	    }] /addclient property_panel send

	/terminallabel (Terminal Properties) framebuffer /new ClassLabel send def
	/terminallabel terminallabel [/North { 
		/North PARENT POSITION pop 
		/South PREVIOUS POSITION exch pop 25 sub 
	    } ] 
	/addclient property_panel send

	/termident_text property_panel /new ClassTextField send def
	14 /setminimumvisible termident_text send
	/termident_text termident_text [ /North { 
		/South PREVIOUS POSITION 10 sub
	    } ]
	/addclient property_panel send

	/identlabel (terminal id: ) framebuffer /new ClassLabel send def
	/identlabel identlabel [/East { 
		/West termident_text POSITION 10 0 xysub
	    } ] 
	/addclient property_panel send

	/buttons /Spaced property_panel /new ClassButtons send def
	[(Apply) (Reset) (Save)] /setitemlist buttons send
	30 8 /setgaps buttons send
	/buttons buttons [ /Center { 
		/South termident_text POSITION 40 sub
	    } ]
	/addclient property_panel send

	{
	    pop {
		0 {
		    apply_values
		}
		1 { 
		    reset_tag tagprint 
		}
		2 { 
		    save_defaults 
		}
	    } case
	} /setnotifier buttons send

	/Prop_Font () def
    } def

    /save_defaults {
	save_defaults_tag tagprint 
	font_list /value list send dup length 0 eq {
	    Prop_Font
	} {
	    0 get get
	} ifelse 
	typedprint % font name
	/value size_set send 0 get 2 mul 8 add 
	dup 34 eq { 
	    pop 64 
	} if 
	typedprint % font size
	/value retained_check send length 0 eq {
	    0
	} {
	    1
	} ifelse 
	typedprint % retained
	/value scrolling_set send 0 get typedprint  % Scrolling mode
	/value sbar-pos send 0 get typedprint % scrollbar side
	/value termident_text send typedprint % Terminal identification
	/value fixed_set send 0 get typedprint % autoscaling?
	/value columns_text send typedprint % Desired columns when autoscaling
	/value saved_lines_text send typedprint
	apply_values
    } def

    /default_values {
	/locatechoice list send
    } def

    /apply_values {
	/pinned? prop_popup send not {
	    /unmap prop_popup send
	} if

	/value list send dup length 1 eq {
	    0 get font_list exch get cvn /ChangeFont can send
	} {
	    Prop_Font cvn /ChangeFont can send
	} ifelse

	/value fixed_set send 0 get 0 eq {
	    false /set_autoscale can send

	    % Font size changes
	    /value size_set send 0 get 
	    2 mul 8 add dup 34 eq { 
		pop 64 
	    } if 
	    /set_tsize can send
	} {
	    true /set_autoscale can send
	    /value columns_text send /set_cols can send
	    /font_size can send /set_tsize can send
	} ifelse

	/value retained_check send length 0 eq {
	    win /Retained false put
	} {
	    true /setdamageable can send
	    can /Retained true put
	} ifelse

	/value scrolling_set send 0 get 
	set_mode_tag tagprint 0 typedprint typedprint

	/value termident_text send
	set_mode_tag tagprint 1 typedprint typedprint

	/value saved_lines_text send
	set_mode_tag tagprint 2 typedprint typedprint
	flush

	mark % I really don't care which side it was on
	% previously!

	/East /removeclient win send
	/West /removeclient win send
	cleartomark

	/value sbar-pos send 0 get 0 eq {
	    /West slider /addclient win send
	} {
	    /East slider /addclient win send
	} ifelse

	% Cause a reshape event AND a damage event
	/location win send /size win send /reshape win send
    } def
dictend 
definepackage pop

