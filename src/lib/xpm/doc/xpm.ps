%!
%%BoundingBox: (atend)
%%Pages: (atend)
%%DocumentFonts: (atend)
%%EndComments
%
% FrameMaker PostScript Prolog 3.0, for use with FrameMaker 3.0
% Copyright (c) 1986,87,89,90,91 by Frame Technology Corporation.
% All rights reserved.
%
% Known Problems:
%	Due to bugs in Transcript, the 'PS-Adobe-' is omitted from line 1
/FMversion (3.0) def 
% Set up Color vs. Black-and-White
	/FMPrintInColor systemdict /colorimage known
		systemdict /currentcolortransfer known or def
% Uncomment this line to force b&w on color printer
%   /FMPrintInColor false def
/FrameDict 195 dict def 
systemdict /errordict known not {/errordict 10 dict def
		errordict /rangecheck {stop} put} if
% The readline in 23.0 doesn't recognize cr's as nl's on AppleTalk
FrameDict /tmprangecheck errordict /rangecheck get put 
errordict /rangecheck {FrameDict /bug true put} put 
FrameDict /bug false put 
mark 
% Some PS machines read past the CR, so keep the following 3 lines together!
currentfile 5 string readline
00
0000000000
cleartomark 
errordict /rangecheck FrameDict /tmprangecheck get put 
FrameDict /bug get { 
	/readline {
		/gstring exch def
		/gfile exch def
		/gindex 0 def
		{
			gfile read pop 
			dup 10 eq {exit} if 
			dup 13 eq {exit} if 
			gstring exch gindex exch put 
			/gindex gindex 1 add def 
		} loop
		pop 
		gstring 0 gindex getinterval true 
		} def
	} if
/FMVERSION {
	FMversion ne {
		/Times-Roman findfont 18 scalefont setfont
		100 100 moveto
		(FrameMaker version does not match postscript_prolog!)
		dup =
		show showpage
		} if
	} def 
/FMLOCAL {
	FrameDict begin
	0 def 
	end 
	} def 
	/gstring FMLOCAL
	/gfile FMLOCAL
	/gindex FMLOCAL
	/orgxfer FMLOCAL
	/orgproc FMLOCAL
	/organgle FMLOCAL
	/orgfreq FMLOCAL
	/yscale FMLOCAL
	/xscale FMLOCAL
	/manualfeed FMLOCAL
	/paperheight FMLOCAL
	/paperwidth FMLOCAL
/FMDOCUMENT { 
	array /FMfonts exch def 
	/#copies exch def
	FrameDict begin
	0 ne dup {setmanualfeed} if
	/manualfeed exch def
	/paperheight exch def
	/paperwidth exch def
	/yscale exch def
	/xscale exch def
	currenttransfer cvlit /orgxfer exch def
	currentscreen cvlit /orgproc exch def
	/organgle exch def /orgfreq exch def
	setpapername 
	manualfeed {true} {papersize} ifelse 
	{manualpapersize} {false} ifelse 
	{desperatepapersize} if
	end 
	} def 
	/pagesave FMLOCAL
	/orgmatrix FMLOCAL
	/landscape FMLOCAL
/FMBEGINPAGE { 
	FrameDict begin 
	/pagesave save def
	3.86 setmiterlimit
	/landscape exch 0 ne def
	landscape { 
		90 rotate 0 exch neg translate pop 
		}
		{pop pop}
		ifelse
	xscale yscale scale
	/orgmatrix matrix def
	gsave 
	} def 
/FMENDPAGE {
	grestore 
	pagesave restore
	end 
	showpage
	} def 
/FMFONTDEFINE { 
	FrameDict begin
	findfont 
	ReEncode 
	1 index exch 
	definefont 
	FMfonts 3 1 roll 
	put
	end 
	} def 
/FMFILLS {
	FrameDict begin
	array /fillvals exch def
	end 
	} def 
/FMFILL {
	FrameDict begin
	 fillvals 3 1 roll put
	end 
	} def 
/FMNORMALIZEGRAPHICS { 
	newpath
	0.0 0.0 moveto
	1 setlinewidth
	0 setlinecap
	0 0 0 sethsbcolor
	0 setgray 
	} bind def
	/fx FMLOCAL
	/fy FMLOCAL
	/fh FMLOCAL
	/fw FMLOCAL
	/llx FMLOCAL
	/lly FMLOCAL
	/urx FMLOCAL
	/ury FMLOCAL
/FMBEGINEPSF { 
	end 
	/FMEPSF save def 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	[/fy /fx /fh /fw /ury /urx /lly /llx] {exch def} forall 
	fx fy translate 
	rotate
	fw urx llx sub div fh ury lly sub div scale 
	llx neg lly neg translate 
	} bind def
/FMENDEPSF {
	FMEPSF restore
	FrameDict begin 
	} bind def
FrameDict begin 
/setmanualfeed {
%%BeginFeature *ManualFeed True
	 statusdict /manualfeed true put
%%EndFeature
	} def
/max {2 copy lt {exch} if pop} bind def
/min {2 copy gt {exch} if pop} bind def
/inch {72 mul} def
/pagedimen { 
	paperheight sub abs 16 lt exch 
	paperwidth sub abs 16 lt and
	{/papername exch def} {pop} ifelse
	} def
	/papersizedict FMLOCAL
/setpapername { 
	/papersizedict 14 dict def 
	papersizedict begin
	/papername /unknown def 
		/Letter 8.5 inch 11.0 inch pagedimen
		/LetterSmall 7.68 inch 10.16 inch pagedimen
		/Tabloid 11.0 inch 17.0 inch pagedimen
		/Ledger 17.0 inch 11.0 inch pagedimen
		/Legal 8.5 inch 14.0 inch pagedimen
		/Statement 5.5 inch 8.5 inch pagedimen
		/Executive 7.5 inch 10.0 inch pagedimen
		/A3 11.69 inch 16.5 inch pagedimen
		/A4 8.26 inch 11.69 inch pagedimen
		/A4Small 7.47 inch 10.85 inch pagedimen
		/B4 10.125 inch 14.33 inch pagedimen
		/B5 7.16 inch 10.125 inch pagedimen
	end
	} def
/papersize {
	papersizedict begin
		/Letter {lettertray letter} def
		/LetterSmall {lettertray lettersmall} def
		/Tabloid {11x17tray 11x17} def
		/Ledger {ledgertray ledger} def
		/Legal {legaltray legal} def
		/Statement {statementtray statement} def
		/Executive {executivetray executive} def
		/A3 {a3tray a3} def
		/A4 {a4tray a4} def
		/A4Small {a4tray a4small} def
		/B4 {b4tray b4} def
		/B5 {b5tray b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	/FMdicttop countdictstack 1 add def 
	statusdict begin stopped end 
	countdictstack -1 FMdicttop {pop end} for 
	} def
/manualpapersize {
	papersizedict begin
		/Letter {letter} def
		/LetterSmall {lettersmall} def
		/Tabloid {11x17} def
		/Ledger {ledger} def
		/Legal {legal} def
		/Statement {statement} def
		/Executive {executive} def
		/A3 {a3} def
		/A4 {a4} def
		/A4Small {a4small} def
		/B4 {b4} def
		/B5 {b5} def
		/unknown {unknown} def
	papersizedict dup papername known {papername} {/unknown} ifelse get
	end
	stopped 
	} def
/desperatepapersize {
	statusdict /setpageparams known
		{
		paperwidth paperheight 0 1 
		statusdict begin
		{setpageparams} stopped pop 
		end
		} if
	} def
/savematrix {
	orgmatrix currentmatrix pop
	} bind def
/restorematrix {
	orgmatrix setmatrix
	} bind def
/dmatrix matrix def
/dpi    72 0 dmatrix defaultmatrix dtransform
    dup mul exch   dup mul add   sqrt def
/freq dpi 18.75 div 8 div round dup 0 eq {pop 1} if 8 mul dpi exch div def
/sangle 1 0 dmatrix defaultmatrix dtransform exch atan def
/DiacriticEncoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /space /exclam /quotedbl
/numbersign /dollar /percent /ampersand /quotesingle /parenleft
/parenright /asterisk /plus /comma /hyphen /period /slash /zero /one
/two /three /four /five /six /seven /eight /nine /colon /semicolon
/less /equal /greater /question /at /A /B /C /D /E /F /G /H /I /J /K
/L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z /bracketleft /backslash
/bracketright /asciicircum /underscore /grave /a /b /c /d /e /f /g /h
/i /j /k /l /m /n /o /p /q /r /s /t /u /v /w /x /y /z /braceleft /bar
/braceright /asciitilde /.notdef /Adieresis /Aring /Ccedilla /Eacute
/Ntilde /Odieresis /Udieresis /aacute /agrave /acircumflex /adieresis
/atilde /aring /ccedilla /eacute /egrave /ecircumflex /edieresis
/iacute /igrave /icircumflex /idieresis /ntilde /oacute /ograve
/ocircumflex /odieresis /otilde /uacute /ugrave /ucircumflex
/udieresis /dagger /.notdef /cent /sterling /section /bullet
/paragraph /germandbls /registered /copyright /trademark /acute
/dieresis /.notdef /AE /Oslash /.notdef /.notdef /.notdef /.notdef
/yen /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/ordfeminine /ordmasculine /.notdef /ae /oslash /questiondown
/exclamdown /logicalnot /.notdef /florin /.notdef /.notdef
/guillemotleft /guillemotright /ellipsis /.notdef /Agrave /Atilde
/Otilde /OE /oe /endash /emdash /quotedblleft /quotedblright
/quoteleft /quoteright /.notdef /.notdef /ydieresis /Ydieresis
/fraction /currency /guilsinglleft /guilsinglright /fi /fl /daggerdbl
/periodcentered /quotesinglbase /quotedblbase /perthousand
/Acircumflex /Ecircumflex /Aacute /Edieresis /Egrave /Iacute
/Icircumflex /Idieresis /Igrave /Oacute /Ocircumflex /.notdef /Ograve
/Uacute /Ucircumflex /Ugrave /dotlessi /circumflex /tilde /macron
/breve /dotaccent /ring /cedilla /hungarumlaut /ogonek /caron
] def
/ReEncode { 
	dup 
	length 
	dict begin 
	{
	1 index /FID ne 
		{def} 
		{pop pop} ifelse 
	} forall 
	0 eq {/Encoding DiacriticEncoding def} if 
	currentdict 
	end 
	} bind def
/graymode true def
	/bwidth FMLOCAL
	/bpside FMLOCAL
	/bstring FMLOCAL
	/onbits FMLOCAL
	/offbits FMLOCAL
	/xindex FMLOCAL
	/yindex FMLOCAL
	/x FMLOCAL
	/y FMLOCAL
/setpattern {
	 /bwidth  exch def
	 /bpside  exch def
	 /bstring exch def
	 /onbits 0 def  /offbits 0 def
	 freq sangle landscape {90 add} if 
		{/y exch def
		 /x exch def
		 /xindex x 1 add 2 div bpside mul cvi def
		 /yindex y 1 add 2 div bpside mul cvi def
		 bstring yindex bwidth mul xindex 8 idiv add get
		 1 7 xindex 8 mod sub bitshift and 0 ne
		 {/onbits  onbits  1 add def 1}
		 {/offbits offbits 1 add def 0}
		 ifelse
		}
		setscreen
	 {} settransfer
	 offbits offbits onbits add div FMsetgray
	/graymode false def
	} bind def
/grayness {
	FMsetgray
	graymode not {
		/graymode true def
		orgxfer cvx settransfer
		orgfreq organgle orgproc cvx setscreen
		} if
	} bind def
	/HUE FMLOCAL
	/SAT FMLOCAL
	/BRIGHT FMLOCAL
	/Colors FMLOCAL
FMPrintInColor 
	
	{
	/HUE 0 def
	/SAT 0 def
	/BRIGHT 0 def
	% array of arrays Hue and Sat values for the separations [HUE BRIGHT]
	/Colors   
	[[0    0  ]    % black
	 [0    0  ]    % white
	 [0.00 1.0]    % red
	 [0.37 1.0]    % green
	 [0.60 1.0]    % blue
	 [0.50 1.0]    % cyan
	 [0.83 1.0]    % magenta
	 [0.16 1.0]    % comment / yellow
	 ] def
      
	/BEGINBITMAPCOLOR { 
		BITMAPCOLOR} def
	/BEGINBITMAPCOLORc { 
		BITMAPCOLORc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUECOLOR } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUECOLORc } def
	/K { 
		Colors exch get dup
		0 get /HUE exch store 
		1 get /BRIGHT exch store
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} def
	/FMsetgray { 
		/SAT exch 1.0 exch sub store 
		  HUE 0 eq BRIGHT 0 eq and
			{1.0 SAT sub setgray}
			{HUE SAT BRIGHT sethsbcolor} 
		  ifelse
		} bind def
	}
	
	{
	/BEGINBITMAPCOLOR { 
		BITMAPGRAY} def
	/BEGINBITMAPCOLORc { 
		BITMAPGRAYc} def
	/BEGINBITMAPTRUECOLOR { 
		BITMAPTRUEGRAY } def
	/BEGINBITMAPTRUECOLORc { 
		BITMAPTRUEGRAYc } def
	/FMsetgray {setgray} bind def
	/K { 
		pop
		} def
	}
ifelse
/normalize {
	transform round exch round exch itransform
	} bind def
/dnormalize {
	dtransform round exch round exch idtransform
	} bind def
/lnormalize { 
	0 dtransform exch cvi 2 idiv 2 mul 1 add exch idtransform pop
	} bind def
/H { 
	lnormalize setlinewidth
	} bind def
/Z {
	setlinecap
	} bind def
	/fillvals FMLOCAL
/X { 
	fillvals exch get
	dup type /stringtype eq
	{8 1 setpattern} 
	{grayness}
	ifelse
	} bind def
/V { 
	gsave eofill grestore
	} bind def
/N { 
	stroke
	} bind def
/M {newpath moveto} bind def
/E {lineto} bind def
/D {curveto} bind def
/O {closepath} bind def
	/n FMLOCAL
/L { 
 	/n exch def
	newpath
	normalize
	moveto 
	2 1 n {pop normalize lineto} for
	} bind def
/Y { 
	L 
	closepath
	} bind def
	/x1 FMLOCAL
	/x2 FMLOCAL
	/y1 FMLOCAL
	/y2 FMLOCAL
	/rad FMLOCAL
/R { 
	/y2 exch def
	/x2 exch def
	/y1 exch def
	/x1 exch def
	x1 y1
	x2 y1
	x2 y2
	x1 y2
	4 Y 
	} bind def
/RR { 
	/rad exch def
	normalize
	/y2 exch def
	/x2 exch def
	normalize
	/y1 exch def
	/x1 exch def
	newpath
	x1 y1 rad add moveto
	x1 y2 x2 y2 rad arcto
	x2 y2 x2 y1 rad arcto
	x2 y1 x1 y1 rad arcto
	x1 y1 x1 y2 rad arcto
	closepath
	16 {pop} repeat
	} bind def
/C { 
	grestore
	gsave
	R 
	clip
	} bind def
	/FMpointsize FMLOCAL
/F { 
	FMfonts exch get
	FMpointsize scalefont
	setfont
	} bind def
/Q { 
	/FMpointsize exch def
	F 
	} bind def
/T { 
	moveto show
	} bind def
/RF { 
	rotate
	0 ne {-1 1 scale} if
	} bind def
/TF { 
	gsave
	moveto 
	RF
	show
	grestore
	} bind def
/P { 
	moveto
	0 32 3 2 roll widthshow
	} bind def
/PF { 
	gsave
	moveto 
	RF
	0 32 3 2 roll widthshow
	grestore
	} bind def
/S { 
	moveto
	0 exch ashow
	} bind def
/SF { 
	gsave
	moveto
	RF
	0 exch ashow
	grestore
	} bind def
/B { 
	moveto
	0 32 4 2 roll 0 exch awidthshow
	} bind def
/BF { 
	gsave
	moveto
	RF
	0 32 4 2 roll 0 exch awidthshow
	grestore
	} bind def
/G { 
	gsave
	newpath
	normalize translate 0.0 0.0 moveto 
	dnormalize scale 
	0.0 0.0 1.0 5 3 roll arc 
	closepath fill
	grestore
	} bind def
/A { 
	gsave
	savematrix
	newpath
	2 index 2 div add exch 3 index 2 div sub exch 
	normalize 2 index 2 div sub exch 3 index 2 div add exch 
	translate 
	scale 
	0.0 0.0 1.0 5 3 roll arc 
	restorematrix
	stroke
	grestore
	} bind def
	/x FMLOCAL
	/y FMLOCAL
	/w FMLOCAL
	/h FMLOCAL
	/xx FMLOCAL
	/yy FMLOCAL
	/ww FMLOCAL
	/hh FMLOCAL
	/FMsaveobject FMLOCAL
	/FMoptop FMLOCAL
	/FMdicttop FMLOCAL
/BEGINPRINTCODE { 
	/FMdicttop countdictstack 1 add def 
	/FMoptop count 4 sub def 
	/FMsaveobject save def
	userdict begin 
	/showpage {} def 
	FMNORMALIZEGRAPHICS 
	3 index neg 3 index neg translate
	} bind def
/ENDPRINTCODE {
	count -1 FMoptop {pop pop} for 
	countdictstack -1 FMdicttop {pop end} for 
	FMsaveobject restore 
	} bind def
/gn { 
	0 
	{	46 mul 
		cf read pop 
		32 sub 
		dup 46 lt {exit} if 
		46 sub add 
		} loop
	add 
	} bind def
	/str FMLOCAL
/cfs { 
	/str sl string def 
	0 1 sl 1 sub {str exch val put} for 
	str def 
	} bind def
/ic [ 
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0223
	0
	{0 hx} {1 hx} {2 hx} {3 hx} {4 hx} {5 hx} {6 hx} {7 hx} {8 hx} {9 hx}
	{10 hx} {11 hx} {12 hx} {13 hx} {14 hx} {15 hx} {16 hx} {17 hx} {18 hx}
	{19 hx} {gn hx} {0} {1} {2} {3} {4} {5} {6} {7} {8} {9} {10} {11} {12}
	{13} {14} {15} {16} {17} {18} {19} {gn} {0 wh} {1 wh} {2 wh} {3 wh}
	{4 wh} {5 wh} {6 wh} {7 wh} {8 wh} {9 wh} {10 wh} {11 wh} {12 wh}
	{13 wh} {14 wh} {gn wh} {0 bl} {1 bl} {2 bl} {3 bl} {4 bl} {5 bl} {6 bl}
	{7 bl} {8 bl} {9 bl} {10 bl} {11 bl} {12 bl} {13 bl} {14 bl} {gn bl}
	{0 fl} {1 fl} {2 fl} {3 fl} {4 fl} {5 fl} {6 fl} {7 fl} {8 fl} {9 fl}
	{10 fl} {11 fl} {12 fl} {13 fl} {14 fl} {gn fl}
	] def
	/sl FMLOCAL
	/val FMLOCAL
	/ws FMLOCAL
	/im FMLOCAL
	/bs FMLOCAL
	/cs FMLOCAL
	/len FMLOCAL
	/pos FMLOCAL
/ms { 
	/sl exch def 
	/val 255 def 
	/ws cfs 
	/im cfs 
	/val 0 def 
	/bs cfs 
	/cs cfs 
	} bind def
400 ms 
/ip { 
	is 
	0 
	cf cs readline pop 
	{	ic exch get exec 
		add 
		} forall 
	pop 
	
	} bind def
/wh { 
	/len exch def 
	/pos exch def 
	ws 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/bl { 
	/len exch def 
	/pos exch def 
	bs 0 len getinterval im pos len getinterval copy pop
	pos len 
	} bind def
/s1 1 string def
/fl { 
	/len exch def 
	/pos exch def 
	/val cf s1 readhexstring pop 0 get def
	pos 1 pos len add 1 sub {im exch val put} for
	pos len 
	} bind def
/hx { 
	3 copy getinterval 
	cf exch readhexstring pop pop 
	} bind def
	/h FMLOCAL
	/w FMLOCAL
	/d FMLOCAL
	/lb FMLOCAL
	/bitmapsave FMLOCAL
	/is FMLOCAL
	/cf FMLOCAL
/wbytes { 
	dup 
	8 eq {pop} {1 eq {7 add 8 idiv} {3 add 4 idiv} ifelse} ifelse
	} bind def
/BEGINBITMAPBWc { 
	1 {} COMMONBITMAPc
	} bind def
/BEGINBITMAPGRAYc { 
	8 {} COMMONBITMAPc
	} bind def
/BEGINBITMAP2BITc { 
	2 {} COMMONBITMAPc
	} bind def
/COMMONBITMAPc { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	r                    
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} image 
	bitmapsave restore 
	grestore
	} bind def
/BEGINBITMAPBW { 
	1 {} COMMONBITMAP
	} bind def
/BEGINBITMAPGRAY { 
	8 {} COMMONBITMAP
	} bind def
/BEGINBITMAP2BIT { 
	2 {} COMMONBITMAP
	} bind def
/COMMONBITMAP { 
	/r exch def
	/d exch def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	r                    
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} image
	bitmapsave restore 
	grestore
	} bind def
	/proc1 FMLOCAL
	/proc2 FMLOCAL
	/newproc FMLOCAL
/Fmcc {
    /proc2 exch cvlit def
    /proc1 exch cvlit def
    /newproc proc1 length proc2 length add array def
    newproc 0 proc1 putinterval
    newproc proc1 length proc2 putinterval
    newproc cvx
} bind def
/ngrayt 256 array def
/nredt 256 array def
/nbluet 256 array def
/ngreent 256 array def
	/gryt FMLOCAL
	/blut FMLOCAL
	/grnt FMLOCAL
	/redt FMLOCAL
	/indx FMLOCAL
	/cynu FMLOCAL
	/magu FMLOCAL
	/yelu FMLOCAL
	/k FMLOCAL
	/u FMLOCAL
/colorsetup {
	currentcolortransfer
	/gryt exch def
	/blut exch def
	/grnt exch def
	/redt exch def
	0 1 255 {
		/indx exch def
		/cynu 1 red indx get 255 div sub def
		/magu 1 green indx get 255 div sub def
		/yelu 1 blue indx get 255 div sub def
		/k cynu magu min yelu min def
		/u k currentundercolorremoval exec def
		nredt indx 1 0 cynu u sub max sub redt exec put
		ngreent indx 1 0 magu u sub max sub grnt exec put
		nbluet indx 1 0 yelu u sub max sub blut exec put
		ngrayt indx 1 k currentblackgeneration exec sub gryt exec put
	} for
	{255 mul cvi nredt exch get}
	{255 mul cvi ngreent exch get}
	{255 mul cvi nbluet exch get}
	{255 mul cvi ngrayt exch get}
	setcolortransfer
	{pop 0} setundercolorremoval
	{} setblackgeneration
	} bind def
	/tran FMLOCAL
/fakecolorsetup {
	/tran 256 string def
	0 1 255 {/indx exch def 
		tran indx
		red indx get 77 mul
		green indx get 151 mul
		blue indx get 28 mul
		add add 256 idiv put} for
	currenttransfer
	{255 mul cvi tran exch get 255.0 div}
	exch Fmcc settransfer
} bind def
/BITMAPCOLOR { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/bitmapsave save def 
	colorsetup
	/is w d wbytes string def
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{cf is readhexstring pop} {is} {is} true 3 colorimage 
	bitmapsave restore 
	grestore
	} bind def
/BITMAPCOLORc { 
	/d 8 def
	gsave
	translate rotate scale /h exch def /w exch def
	/lb w d wbytes def 
	sl lb lt {lb ms} if 
	/bitmapsave save def 
	colorsetup
	/is im 0 lb getinterval def 
	ws 0 lb getinterval is copy pop 
	/cf currentfile def 
	w h d [w 0 0 h neg 0 h] 
	{ip} {is} {is} true 3 colorimage
	bitmapsave restore 
	grestore
	} bind def
/BITMAPTRUECOLORc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip} {gip} {bip} true 3 colorimage
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUECOLOR { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop } 
        { cf gis readhexstring pop } 
        { cf bis readhexstring pop } 
        true 3 colorimage 
        bitmapsave restore 
        grestore
        } bind def
/BITMAPTRUEGRAYc { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        
        /is w string def
        
        ws 0 w getinterval is copy pop 
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        {ip gip bip w gray} image
        bitmapsave restore 
        grestore
        } bind def
/ww FMLOCAL
/r FMLOCAL
/g FMLOCAL
/b FMLOCAL
/i FMLOCAL
/gray { 
        /ww exch def
        /b exch def
        /g exch def
        /r exch def
        0 1 ww 1 sub { /i exch def r i get .299 mul g i get .587 mul
			b i get .114 mul add add r i 3 -1 roll floor cvi put } for
        r
        } bind def
/BITMAPTRUEGRAY { 
        gsave
        translate rotate scale /h exch def /w exch def
        /bitmapsave save def 
        /is w string def
        /gis w string def
        /bis w string def
        /cf currentfile def 
        w h 8 [w 0 0 h neg 0 h] 
        { cf is readhexstring pop 
          cf gis readhexstring pop 
          cf bis readhexstring pop w gray}  image
        bitmapsave restore 
        grestore
        } bind def
/BITMAPGRAY { 
	8 {fakecolorsetup} COMMONBITMAP
	} bind def
/BITMAPGRAYc { 
	8 {fakecolorsetup} COMMONBITMAPc
	} bind def
/ENDBITMAP {
	} bind def
end 
	/ALDsave FMLOCAL
	/ALDmatrix matrix def ALDmatrix currentmatrix pop
/StartALD {
	/ALDsave save def
	 savematrix
	 ALDmatrix setmatrix
	} bind def
/InALD {
	 restorematrix
	} bind def
/DoneALD {
	 ALDsave restore
	} bind def
%%EndProlog
%%BeginSetup
(3.0) FMVERSION
1 1 612 792 0 1 14 FMDOCUMENT
0 0 /Times-Bold FMFONTDEFINE
1 0 /Times-Roman FMFONTDEFINE
2 0 /Helvetica FMFONTDEFINE
3 0 /Courier FMFONTDEFINE
4 0 /Times-Italic FMFONTDEFINE
32 FMFILLS
0 0 FMFILL
1 0.1 FMFILL
2 0.3 FMFILL
3 0.5 FMFILL
4 0.7 FMFILL
5 0.9 FMFILL
6 0.97 FMFILL
7 1 FMFILL
8 <0f1e3c78f0e1c387> FMFILL
9 <0f87c3e1f0783c1e> FMFILL
10 <cccccccccccccccc> FMFILL
11 <ffff0000ffff0000> FMFILL
12 <8142241818244281> FMFILL
13 <03060c183060c081> FMFILL
14 <8040201008040201> FMFILL
16 1 FMFILL
17 0.9 FMFILL
18 0.7 FMFILL
19 0.5 FMFILL
20 0.3 FMFILL
21 0.1 FMFILL
22 0.03 FMFILL
23 0 FMFILL
24 <f0e1c3870f1e3c78> FMFILL
25 <f0783c1e0f87c3e1> FMFILL
26 <3333333333333333> FMFILL
27 <0000ffff0000ffff> FMFILL
28 <7ebddbe7e7dbbd7e> FMFILL
29 <fcf9f3e7cf9f3f7e> FMFILL
30 <7fbfdfeff7fbfdfe> FMFILL
%%EndSetup
%%Page: "1" 1
%%BeginPaperSize: Letter
%%EndPaperSize
612 792 0 FMBEGINPAGE
0 36 Q
0 X
0 K
(XPM Manual) 200.51 534 T
1 18 Q
(The) 223.31 468 T
0 F
(X) 255.78 468 T
(P) 273.27 468 T
1 F
(ix) 284.26 468 T
0 F
(M) 298.26 468 T
1 F
(ap Format) 315.24 468 T
1 14 Q
(Version : 3.2g) 266.16 375.97 T
(April 26th 1993) 261.3 343.97 T
2 F
(Arnaud Le Hors) 257.01 253.27 T
3 12 Q
(lehors@sophia.inria.fr) 226.84 238.6 T
1 10 Q
(\251 BULL 1990-93) 270 139.23 T
FMENDPAGE
%%EndPage: "1" 2
%%Page: "2" 2
612 792 0 FMBEGINPAGE
0 18 Q
0 X
0 K
(Copyright restrictions) 72 681 T
1 10 Q
(Copyright 1990-93 GROUPE BULL) 72 652.33 T
2 F
0.68 (Permission to use, copy, modify, and distribute this software and its documentation for any purpose and) 72 628.33 P
0.41 (without fee is hereby granted, provided that the above copyright notice appear in all copies and that both) 72 616.33 P
0.05 (that copyright notice and this permission notice appear in supporting documentation, and that the name of) 72 604.33 P
-0.26 (GROUPE BULL not be used in advertising or publicity pertaining to distribution of the software without spe-) 72 592.33 P
0.54 (cific, written prior permission. GROUPE BULL makes no representations about the suitability of this soft-) 72 580.33 P
(ware for any purpose. It is provided) 72 568.33 T
1 F
(\322) 230.87 568.33 T
2 F
(as is) 235.31 568.33 T
1 F
(\323) 255.86 568.33 T
2 F
(without express or implied warranty.) 262.8 568.33 T
1 F
0.26 (GROUPE BULL disclaims all warranties with regard to this software, including all implied warranties of merchant-) 72 544.33 P
0.28 (ability and fitness, in no event shall GROUPE BULL be liable for any special, indirect or consequential damages or) 72 532.33 P
-0.58 (any damages whatsoever resulting from loss of use, data or profits, whether in an action of contract, negligence or other) 72 520.33 P
(tortious action, arising out of or in connection with the use or performance of this software.) 72 508.33 T
0 18 Q
(Acknowledgements) 72 479 T
1 10 Q
-0.53 (I want to thank my team partner and friend Colas Nahaboo who proposed me this project, and who actively participates) 72 450.33 P
-0.34 (to its design. I also want to thank all the users who help me to improve the library by giving feed back and sending bug) 72 438.33 P
(reports.) 72 426.33 T
1 14 Q
(Arnaud Le Hors) 449.08 405.67 T
1 10 Q
(KOALA Project \320 BULL Research c/o INRIA) 354.03 392.33 T
(2004 route des Lucioles \320 06565 Valbonne Cedex \320 FRANCE) 290.44 380.33 T
0 18 Q
(Support) 72 351 T
1 10 Q
1.06 (You can mail any question or suggestion relative to) 72 322.33 P
0 F
1.06 (XPM) 290.05 322.33 P
1 F
1.06 ( by electronic mail to) 312.81 322.33 P
3 F
2.55 (lehors@sophia.inria.fr) 405.57 322.33 P
1 F
1.06 (.) 537.5 322.33 P
-0.05 (There is also a mailing list, please mail requests to) 72 310.33 P
3 F
-0.12 (xpm-talk-request@sophia.inria.fr) 275.53 310.33 P
1 F
-0.05 ( to subscribe. You) 467.42 310.33 P
0.2 (can find the latest release by anonymous ftp on avahi.inria.fr \050138.96.24.30\051 or export.lcs.mit.edu \05018.30.0.238\051, and) 72 298.33 P
(also an archive of the mailing list on avahi.) 72 286.33 T
FMENDPAGE
%%EndPage: "2" 3
%%Page: "1" 3
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
225 639 396 657 R
7 X
V
1 18 Q
0 X
(Table of Contents) 246.04 645 T
540 72 72 72 2 L
N
1 12 Q
(1  Introduction) 72 568 T
(..........................................................................................................................) 146.92 568 T
(1) 525 568 T
(2  The XPM Format) 72 542 T
(.................................................................................................................) 173.9 542 T
(1) 525 542 T
(3  The XPM Library) 72 516 T
(.................................................................................................................) 173.9 516 T
(4) 525 516 T
(3.1  The XPM types) 108 494 T
(.....................................................................................................) 209.88 494 T
(4) 525 494 T
(3.2  Functions to deal with XPM files) 108 472 T
(.........................................................................) 293.84 472 T
(6) 525 472 T
(3.3  Functions to deal with XPM data) 108 450 T
(.........................................................................) 293.84 450 T
(9) 525 450 T
(3.4  Functions to deal with XPM files and data) 108 428 T
(...........................................................) 335.82 428 T
(11) 519.01 428 T
(3.5  Functions to deal with XPM buffers) 108 406 T
(.....................................................................) 305.83 406 T
(12) 519.01 406 T
(3.6  Functions to deal with XPM files and buffers) 108 384 T
(......................................................) 350.81 384 T
(13) 519.01 384 T
(3.7  Miscellaneous functions) 108 362 T
(.......................................................................................) 251.86 362 T
(14) 519.01 362 T
FMENDPAGE
%%EndPage: "1" 4
%%Page: "1" 4
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(1) 303.11 54.85 T
0 18 Q
(1) 72 680.84 T
(Introduction) 93.6 680.84 T
1 10 Q
0.52 (First, Why another image format? We \050Koala team at Bull Research, France\051 felt that most images bundled with X) 72 652.18 P
0.57 (applications will be small "icons", and that since many applications are color-customizable, existing image formats) 72 640.18 P
-0.18 (such as gif, tiff, iff, etc... were intended for big images with well-defined colors and so weren\325t adapted to the task. So) 72 628.18 P
0 F
(XPM) 72 616.18 T
1 F
( was designed with these criterions in mind:) 94.76 616.18 T
(\245) 72 598.18 T
(be editable by hand \050under emacs, vi...\051. Color pixmap editors aren\325t available everywhere.) 86.4 598.18 T
(\245) 72 580.18 T
(be includable in C code. It is unreasonable to load 1000 pixmap files on each start of an application.) 86.4 580.18 T
(\245) 72 562.18 T
(be a portable, mailable ascii format.) 86.4 562.18 T
(\245) 72 544.18 T
(provide defaults for monochrome/color/grayscale renderings.) 86.4 544.18 T
(\245) 72 526.18 T
-0.01 (provide overriding of colors. This way if the user wants your application to be bluish instead of greenish, you can) 86.4 526.18 P
(use the SAME icon files.) 86.4 514.18 T
(\245) 72 496.18 T
(allow comments to be included in the file.) 86.4 496.18 T
(\245) 72 478.18 T
(compression must be managed apart of the format.) 86.4 478.18 T
0 18 Q
(2) 72 420.84 T
(The XPM Format) 93.6 420.84 T
1 10 Q
0.02 (The) 72 392.18 P
0 F
0.02 (XPM) 90.06 392.18 P
1 F
0.02 ( format presents a C syntax, in order to provide the ability to include) 112.81 392.18 P
0 F
0.02 (XPM) 389.26 392.18 P
1 F
0.02 ( files in C and C++ programs. It) 412.01 392.18 P
(is in fact an array of strings composed of six different sections as follows:) 72 380.18 T
(/* XPM */ static char*) 129.6 362.18 T
3 F
(<variable_name>) 222.6 362.18 T
1 F
([] = {) 312.55 362.18 T
(<Values>) 129.6 344.18 T
(<Colors>) 129.6 326.18 T
(<Pixels>) 129.6 308.18 T
(<Extensions>) 129.6 290.18 T
(};) 129.6 272.18 T
(The words are separated by a white space which can be composed of space and tabulation characters.) 72 248.18 T
-0.15 (The) 72 224.18 P
3 F
-0.36 (<Values>) 89.89 224.18 P
1 F
-0.15 ( section is a string containing four or six integers in base 10 that correspond to: the pixmap width and) 137.86 224.18 P
0.46 (height, the number of colors, the number of characters per pixel \050so there is no limit on the number of colors\051, and,) 72 212.18 P
(optionally the hotspot coordinates and the) 72 200.18 T
0 F
(XPMEXT) 241.9 200.18 T
1 F
( tag if there is any extension following the) 285.2 200.18 T
3 F
(<Pixels>) 456.48 200.18 T
1 F
( section.) 504.45 200.18 T
3 F
(<width> <height> <ncolors> <cpp> [<x_hotspot> <y_hotspot>] [XPMEXT]) 72 176.18 T
1 F
(The) 72 152.18 T
3 F
(Colors) 90.04 152.18 T
1 F
( section contains as many strings as there are colors, and each string is as follows:) 126.02 152.18 T
3 F
(<chars> {<key> <color>}+) 72 128.18 T
1 F
0.07 (Where) 72 104.18 P
3 F
0.18 (<chars>) 101.21 104.18 P
1 F
0.07 ( is the) 143.18 104.18 P
3 F
0.18 (<chars_per_pixel>) 169.78 104.18 P
1 F
0.07 ( length string \050not surrounded by anything\051 representing the pixels,) 271.73 104.18 P
FMENDPAGE
%%EndPage: "1" 5
%%Page: "2" 5
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(2) 303 56.01 T
3 10 Q
-0.43 (<color>) 72 686.33 P
1 F
-0.18 ( is the specified color, and) 113.98 686.33 P
3 F
-0.43 (<key>) 220.32 686.33 P
1 F
-0.18 ( is a keyword describing in which context this color should be used. Cur-) 250.3 686.33 P
(rently the keys may have the following values:) 72 674.33 T
( m) 144 656.33 T
(for mono visual) 216 656.33 T
( s) 144 640.33 T
( for symbolic name) 216 640.33 T
( g4) 144 624.33 T
( for 4-level grayscale) 216 624.33 T
( g) 144 608.33 T
( for grayscale with more than 4 levels) 216 608.33 T
( c) 144 592.33 T
( for color visual) 216 592.33 T
0.14 (Colors can be specified by giving the colorname, a # followed by the RGB code in hexadecimal, or a % followed by) 72 568.33 P
-0.35 (the HSV code \050not implemented\051. The symbolic name provides the ability of specifying the colors at load time and not) 72 556.33 P
0.05 (to hard-code them in the file. Also the string) 72 544.33 P
0 F
0.05 (None) 252.29 544.33 P
1 F
0.05 ( can be given as a colorname to mean \322transparent\323. Transparency) 274.5 544.33 P
(is handled by providing a masking bitmap in addition to the pixmap.) 72 532.33 T
1.18 (The) 72 508.33 P
3 F
2.82 (<Pixels>) 91.22 508.33 P
1 F
1.18 ( section is composed by) 139.19 508.33 P
3 F
2.82 (<height>) 243.07 508.33 P
1 F
1.18 ( strings of) 291.04 508.33 P
3 F
2.82 (<width>) 337.05 508.33 P
1 F
1.18 ( *) 379.03 508.33 P
3 F
2.82 (<chars_per_pixel>) 391.37 508.33 P
1 F
1.18 ( characters,) 493.32 508.33 P
0.2 (where every) 72 496.33 P
3 F
0.48 (<chars_per_pixel>) 124.01 496.33 P
1 F
0.2 ( length string must be one of the previously defined groups in the) 225.96 496.33 P
3 F
0.48 (<Colors>) 492.03 496.33 P
1 F
(section.) 72 484.33 T
0.18 (Then follows the) 72 460.33 P
3 F
0.43 (<Extensions>) 142.76 460.33 P
1 F
0.18 ( section which must be labeled, if not empty, in the) 214.72 460.33 P
3 F
0.43 (<Values>) 423.49 460.33 P
1 F
0.18 ( section as previ-) 471.46 460.33 P
(ously described. This section may be composed by several) 72 448.33 T
3 F
(<Extension>) 308.5 448.33 T
1 F
( subsections which may be of two types:) 374.46 448.33 T
(\245) 72 430.33 T
( one stand alone string composed as follows:) 86.4 430.33 T
3 F
(XPMEXT <extension-name> <extension-data>) 86.4 414.33 T
1 F
(\245) 72 396.33 T
( or a block composed by several strings:) 86.4 396.33 T
3 F
(XPMEXT <extension-name>) 86.4 380.33 T
(<related extension-data composed of several strings>) 86.4 364.33 T
1 F
(Finally, if not empty, this section must end by the following string:) 72 340.33 T
3 F
(XPMENDEXT) 72 316.33 T
1 F
-0.28 (To avoid possible conflicts with extension names in shared files, they should be prefixed by the name of the company.) 72 292.33 P
(This would ensure unicity.) 72 280.33 T
FMENDPAGE
%%EndPage: "2" 6
%%Page: "3" 6
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(3) 303.11 54.85 T
1 10 Q
-0.11 (Below is an example which is the XPM file of a plaid pixmap. This is a 22x22 pixmap, with 4 colors and 2 characters) 72 686.18 P
-0.12 (per pixel. The hotspot coordinates are \0500, 0\051. There are symbols and default colors for color and monochrome visuals.) 72 674.18 P
(Finally there are two extensions.) 72 662.18 T
3 F
(/* XPM */) 72 620.18 T
(static char * plaid[] = {) 72 608.18 T
(/* plaid pixmap) 72 596.18 T
( * width height ncolors chars_per_pixel */) 72 584.18 T
("22 22 4 2 0 0 XPMEXT",) 72 572.18 T
(/* colors */) 72 560.18 T
("   c red) 72 548.18 T
(   m white  s light_color ",) 131.97 548.18 T
("Y  c green) 72 536.18 T
(  m black  s lines_in_mix ",) 137.96 536.18 T
("+  c yellow) 72 524.18 T
( m white  s lines_in_dark ",) 143.96 524.18 T
("x) 72 512.18 T
( m black  s dark_color ",) 144 512.18 T
(/* pixels */) 72 500.18 T
("x   x   x x x   x   x x x x x x + x x x x x ",) 72 488.18 T
("  x   x   x   x   x   x x x x x x x x x x x ",) 72 476.18 T
("x   x   x x x   x   x x x x x x + x x x x x ",) 72 464.18 T
("  x   x   x   x   x   x x x x x x x x x x x ",) 72 452.18 T
("x   x   x x x   x   x x x x x x + x x x x x ",) 72 440.18 T
("Y Y Y Y Y x Y Y Y Y Y + x + x + x + x + x + ",) 72 428.18 T
("x   x   x x x   x   x x x x x x + x x x x x ",) 72 416.18 T
("  x   x   x   x   x   x x x x x x x x x x x ",) 72 404.18 T
("x   x   x x x   x   x x x x x x + x x x x x ",) 72 392.18 T
("  x   x   x   x   x   x x x x x x x x x x x ",) 72 380.18 T
("x   x   x x x   x   x x x x x x + x x x x x ",) 72 368.18 T
("          x           x   x   x Y x   x   x ",) 72 356.18 T
("          x             x   x   Y   x   x   ",) 72 344.18 T
("          x           x   x   x Y x   x   x ",) 72 332.18 T
("          x             x   x   Y   x   x   ",) 72 320.18 T
("          x           x   x   x Y x   x   x ",) 72 308.18 T
("x x x x x x x x x x x x x x x x x x x x x x ",) 72 296.18 T
("          x           x   x   x Y x   x   x ",) 72 284.18 T
("          x             x   x   Y   x   x   ",) 72 272.18 T
("          x           x   x   x Y x   x   x ",) 72 260.18 T
("          x             x   x   Y   x   x   ",) 72 248.18 T
("          x           x   x   x Y x   x   x ") 72 236.18 T
("XPMEXT ext1 data1",) 72 224.18 T
("XPMEXT ext2",) 72 212.18 T
("data2_1",) 72 200.18 T
("data2_2",) 72 188.18 T
("XPMENDEXT") 72 176.18 T
(};) 72 164.18 T
FMENDPAGE
%%EndPage: "3" 7
%%Page: "4" 7
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(4) 303 56.01 T
0 18 Q
(3) 72 681 T
(The XPM Library) 93.6 681 T
1 10 Q
0.51 (The XPM library provides a set of Xlib-level functions which allows to deal with images, pixmaps, XPM file, data) 72 652.33 P
(\050included XPM file\051, and buffer \050XPM file in memory\051 in many ways.) 72 640.33 T
(The following sections describe these functions and how to use them.) 72 616.33 T
0 14 Q
(3.1) 72 561.67 T
(The XPM types) 100.8 561.67 T
1 10 Q
-0.11 (To provide a simple interface all these functions take, in addition to their main arguments such as the display, a struc-) 72 540.33 P
0.1 (ture called) 72 528.33 P
0 F
0.1 (XpmAttributes) 116.62 528.33 P
1 F
0.1 (. This structure may be considered as composed of two different groups of members. The) 181.57 528.33 P
-0.39 (first one is composed of attributes to pass data such as colormap and visual and attributes to retrieve returned data such) 72 516.33 P
0.38 (as pixmap\325s width and height. The second group provides a way to rewrite an) 72 504.33 P
0 F
0.38 (XPM) 390.21 504.33 P
1 F
0.38 ( file without losing information) 412.97 504.33 P
-0.14 (such as comments, color defaults and symbolic names which may exist in the original file \050i.e. the) 72 492.33 P
0 F
-0.14 (XpmInfo) 463.8 492.33 P
1 F
-0.14 ( structure) 502.67 492.33 P
(in) 72 480.33 T
0 F
(XPM 2) 82.27 480.33 T
1 F
(\051. The) 112.53 480.33 T
0 F
(XpmAttributes) 138.89 480.33 T
1 F
( structure is defined as follows:) 203.85 480.33 T
(typedef struct {) 72 462.33 T
( unsigned long valuemask;) 144 446.33 T
(/* Specifies which attributes are defined */) 288 446.33 T
( Visual *visual;) 144 430.33 T
(/* Specifies the visual to use */) 288 430.33 T
( Colormap colormap;) 144 414.33 T
(/* Specifies the colormap to use */) 288 414.33 T
( unsigned int depth;) 144 398.33 T
(/* Specifies the depth */) 288 398.33 T
( unsigned int width;) 144 382.33 T
(/* Returns the width of the created pixmap */) 288 382.33 T
( unsigned int height;) 144 366.33 T
(/* Returns the height of the created pixmap */) 288 366.33 T
( unsigned int x_hotspot;) 144 350.33 T
(/* Returns the x hotspot\325s coordinate */) 288 350.33 T
( unsigned int y_hotspot;) 144 334.33 T
(/* Returns the y hotspot\325s coordinate */) 288 334.33 T
( unsigned int cpp;) 144 318.33 T
(/* Specifies the number of char per pixel */) 288 318.33 T
( Pixel *pixels;) 144 302.33 T
(/* List of used color pixels */) 288 302.33 T
( unsigned int npixels;) 144 286.33 T
(/* Number of pixels */) 288 286.33 T
( XpmColorSymbol *colorsymbols;) 144 270.33 T
(/* Array of color symbols to override */) 288 270.33 T
( unsigned int numsymbols;) 144 254.33 T
(/* Number of symbols */) 288 254.33 T
( char *rgb_fname;) 144 238.33 T
(/* RGB text file name */) 288 238.33 T
( unsigned int nextensions;) 144 222.33 T
(/* Number of extensions */) 288 222.33 T
( XpmExtension *extensions;) 144 206.33 T
(/* Array of extensions */) 288 206.33 T
( /* Infos */) 144 190.33 T
( int ncolors;) 144 174.33 T
(/* Number of colors */) 288 174.33 T
( char ***colorTable;) 144 158.33 T
(/* Color table pointer */) 288 158.33 T
( char *hints_cmt;) 144 142.33 T
(/* Comment of the hints section */) 288 142.33 T
( char *colors_cmt;) 144 126.33 T
(/* Comment of the colors section */) 288 126.33 T
( char *pixels_cmt;) 144 110.33 T
(/* Comment of the pixels section */) 288 110.33 T
FMENDPAGE
%%EndPage: "4" 8
%%Page: "5" 8
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(5) 303.11 54.85 T
1 10 Q
( unsigned int mask_pixel;) 144 686.18 T
(/* Transparent pixel\325s color table index */) 288 686.18 T
( /* Color Allocation Directives */) 144 670.18 T
( unsigned int exactColors;) 144 654.18 T
(/* Only use exact colors for visual */) 288 654.18 T
( unsigned int closeness;) 144 638.18 T
(/* Allowable RGB deviation */) 288 638.18 T
(unsigned int red_closeness;) 144 622.18 T
(/* Allowable red deviation */) 288 622.18 T
(unsigned int green_closeness;) 144 606.18 T
(/* Allowable green deviation */) 288 606.18 T
(unsigned int blue_closeness;) 144 590.18 T
(/* Allowable blue deviation */) 288 590.18 T
(int color_key;) 144 574.18 T
(/* Use colors from this color set */) 288 574.18 T
(} XpmAttributes;) 72 558.18 T
0.03 (The valuemask is the bitwise inclusive OR of the valid attribute mask bits. If the valuemask is zero, the attributes are) 72 534.18 P
(ignored and not referenced. And default values are taken for needed attributes which are not specified.) 72 522.18 T
(The colorTable is a two dimensional array of strings, organized as follows:) 72 498.18 T
(colorTable[color#][0] points to the character string associated to the color.) 72 480.18 T
(colorTable[color#][1] points to the symbolic name of the color.) 72 468.18 T
(colorTable[color#][2] points to the default color for monochrome visuals.) 72 456.18 T
(colorTable[color#][3] points to the default colXor for 4-level grayscale visuals.) 72 444.18 T
(colorTable[color#][4] points to the default color for other grayscale visuals.) 72 432.18 T
(colorTable[color#][5] points to the default color for color visuals.) 72 420.18 T
-0.12 (Comments are limited to a single comment string by section. If more exist in the read file, then only the last comment) 72 396.18 P
(of each section will be stored.) 72 384.18 T
0.05 (To get information back while writing out to a file, you just have to set the mask bits) 72 360.18 P
0 F
0.05 (XpmReturnInfos) 414.1 360.18 P
1 F
0.05 ( to the value-) 487.39 360.18 P
0.48 (mask of an) 72 348.18 P
0 F
0.48 (XpmAttributes) 119.79 348.18 P
1 F
0.48 (structure that you pass to the) 187.73 348.18 P
0 F
0.48 (XpmReadFileToPixmap) 307.75 348.18 P
1 F
0.48 ( function while reading the file,) 411.58 348.18 P
(and then give the structure back to the) 72 336.18 T
0 F
(XpmWriteFileFromPixmap) 226.88 336.18 T
1 F
(function while writing.) 348.19 336.18 T
(To allow overriding of colors at load time the) 72 294.18 T
0 F
(XPM) 256.6 294.18 T
1 F
( library defines the) 279.36 294.18 T
0 F
(XpmColorSymbol) 357.07 294.18 T
1 F
( structure which contains:) 434.81 294.18 T
(typedef struct {) 72 276.18 T
( char *name;) 144 260.18 T
(/* Symbolic color name */) 288 260.18 T
( char *value;) 144 244.18 T
(/* Color value */) 288 244.18 T
( Pixel pixel;) 144 228.18 T
(/* Color pixel */) 288 228.18 T
(} XpmColorSymbol;) 72 212.18 T
0.64 (To override default colors at load time, you just have to pass, via the) 72 188.18 P
0 F
0.64 (XpmAttributes) 357.47 188.18 P
1 F
0.64 ( structure, a list of) 422.42 188.18 P
0 F
0.64 (XpmCol-) 500.58 188.18 P
-0.11 (orSymbol) 72 176.18 P
1 F
-0.11 ( elements containing the desired colors to the) 113.65 176.18 P
0 F
-0.11 (XpmReadFileToPixmap) 295.95 176.18 P
1 F
-0.11 ( or) 399.78 176.18 P
0 F
-0.11 (XpmCreatePixmapFromData) 412.88 176.18 P
-0.15 (XPM) 72 164.18 P
1 F
-0.15 ( functions. These colors can be specified by giving the color name in the value member or directly by giving the) 94.76 164.18 P
-0.4 (corresponding pixel in the pixel member. In the latter case the value member must be set to) 72 152.18 P
0 F
-0.4 (NULL) 432.67 152.18 P
1 F
-0.4 ( otherwise the given) 460.43 152.18 P
(pixel will not be considered.) 72 140.18 T
-0.32 (In addition, is is possible to set the pixel for a specific color) 72 116.18 P
0 F
-0.32 (value) 308.73 116.18 P
1 F
-0.32 (at load time by setting the color name to NULL, and) 333.67 116.18 P
0.32 (setting the value and pixel fields appropriately. For example, by setting the color name to NULL, the value to \322red\323) 72 104.18 P
FMENDPAGE
%%EndPage: "5" 9
%%Page: "6" 9
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(6) 303 56.01 T
1 10 Q
0.07 (and the pixel to 51, all symbolic colors that are assigned to \322red\323 will be set to pixel 51. It is even possible to specify) 72 686.33 P
(the pixel used for the transparent color \322none\323 when no mask is required.) 72 674.33 T
(To pass and retrieve extension data use the) 72 650.33 T
0 F
(XpmExtension) 245.76 650.33 T
1 F
( structure which is defined below:) 309.06 650.33 T
(typedef struct {) 72 632.33 T
( char *name;) 144 616.33 T
(/* name of the extension */) 288 616.33 T
( unsigned int nlines;) 144 600.33 T
(/* number of lines in this extension */) 288 600.33 T
( char **lines;) 144 584.33 T
(/* pointer to the extension array of strings */) 288 584.33 T
(} XpmExtension;) 72 568.33 T
-0.14 (To retrieve possible extension data stored in an) 72 544.33 P
0 F
-0.14 (XPM) 261.85 544.33 P
1 F
-0.14 ( file or data, you must set the mask bits) 284.61 544.33 P
0 F
-0.14 (XpmReturnExtensions) 442.27 544.33 P
1 F
0.18 (to the valuemask of an) 72 532.33 P
0 F
0.18 (XpmAttributes) 165.87 532.33 P
1 F
0.18 ( structure that you pass to the read function you use. Then the same structure) 230.82 532.33 P
(may be passed the same way to any write function if you set the mask bits) 72 520.33 T
0 F
(XpmExtensions) 370.69 520.33 T
1 F
( to the valuemask.) 437.88 520.33 T
0 14 Q
(3.2) 72 465.67 T
(Functions to deal with XPM files) 100.8 465.67 T
1 10 Q
(To create an image from an) 72 444.33 T
0 F
(XPM) 184.68 444.33 T
1 F
( file, use) 207.44 444.33 T
0 F
(XpmReadFileToImage) 244.07 444.33 T
1 F
(.) 341.79 444.33 T
(int XpmReadFileToImage\050) 72 426.33 T
4 F
(display, filename, image_return, shapeimage_return, attributes) 180.54 426.33 T
1 F
(\051) 434.28 426.33 T
(Display) 108 414.33 T
4 F
(*display;) 141.59 414.33 T
1 F
(char) 108 402.33 T
4 F
(*filename;) 127.7 402.33 T
1 F
(XImage) 108 390.33 T
4 F
(**image_return;) 142.69 390.33 T
1 F
(XImage) 108 378.33 T
4 F
(**shapeimage_return;) 142.69 378.33 T
1 F
(XpmAttributes) 108 366.33 T
4 F
(*attributes;) 170.47 366.33 T
(display) 72 350.33 T
1 F
(Specifies the connection to the X server.) 171 350.33 T
4 F
(filename) 72 334.33 T
1 F
(Specifies the file name to use.) 171 334.33 T
4 F
(image_return) 72 318.33 T
1 F
(Returns the image which is created.) 171 318.33 T
4 F
(shapeimage_return) 72 302.33 T
1 F
(Returns the shape mask image which is created if any.) 171 302.33 T
4 F
(attributes) 72 286.33 T
1 F
(Specifies the location of an) 171 286.33 T
0 F
(XpmAttributes) 282.31 286.33 T
1 F
( structure to get and store information.) 347.26 286.33 T
-0.11 (The) 72 262.33 P
0 F
-0.11 (XpmReadFileToImage) 89.93 262.33 P
1 F
-0.11 ( function reads in a file in the) 187.64 262.33 P
0 F
-0.11 (XPM) 306.65 262.33 P
1 F
-0.11 ( format. If the file cannot be opened,) 329.4 262.33 P
0 F
-0.11 (XpmReadFile-) 477.26 262.33 P
0.34 (ToImage) 72 250.33 P
1 F
0.34 ( returns) 110.31 250.33 P
0 F
0.34 (XpmOpenFailed) 143.74 250.33 P
1 F
0.34 (. If the file can be opened but does not contain valid) 214.82 250.33 P
0 F
0.34 (XPM) 429.01 250.33 P
1 F
0.34 (data, it returns) 454.6 250.33 P
0 F
0.34 (Xpm-) 515.57 250.33 P
(FileInvalid) 72 238.33 T
1 F
(. If insufficient working storage is allocated, it returns) 118.65 238.33 T
0 F
(XpmNoMemory) 336.55 238.33 T
1 F
(.) 406.5 238.33 T
1.21 (If the passed) 72 214.33 P
0 F
1.21 (XpmAttributes) 128.63 214.33 P
1 F
1.21 ( structure pointer is not) 193.59 214.33 P
0 F
1.21 (NULL) 294.84 214.33 P
1 F
1.21 (,) 322.61 214.33 P
0 F
1.21 (XpmReadFileToImage) 328.81 214.33 P
1 F
1.21 ( looks for the following at-) 426.53 214.33 P
0.11 (tributes:) 72 202.33 P
0 F
0.11 (XpmVisual) 107.37 202.33 P
1 F
0.11 (,) 155.68 202.33 P
0 F
0.11 (XpmColormap) 160.79 202.33 P
1 F
0.11 (,) 225.2 202.33 P
0 F
0.11 (XpmDepth) 230.3 202.33 P
1 F
0.11 (,) 277.5 202.33 P
0 F
0.11 (XpmColorSymbols) 282.6 202.33 P
1 F
0.11 (,) 364.23 202.33 P
0 F
0.11 (XpmExactColors) 369.33 202.33 P
1 F
0.11 (,) 443.17 202.33 P
0 F
0.11 (XpmCloseness) 448.28 202.33 P
1 F
0.11 (,) 510.47 202.33 P
0 F
0.11 (Xpm-) 515.57 202.33 P
-0.28 (RGBCloseness, XpmReturnPixels) 72 190.33 P
1 F
-0.28 (,) 216.08 190.33 P
0 F
-0.28 (XpmReturnExtensions) 220.79 190.33 P
1 F
-0.28 (,) 318.52 190.33 P
0 F
-0.28 (XpmReturnInfos) 323.23 190.33 P
1 F
-0.28 (, and sets the) 396.52 190.33 P
0 F
-0.28 (XpmSize) 449.51 190.33 P
1 F
-0.28 ( and possibly) 487.82 190.33 P
(the) 72 178.33 T
0 F
(XpmHotspot) 86.71 178.33 T
1 F
( attributes when returning.) 141.68 178.33 T
0 F
0.78 (XpmReadFileToImage) 72 154.33 P
1 F
0.78 ( allocates colors, as read from the file or possibly overridden as specified in the) 169.72 154.33 P
0 F
0.78 (XpmCol-) 500.58 154.33 P
0.05 (orSymbols) 72 142.33 P
1 F
0.05 ( attributes. The colors are allocated using the color settings for the visual specified by the) 117.54 142.33 P
0 F
0.05 (XpmColorKey) 477.26 142.33 P
1 F
0.07 (attribute, which has the value) 72 130.33 P
0 F
0.07 (XPM_MONO, XPM_GRAY4, XPM_GRAY,) 192.26 130.33 P
1 F
0.07 (or) 386.77 130.33 P
0 F
0.07 ( XPM_COLOR) 395.1 130.33 P
1 F
0.07 (. If the) 462.07 130.33 P
0 F
0.07 (XpmColor-) 491.15 130.33 P
(Key) 72 118.33 T
1 F
( attribute is not set it is determined by examining the type of visual.) 89.21 118.33 T
FMENDPAGE
%%EndPage: "6" 10
%%Page: "7" 10
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(7) 303.11 54.85 T
1 10 Q
0.04 (If no default value exist for the specified visual, it first looks for other defaults nearer to the monochrome visual type) 72 686.18 P
-0.57 (and secondly nearer to the color visual type. If the color which is found is not valid \050cannot parse it\051, it looks for another) 72 674.18 P
(default one according to the same algorithm.) 72 662.18 T
-0.28 (If allocating a color fails, and the) 72 638.18 P
0 F
-0.28 (closeness) 204.95 638.18 P
1 F
-0.28 ( attribute is set, it tries to find a color already in the colormap that is closest) 243.26 638.18 P
0.12 (to the desired color, and uses that. If no color can be found that is within) 72 626.18 P
0 F
0.12 (closeness) 365.95 626.18 P
1 F
0.12 (of the Red, Green and Blue com-) 406.88 626.18 P
-0.61 (ponents of the desired color, it reverts to trying other default values as explained above. For finer control over the close-) 72 614.18 P
0.77 (ness requirements of a particular icon, the) 72 602.18 P
0 F
0.77 (red_closeness) 247.28 602.18 P
1 F
0.77 (,) 305.02 602.18 P
0 F
0.77 (green_closeness) 314.06 602.18 P
1 F
0.77 (, and) 381.23 602.18 P
0 F
0.77 (blue_closeness) 404.7 602.18 P
1 F
0.77 ( attributes may be) 466.34 602.18 P
(used instead of the more general) 72 590.18 T
0 F
(closeness) 204.12 590.18 T
1 F
( attribute.) 242.43 590.18 T
0.54 (The RGB components are integers within the range 0 \050black\051 to 65535 \050white\051. A closeness of less than 10000, for) 72 566.18 P
-0.03 (example, will cause only quite close colors to be matched, while a closeness of more than 50000 will allow quite dis-) 72 554.18 P
-0.39 (similar colors to match. Specifying a closeness of more than 65535 will allow any color to match, thus forcing the icon) 72 542.18 P
-0.04 (to be drawn in color no matter how bad the colormap is. The value 40000 seems to be about right for many situations) 72 530.18 P
-0.03 (requiring reasonable but not perfect matches. With this setting the color must only be within the same general area of) 72 518.18 P
(the RGB cube as the desired color.) 72 506.18 T
0.2 (If the) 72 482.18 P
0 F
0.2 (exactColors) 96.26 482.18 P
1 F
0.2 ( attribute is set it then returns) 146.77 482.18 P
0 F
0.2 (XpmColorError) 267.24 482.18 P
1 F
0.2 (, otherwise it creates the images and returns Xpm-) 337.75 482.18 P
-0.08 (Success. If no color is found, and no close color exists or is wanted, and all visuals have been exhausted,) 72 470.18 P
0 F
-0.08 (XpmColor-) 491.15 470.18 P
(Failed) 72 458.18 T
1 F
( is returned.) 98.65 458.18 T
0 F
0.12 (XpmReadFileToImage) 72 434.18 P
1 F
0.12 ( returns the created image to image_return if not) 169.72 434.18 P
0 F
0.12 (NULL) 366.47 434.18 P
1 F
0.12 ( and possibly the created shapemask) 394.23 434.18 P
0.35 (to shapeimage_return if not) 72 422.18 P
0 F
0.35 (NULL) 186.11 422.18 P
1 F
0.35 (. If required it stores into the) 213.88 422.18 P
0 F
0.35 (XpmAttributes) 332.94 422.18 P
1 F
0.35 ( structure the list of the used pixels) 397.89 422.18 P
(and possible comments, color defaults and symbols.) 72 410.18 T
-0.31 (When finished the caller must free the images using) 72 386.18 P
0 F
-0.31 (XDestroyImage) 279.32 386.18 P
1 F
-0.31 (, the colors using) 346.48 386.18 P
0 F
-0.31 (XFreeColors) 416.02 386.18 P
1 F
-0.31 (, and possibly the) 470.97 386.18 P
(data returned into the) 72 374.18 T
0 F
(XpmAttributes) 159.71 374.18 T
1 F
( using) 224.67 374.18 T
0 F
(XpmFreeAttributes) 251.32 374.18 T
1 F
(.) 335.7 374.18 T
-0.39 (In addition on systems which support such features) 72 350.18 P
0 F
-0.39 (XpmReadFileToImage) 275.97 350.18 P
1 F
-0.39 (deals with compressed files by forking an) 375.79 350.18 P
0 F
0.12 (uncompress) 72 338.18 P
1 F
0.12 ( or) 123.08 338.18 P
0 F
0.12 (gzip) 136.64 338.18 P
1 F
0.12 ( process and reading from the piped result. It assumes that the specified file is compressed if the) 154.41 338.18 P
-0.3 (given file name ends by \325.Z\325 or \325.z\325. In case the file name does not end so,) 72 326.18 P
0 F
-0.3 (XpmReadFileToImage) 364.13 326.18 P
1 F
-0.3 ( first looks for a file) 461.84 326.18 P
-0.12 (of which the name is the given one followed by \325.Z\325 or \325.z\325; then if such a file does not exist, it looks for the given file) 72 314.18 P
-0.19 (\050assumed as not compressed\051. And if instead of a file name) 72 302.18 P
0 F
-0.19 (NULL) 308.67 302.18 P
1 F
-0.19 ( is passed to) 336.43 302.18 P
0 F
-0.19 (XpmReadFileToImage) 386.77 302.18 P
1 F
-0.19 (, it reads from) 484.49 302.18 P
(the standard input.) 72 290.18 T
(To create a pixmap from an) 72 248.18 T
0 F
(XPM) 185.24 248.18 T
1 F
( file, use) 207.99 248.18 T
0 F
(XpmReadFileToPixmap) 244.63 248.18 T
1 F
(.) 348.47 248.18 T
(int XpmReadFileToPixmap\050) 72 230.18 T
4 F
(display, d, filename, pixmap_return, shapemask_return, attributes) 186.11 230.18 T
1 F
(\051) 450.95 230.18 T
(Display) 108 218.18 T
4 F
(*display;) 141.59 218.18 T
1 F
(Drawable) 108 206.18 T
4 F
(d;) 149.35 206.18 T
1 F
(char) 108 194.18 T
4 F
(*filename;) 127.7 194.18 T
1 F
(Pixmap) 108 182.18 T
4 F
(*pixmap_return;) 141.04 182.18 T
1 F
(Pixmap) 108 170.18 T
4 F
(*shapemask_return;) 141.04 170.18 T
1 F
(XpmAttributes) 108 158.18 T
4 F
(*attributes;) 170.47 158.18 T
(display) 72 142.18 T
1 F
(Specifies the connection to the X server.) 171 142.18 T
4 F
(d) 72 126.18 T
1 F
(Specifies which screen the pixmap is created on.) 171 126.18 T
4 F
(filename) 72 110.18 T
1 F
(Specifies the file name to use.) 171 110.18 T
FMENDPAGE
%%EndPage: "7" 11
%%Page: "8" 11
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(8) 303 56.01 T
4 10 Q
(pixmap_return) 72 686.33 T
1 F
(Returns the pixmap which is created.) 171 686.33 T
4 F
(shapemask_return) 72 670.33 T
1 F
(Returns the shapemask which is created, if any.) 171 670.33 T
4 F
(attributes) 72 654.33 T
1 F
(Specifies the location of an) 171 654.33 T
0 F
(XpmAttributes) 282.31 654.33 T
1 F
( structure to get and store information.) 347.26 654.33 T
-0.19 (The) 72 630.33 P
0 F
-0.19 (XpmReadFileToPixmap) 89.85 630.33 P
1 F
-0.19 ( function creates X images using) 193.68 630.33 P
0 F
-0.19 (XpmReadFileToImage) 325.76 630.33 P
1 F
-0.19 ( and thus returns the same er-) 423.47 630.33 P
-0.56 (rors. In addition on success it then creates the related pixmaps, using) 72 618.33 P
0 F
-0.56 (XPutImage) 342.37 618.33 P
1 F
-0.56 (, which are returned to pixmap_return) 391.23 618.33 P
(and shapemask_return if not) 72 606.33 T
0 F
(NULL) 188.03 606.33 T
1 F
(, and finally destroys the created images using) 215.79 606.33 T
0 F
(XDestroyImage) 403.16 606.33 T
1 F
(.) 470.32 606.33 T
-0.17 (When finished the caller must free the pixmaps using) 72 582.33 P
0 F
-0.17 (XFreePixmap) 286.12 582.33 P
1 F
-0.17 (, the colors using) 345.51 582.33 P
0 F
-0.17 (XFreeColors) 415.61 582.33 P
1 F
-0.17 (, and possibly the) 470.56 582.33 P
(data returned into the) 72 570.33 T
0 F
(XpmAttributes) 159.71 570.33 T
1 F
( using) 224.67 570.33 T
0 F
(XpmFreeAttributes) 251.32 570.33 T
1 F
(.) 335.7 570.33 T
(To write out an image to an) 72 528.33 T
0 F
(XPM) 184.98 528.33 T
1 F
( file, use) 207.74 528.33 T
0 F
(XpmWriteFileFromImage) 244.37 528.33 T
1 F
(.) 357.06 528.33 T
0 F
(XpmWriteFileFromImage) 72 504.33 T
1 F
( writes out an image to an) 184.69 504.33 T
0 F
(XPM) 290.45 504.33 T
1 F
( file.) 313.21 504.33 T
(int XpmWriteFileFromImage\050) 72 486.33 T
4 F
(display, filename, image, shapeimage, attributes) 193.31 486.33 T
1 F
(\051) 387.09 486.33 T
(Display) 108 474.33 T
4 F
(*display;) 141.59 474.33 T
1 F
(char) 108 462.33 T
4 F
(*filename;) 127.7 462.33 T
1 F
(XImage) 108 450.33 T
4 F
(*image;) 142.69 450.33 T
1 F
(XImage) 108 438.33 T
4 F
(*shapeimage;) 142.69 438.33 T
1 F
(XpmAttributes) 108 426.33 T
4 F
(*attributes;) 170.47 426.33 T
(display) 72 410.33 T
1 F
(Specifies the connection to the X server.) 171 410.33 T
4 F
(filename) 72 394.33 T
1 F
(Specifies the file name to use.) 171 394.33 T
4 F
(image) 72 378.33 T
1 F
(Specifies the image.) 171 378.33 T
4 F
(shapeimage) 72 362.33 T
1 F
(Specifies the shape mask image.) 171 362.33 T
4 F
(attributes) 72 346.33 T
1 F
(Specifies the location of an) 171 346.33 T
0 F
(XpmAttributes) 282.31 346.33 T
1 F
( structure containing information.) 347.26 346.33 T
-0.49 (The) 72 322.33 P
0 F
-0.49 (XpmWriteFileFromImage) 89.55 322.33 P
1 F
-0.49 ( function writes an image and its possible shapeimage out to a file in the) 202.24 322.33 P
0 F
-0.49 (XPM) 486.09 322.33 P
1 F
-0.49 ( format.) 508.85 322.33 P
0.1 (If the file cannot be opened, it returns) 72 310.33 P
0 F
0.1 (XpmOpenFailed) 225.71 310.33 P
1 F
0.1 (. If insufficient working storage is allocated, it returns) 296.8 310.33 P
0 F
0.1 (Xpm-) 515.57 310.33 P
(NoMemory) 72 298.33 T
1 F
(. If no error occurs then it returns) 120.84 298.33 T
0 F
(XpmSuccess) 256.01 298.33 T
1 F
(.) 309.31 298.33 T
0.14 (If the passed) 72 274.33 P
0 F
0.14 (XpmAttributes) 125.43 274.33 P
1 F
0.14 ( structure pointer is not) 190.38 274.33 P
0 F
0.14 (NULL) 286.29 274.33 P
1 F
0.14 (,) 314.05 274.33 P
0 F
0.14 (XpmWriteFileFromImage) 319.19 274.33 P
1 F
0.14 ( looks for the following at-) 431.88 274.33 P
1.28 (tributes:) 72 262.33 P
0 F
1.28 (XpmColormap) 108.54 262.33 P
1 F
1.28 (,) 172.94 262.33 P
0 F
1.28 (XpmSize) 179.22 262.33 P
1 F
1.28 (,) 217.53 262.33 P
0 F
1.28 (XpmHotspot) 223.8 262.33 P
1 F
1.28 (,) 278.77 262.33 P
0 F
1.28 (XpmCharsPerPixel) 285.05 262.33 P
1 F
1.28 (,) 368.32 262.33 P
0 F
1.28 (XpmRgbFilename) 374.6 262.33 P
1 F
1.28 (,) 452.88 262.33 P
0 F
1.28 (XpmInfos) 459.16 262.33 P
1 F
1.28 ( and) 501.91 262.33 P
0 F
1.28 (Xp-) 523.9 262.33 P
(mExtensions) 72 250.33 T
1 F
(.) 126.42 250.33 T
0.26 (If the) 72 226.33 P
0 F
0.26 (XpmSize) 96.39 226.33 P
1 F
0.26 ( attributes are not defined) 134.7 226.33 P
0 F
0.26 (XpmWriteFileFromImage) 240.64 226.33 P
1 F
0.26 (performs an) 356.08 226.33 P
0 F
0.26 (XGetGeometry) 407.11 226.33 P
1 F
0.26 ( operation. If the) 472.61 226.33 P
0.26 (filename contains an extension such as \322.xpm\323, in order to get a valid C variable name, the dot character is replaced) 72 214.33 P
-0.32 (by an underscore \325_\325 when writing out. If the) 72 202.33 P
0 F
-0.32 (XpmInfos) 251.16 202.33 P
1 F
-0.32 (attributes are defined it writes out possible stored information) 296.09 202.33 P
0.1 (such as comments, color defaults and symbol. Finally if the) 72 190.33 P
0 F
0.1 (XpmRgbFilename) 313.38 190.33 P
1 F
0.1 (attribute is defined,) 394.26 190.33 P
0 F
0.1 (XpmWriteFile-) 474.5 190.33 P
(FromImage) 72 178.33 T
1 F
( searches for color names in this file and if found writes them out instead of the rgb values.) 122.51 178.33 T
0.62 (In addition on systems which support such features if the given file name ends by \325.Z\325 or \325.z\325 it is assumed to be a) 72 154.33 P
0.47 (compressed file. Then,) 72 142.33 P
0 F
0.47 (XpmWriteFileFromImage) 166.95 142.33 P
1 F
0.47 (writes to a piped) 282.6 142.33 P
0 F
0.47 (compress) 353.32 142.33 P
1 F
0.47 ( or) 393.29 142.33 P
0 F
0.47 (gzip) 407.55 142.33 P
1 F
0.47 ( process. And if instead of a) 425.32 142.33 P
(file name) 72 130.33 T
0 F
(NULL) 111.97 130.33 T
1 F
(is passed to) 142.23 130.33 T
0 F
(XpmWriteFileFromImage) 190.82 130.33 T
1 F
(, it writes to the standard output.) 303.5 130.33 T
FMENDPAGE
%%EndPage: "8" 12
%%Page: "9" 12
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(9) 303.11 54.85 T
1 10 Q
(To write out a pixmap to an) 72 686.18 T
0 F
(XPM) 185.54 686.18 T
1 F
( file, use) 208.29 686.18 T
0 F
(XpmWriteFileFromPixmap) 244.93 686.18 T
1 F
(.) 363.74 686.18 T
(int XpmWriteFileFromPixmap\050) 72 668.18 T
4 F
(display, filename, pixmap, shapemask, attributes) 198.88 668.18 T
1 F
(\051) 393.76 668.18 T
(Display) 108 656.18 T
4 F
(*display;) 141.59 656.18 T
1 F
(char) 108 644.18 T
4 F
(*filename;) 127.7 644.18 T
1 F
(Pixmap) 108 632.18 T
4 F
(pixmap;) 141.04 632.18 T
1 F
(Pixmap) 108 620.18 T
4 F
(shapemask;) 141.04 620.18 T
1 F
(XpmAttributes) 108 608.18 T
4 F
(*attributes;) 170.47 608.18 T
(display) 72 592.18 T
1 F
(Specifies the connection to the X server.) 171 592.18 T
4 F
(filename) 72 576.18 T
1 F
(Specifies the file name to use.) 171 576.18 T
4 F
(pixmap) 72 560.18 T
1 F
(Specifies the pixmap.) 171 560.18 T
4 F
(shapemask) 72 544.18 T
1 F
(Specifies the shape mask pixmap.) 171 544.18 T
4 F
(attributes) 72 528.18 T
1 F
(Specifies the location of an) 171 528.18 T
0 F
(XpmAttributes) 282.31 528.18 T
1 F
( structure containing information.) 347.26 528.18 T
1.15 (The) 72 504.18 P
0 F
1.15 (XpmWriteFileFromPixmap) 91.19 504.18 P
1 F
1.15 ( function uses) 209.99 504.18 P
0 F
1.15 (XGetImage) 271.46 504.18 P
1 F
1.15 ( to get from the given pixmaps the related X images) 320.86 504.18 P
0.69 (which are passed to) 72 492.18 P
0 F
0.69 (XpmWriteFileFromImage) 155.83 492.18 P
1 F
0.69 (. Finally) 268.52 492.18 P
0 F
0.69 (XpmWriteFileFromPixmap) 305.73 492.18 P
1 F
0.69 ( destroys the created images) 424.53 492.18 P
0.42 (using) 72 480.18 P
0 F
0.42 (XDestroyImage) 96.57 480.18 P
1 F
0.42 (. The) 163.74 480.18 P
0 F
0.42 (XpmWriteFileFromPixmap) 187.61 480.18 P
1 F
0.42 (function returns the same errors that) 309.33 480.18 P
0 F
0.42 (XpmWriteFileFro-) 458.95 480.18 P
(mImage) 72 468.18 T
1 F
( returns.) 106.97 468.18 T
0 14 Q
(3.3) 72 413.51 T
(Functions to deal with XPM data) 100.8 413.51 T
1 10 Q
0.18 (An) 72 392.18 P
0 F
0.18 (XPM) 86.89 392.18 P
1 F
0.18 ( data is an array of character strings which may be obtained by simply including an) 109.65 392.18 P
0 F
0.18 (XPM) 447.23 392.18 P
1 F
0.18 ( file into a C pro-) 469.99 392.18 P
(gram.) 72 380.18 T
(To create an image from an) 72 338.18 T
0 F
(XPM) 184.68 338.18 T
1 F
( data, use) 207.44 338.18 T
0 F
(XpmCreateImageFromData) 247.4 338.18 T
1 F
(.) 368.41 338.18 T
(int XpmCreateImageFromData\050) 72 320.18 T
4 F
(display, data, image_return, shapeimage_return, attributes) 199.96 320.18 T
1 F
(\051) 437.05 320.18 T
(Display) 108 308.18 T
4 F
(*display;) 141.59 308.18 T
1 F
(char) 108 296.18 T
4 F
(**data;) 127.7 296.18 T
1 F
(XImage) 108 284.18 T
4 F
(**image_return;) 142.69 284.18 T
1 F
(XImage) 108 272.18 T
4 F
(**shapeimage_return;) 142.69 272.18 T
1 F
(XpmAttributes) 108 260.18 T
4 F
(*attributes;) 170.47 260.18 T
(display) 72 244.18 T
1 F
(Specifies the connection to the X server.) 171 244.18 T
4 F
(data) 72 228.18 T
1 F
(Specifies the location of the data.) 171 228.18 T
4 F
(image_return) 72 212.18 T
1 F
(Returns the image which is created.) 171 212.18 T
4 F
(shapeimage_return) 72 196.18 T
1 F
(Returns the shape mask image which is created if any.) 171 196.18 T
4 F
(attributes) 72 180.18 T
1 F
-0.34 (Specifies the location of an) 171 180.18 P
0 F
-0.34 (XpmAttributes) 280.63 180.18 P
1 F
-0.34 ( structure to get and store information, or) 345.59 180.18 P
0 F
-0.34 (NULL) 509.74 180.18 P
1 F
-0.34 (.) 537.5 180.18 P
-0.03 (The) 72 156.18 P
0 F
-0.03 (XpmCreateImageFromData) 90.01 156.18 P
1 F
-0.03 ( function allows you to include in your C program an) 211.01 156.18 P
0 F
-0.03 (XPM) 425.78 156.18 P
1 F
-0.03 ( file which was written) 448.54 156.18 P
(out by functions such as) 72 144.18 T
0 F
(XpmWriteFileFromImage) 171.11 144.18 T
1 F
( or) 283.79 144.18 T
0 F
(XpmWriteFileFromPixmap) 297.12 144.18 T
1 F
( without reading in the file.) 415.92 144.18 T
0 F
0.09 (XpmCreateImageFromData) 72 120.18 P
1 F
0.09 ( exactly works as) 193 120.18 P
0 F
0.09 (XpmReadFileToImage) 264.96 120.18 P
1 F
0.09 ( does and returns the same way. It just reads) 362.68 120.18 P
-0.29 (data instead of a file. Here again, it is the caller\325s responsibility to free the returned images, the colors and possibly the) 72 108.18 P
FMENDPAGE
%%EndPage: "9" 13
%%Page: "10" 13
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(10) 300 56.01 T
1 10 Q
(data returned into the) 72 686.33 T
0 F
(XpmAttributes) 159.71 686.33 T
1 F
( structure.) 224.67 686.33 T
(To create a pixmap from an) 72 644.33 T
0 F
(XPM) 185.24 644.33 T
1 F
( data, use) 207.99 644.33 T
0 F
(XpmCreatePixmapFromData.) 247.96 644.33 T
1 F
(int XpmCreatePixmapFromData\050) 72 620.33 T
4 F
(display, d, data, pixmap_return, shapemask_return, attributes) 205.53 620.33 T
1 F
(\051) 453.72 620.33 T
(Display) 108 602.33 T
4 F
(*display;) 141.59 602.33 T
1 F
(Drawable) 108 590.33 T
4 F
(d;) 149.35 590.33 T
1 F
(char) 108 578.33 T
4 F
(**data;) 127.7 578.33 T
1 F
(Pixmap) 108 566.33 T
4 F
(*pixmap_return;) 141.04 566.33 T
1 F
(Pixmap) 108 554.33 T
4 F
(*shapemask_return;) 141.04 554.33 T
1 F
(XpmAttributes) 108 542.33 T
4 F
(*attributes;) 170.47 542.33 T
(display) 72 526.33 T
1 F
(Specifies the connection to the X server.) 171 526.33 T
4 F
(d) 72 510.33 T
1 F
(Specifies which screen the pixmap is created on.) 171 510.33 T
4 F
(data) 72 494.33 T
1 F
(Specifies the location of the data.) 171 494.33 T
4 F
(pixmap_return) 72 478.33 T
1 F
(Returns the pixmap which is created.) 171 478.33 T
4 F
(shapemask_return) 72 462.33 T
1 F
(Returns the shape mask pixmap which is created if any.) 171 462.33 T
4 F
(attributes) 72 446.33 T
1 F
-0.34 (Specifies the location of an) 171 446.33 P
0 F
-0.34 (XpmAttributes) 280.63 446.33 P
1 F
-0.34 ( structure to get and store information, or) 345.59 446.33 P
0 F
-0.34 (NULL) 509.74 446.33 P
1 F
-0.34 (.) 537.5 446.33 P
0.23 (The) 72 422.33 P
0 F
0.23 (XpmCreatePixmapFromData) 90.27 422.33 P
1 F
0.23 ( function creates X images using) 217.39 422.33 P
0 F
0.23 (XpmCreateImageFromData) 351.98 422.33 P
1 F
0.23 ( and thus returns) 472.98 422.33 P
0.36 (the same errors. In addition on success it then creates the related pixmaps, using) 72 410.33 P
0 F
0.36 (XPutImage) 399.52 410.33 P
1 F
0.36 (, which are returned to) 448.38 410.33 P
(pixmap_return and shapemask_return if not) 72 398.33 T
0 F
(NULL) 249.37 398.33 T
1 F
(, and finally destroys the created images using) 277.14 398.33 T
0 F
(XDestroyImage) 464.5 398.33 T
1 F
(.) 531.67 398.33 T
-0.43 (Do not forget to free the returned pixmaps, the colors, and possibly the data returned into the) 72 374.33 P
0 F
-0.43 (XpmAttributes) 438.01 374.33 P
1 F
-0.43 ( structure) 502.96 374.33 P
(whence done.) 72 362.33 T
0.19 (In some cases, one may want to create an) 72 320.33 P
0 F
0.19 (XPM) 241.4 320.33 P
1 F
0.19 ( data from an image in order to be able to create another image from) 264.15 320.33 P
(this data using the) 72 308.33 T
0 F
(XpmCreateImageFromData) 146.96 308.33 T
1 F
( function later on. To do so use) 267.96 308.33 T
0 F
(XpmCreateDataFromImage) 394.82 308.33 T
1 F
(.) 515.83 308.33 T
(int XpmCreateDataFromImage\050) 72 290.33 T
4 F
(display, data_return, image, shapeimage, attributes) 199.96 290.33 T
1 F
(\051) 407.07 290.33 T
(Display) 108 278.33 T
4 F
(*display;) 141.59 278.33 T
1 F
(char) 108 266.33 T
4 F
(***data_return;) 127.7 266.33 T
1 F
(XImage) 108 254.33 T
4 F
(*image;) 142.69 254.33 T
1 F
(XImage) 108 242.33 T
4 F
(*shapeimage;) 142.69 242.33 T
1 F
(XpmAttributes) 108 230.33 T
4 F
(*attributes;) 170.47 230.33 T
(display) 72 214.33 T
1 F
(Specifies the connection to the X server.) 171 214.33 T
4 F
(data_return) 72 198.33 T
1 F
(Returns the data which is created.) 171 198.33 T
4 F
(image) 72 182.33 T
1 F
(Specifies the image.) 171 182.33 T
4 F
(shapeimage) 72 166.33 T
1 F
(Specifies the shape mask image.) 171 166.33 T
4 F
(attributes) 72 150.33 T
1 F
(Specifies the location of an) 171 150.33 T
0 F
(XpmAttributes) 282.31 150.33 T
1 F
( structure containing information.) 347.26 150.33 T
0.28 (The) 72 126.33 P
0 F
0.28 (XpmCreateDataFromImage) 90.32 126.33 P
1 F
0.28 ( function exactly works as) 211.32 126.33 P
0 F
0.28 (XpmWriteFileFromImage) 320.15 126.33 P
1 F
0.28 ( does and returns the same) 432.84 126.33 P
0.14 (way. It just writes to a single block malloc\325ed data instead of to a file. It is the caller\325s responsibility to free the data,) 72 114.33 P
(using) 72 102.33 T
0 F
(XpmFree) 96.16 102.33 T
1 F
( when finished.) 136.67 102.33 T
FMENDPAGE
%%EndPage: "10" 14
%%Page: "11" 14
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(1) 300.45 54.85 T
(1) 305.78 54.85 T
0 10 Q
(XpmCreateDataFromPixmap) 72 686.18 T
1 F
( creates an) 199.12 686.18 T
0 F
(XPM) 243.8 686.18 T
1 F
( data from a pixmap.) 266.55 686.18 T
(int XpmCreateDataFromPixmap\050) 72 668.18 T
4 F
(display, data_return, pixmap, shapemask, attributes) 205.53 668.18 T
1 F
(\051) 413.74 668.18 T
(Display) 108 656.18 T
4 F
(*display;) 141.59 656.18 T
1 F
(char) 108 644.18 T
4 F
(***data_return;) 127.7 644.18 T
1 F
(Pixmap) 108 632.18 T
4 F
(pixmap;) 141.04 632.18 T
1 F
(Pixmap) 108 620.18 T
4 F
(shapemask;) 141.04 620.18 T
1 F
(XpmAttributes) 108 608.18 T
4 F
(*attributes;) 170.47 608.18 T
(display) 72 592.18 T
1 F
(Specifies the connection to the X server.) 171 592.18 T
4 F
(data_return) 72 576.18 T
1 F
(Returns the data which is created.) 171 576.18 T
4 F
(pixmap) 72 560.18 T
1 F
(Specifies the pixmap.) 171 560.18 T
4 F
(shapemask) 72 544.18 T
1 F
(Specifies the shape mask pixmap.) 171 544.18 T
4 F
(attributes) 72 528.18 T
1 F
(Specifies the location of an) 171 528.18 T
0 F
(XpmAttributes) 282.31 528.18 T
1 F
( structure containing information.) 347.26 528.18 T
0.56 (The) 72 504.18 P
0 F
0.56 (XpmCreateDataFromPixmap) 90.6 504.18 P
1 F
0.56 ( function uses) 217.72 504.18 P
0 F
0.56 (XGetImage) 277.4 504.18 P
1 F
0.56 ( to get from the given pixmaps the related X images) 326.8 504.18 P
-0.47 (which are passed to) 72 492.18 P
0 F
-0.47 (XpmCreateDataFromImage) 151.17 492.18 P
1 F
-0.47 (. Finally) 272.18 492.18 P
0 F
-0.47 (XpmCreateDataFromPixmap) 307.06 492.18 P
1 F
-0.47 ( destroys the created imag-) 434.18 492.18 P
-0.12 (es using) 72 480.18 P
0 F
-0.12 (XDestroyImage) 106.75 480.18 P
1 F
-0.12 (.) 173.91 480.18 P
0 F
-0.12 (XpmCreateDataFromPixmap) 178.79 480.18 P
1 F
-0.12 ( returns the same errors that) 305.91 480.18 P
0 F
-0.12 (XpmCreateDataFromImage) 419 480.18 P
1 F
(returns.) 72 468.18 T
0 14 Q
(3.4) 72 413.51 T
(Functions to deal with XPM files and data) 100.8 413.51 T
1 10 Q
0.5 (To directly tranform an) 72 392.18 P
0 F
0.5 (XPM) 170.04 392.18 P
1 F
0.5 ( file to and from an) 192.8 392.18 P
0 F
0.5 (XPM) 275.19 392.18 P
1 F
0.5 ( data array, without requiring an open X display, use) 297.94 392.18 P
0 F
0.5 (Xpm-) 515.57 392.18 P
(ReadFileToData) 72 380.18 T
1 F
( and) 142.51 380.18 T
0 F
(XpmWriteFileFromData) 161.94 380.18 T
1 F
(.) 268.52 380.18 T
0 F
(XpmReadFileToData) 72 338.18 T
1 F
( allocates and fills an) 163.61 338.18 T
0 F
(XPM) 250.49 338.18 T
1 F
( data array from an) 273.25 338.18 T
0 F
(XPM) 351.79 338.18 T
1 F
( file.) 374.54 338.18 T
(int XpmReadFileToData\050) 72 320.18 T
4 F
(filename, data_return) 174.43 320.18 T
1 F
(\051) 261.61 320.18 T
(char) 108 308.18 T
4 F
(*filename;) 127.7 308.18 T
1 F
(char) 108 296.18 T
4 F
(***data_return;) 127.7 296.18 T
(filename) 72 280.18 T
1 F
(Specifies the file name to read.) 171 280.18 T
4 F
(data_return) 72 264.18 T
1 F
(Returns the data array created.) 171 264.18 T
0 F
0.58 (XpmReadFileToData) 72 240.18 P
1 F
0.58 ( returns) 163.61 240.18 P
0 F
0.58 (XpmOpenFailed) 197.51 240.18 P
1 F
0.58 ( if it cannot open the file,) 268.6 240.18 P
0 F
0.58 (XpmNoMemory) 375.89 240.18 P
1 F
0.58 ( if insufficient working) 445.83 240.18 P
0.19 (storage is allocated,) 72 228.18 P
0 F
0.19 (XpmFileInvalid) 154.19 228.18 P
1 F
0.19 ( if this is not a valid) 221.94 228.18 P
0 F
0.19 (XPM) 305.21 228.18 P
1 F
0.19 ( file, and) 327.96 228.18 P
0 F
0.19 (XpmSuccess) 366.3 228.18 P
1 F
0.19 (otherwise. The allocated data) 422.29 228.18 P
(returned by) 72 216.18 T
0 F
(XpmReadFileToData) 120.29 216.18 T
1 F
( should be freed with) 211.9 216.18 T
0 F
(XpmFree) 298.79 216.18 T
1 F
( when done.) 339.3 216.18 T
0 F
(XpmWriteFileFromData) 72 174.18 T
1 F
( writes an) 178.58 174.18 T
0 F
(XPM) 219.94 174.18 T
1 F
( data array to an) 242.7 174.18 T
0 F
(XPM) 309.58 174.18 T
1 F
( file.) 332.34 174.18 T
(int XpmWriteFileFromData\050) 72 156.18 T
4 F
(filename, data) 187.21 156.18 T
1 F
(\051) 244.4 156.18 T
(char) 108 144.18 T
4 F
(*filename;) 127.7 144.18 T
1 F
(char) 108 132.18 T
4 F
(**data;) 127.7 132.18 T
(filename) 72 116.18 T
1 F
(Specifies the file name to write.) 171 116.18 T
FMENDPAGE
%%EndPage: "11" 15
%%Page: "12" 15
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(12) 300 56.01 T
4 10 Q
(data) 72 686.33 T
1 F
(Specifies the data array to read.) 171 686.33 T
0 F
-0.19 (XpmReadFileToData) 72 662.33 P
1 F
-0.19 ( returns) 163.61 662.33 P
0 F
-0.19 (XpmOpenFailed) 195.97 662.33 P
1 F
-0.19 ( if it cannot open the file,) 267.05 662.33 P
0 F
-0.19 (XpmFileInvalid) 368.95 662.33 P
1 F
-0.19 ( if this is not a valid) 436.7 662.33 P
0 F
-0.19 (XPM) 517.24 662.33 P
1 F
(data, and) 72 650.33 T
0 F
(XpmSuccess) 110.58 650.33 T
1 F
( otherwise.) 163.88 650.33 T
0 14 Q
(3.5) 72 595.67 T
(Functions to deal with XPM buffers) 100.8 595.67 T
1 10 Q
0.52 (An) 72 574.33 P
0 F
0.52 (XPM) 87.23 574.33 P
1 F
0.52 ( buffer is a character string which may be obtained by simply making the exact copy of an) 109.99 574.33 P
0 F
0.52 (XPM) 482.34 574.33 P
1 F
0.52 ( file into) 505.1 574.33 P
(memory.) 72 562.33 T
(To create an image from an) 72 520.33 T
0 F
(XPM) 184.68 520.33 T
1 F
( buffer, use) 207.44 520.33 T
0 F
(XpmCreateImageFromBuffer) 255.17 520.33 T
1 F
(.) 383.39 520.33 T
(int XpmCreateImageFromBuffer\050) 72 502.33 T
4 F
(display, buffer, image_return, shapeimage_return, attributes) 207.18 502.33 T
1 F
(\051) 450.37 502.33 T
(Display) 108 490.33 T
4 F
(*display;) 141.59 490.33 T
1 F
(char) 108 478.33 T
4 F
(*buffer;) 127.7 478.33 T
1 F
(XImage) 108 466.33 T
4 F
(**image_return;) 142.69 466.33 T
1 F
(XImage) 108 454.33 T
4 F
(**shapeimage_return;) 142.69 454.33 T
1 F
(XpmAttributes) 108 442.33 T
4 F
(*attributes;) 170.47 442.33 T
(display) 72 426.33 T
1 F
(Specifies the connection to the X server.) 171 426.33 T
4 F
(buffer) 72 410.33 T
1 F
(Specifies the location of the buffer.) 171 410.33 T
4 F
(image_return) 72 394.33 T
1 F
(Returns the image which is created.) 171 394.33 T
4 F
(shapeimage_return) 72 378.33 T
1 F
(Returns the shape mask image which is created if any.) 171 378.33 T
4 F
(attributes) 72 362.33 T
1 F
-0.34 (Specifies the location of an) 171 362.33 P
0 F
-0.34 (XpmAttributes) 280.63 362.33 P
1 F
-0.34 ( structure to get and store information, or) 345.59 362.33 P
0 F
-0.34 (NULL) 509.74 362.33 P
1 F
-0.34 (.) 537.5 362.33 P
-0.04 (The) 72 338.33 P
0 F
-0.04 (XpmCreateImageFromBuffer) 90 338.33 P
1 F
-0.04 ( works the same way as) 218.22 338.33 P
0 F
-0.04 (XpmReadFileToImage) 315.12 338.33 P
1 F
-0.04 (, it just parses the buffer instead) 412.84 338.33 P
0.23 (of the file. Be aware that the feature provided on some systems by) 72 326.33 P
0 F
0.23 (XpmReadFileToImage) 341.99 326.33 P
1 F
0.23 (to deal with compressed) 442.44 326.33 P
(files is not available here.) 72 314.33 T
(To create a pixmap from an) 72 272.33 T
0 F
(XPM) 185.24 272.33 T
1 F
( buffer, use) 207.99 272.33 T
0 F
(XpmCreatePixmapFromBuffer) 255.73 272.33 T
1 F
(.) 390.07 272.33 T
(int XpmCreatePixmapFromBuffer\050) 72 254.33 T
4 F
(display, d, buffer, pixmap_return, shapemask_return, attributes) 212.74 254.33 T
1 F
(\051) 467.04 254.33 T
(Display) 108 242.33 T
4 F
(*display;) 141.59 242.33 T
1 F
(Drawable) 108 230.33 T
4 F
(d;) 149.35 230.33 T
1 F
(char) 108 218.33 T
4 F
(*buffer;) 127.7 218.33 T
1 F
(Pixmap) 108 206.33 T
4 F
(*pixmap_return;) 141.04 206.33 T
1 F
(Pixmap) 108 194.33 T
4 F
(*shapemask_return;) 141.04 194.33 T
1 F
(XpmAttributes) 108 182.33 T
4 F
(*attributes;) 170.47 182.33 T
(display) 72 166.33 T
1 F
(Specifies the connection to the X server.) 171 166.33 T
4 F
(d) 72 150.33 T
1 F
(Specifies which screen the pixmap is created on.) 171 150.33 T
4 F
(buffer) 72 134.33 T
1 F
(Specifies the location of the buffer.) 171 134.33 T
4 F
(pixmap_return) 72 118.33 T
1 F
(Returns the pixmap which is created.) 171 118.33 T
4 F
(shapemask_return) 72 102.33 T
1 F
(Returns the shape mask pixmap which is created if any.) 171 102.33 T
FMENDPAGE
%%EndPage: "12" 16
%%Page: "13" 16
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(13) 300.12 54.85 T
4 10 Q
(attributes) 72 686.18 T
1 F
-0.34 (Specifies the location of an) 171 686.18 P
0 F
-0.34 (XpmAttributes) 280.63 686.18 P
1 F
-0.34 ( structure to get and store information, or) 345.59 686.18 P
0 F
-0.34 (NULL) 509.74 686.18 P
1 F
-0.34 (.) 537.5 686.18 P
0.3 (The) 72 662.18 P
0 F
0.3 (XpmCreatePixmapFromBuffer) 90.34 662.18 P
1 F
0.3 ( function works the same way as) 224.68 662.18 P
0 F
0.3 (XpmReadFileToPixmap) 359.73 662.18 P
1 F
0.3 (, it just calls) 463.56 662.18 P
0 F
0.3 (Xpm-) 515.57 662.18 P
(CreateImageFromBuffer) 72 650.18 T
1 F
( instead of) 179.12 650.18 T
0 F
(XpmReadFileToImage) 223.26 650.18 T
1 F
(.) 320.97 650.18 T
(To create an) 72 608.18 T
0 F
(XPM) 123.89 608.18 T
1 F
( buffer from an image, use) 146.65 608.18 T
0 F
(XpmCreateBufferFromImage) 255.17 608.18 T
1 F
(.) 383.39 608.18 T
(int XpmCreateBufferFromImage\050) 72 590.18 T
4 F
(display, buffer_return, image, shapeimage, attributes) 207.18 590.18 T
1 F
(\051) 420.39 590.18 T
(Display) 108 578.18 T
4 F
(*display;) 141.59 578.18 T
1 F
(char) 108 566.18 T
4 F
(**buffer_return;) 127.7 566.18 T
1 F
(XImage) 108 554.18 T
4 F
(*image;) 142.69 554.18 T
1 F
(XImage) 108 542.18 T
4 F
(*shapeimage;) 142.69 542.18 T
1 F
(XpmAttributes) 108 530.18 T
4 F
(*attributes;) 170.47 530.18 T
(display) 72 514.18 T
1 F
(Specifies the connection to the X server.) 171 514.18 T
4 F
(buffer_return) 72 498.18 T
1 F
(Returns the buffer which is created.) 171 498.18 T
4 F
(image) 72 482.18 T
1 F
(Specifies the image.) 171 482.18 T
4 F
(shapeimage) 72 466.18 T
1 F
(Specifies the shape mask image.) 171 466.18 T
4 F
(attributes) 72 450.18 T
1 F
(Specifies the location of an) 171 450.18 T
0 F
(XpmAttributes) 282.31 450.18 T
1 F
( structure containing information.) 347.26 450.18 T
-0.25 (The) 72 426.18 P
0 F
-0.25 (XpmCreateBufferFromImage) 89.79 426.18 P
1 F
-0.25 ( works as) 218.01 426.18 P
0 F
-0.25 (XpmWriteFileFromImage) 257.5 426.18 P
1 F
-0.25 (, it just writes to a malloc\325ed buffer instead) 370.19 426.18 P
(of to a file. The caller should free the buffer using) 72 414.18 T
0 F
(XpmFree) 274.06 414.18 T
1 F
( when finished.) 314.58 414.18 T
0 F
(XpmCreateBufferFromPixmap) 72 372.18 T
1 F
( creates an) 206.34 372.18 T
0 F
(XPM) 251.01 372.18 T
1 F
( buffer from a pixmap.) 273.77 372.18 T
(int XpmCreateBufferFromPixmap\050) 72 354.18 T
4 F
(display, buffer_return, pixmap, shapemask, attributes) 212.74 354.18 T
1 F
(\051) 427.07 354.18 T
(Display) 108 342.18 T
4 F
(*display;) 141.59 342.18 T
1 F
(char) 108 330.18 T
4 F
(**buffer_return;) 127.7 330.18 T
1 F
(Pixmap) 108 318.18 T
4 F
(pixmap;) 141.04 318.18 T
1 F
(Pixmap) 108 306.18 T
4 F
(shapemask;) 141.04 306.18 T
1 F
(XpmAttributes) 108 294.18 T
4 F
(*attributes;) 170.47 294.18 T
(display) 72 278.18 T
1 F
(Specifies the connection to the X server.) 171 278.18 T
4 F
(buffer_return) 72 262.18 T
1 F
(Returns the buffer which is created.) 171 262.18 T
4 F
(pixmap) 72 246.18 T
1 F
(Specifies the pixmap.) 171 246.18 T
4 F
(shapemask) 72 230.18 T
1 F
(Specifies the shape mask pixmap.) 171 230.18 T
4 F
(attributes) 72 214.18 T
1 F
(Specifies the location of an) 171 214.18 T
0 F
(XpmAttributes) 282.31 214.18 T
1 F
( structure containing information.) 347.26 214.18 T
1.85 (The) 72 190.18 P
0 F
1.85 (XpmCreateBufferFromPixmap) 91.89 190.18 P
1 F
1.85 ( function works as) 226.23 190.18 P
0 F
1.85 (XpmWriteFileFromPixmap) 309.69 190.18 P
1 F
1.85 (, it just calls) 428.5 190.18 P
0 F
1.85 (XpmCreate-) 486.72 190.18 P
0.07 (BufferFromImage) 72 178.18 P
1 F
0.07 ( instead of) 150.27 178.18 P
0 F
0.07 (XpmWriteFileFromImage) 194.6 178.18 P
1 F
0.07 (. Once again, the caller should free the buffer using) 307.29 178.18 P
0 F
0.07 (Xpm-) 515.57 178.18 P
(Free) 72 166.18 T
1 F
( when finished.) 91.42 166.18 T
0 14 Q
(3.6) 72 111.51 T
(Functions to deal with XPM files and buffers) 100.8 111.51 T
FMENDPAGE
%%EndPage: "13" 17
%%Page: "14" 17
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
540 72 72 72 2 L
N
0 12 Q
(14) 300 56.01 T
1 10 Q
-0.41 (As a convenience, the) 72 686.33 P
0 F
-0.41 (XpmReadFileToBuffer) 160.58 686.33 P
1 F
-0.41 ( and) 259.41 686.33 P
0 F
-0.41 (XpmWriteFileFromBuffer) 278.03 686.33 P
1 F
-0.41 ( are provided to copy a file to a buffer) 391.83 686.33 P
0.15 (and to write a file from a buffer. Thus for instance one may decide to use) 72 674.33 P
0 F
0.15 (XpmReadFileToBuffer) 368.86 674.33 P
1 F
0.15 (,) 467.69 674.33 P
0 F
0.15 (XpmCreatePix-) 472.84 674.33 P
0.63 (mapFromBuffer) 72 662.33 P
1 F
0.63 (, and) 142.5 662.33 P
0 F
0.63 (XpmFree) 165.7 662.33 P
1 F
0.63 ( instead of) 206.21 662.33 P
0 F
0.63 (XpmReadFileToPixmap) 252.25 662.33 P
1 F
0.63 (. On some systems this may lead to a perfor-) 356.08 662.33 P
(mance improvement but it uses more memory.) 72 650.33 T
0 F
(XpmReadFileToBuffer) 72 608.33 T
1 F
( allocates and fills a buffer from a file.) 170.83 608.33 T
(int XpmReadFileToBuffer\050) 72 590.33 T
4 F
(filename, buffer_return) 181.65 590.33 T
1 F
(\051) 274.93 590.33 T
(char) 108 578.33 T
4 F
(*filename;) 127.7 578.33 T
1 F
(char) 108 566.33 T
4 F
(**buffer_return;) 127.7 566.33 T
(filename) 72 550.33 T
1 F
(Specifies the file name to read.) 171 550.33 T
4 F
(buffer_return) 72 534.33 T
1 F
(Returns the buffer created.) 171 534.33 T
0 F
0.44 (XpmReadFileToBuffer) 72 510.33 P
1 F
0.44 ( returns) 170.83 510.33 P
0 F
0.44 (XpmOpenFailed) 204.45 510.33 P
1 F
0.44 ( if it cannot open the file, returns) 275.53 510.33 P
0 F
0.44 (XpmNoMemory) 412.55 510.33 P
1 F
0.44 ( if insufficient) 482.49 510.33 P
0.28 (working storage is allocated, and) 72 498.33 P
0 F
0.28 (XpmSuccess) 207.74 498.33 P
1 F
0.28 ( otherwise. The allocated buffer returned by) 261.04 498.33 P
0 F
0.28 (XpmReadFileToBuffer) 441.17 498.33 P
1 F
(should be freed with) 72 486.33 T
0 F
(XpmFree) 156.38 486.33 T
1 F
( when done.) 196.9 486.33 T
0 F
(XpmWriteFileFromBuffer) 72 444.33 T
1 F
( writes a buffer to a file.) 185.8 444.33 T
(int XpmWriteFileFromData\050) 72 426.33 T
4 F
(filename, data) 187.21 426.33 T
1 F
(\051) 244.4 426.33 T
(char) 108 414.33 T
4 F
(*filename;) 127.7 414.33 T
1 F
(char) 108 402.33 T
4 F
(*buffer;) 127.7 402.33 T
(filename) 72 386.33 T
1 F
(Specifies the file name to write.) 171 386.33 T
4 F
(buffer) 72 370.33 T
1 F
(Specifies the buffer to read.) 171 370.33 T
0 F
(XpmReadFileTobuffer) 72 346.33 T
1 F
( returns) 169.72 346.33 T
0 F
(XpmOpenFailed) 202.47 346.33 T
1 F
( if it cannot open the file, and) 273.55 346.33 T
0 F
(XpmSuccess) 393.74 346.33 T
1 F
( otherwise.) 447.04 346.33 T
0 14 Q
(3.7) 72 291.67 T
(Miscellaneous functions) 100.8 291.67 T
1 10 Q
(To free possible data stored into an) 72 270.33 T
0 F
(XpmAttributes) 214.95 270.33 T
1 F
( structure use) 279.91 270.33 T
0 F
(XpmFreeAttributes) 335.7 270.33 T
1 F
(.) 420.07 270.33 T
(int XpmFreeAttributes\050) 72 252.33 T
4 F
(attributes) 166.11 252.33 T
1 F
(\051) 204.43 252.33 T
(XpmAttributes) 108 240.33 T
4 F
(*attributes;) 170.47 240.33 T
(attributes) 72 224.33 T
1 F
( Specifies the structure to free.) 110.32 224.33 T
0.1 (The) 72 200.33 P
0 F
0.1 (XpmFreeAttributes) 90.14 200.33 P
1 F
0.1 ( frees the structure members which have been malloc\325ed: the pixels list and the infos mem-) 174.52 200.33 P
(bers \050comments strings and color table\051.) 72 188.33 T
(To dynamically allocate an) 72 146.33 T
0 F
(XpmAttributes) 183.03 146.33 T
1 F
( structure use the) 247.98 146.33 T
0 F
(XpmAttributesSize) 320.98 146.33 T
1 F
( function.) 403.15 146.33 T
(int XpmAttributesSize\050\051) 72 128.33 T
0.43 (The) 72 104.33 P
0 F
0.43 (XpmAttributesSize) 90.47 104.33 P
1 F
0.43 ( function provides application using dynamic libraries with a safe way to allocate and then) 172.63 104.33 P
FMENDPAGE
%%EndPage: "14" 18
%%Page: "15" 18
612 792 0 FMBEGINPAGE
540.11 719.92 72.11 719.92 2 L
0.25 H
2 Z
0 X
0 K
N
261.11 728.92 369.11 737.92 R
7 X
V
4 10 Q
0 X
(XPM Manual) 288.05 731.25 T
540.11 70.84 72.11 70.84 2 L
N
0 12 Q
(15) 300.12 54.85 T
1 10 Q
-0.41 (refer to an) 72 686.18 P
0 F
-0.41 (XpmAttributes) 114.35 686.18 P
1 F
-0.41 (structure, disregarding whether the) 181.4 686.18 P
0 F
-0.41 (XpmAttributes) 321.61 686.18 P
1 F
-0.41 ( structure size has changed or not since) 386.57 686.18 P
(compiled.) 72 674.18 T
(To free data possibly stored into an array of) 72 632.18 T
0 F
(XpmExtension) 249.36 632.18 T
1 F
( use) 312.67 632.18 T
0 F
(XpmFreeExtensions) 330.99 632.18 T
1 F
(.) 417.6 632.18 T
(int XpmFreeExtensions\050) 72 614.18 T
4 F
(extensions, nextensions) 170 614.18 T
1 F
(\051) 263.27 614.18 T
(XpmExtension) 108 602.18 T
4 F
(*extensions;) 170.47 602.18 T
1 F
(int) 108 590.18 T
4 F
(nextensions;) 121.05 590.18 T
(extensions) 72 574.18 T
1 F
(Specifies the array to free.) 171 574.18 T
4 F
(nextensions) 72 558.18 T
1 F
(Specifies the number of extensions.) 171 558.18 T
-0.29 (This function frees all data stored in every extension and the array itself. Note that) 72 534.18 P
0 F
-0.29 (XpmFreeAttributes) 399.04 534.18 P
1 F
-0.29 ( call this func-) 483.42 534.18 P
(tion and thus most of the time it should not need to be explicitly called.) 72 522.18 T
(To free any data allocated by an) 72 480.18 T
0 F
(Xpm) 202.72 480.18 T
1 F
( function use the XpmFree function.) 223.82 480.18 T
(int XpmFree\050) 72 462.18 T
4 F
(ptr) 126.13 462.18 T
1 F
(\051) 137.79 462.18 T
(char) 108 450.18 T
4 F
(*ptr;) 127.7 450.18 T
(ptr) 72 434.18 T
1 F
( Specifies the data to free.) 83.66 434.18 T
-0.25 (The current distribution of the Xpm library uses the standard memory allocation functions and thus) 72 410.18 P
0 F
-0.25 (XpmFree) 467.21 410.18 P
1 F
-0.25 ( is noth-) 507.73 410.18 P
-0.09 (ing else than a define to the standard) 72 398.18 P
0 F
-0.09 (free) 220.09 398.18 P
1 F
-0.09 (. However since these functions may be redefined in specific environment it) 236.73 398.18 P
(is wise to use) 72 386.18 T
0 F
(XpmFree) 128.08 386.18 T
1 F
(.) 168.6 386.18 T
FMENDPAGE
%%EndPage: "15" 19
%%Page: "1" 19
612 792 0 FMBEGINPAGE
540 720 72 720 2 L
0.25 H
2 Z
0 X
0 K
N
261 729 369 738 R
7 X
V
4 10 Q
0 X
(XPM Manual) 287.93 731.33 T
225 639 396 657 R
7 X
V
1 18 Q
0 X
(Index of Functions) 242.54 645 T
540 72 72 72 2 L
N
1 12 Q
(XpmAttributesSize 14) 72 568 T
(XpmCreateBufferFromImage 13) 72 549 T
(XpmCreateBufferFromPixmap 13) 72 530 T
(XpmCreateDataFromImage 10) 72 511 T
(XpmCreateDataFromPixmap 10) 72 492 T
(XpmCreateImageFromBuffer 12) 72 473 T
(XpmCreateImageFromData 9) 72 454 T
(XpmCreatePixmapFromBuffer 12) 72 435 T
(XpmCreatePixmapFromData 10) 72 416 T
(XpmFree 15) 72 397 T
(XpmFreeAttributes 14) 72 378 T
(XpmFreeExtensions 15) 72 359 T
(XpmReadFileToBuffer 14) 72 340 T
(XpmReadFileToData 11) 72 321 T
(XpmReadFileToImage 6) 72 302 T
(XpmReadFileToPixmap 7) 72 283 T
(XpmWriteFileFromBuffer 14) 72 264 T
(XpmWriteFileFromData 11) 72 245 T
(XpmWriteFileFromImage 8) 72 226 T
(XpmWriteFileFromPixmap 8) 72 207 T
FMENDPAGE
%%EndPage: "1" 20
%%Trailer
%%BoundingBox: 0 0 612 792
%%Pages: 19 1
%%DocumentFonts: Times-Bold
%%+ Times-Roman
%%+ Helvetica
%%+ Courier
%%+ Times-Italic
