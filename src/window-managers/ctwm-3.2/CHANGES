

    Changes from version 1.0 to 1.1
    -------------------------------


    1 - Correction of a few bugs

    2 - Add the OpaqueResize flag : similar to OpaqueMove, but redraw the window
	you are resizing at each motion event. Extremely resource consuming, but
	beautiful with fast server/client/network.

    3 - Now if you don't specify any background/foreground/pixmap indication for
	the  root window,  ctwm leave it  alone so you  can have  your own  root
        background pixmap.

    4 - You can now specify  on the command line a list of workspaces in which a
        new client opens. The syntaxe is :

          whatever_client -xrm 'ctwm.workspace: name1 name2 ... namen'
   or     whatever_client -xrm 'ctwm.workspace: all'

   where 'name1', 'name2', ..., 'namen' are names of workspaces and 'all' refers
to all workspaces.

    example : 

	xload -xrm 'ctwm.workspace : all'

    5 - Add the  OccupyAll command in  .ctwmrc, you can now specify at startup a
	list of windows that occupy all the workspaces.

    example :

OccupyAll {
    "xload"
    "xconsole"
    "xbiff"
}

    6 - Add the f.gotoworkspace function. It goes the workspace specified by its
	name.

    example :

"F1"      =    : root           : f.gotoworkspace "cognac"


    Changes from version 1.1 to 1.2
    -------------------------------


    1 - you  can  now  directly  edit  workspace names  in their  buttons.  only
	printable characters, delete and backspace keys are honored.

    2 - Ctwm  now handle  shaped colored  icons in  XPM  format. This  added the
	variable XPMIconDirectory, and slightly modified the syntax of the Icons
	command. The XPM icon file names should be prefixed by the character '@'
	to distinguished them from the ordinary bitmap files.

Example :

XPMIconDirectory  "/usr/lib/X11/X11/XPM"

Icons {
    "Axe"    "@xedit.xpm"
    "xterm"  "@xterm.xpm"
    "xrn"    "@xrn.xpm"
    "HPterm" "@hpterm.xpm"
    "XAlarm" "@datebook.xpm"
    "Xman"   "@xman.xpm"
}

  These above xpm pixmap are given.


    3 - Many bugs fixed :

	- Icon regions now works.
	- the absence of ShowIconManager is taken into account.
	- The -iconic flag is honored.
	- The -xrm 'ctwm.workspace' works as expected.
	- I think that f.warpto[to|ring] works correctly i.e warps.
	  also to the correct workspace if the destination window
	  doesn't occupy the current workspace.
	- A few minor bugs fixed.


    Changes from version 1.2 to 1.3
    -------------------------------


    1 - Many bugs fixed :

	- Partial geometry in the  WorkSpaceManagerGeometry  statement no longer
	  cause ctwm to core dump.

	- The occupy window name now is "Occupy Window" instead of "Occupy WIndow"
	  a typo on the uppercase I in window.

	- Several types problems that make good compilers to issue warnings.

	- The  icons of the WorkSpaceManager and Occupy Window windows now behave
	  correctly with ButtonPress.

	- UnknownIcon can now have Xpm icons specified.

	- f.showiconmgr no longer map empty icon managers.

	- The ctwm process is smaller (even smaller than twm).


    2 - Add the Occupy command in .ctwmrc, you can now specify at startup
        which window occupy which workspace.

    example :

Occupy {
              "xload"  {"all"}
    Window    "xterm"  {"here" "there" "elsewhere"}
              "xv"     {"images"}
    WorkSpace "images" {"xloadimage"}
}


    Changes from version 1.3 to 2.0
    -------------------------------

    1 - A few bugs fixed :

	- Resize at window creation with button2 works.

	- Some others i don't remember.

    2 - Better  support of  monochrome  displays  :  video inverse instead of 3d
	buttons.

    3 - WorkSpaceManager  and  Occupy Window are now resizable.  Don't forget to
	verify you have a powerful server before resizing the  workspace manager
	with OpaqueResize set.

    4 - X11R4 support with Imakefile.X11R4 (i didn't try so tell me).

    5 - The  visibility  of the workspace  manager  is now  consistant  with the
	visibility of the icon managers. This mean that by default the workspace
	manager is  *NOT*  visible at startup.  Use the  ShowWorkSpaceManager to
	make it visible at startup.

    6 - Two new functions :  f.showworkspacemgr and f.hideworkspacemgr have been
	added. They do what you imagine.

    7 - And now, the cherry on the cake. The workspace manager has now 2 states,
	the button state (the usual one) and the map state (the new one). In the
	map state  the buttons  are replaced  by windows displaying  a synthetic
	view of the  corresponding workspaces.  All the non-iconified windows of
	the workspace are shown as small windows with the  icon name  written in
	it.  It looks like  the virtual screen of  [t]vtwm, but, of course, much
	nicer.

	In this state, you can modify directly the occupation of your windows by
	manipulating these little windows.

	   - Button1 move a window from a workspace to another.
	   - Button2 copy a window from a workspace to another.
	   - Button3 remove a window from a workspace.

	Clicking in the  "root" of these windows warps you  to the corresponding
	workspace.  Clicking and releasing Button1 or Button2 quickly in a small
	window  go to the corresponding  workspace and warps  the pointer to the
	corresponding window.

	The Control-Key  (Press and Release)  in workspace  manager toggles  the
	buttons and map state.

	Four variables and Three functions manipulates this :

	    - StartInMapState : The map state is selected at startup, default is
	      buttons state.

	    - MapWindowCurrentWorkSpace : The aspect of the current workspace in
	      the map window.

	    - MapWindowDefaultWorkSpace :  Specify the aspect of the non-current
	      workspaces in the map window.

	    - MapWindowBackground :
	    - MapWindowForeground :  Specify the aspect of the small  windows in
	      the map window on a per-client basis.

	    - f.setbuttonsstate : You can guess.

	    - f.setmapstate : You can guess.

	    - f.togglestate : You can guess.


    8 - AutoRaise with RaiseDelay. Thanks to Johan Vromans (jv@mh.nl) who gave me
	this patch.  I think  Warren Jessop  (whj@cs.washington.edu) wrote it for
	twm.


    Changes from version 2.0 to 2.1
    -------------------------------

    1 - Cleanup code to make gcc happy.

    2 - Bugs fixed

	- IconMaskHint honored.
	- Workaround a bug on  HP7xx/8.07  servers for RaiseLower in  Map window.
	  The stacking  order in the MapWindow  was not correct on those servers.
	  use :

	  EXTRA_DEFINES = -DBUGGY_HP700_SERVER

	  in your Imakefile  if you plan to use this server.  It doesn't break on
	  others servers.

	- No longer core dump if  MapWindowCurrentWorkSpace or  MapWindowDefault-
	  WorkSpace are specified before WorkSpaces in .ctwmrc

	- Small windows  handling in  the WorkspaceMap  window works even  if the
	  Workspace  Manager  window  has a  title  (that  was not  the case with
	  ctwm-2.0).

	- ForceIcon works for Xpm icons.

	- Occupation of "transient for" window is correct.

	- RestartPreviousState  necessary to  keep previous  window occupation on
	  restart.

	- If a window  dies while  Occupy Window is mapped,  the Occupy Window is
	  correctly unmapped.

    3 - Ctwm now maintains the  WM_CURRENTWORKSPACE  property on the root  window
	and  WM_OCCUPATION  on every  windows.  They mean what  you think.  These
	properties  are string  properties  and are in  clear text  instead of an
	obscure mask.  If an external application changes  these properties  ctwm
	respond with the correct actions,  changing the current  workspace or the
	occupation of a window.  I give a small example  (gtw.c).  An application
	can manage its  occupation and it is  even possible to  write an external
	workspace manager. It is of course not ICCCM compliant because ICCCM says
	nothing on multiple workspaces. The special names "all" and "current" can
	be used.  And you can specify relative occupations if the workspace names
	list begin with a  '+' or '-' (ex:  +current adds a window to the current
	workspace).
	
    4 - 3 new functions :

	- f.pin : Pin/Unpin a menu on the screen. Only usable inside a root menu.

	- f.vanish : Remove  a window from  the current workspace.  Works only if
		     the window occupies at least one other workspace.

	- f.warphere "win-name" : Adds the window whose name matches  win-name to
			       the current workspace and warps the pointer to it.

    5 - And a new keyword : NoShowOccupyAll : tells ctwm not  to  show  OccupyAll
			windows in the WorkSpaceMap window.

    6 - All window names can now be specified as (shell-like) regular expressions.




    Changes from version 2.1 to 2.2
    -------------------------------


    1 - Bugs :

	- Redraw small windows when icon name changes.
	- Kill window from the title bar menu
	- Partial geometry on Workspace manager can core dump.
	- AutoRaise and tiny windows in the Workspace Map.

    2 - Transient windows and non group leader windows are now always on the top
	of their leader.

    3 - When an icon name changes, the icon itself changes automatically according
	the Icons list in your .ctwmrc. This is very useful for clients that have
	several states. For example xrn or some X mail readers can have two
	differents icons for new mail (news) / no new mail (news).

    4 - A new keyword : TransientHasOccupation has been added for people annoyed
	by the fact that since ctwm-2.1, transient-for non group-leader windows
	have the same occupation that their leader. If you specify this, these
	windows have their own occupation.

    5 - A new keyword : AutoOccupy. If specified, the occupation of a client is
	changed automatically when it's name or icon name changes, according to
	the Occupy list in your .ctwmrc. For example a mail reader can popup
	instantly in the current workspace when mail arrives.

    6 - A new keyword : DontPaintRootWindow. If specified, the root window is
	not painted, whatever you told in the Workspaces specification. This is
	useful to have pixmaps in the Workspace Map but not on the root window.

    7 - You can use XPM pixmaps for your background root window. Use xpm:filename
	instead of @filename. The latter is still accepted. Of course if your
	XPM file has transparent parts, there are not transparent on the root
	window, i.e. you dont see the electron gun through it.

    8 - XPMIconDirectory is replaced by PixmapDirectory. (XPMIconDirectory is
	still accepted).

    9 - You can now use colored root background pixmap and icons in many formats.
	Ctwm use the imconv library from the San Diego Supercomputer Center.
	To use these formats, specify : 'im:filename' for the pixmap name.

	- The following format are supported :

	     bmp    Microsoft Windows bitmap image file
	     cur    Microsoft Windows cursor image file
	     eps    Adobe Encapsulated PostScript file
	     gif    Compuserve Graphics image file
	     hdf    Hierarchical Data File
	     ico    Microsoft Windows icon image file
	     icon   Sun Icon and Cursor file
	     iff    Sun TAAC Image File Format
	     mpnt   Apple Macintosh MacPaint file
	     pbm    PBM Portable Bit Map file
	     pcx    ZSoft IBM PC Paintbrush file
	     pgm    PBM Portable Gray Map file
	     pic    PIXAR picture file
	     pict   Apple Macintosh QuickDraw/PICT file
	     pix    Alias image file
	     ppm    PBM Portable Pixel Map file
	     pnm    PBM Portable aNy Map file
	     ps     Adobe PostScript file
	     ras    Sun Rasterfile
	     rgb    SGI RGB image file
	     rla    Wavefront raster image file
	     rle    Utah Run length encoded image file
	     synu   SDSC Synu image file
	     tga    Truevision Targa image file
	     tiff   Tagged image file
	     viff   Khoros Visualization image file
	     x      AVS X image file
	     xbm    X11 bitmap file
	     xwd    X Window System window dump image file

	- You can find the imconv package at ftp.sdsc.edu. in the directory
	  /pub/sdsc/graphics/imtools.
	- If (width > screenwidth / 2) || (height > screenheight / 2) the image is
	  centered else it is tiled.
	- If you don't have the libim library or don't want to use it, undefine
	  IMCONV in Imakefile.


	But take care :

	- It is very memory consuming (on the server side).
	- It is very color cells consuming.
	- The ctwm executable is much larger executable.
	- Startup is much much slower (but not the workspace swap).
	- It works only for 8 planes pixmaps and 8 planes screens. If there is
	  an imconv specialist somewhere that can generelize this, he is 
	  welcome.

	

    10 - Two new functions : f.nextworkspace, f.prevworkspace.

    11 - Xpm examples files are now automatically installed in $(TWMDIR)

    12 - An example of .ctwmrc is given, showing some aspect of ctwm
	 (example.ctwmrc). It is not a complete .ctwmrc, only the ctwm
	 aspects are shown.

    13 - A new file PROBLEMS has been added that lists some problems you
	can have while using ctwm and some solutions.

 
Is there any good pixmap designer out there, that i can add beautiful
icons and background to the distribution. Don't use too many colors,
try to use the same few already used in the example icons.


    Changes from version 2.2 to 3.0
    -------------------------------

    1 - A few bugs fixes.

    2 - A 3D presentation of menus, titles and IconManagers can be selected with :
	UseThreeDMenus, UseThreeDTitles and UseThreeDIconManagers. If
	UseThreeDTitles is set the default values for TitleButtonBorderWidth,
	FramePadding, TitlePadding, ButtonIndent are set to 0 pixels. I am not
	that proud of the appearance of 3D titles but 3D menus look nice. If
	UseThreeDTitles is set the flag SunkFocusWindowTitle tells ctwm to sunk
	the title of the window that the focus. 3D features look ugly on
	monochrome displays, but I have no such display for testing purpose. If a
	monochrome display owner can have a look, he is welcome. The contrast
	of the clear and dark shadows can be tuned via the ClearShadowContrast
	and DarkShadowContrast parameters. These parameters are percentages.
	The formulas used are :

		clear.{RGB} = (65535 - color.{RGB}) * (ClearShadowContrast / 100),
		dark.{RGB}  = color.{RGB} * ((100 - DarkShadowContrast) / 100),

	If you choose UseThreeDIconManagers, icon titles are also 3D. By defaults
	new colors are allocated for shadows, but you can specify BeNiceToColormap
	to inform ctwm to use stipple instead of new colors, the effect is
	less beautiful, but acceptable.


    3 - A new keyword : NoIconTitle with an optionnal window list.

    4 - A new keyword : TransientOnTop with an integer parameter. This
	paramater is a percentage and tells ctwm to put transient (and
	non-group leader) windows always on top of their leader only if
	their surface is smaller than this fraction of the surface of
	their leader.

    5 - OpaqueMove and OpaqueResize now accept an optionnal list of windows
	as parameter. They also have their NoOpaqueMove and NoOpaqueResize
	counterpart with the same syntax.

    6 - Two new keywords : OpaqueMoveThreshold and OpaqueResizeThreshold
	with one integer parameter. The parameter represent a percentage of
	the screen surface. If Opaque{Move,Resize} is active for a window,
	(via point 4) the opaque {move, resize} is done only if the window
	surface is smaller than this percentage of the screen. The default
	is large enough.

    7 - Startup is optionally piped into m4 before ctwm parse it, ypu can
	now have a common startup file for ctwm, tvtwm, etc ... It can be
	disabled at compile time by undefining USEM4 in Imakefile. It can
	be disabled at execution time by using the -n option. Take care if
	you have backquotes (`) in your .ctwmrc file. This character is
	special to m4. In that case, put something like :

changequote(,)
changequote(``,'')

	at the beginning of your .ctwmrc.

    8 - The startup looks nicer (I think). If you use XPM and the file
	welcome.xpm is present in your PixmapDirectory, it is displayed
	while the startup is in progress. Unfortunately, the PixmapDirectory
	is known only after the .ctwmrc is loaded, and this loading is
	a large part of the startup time. So you can define the environnement
	variable CTWM_WELCOME_FILE to point to an XPM file, in which case
	it will be displayed very quickly.
	
    9 - A new function : f.separator, valid only in menus. The effect is to
	add a line separator between the previous and the following entry.
	The name selector part in the menu is not used. f.separator works
	only with conventionnal menus, not with 3D menus.

   10 - Thanks to bret@essex.ac.uk, the man page is integrated with the original
	twm one, and is of a much better quality.

   11 - While moving a window, the position is displayed in a similar way as
	the size when resizing.

   12 - The info window now display the compile time options of the current
	version of ctwm.

   13 - You can now specify xpm pixmap title buttons and TitleHighlight.
	There is 5 built-in scalable pixmap for buttons, :xpm:menu, :xpm:dot,
	:xpm:resize, :xpm:zoom and :xpm:bar.

   14 - Ctwm now restarts when receiving signal SIGHUP, so to restart it from
	a shell, use : kill -1 the_ctwm_pid

   15 - 2 New keywords : WMgrVertButtonIndent and WMgrHorizButtonIndent with
	1 parameter, specifying the vertical and horizontal space beetween
	buttons in the workspace manager.

   16 - Some more xpm files given. Among them several backgrounds.

   17 - Ctwm set the property WM_WORKSPACELIST (type STRING) on the root
	window, this property contains the null separated list of all the
	workspaces. Now the WM_OCCUPATION property on each window is a null
	separated list instead of a space separated list, it was wrong since
	workspace names can contain spaces. So, the first you will start the
	this version, your windows will show up anywhere.

   18 - A new library libctwm.a and an include file ctwm.h are given. The
	library contains functions for an external program to have some
	control over ctwm. The functions are :

	Bool    CtwmIsRunning                   ();
	char    **CtwmWorkspaces                ();
	char    *CtwmCurrentWorkspace           ();
	int     CtwmChangeWorkspace             ();
	char    **CtwmCurrentOccupation         ();
	int     CtwmSetOccupation               ();
	int     CtwmAddToCurrentWorkspace       ();

	There is no documentation. A program demolib.c is given to help.



    Changes from version 3.0 to 3.1
    -------------------------------

    1 - Ctwm is moving. You can now have animated images for icons, root backgrounds,
	title buttons and focus window title image. This adds one new keyword :
	AnimationSpeed, and 4 new function :f.startanimation, f.stopanimation,
	f.speedupanimation and f.slowdownanimation. An image name is considered
	an animation if it contains the percent (%) character. In which case
	ctwm replaces this character by numbers starting a 1, and will play
	an animation with all these images. There is only 2 examples : ball%.xpm
	suitable for icons, and supman%.xbm suitable for title highlight.
	Another example (much more beautiful) can be found in the Mosaic
	distribution. There is also one built-in animation for title buttons :
	"%xpm:resize", for example :

RightTitleButton		"%xpm:resize" = f.resize

    2 - Add the WMgrButtonShadowDepth keyword to control the depth of the
	shadow of the workspace manager buttons.

    3 - The RandomPlacement command has now an optionnal parameter :
	"on", "off", "all" or "unmapped".

    4 - Three new keywords : ChangeWorkspaceFunction, IconifyFunction and
	DeIconifyFunction, the argument is the name of a function that is
	executed whenever the corresponding event occurs. Useful for sounds :

ChangeWorkspaceFunction !"cat /users/lecom/sounds/bom.au 2>/dev/null 1>/dev/audio&"

    5 - A new keyword : IconJustification with 1 argument, either :"left", "center"
	or "right". Tells ctwm how to justify the icon image on the icon title
	(if any).

    6 - flex is now supported.

    7 - The IconRegion keyword now support an optionnal winlist argument.
	Thanks to Mike Hoswell (hoswell@ncar.ucar.edu) for adding this.

    8 - f.separator now works (does something) with 3D menus.

    9 - The format xwd is now accepted for images (icons, background, ...). You
	have to prefix the image file name with xwd: to use this format.
	If the first character of an image file name is |, the filename is
	supposed to be a command that output a xwd image, and it is executed.
	For example, to use a gif file, use :

"|(giftoppm | pnmtoxwd) < /users/lecom/images/2010.gif"

   10 - A new keyword : MaxIconTitleWidth with an integer argument. If an icon
	title is larger than this integer, it is truncated.

   11 - A sound extension is supported. To use it you have to define USE_SOUND
	in the Imakefile (not defined by default). In order to use this option
	you need the rplay package. The documentation for this extension is in
	sounds.doc. Warning : this extension is not mine, and I don't use it, so
	don't expect a good support if you have problems with it.

   12 - A new keyword : NoBorder with a window list argument. These windows
	won't have border. Thanks to J.P. Albers van der Linden
	(albers@pasichva.serigate.philips.nl) for this patch.

   13 - Ctwm has a new option selectable with the flag -w, if used, ctwm will
	not take over the whole screen(s), instead it will create a new window
	and manage it. The -w has an optional argument which is a window id
	of an existing window, if specified, ctwm will try to manage this window.
	This is totally useless, but I like. The f.adoptwindow function can
	be used to capture an existing window into such a captive ctwm. A possible
	use of such mode can be to test new configuration file without restarting
	ctwm.

   14 - Now the welcome file can be of any type understanded by ctwm. So
	it must be prefixed with its type. The default is xpm:welcome.xpm
	if the XPM option is compiled in, else it is xwd:welcome.xwd. You
	use for example :

setenv CTWM_WELCOME_FILE "|(giftoppm | pnmtoxwd) < ~/images/2010.gif"

   15 - You can have now 3D window borders with the keyword : UseThreeDBorders.
	In which case the 3D border witdh is given with : ThreeDBorderWidth.
	The default value is 6.  The color is BorderColor for the window that has
	focus and BorderTileBackground for all others windows. Note : The 3D
	borders does not merge very well with squeezed titles, as the top edge
	of the window where the title is missing does not get a 3d border.

   16 - Now, WindowRing can be specified without argument, in this case all the
	windows are in the ring. (Alec Wolman <wolman@blue.cs.washington.edu>)

   17 - New keyword : WarpRingOnScreen, if present, tells ctwm that f.warpring
	should warp pointer only to windows visible in the current workspace.


    Changes from version 3.1 to 3.2
    -------------------------------

    1 - I have considerably reworked the focus handling. So I have probably
        introduced some problems.

    2 - New keyword : NoIconManagerFocus. Tells ctwm not to set focus on windows
        when the pointer is in an IconManager.

    3 - new option : -W. Tells ctwm not to display any welcome when starting.
        To be used on slow machines.

    4 - New keyword : StayUpMenus. Tells ctwm to use stayup menus. These menus
        will stay on the screen when ButtonUp, if either the menu has not
        yet been entered by the pointer, or the current item is a f.title.

    5 - Now ctwm tries to use welcome.xwd instead of welcome.xpm if it exists.
        On my machine the ctwm process size went from 2.3MB to 1MB when changing
        this. Xpm is very greedy.

    6 - New keyword : IconRegionJustification. Tells ctwm how to justify icons
        inside their place in the IconRegion. This keyword needs a string
        value. The acceptable values are : "left", "center", "right" and "border".
        If "border" is given, the justification will be "left" if the icon
        region gravity is "west" and "right" if the icon region gravity is "east".
        (clever, isn't it)

    7 - If you specify the -f filename option, ctwm will first try to load
        filename.scrnum, where scrnum is the screen number. If it fails, it will
        try to load filename as usual.

    8 - TitleButtons can now have different bindings for buttons with the
        following syntax :

LeftTitleButton ":xpm:menu" {
    Button1 : f.menu "WindowMenu"
    Button2 : f.zoom
    Button3 : f.hzoom
}
        The old syntax is of course accepted.
        Patch from Stefan Monnier (Stefan_Monnier@NIAGARA.NECTAR.CS.CMU.EDU).

    9 - A lot of new animated title buttons : "%xpm:menu-up", "%xpm:menu-down", 
        "%xpm:resize-out-top", "%xpm:resize-in-top", "%xpm:resize-out-bot", 
        "%xpm:resize-in-bot", "%xpm:maze-out", "%xpm:maze-in", "%xpm:zoom-out", 
        "%xpm:zoom-in" and "%xpm:zoom-inout". From Stefan Monnier
        (Stefan_Monnier@NIAGARA.NECTAR.CS.CMU.EDU).

   10 - 2 new builtin menus : TwmAllWindows and TwmWorkspaces. Guess what they
        do.

   11 - You can now bind menus to keys. When a menu is visible, you can
        navigate in it with the arrow keys. "Down" or space goes down, "Up"
        goes up, "Left" pops down the menu, and "Right" activates the current
        entry. The first letter of an entry name activates this entry (the first
        one if several entries match). If the first letter is ~ then
        Meta-the-second-letter activates it, if this first letter is ^ then
        Control-the-second-letter activates it, and if this first letter is space,
        then the second letter activates it.

   12 - Support for VMS. Patch from Peter Chang (peterc@v2.ph.man.ac.uk).
        Completely untested. If you have problems to build on VMS ask to
        Peter Chang.

   13 - New keyword : MoveOffResistance. (idea borrowed to fvwm) : If you set
        MoveOffResistance to a positive (n) value, dontmoveoff will only prevent
        you from going off the edge if you're within n pixels off the edge. If you
        go further, dontmoveoff gives up and lets you go as far as you wish. 
        f.forcemove still allows you to totally ignore dontmoveoff. A negative value
        puts you back into "never moveoff" mode (it's the default).

   14 - The files background[1-7].xpm and background9.xpm have been removed from
        the distribution. Someone tells me that they are copyrighted. I tried to
        contact him in order to join his copyright, but his mail address is invalid.
        (desktop-textures@avernus.com). Most of these backgrounds and much more
        can be obtained in the AIcons package on ftp.x.org. Particularly in
        cl-bgnd/Textures : bg_blu.gif, concrete.gif, marble1.gif, sharks.gif
        bg_grn.gif, granite_dark.gif, marble2.gif, snails.gif, coarse.gif,
        granite_light.gif and pool.gif.

   15 - New keyword : BorderResizeCursors with no parameter. If used ctwm
	will put nice cursors when the cursor in on the window borders.
	To be used when you have bound a button to f.resize in the frame context.

   16 - The xpm files are now installed in $(TWMDIR)/images instead of $(TWMDIR).

   17 - Due to the many problems I had with signals beeing slightly different
	on different systems, I rewrote the animation handling to not use signals
	anymore. I hope it is more portable. The old code is still available if
	you define USE_SIGNALS.

