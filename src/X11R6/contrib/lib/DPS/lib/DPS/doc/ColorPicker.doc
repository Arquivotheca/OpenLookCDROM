=====================
  THE COLOR PICKER
=====================

 * (c) Copyright 1994 Adobe Systems Incorporated.
 * All rights reserved.
 * 
 * Permission to use, copy, modify, distribute, and sublicense this software
 * and its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notices appear in all copies and that
 * both those copyright notices and this permission notice appear in
 * supporting documentation and that the name of Adobe Systems Incorporated
 * not be used in advertising or publicity pertaining to distribution of the
 * software without specific, written prior permission.  No trademark license
 * to use the Adobe trademarks is hereby granted.  If the Adobe trademark
 * "Display PostScript"(tm) is used to describe this software, its
 * functionality or for any other purpose, such use shall be limited to a
 * statement that this software works in conjunction with the Display
 * PostScript system.  Proper trademark attribution to reflect Adobe's
 * ownership of the trademark shall be given whenever any such reference to
 * the Display PostScript system is made.
 * 
 * ADOBE MAKES NO REPRESENTATIONS ABOUT THE SUITABILITY OF THE SOFTWARE FOR
 * ANY PURPOSE.  IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
 * ADOBE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON- INFRINGEMENT OF THIRD PARTY RIGHTS.  IN NO EVENT SHALL ADOBE BE LIABLE
 * TO YOU OR ANY OTHER PARTY FOR ANY SPECIAL, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE, STRICT LIABILITY OR ANY OTHER ACTION ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  ADOBE WILL NOT
 * PROVIDE ANY TRAINING OR OTHER SUPPORT FOR THE SOFTWARE.
 * 
 * Adobe, PostScript, and Display PostScript are trademarks of Adobe Systems
 * Incorporated which may be registered in certain jurisdictions

===========================

The color picker is a Motif dialog box that allows the user to interactively
select a color.  There are several ways to pick the color:

- The user can use sliders to set the color using any of four color models:
	RGB (Red/Green/Blue)
	CMYK (Cyan/Magenta/Yellow/Black)
	HSB (Hue/Saturation/Brightness)
	Gray

- The user can click on the eyedropper button and use the eyedropper to
select any colored pixel on the screen.

- The user can select a stored color from the color dock.

- The user can select a color from the current color palette.

Note:  An application that creates a color picker must merge the contents of
the ColorSelect defaults file into its own application defaults file.
Beginning with the X11R5 release of the X Window System(tm), this can be done
with an #include directive in the application defaults file.

An application normally creates the color picker as a child of a shell,
usually a transient shell.  The color picker can also be elsewhere in the
widget hierarchy, which allows the application to put additional information
around the color picker.  In that case the application is responsible for
popping up and popping down the color picker.

The following information lets you use the widget:

- The header file is <DPS/ColorPicke.h>.

- The class pointer is colorPickerWidgetClass.

- The class name is ColorPicker.

- The ColorPicker widget is a subclass of XmManager.

======================
Using the Color Picker
======================

Most of the left half of the color picker is taken up by a set of Motif scale
widgets.  The sliders set the color according to the color model selected by
the option menu in the upper left corner.

-----------
Color Patch
-----------

Most of the right half of the color picker is taken up by a patch showing the
current color.  The option menu above the patch controls how the color picker
renders the color.  The first option uses the Display PostScript System to
display the color as it will appear using the current color cube and gray
ramp.  The second option uses X to display the color as a pure color,
displaying the color to the best of the monitor's capability.  The third
option splits the patch and displays half with Display PostScript and half
with X.

----------
Eyedropper
----------

Between the two option menus is a pushbutton with a picture of an eyedropper
on it.  When the user clicks on the eyedropper the mouse cursor changes into
an eyedropper shape.  As the user moves the cursor around the screen, the
eyedropper fills with the color of the pixel beneath the tip of the
eyedropper.  When the user clicks the mouse button the color currently in the
eyedropper becomes the current color in the color picker.

----------
Color Dock
----------

The area below the color patch is known as the color dock.  The user
can store a color in the color dock by pressing a mouse button in the color
patch and dragging a square of the color into the color dock.  The user can
choose a saved color by clicking on it.  The user can make the dock larger by
making the color picker window wider.  Colors not currently visible in the
dock when the window is too narrow are not deleted and become available
again when the window is made larger.  If a user drags a new color into the
dock on top of an existing color, the new color replaces the existing color
in the dock.

-------
Palette
-------

The bottom of the color selection area is filled by the palette and an option
menu that selects the palette.  If the user clicks the mouse button in the
palette, the color clicked upon becomes the current color.  The set of
palettes is controlled by resources and can change, but the default set is
as follows:

- Full Spectrum:  Displays a bright, saturated spectrum from red
through the rainbow back to red.

- Narrow Spectrum:  Displays a narrow region of the spectrum centered on the
current color.

- Shades:  Displays shades of the current color, from black to fully
saturated.

- Pastels:  Displays pastel variations of the current color, from white to
fully saturated.

- Black to White:  Combines Shades and Pastels to display the current color
from black to white.

- Grays:  Displays shades of gray from black to white.

There can be up to ten palettes in the palette menu.  See "Palette Resources
and Creating Palettes" for instructions on how to add new palettes to the
palette menu.

-------------
The OK Button
-------------

When the user activates the OK button, the current color is returned to the
application and the color picker disappears, as described below.

1.  XtNokCallback is called with the current color.  CSBCallbackReason is
CSBOK.

2.  If the parent of color picker is a shell, the color picker pops down the
shell.

3.  If the contents of the color dock have changed, the color picker updates
the user's saved dock file.  This file is described in "Saving Colors"

Note:  If the parent of the color picker is not a shell, the application
should make the color picker disappear in its XtNokCallback.

----------------
The Apply Button
----------------

When the user activates the Apply button, the color picker performs all the
operations for the OK button but does not pop down the color picker's parent
shell.  XtNapplyCallback is called instead of XtNokCallback.
CSBCallbackReason is CSBApply.

----------------
The Reset Button
----------------

When the user activates the Reset button, the current color reverts to the
one selected when the user last chose Apply or OK, or the one last set by the
application, whichever happened most recently.

To accomplish this, the color picker performs the following actions:

1.  The color picker restores the current color to that specified by the
XtNcurrentColor resource.

2.  The color picker calls XtNresetCallback with the current color. The 
current color is the one passed to the most recent invocation of 
XtNokCallback or XtNapplyCallback, or to the most recent color specified 
by the application, whichever happened most recently.  
CSBCallbackReason is CSBReset.

-----------------
The Cancel Button
-----------------

When the user activates the Cancel button, the color picker performs all the
operations for the Reset button, but calls XtNcancelCallback instead of
XtNresetCallback.  CSBCallbackReason is CSBCancel.  If the parent of the
color picker is a shell, the color picker pops down the shell.

Note:  If the parent of the color picker is not a shell, the application
should make the color picker disappear in its XtNcancelCallback.

======================
Color Picker Resources
======================

Name		Class		Default		Type		Access
XtNbrokenPaletteLabel		"(broken)"	XtRString	CSG
		XtCBrokenPaletteLabel
XtNbrokenPaletteMessage		See description	XtRString	CSG
		XtCBrokenPaletteMessage
XtNcellSize	XtCCellSize	15		XtRDimension	CSG
XtNcmykLabels	XtCCmykLabels	"C:M:Y:K"	XtRString	CSG
XtNcontext	XtCContext	NULL		XtRDPSContext	CSG
XtNcurrentPalette		0		XtRShort	CSG
		XtCCurrentPalette
XtNcurrentRendering		CSBDisplayDPS	XtRRenderingType
		XtCCurrentRendering 				CSG
XtNcurrentSpace	XtCCurrentSpace	CSBSpaceHSB	XtRColorSpace	CSG
XtNfillMe	XtCFillMe	See description	XtRString	CSG
XtNgrayLabels	XtCGrayLabels	"Gray"		XtRString	CSG
XtNhsbLabels	XtCHsbLabels	"H:S:B"		XtRString	CSG
XtNnumCells	XtCNumCells	30		XtRShort	CSG
XtNrgbLabels	XtCRgbLabels	"R:G:B",	XtRString	CSG

XtNbrokenPaletteLabel
	Describes a string that is appended to a palette name in the palette
menu if the color picker discovers that the palette definition contains an
error.  Default is "(broken)".

XtNbrokenPaletteMessage
	Describes a string that is displayed in the palette area if the color
picker discovers that the palette definition contains an error.  Default is
"The current palette contains an error".

XtNcellSize
	Gives the size, in pixels, of each cell in the color dock area.
Default is 15.

XtNcmykLabels
	Gives a set of four strings, separated by colons, that label the
control sliders when the current color model is CMYK.  Default is "C:M:Y:K".

XtNcontext
	Provides a context to use for displaying colors.  The color picker
changes the drawable and possibly the depth for this context.  If the context
is NULL, the color picker uses the shared context for the display.  Default
is NULL.

XtNcurrentPalette
	Provides the number of the current palette.  Default is 0.

XtNcurrentRendering
	Provides the current rendering method for the color patch.  Possible
values as defined by the CSBRenderingType enumeration are CSBDisplayX,
CSBDisplayDPS, and CSBDisplayBoth.  Default is CSBDisplayDPS.

XtNcurrentSpace
	Provides the current color model controlling the sliders.  Possible
values as defined by the CSBColorSpace enumeration are CSBSpaceRGB,
CSBSpaceCMYK, CSBSpaceHSB, and CSBSpaceGray.  Default is CSBSpaceHSB.

XtNfillMe
	Provides a string to display in the dock area if the user has not yet
stored any colors in the dock.  Default is "Fill me with colors".

XtNgrayLabels
	Provides a string to label the slider when the current color model is
gray scale.  Default is "Gray"

XtNhsbLabels
	Gives a set of three strings, separated by colons, that label the
control sliders when the current color model is HSB.  Default is "H:S:B".

XtNnumCells
	Gives the maximum number of color samples that can be stored in the
dock.

XtNrgbLabels
	Gives a set of three strings, separated by colons, that label the
control sliders when the current color model is RGB.  Default is "R:G:B".

=======================================
Palette Resources and Creating Palettes
=======================================

Each palette in the palette menu is defined by four resources, and there can
be up to ten palettes.  Replace the 0 in each resource name in the following
table with a digit between 1 and 9 to derive the resource names for palettes
one through nine.

Name		  Class		   Default	Type		Access
XtNpalette0ColorDependent	   False	XtRBoolean	CSG
		  XtCPaletteColorDependent
XtNpalette0Function		   NULL		String		CSG
		  XtCPaletteFunction
XtNpalette0Label  XtCPaletteLabel  NULL		XtRString	CSG
XtNpalette0Space  XtCPaletteSpace  CSBSpaceRGB	XtRColorSpace	CSG

XtNpalette0ColorDependent
	If True, the colors displayed in palette 0 depend upon the currently
selected color.  If False, the colors do not vary with the selection.
Default is False.

XtNpalette0Function
	Provides a PostScript language code fragment that converts percentages
into color values for palette 0.  Default is NULL.

XtNpalette0Label
	Provides a string to display in the palette menu for palette 0.
Default is NULL.

XtNpalette0Space
	Gives the color space used for calculations of colors in palette 0.
Default is CSBSpaceRGB.

A palette is a displayed graphic that presents colors for the user to pick
from.  It is implemented by a PostScript language code fragment.  This
fragment accepts a floating point value from 0.0 to 1.0, representing the
percentage of distance across the palette, and returns the appropriate color
for that spot in the color model described by the palette's XtNpaletteSpace
resource.  If the palette is designated as being color dependent, the
currently selected color is pushed on the stack before the percentage.  The
current color is converted to the palette's color space if necessary.

The color picker constructs the graphic to be displayed in the palette by
repeatedly calling the palette's function with percentages between 0.0 and
1.0 and using the resulting colors to paint thin, vertical strips.  The color
picker also uses the function to convert mouse clicks into colors by
converting the click position into a percentage across the palette and then
passing this percentage to the palette's function.

The following examples show the resources that define the default palettes
included in the color picker resource file:

name:			Full Spectrum
space:			CSBSpaceHSB
color dependent:	False
function:		1 1

The color picker pushes the percentage onto the stack, and the function uses
this value as a hue and pushes 1.0 onto the stack for saturation and 1.0 for
brightness.  (Since the palette is not color dependent, the color picker does
not push the current color onto the stack).  The result is a bright, saturated
spectrum from red through the rainbow back to red.

name:			Shades
space:			CSBSpaceHSB
color dependent:	True
function:		exch pop

The color picker pushes the current color expressed in HSB onto the stack and
then pushes the percentage onto the stack.  The function exchanges the
top two elements (the brightness and the percentage) and pops off the
brightness.  The result is to replace the brightness value with the
percentage, yielding the current color displayed from 0.0 brightness (black)
to full brightness.

name:			Pastels
space:			CSBSpaceHSB
color dependent:	True
function:		3 -1 roll pop exch

This is similar to the "Shades" palette, but it replaces the saturation value
of the current color with the percentage.  The result is the current color
displayed from 0.0 saturation (white) to full saturation.

name:			Black to White
space:			CSBSpaceHSB
color dependent:	True
function:		dup .5 lt
			   {2 mul 3 1 roll pop pop 1 exch}
			   {.5 sub 2 mul 1 sub neg 3 1 roll pop pop 1}
			ifelse

This code is rather complex.  It tests whether the percentage is less
than 0.5, and if so it replaces the brightness value with twice the
percentage and the saturation value with 1.0.  As a result, the left half of 
the palette displays the current color in full saturation with a brightness
ranging from 0.0 (black) to 1.0 (full).  If the percentage is greater than or equal 
to 0.5, the else clause performs a similar replacement, but in this case the 
brightness is replaced with 1.0 and the saturation with a percentage-based value.  
This range results in the right half of the palette displaying the current color 
at full brightness with a saturation ranging from 1.0 (full color) to 0.0 (black).

name:			Grays
space:			CSBSpaceGray
color dependent:	False
function:		(nothing)

This simply uses the percentage as a gray value, yielding shades of gray from
0 (black) to 1 (white).

name:			Narrow Spectrum
space:			CSBSpaceHSB
color dependent:	True
function:		.5 sub .3 mul		  % cvt pct to -.15 to +.15
			 4 -1 roll add		  % add to the hue
			 dup 0.0 lt {1.0 add} if  % add 1 if < 0
			 dup 1.0 gt {1.0 sub} if  % subtract 1 if > 1
			 3 1 roll		  % roll back to be hue

This function converts the percentage to a value between -0.15 and
0.15 and adds this result to the hue component of the current color.  
After bounds adjusting this value becomes the returned hue.  The result is a 
narrow spectrum around the current color, displayed with the current saturation 
and brightness.

The following palette is not in the default set, but it illustrates a useful
type of palette.  By putting a palette like this in the resource file for an
application, an installation can create a palette that displays the company
colors or the recommended colors for use in presentations.

name:			Vive La France
space:			CSBSpaceRGB
color dependent:	False
function:		dup .33 lt
			{pop 1 0 0}
			{.67 lt {1 1 1} {0 0 1} ifelse} ifelse

If the percentage is less than 0.33, the color is red; if the percentage is
between 0.33 and 0.67, the color is white; otherwise the color is blue.  The
result is three segments displaying the colors of the French flag.

The color picker displays each palette whose function resource is set and
whose function resource is not "%".  The palettes do no need to be
contiguously numbered; if palettes 2, 7, and 9 are the only ones with valid
functions, palettes 2, 7, and 9 will be the only ones displayed.  You can
suppress the inclusion of a default palette by redefining its function to be
"%".

============================
Children of the Color Picker
============================

The children of the color picker have the following names:

applyButton
cancelButton
cmyk
displayBoth
displayDPS
displayMenu
displayOptionMenu
displayX
dock
dockFrame
eyedropButton
gray
hsb
label1
label2
label3
label4
modelMenu
modelOptionMenu
noBackgroundMessage
okButton
palette
palette0
palette1
palette2
palette3
palette4
palette5
palette6
palette7
palette8
palette9
paletteFrame
paletteMenu
paletteOptionsMenu
panel
patchFrame
patch
resetButton
rgb
separator
slider1
slider2
slider3
slider4
value1
value2
value3
value4

===================
Callback Procedures
===================

The following sections contain information about callback procedures
available for working with the color picker.  All callback procedures pass a
pointer to a CSBCallbackRec structure as call data.

Name			Class		Default	Type		Access
XtNapplyCallback	XtCCallback	NULL	XtCallbackList	C
XtNcancelCallback	XtCCallback	NULL	XtCallbackList	C
XtNokCallback		XtCCallback	NULL	XtCallbackList	C
XtNresetCallback	XtCCallback	NULL	XtCallbackList	C
XtNvalueChangedCallback	XtCCallback	NULL	XtCallbackList	C

XtNapplyCallback
	Indicates that the user wants to choose the selected color.  The
color picker remains.  CSBCallbackReason is CSBApply.  Applications typically
supply the same procedure for the XtNapplyCallback as for XtNokCallback.

XtNcancelCallback
	The color picker reverts to the last set value and disappears after
the callback returns.  CSBCallbackReason is CSBCancel.  Applications rarely
need to specify XtNcancelCallback.

XtNokCallback
	Indicates that the user wants to choose the selected color.  The
color picker disappears after the callback returns.  CSBCallbackReason is
CSBOK.  Applications typically supply the same procedure for the
XtNokCallback as for XtNapplyCallback.

XtNresetCallback
	The color picker reverts to the last set value and remains after the
callback returns.  CSBCallbackReason is CSBReset.  Applications rarely need
to specify XtNresetCallback.

XtNvalueChangedCallback
	Informs the application whenever the user changes the current color.
CSBCallbackReason is CSBValueChanged.

==========
Data Types
==========

This section provides the definition of the data types and structure
definitions used by the color picker

CSBCallbackRec
	typedef struct {
	    CSBCallbackReason reason;
	    CSBColorSpace current_space;
	    float red, green, blue;
	    float cyan, magenta, yellow, black;
	    float hue, saturation, brightness;
	    float gray;
	} CSBCallbackRec;

All callbacks pass a pointer to a CSBCallbackRec as call data.

reason is one of CSBOK, CSBApply, CSBReset, CSBCancel, or CSBValueChanged.

current_space reflects the currently selected color space and is one of
CSBSpaceRGB, CSBSpaceCMYK, CSBSpaceHSB, or CSBSpaceGray.

The color fields give the selected color in each of the four color models.  
The values in the fields corresponding to the space in current_space directly
reflect the color values selected by the user.  The values in the other
fields are derived using a standard set of color space conversion formulas.

CSBCallbackReason
	typedef enum {CSBOK, CSBApply, CSBReset,
		      CSBCancel, CSBValueChanged} CSBCallbackReason;

CSBCallbackReason lists the possible values for the callback reason.

CSBColorSpace
	typedef enum {CSBSpaceRGB, CSBSpaceCMYK, CSBSpaceHSB,
		      CSBSpaceGray} CSBColorSpace;

CSBColorSpace lists the possible color space values.

CSBRenderingType
	typedef enum {CSBDisplayX, CSBDisplayDPS,
		      CSBDisplayBoth} CSBRenderingType;

CSBRenderingType lists the possible values for describing how the color
picker displays the current color in the color patch.

=========
Functions
=========

CSBGetColor
	void CSBGetColor(w, space, c1, c2, c3, c4)
		Widget w;
		CSBColorSpace space;
		float *c1, *c2, *c3, *c4;

This procedure returns the current color in the specified color space.  If
space is CSBSpaceRGB or CSBSpaceHSB, only c1, c2, and c3 are set; c4 is
unchanged.  If space is CSBSpaceGray only c1 is set; c2, c3, and c4 are
unchanged.  If space is CSBSpaceCMYK all four values are set.

CSBSetColor
	Boolean CSBSetColor(w, space, c1, c2, c3, c4, setSpace)
		Widget w;
		CSBColorSpace space;
		double c1, c2, c3, c4;
		Bool setSpace;

This procedure sets the current color to be the color described by c1, c2,
c3, and c4, as interpreted in the specified color space.  If space is
CSBSpaceRGB or CSBSpaceHSB, c4 is ignored.  If space is CSBSpaceGray, c2, c3,
and c4 are ignored.  If space is CSBSpaceCMYK, no values are ignored.  If
setSpace is True, the specified space is also used to set the current color
space.  If setSpace is False, the current color space remains unchanged.
CSBSetColor returns False without changing anything if any of the values are
smaller than 0.0 or larger than 1.0; otherwise it returns True.

=============
Saving Colors
=============

The color picker uses a file to save the contents of the color dock between
invocations of the widget.  If the environment variable DPSCPICKRC is set,
its value is the name of the save file.  If DPSCPICKRC is not set, or if this
file does not exist and cannot be created, the color picker uses the file
.dpscpickrc in the user's home directory.

Each line in the save file consists of an integer and four floating point
values.  The integer gives the cell number, and the floating point values
describe the CMYK values for the color in that cell.































