!!
!! $RCSfile: Hit.uil,v $
!!
!! (c) Copyright 1992-1994 Adobe Systems Incorporated.
!! All rights reserved.
!! 
!! Permission to use, copy, modify, distribute, and sublicense this software
!! and its documentation for any purpose and without fee is hereby granted,
!! provided that the above copyright notices appear in all copies and that
!! both those copyright notices and this permission notice appear in
!! supporting documentation and that the name of Adobe Systems Incorporated
!! not be used in advertising or publicity pertaining to distribution of the
!! software without specific, written prior permission.  No trademark license
!! to use the Adobe trademarks is hereby granted.  If the Adobe trademark
!! "Display PostScript"(tm) is used to describe this software, its
!! functionality or for any other purpose, such use shall be limited to a
!! statement that this software works in conjunction with the Display
!! PostScript system.  Proper trademark attribution to reflect Adobe's
!! ownership of the trademark shall be given whenever any such reference to
!! the Display PostScript system is made.
!! 
!! ADOBE MAKES NO REPRESENTATIONS ABOUT THE SUITABILITY OF THE SOFTWARE FOR
!! ANY PURPOSE.  IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
!! ADOBE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
!! IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
!! NON- INFRINGEMENT OF THIRD PARTY RIGHTS.  IN NO EVENT SHALL ADOBE BE LIABLE
!! TO YOU OR ANY OTHER PARTY FOR ANY SPECIAL, INDIRECT, OR CONSEQUENTIAL
!! DAMAGES OR ANY DAMAGES WHATSOEVER WHETHER IN AN ACTION OF CONTRACT,
!! NEGLIGENCE, STRICT LIABILITY OR ANY OTHER ACTION ARISING OUT OF OR IN
!! CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  ADOBE WILL NOT
!! PROVIDE ANY TRAINING OR OTHER SUPPORT FOR THE SOFTWARE.
!! 
!! Adobe, PostScript, and Display PostScript are trademarks of Adobe Systems
!! Incorporated which may be registered in certain jurisdictions
!! 
!! Author:  Adobe Systems Incorporated

!! Widget Hierarchy
!!
!! TopLevelWidget toplevelShellWidgetClass
!!	MainWindow XmMainWindow
!!		mMenuBar XmMenuBar
!!			mCommandButton XmCascadeButton
!!				mCommandMenu XmPulldownMenu
!!					mTraceButton XmCascadeButton
!!						mTraceMenu XmPulldownMenu
!!							mDrawingButton XmToggleButton
!!							mHitDetButton XmToggleButton
!!							mZoomingButton XmToggleButton
!!					mShowBufferButton XmToggleButton
!!					Nil XmSeparator
!!					mQuitButton XmPushButton
!!
!!		mScrolled XmScrolledWindow
!!			mHorzSBar XmScrollBar
!!			mVertSBar XmScrollBar
!!			mDrawingArea XmDrawingArea
!! 
!!	OptionBox XmBulletinBoardDialog
!!		oOptionBoxForm XmForm
!!			oGridTitle XmLabel
!!			oGridFrame XmFrame
!!				oGridRadioBox XmRadioBox
!!					oGridButton XmToggleButton
!!					oCopyAllButton XmToggleButton
!!			oMouseTitle XmLabel
!!			oMouseFrame XmFrame
!!				oMouseForm XmForm
!!					oMouseSubTitle XmLabel
!!					oMouseDrawingArea XmDrawingArea
!!					oMouseRadioBox XmRadioBox
!!						oMouseButton0 XmToggleButton
!!						oMouseButton1 XmToggleButton
!!						oMouseButton2 XmToggleButton
!!						oMouseButton3 XmToggleButton
!!						oMouseButton4 XmToggleButton
!!						oMouseButton5 XmToggleButton
!!			oMagTitle XmLabel
!!			oMagFrame XmFrame
!!				oMagRadioBox XmRadioBox
!!					oMagButton0 XmToggleButton
!!					oMagButton1 XmToggleButton
!!					oMagButton2 XmToggleButton
!!					oMagButton3 XmToggleButton
!!					oMagButton4 XmToggleButton
!!					oMagButton5 XmToggleButton
!!					oMagButton6 XmToggleButton
!!					oMagButton7 XmToggleButton
!! BufferWindowWidget topLevelShellWidgetClass
!!	BufferBox XmForm
!!		bLabel0 XmLabel
!!		bDrawArea0 XmDrawingArea
!!		bLabel1 XmLabel
!!		bDrawArea1 XmDrawingArea
!!

!!***************************************************************
!! MODULE DECLARATIONS
!!***************************************************************

!!
!! module HitApp
!!
module HitApp
        version = 'v1.0'
        names = case_sensitive
        objects =
		{
                XmCascadeButton	= gadget ;
                XmLabel		= gadget ;
                XmPushButton	= gadget ;
                XmSeparator	= gadget ;
                XmToggleButton	= gadget ;
		}


!!***************************************************************
!! PROCEDURE DECLARATIONS
!!***************************************************************

procedure
        resizeWindow  		();
        refreshWindow 		();
	createProc   		(integer);
        quitApp       		();
	scrollProc		();
	traceProc		(integer);
	showBufferProc		();
	bufferExposeProc	();
	refreshMouse		();
	gridSel			();
	copyAllSel		();
	mouseSel		(integer);
	magnificationSel	(integer);

!!***************************************************************
!! VALUE DECLARATIONS
!!***************************************************************

!!
!! the following list is duplicated in patt.c for identification
!! of widgets as they are created
!!
value
		cMainDrawArea		: 1;
		cMouseDrawArea		: 2;
		cBufferDrawArea0	: 3;
		cBufferDrawArea1	: 4;
		cDrawingToggle		: 5;
		cHitDetToggle		: 6;
		cZoomingToggle		: 7;
		cMainHorzSBar		: 8;
		cMainVertSBar		: 9;

!!
!! ADOBE FONTS
!!
value
    hel_bold_font12 :
      font('-adobe-helvetica-bold-r-normal--12-120-75-75-p-70-iso8859-1');
    hel_bold_font14 :
      font('-adobe-helvetica-bold-r-normal--14-140-75-75-p-82-iso8859-1');
    hel_bold_font18 :
      font('-adobe-helvetica-bold-r-normal--18-180-75-75-p-103-iso8859-1');
    newcenturyschlbk_bold24 :
      font('-adobe-new century schoolbook-bold-r-normal--24-240-75-75-p-149-iso8859-1');

    dialogFont      : hel_bold_font12;
	textFont        : hel_bold_font12;
	labelFont       : hel_bold_font14;
	buttonFont      : hel_bold_font14;
	bigFont         : hel_bold_font18;
	jumboFont       : newcenturyschlbk_bold24;


!!
!! general constant values
!!
value
        vLabelOffset	: 7;	! pixels
        vFrameShadow	: XmSHADOW_ETCHED_IN;

!!
!! main window constant values
!!
value
        vMainWidth      : 420;	! pixels
        vMainHeight     : 450;	! pixels


!!
!! option box constant values
!!
value
		vOptionMargin	: 20;	! pixels
		vBottomPosition	: 97;	! percent

		vMouseLeft		: 20;	! percent
		vMouseDrawLeft	: 22;	! percent

		vMagLeft		: 17;	! percent

		vMouseDrawWidth	: 50;	! pixels
		vMouseDrawHeight: 50;	! pixels


!!
!! buffer box constant values
!!
value
        vBufferDrawWidth    : 100;  ! pixels
        vBufferDrawHeight   : 100;  ! pixels

        vBufferSpacing  : 10;   ! pixels


!!***************************************************************
!! TOP LEVEL WIDGETS
!!***************************************************************

!!
!! The main window widget.  This displays the hit detection drawing.
!!
object MainWindow : XmMainWindow
{
    arguments
    {
        XmNheight   = vMainHeight;
        XmNwidth    = vMainWidth ;
    };
    controls
    {
        XmMenuBar           mMenuBar;
        XmScrolledWindow    mScrolled;
    };
};

!!
!! The option box is used to specify hit detection drawing options
!!
object OptionBox : XmBulletinBoardDialog
{
    arguments
    {
        XmNdialogStyle	= XmDIALOG_MODELESS;
        XmNmarginWidth	= vOptionMargin;
    };
    controls
    {
		XmForm		oOptionBoxForm;
    };
};

!!
!! The buffer box is used to display the hit detection buffers
!!
object BufferBox : XmBulletinBoardDialog
{
    arguments
    {
        XmNdialogStyle	= XmDIALOG_MODELESS;
    };
    controls
    {
		XmForm		oBufferBoxForm;
    };
};

object oBufferBoxForm: XmForm
{
	arguments
	{
        XmNhorizontalSpacing    = vBufferSpacing;
        XmNverticalSpacing      = vBufferSpacing;
    };
    controls
    {
        XmLabel         bLabel0;
        XmDrawingArea   bDrawArea0;
        XmLabel         bLabel1;
        XmDrawingArea   bDrawArea1;
	};
};


!!***************************************************************
!! Main window menu bar
!!***************************************************************

object mMenuBar : XmMenuBar           
{
	controls
	{
		XmCascadeButton mCommandButton;
	};
};

object mCommandButton : XmCascadeButton
{
	arguments
    {
        XmNfontList    = buttonFont;
    };
    controls
    {
        XmPulldownMenu mCommandMenu;
    };
};

object mCommandMenu : XmPulldownMenu
{
    controls
    {
		XmCascadeButton mTraceButton;
        XmToggleButton  mShowBufferButton;
        XmSeparator     {};
        XmPushButton    mQuitButton;
    };
};

object mTraceButton : XmCascadeButton
{
	arguments
    {
        XmNfontList    = buttonFont;
    };
    controls
    {
        XmPulldownMenu mTraceMenu;
    };
};

object mShowBufferButton : XmToggleButton
{
    arguments
    {
        XmNfontList    = buttonFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure showBufferProc ();
    };
};

object mQuitButton : XmPushButton
{
    arguments
    {
        XmNfontList    = buttonFont;
    };
    callbacks
    {
        XmNactivateCallback = procedure quitApp ();
    };
};
 
object mTraceMenu : XmPulldownMenu
{
    controls
    {
        XmToggleButton  mDrawingButton;
        XmToggleButton  mHitDetButton;
        XmToggleButton  mZoomingButton;
    };
};

object mDrawingButton : XmToggleButton
{
    arguments
    {
        XmNfontList    = buttonFont;
    };
    callbacks
    {
		MrmNcreateCallback	= procedure createProc (cDrawingToggle);
        XmNvalueChangedCallback = procedure traceProc (0);
    };
};

object mHitDetButton : XmToggleButton
{
    arguments
    {
        XmNfontList    = buttonFont;
    };
    callbacks
    {
		MrmNcreateCallback	= procedure createProc (cHitDetToggle);
        XmNvalueChangedCallback = procedure traceProc (1);
    };
};

object mZoomingButton : XmToggleButton
{
    arguments
    {
        XmNfontList    = buttonFont;
    };
    callbacks
    {
		MrmNcreateCallback	= procedure createProc (cZoomingToggle);
        XmNvalueChangedCallback = procedure traceProc (2);
    };
};

!!***************************************************************
!! Main window scrolled drawing area
!!***************************************************************
object mScrolled : XmScrolledWindow    
{
	arguments
	{
		XmNheight			= vMainHeight;
		XmNwidth			= vMainWidth ;
        XmNhorizontalScrollBar  = XmScrollBar mHorzSBar;
        XmNverticalScrollBar    = XmScrollBar mVertSBar;
        XmNworkWindow           = XmDrawingArea mDrawArea;
	} ;
	controls
	{
        XmScrollBar     mHorzSBar;
        XmScrollBar     mVertSBar;
		XmDrawingArea   mDrawArea ;
	} ;
} ;

object mHorzSBar : XmScrollBar
{
    arguments
    {
        XmNorientation          = XmHORIZONTAL;
        XmNincrement            = 50;
        XmNpageIncrement        = 300;
    };
    callbacks
    {
        MrmNcreateCallback      = procedure createProc (cMainHorzSBar);
        XmNvalueChangedCallback = procedure scrollProc ();
        XmNdragCallback         = procedure scrollProc ();
    };
};

object mVertSBar : XmScrollBar
{
    arguments
    {
        XmNorientation          = XmVERTICAL;
        XmNincrement            = 50;
        XmNpageIncrement        = 300;
    } ;
    callbacks
    {
        MrmNcreateCallback      = procedure createProc (cMainVertSBar);
        XmNvalueChangedCallback = procedure scrollProc ();
        XmNdragCallback         = procedure scrollProc ();
    } ;
} ;

object mDrawArea : XmDrawingArea
{
	arguments
	{
	};
	callbacks
	{
        MrmNcreateCallback = procedure createProc (cMainDrawArea);
		XmNexposeCallback = procedure refreshWindow ();
		XmNresizeCallback = procedure resizeWindow ();
	};
};

!!***************************************************************
!! Option box top form
!!***************************************************************
object oOptionBoxForm : XmForm
{
    arguments
	{
		!!XmNbackground	= color('yellow');
		XmNhorizontalSpacing = (5 * vOptionMargin) / 2;
	};
    controls
    {
	XmLabel     oGridTitle;
        XmFrame     oGridFrame;
        XmLabel     oMouseTitle;
        XmFrame     oMouseFrame;
        XmLabel     oMagTitle;
        XmFrame     oMagFrame;
    };
};

!!***************************************************************
!! Option box grid selection
!!***************************************************************
object oGridTitle : XmLabel
{
    arguments
	{
		XmNalignment   		= XmALIGNMENT_CENTER;
		XmNfontList    		= labelFont ;
		XmNmarginTop        = vLabelOffset;

		XmNleftAttachment	= XmATTACH_FORM ;
		XmNrightAttachment	= XmATTACH_FORM ;

		XmNtopAttachment	= XmATTACH_FORM ;
    };
};

object oGridFrame : XmFrame
{
    arguments
    {
		XmNshadowType		= vFrameShadow ;
        XmNmarginWidth		= vOptionMargin;
        XmNmarginHeight		= vOptionMargin / 2;

	XmNleftAttachment	= XmATTACH_POSITION ;
	XmNleftPosition		= 20;
	XmNrightAttachment	= XmATTACH_POSITION ;
	XmNrightPosition	= 80;

	XmNtopAttachment	= XmATTACH_WIDGET ;
	XmNtopWidget		= XmLabel oGridTitle ;
    };
    controls
    {
	XmRowColumn	oGridRowColumn;
    };
};

object oGridRowColumn: XmRowColumn
{
    arguments
    {
        XmNorientation  	= XmVERTICAL;
    };
    controls
    {
	XmToggleButton oGridButton;
	XmToggleButton oCopyButton;
    };
};

object oGridButton : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure gridSel ();
    };
};


object oCopyButton : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure copyAllSel ();
    };
};

!!***************************************************************
!! Option box mouse sensitivity
!!***************************************************************
object oMouseTitle : XmLabel
{
    arguments
	{
		XmNalignment		= XmALIGNMENT_CENTER;
		XmNfontList			= labelFont ;
		XmNmarginTop        = vLabelOffset;

		XmNleftAttachment	= XmATTACH_FORM ;
		XmNrightAttachment	= XmATTACH_FORM ;

		XmNtopAttachment	= XmATTACH_WIDGET;
		XmNtopWidget		= XmFrame oGridFrame;
    };
};

object oMouseFrame : XmFrame
{
    arguments
    {
	XmNshadowType           = vFrameShadow ;
        XmNmarginWidth		= vOptionMargin;

	XmNleftAttachment	= XmATTACH_POSITION ;
	XmNleftPosition		= 25;
	XmNrightAttachment	= XmATTACH_POSITION ;
	XmNrightPosition	= 75;

	XmNtopAttachment        = XmATTACH_WIDGET ;
	XmNtopWidget        	= XmLabel oMouseTitle ;
    };
	controls
	{
		XmForm			oMouseForm;
	};
};

object oMouseForm : XmForm
{
    arguments
	{
	};
    controls
    {
		XmLabel			oMouseSubTitle;
        XmDrawingArea   oMouseDrawArea;
        XmRadioBox      oMouseRadioBox;
    };
};

object oMouseSubTitle : XmLabel
{
    arguments
	{
		XmNalignment		= XmALIGNMENT_CENTER;
		XmNfontList			= labelFont ;

		XmNleftAttachment	= XmATTACH_FORM ;
		XmNrightAttachment	= XmATTACH_FORM ;

		XmNtopAttachment	= XmATTACH_FORM ;
    };
};

object oMouseDrawArea : XmDrawingArea
{
	arguments
	{
		!!XmNbackground	= color('green');
		XmNheight		= vMouseDrawHeight;
		XmNwidth		= vMouseDrawWidth;

		XmNresizePolicy = XmRESIZE_NONE ;

		XmNleftAttachment       = XmATTACH_POSITION ;
		XmNleftPosition			= vMouseDrawLeft;

		XmNtopAttachment	= XmATTACH_WIDGET ;
		XmNtopWidget       	= XmLabel oMouseSubTitle ;
	};
    callbacks
    {
        MrmNcreateCallback = procedure createProc (cMouseDrawArea);
	XmNexposeCallback = procedure refreshMouse ();
    };
};

object oMouseRadioBox : XmRadioBox
{
    arguments
    {
        XmNorientation  	= XmVERTICAL;
        XmNisHomogeneous	= true;
	XmNpacking		= XmPACK_COLUMN;
	XmNnumColumns		= 2;

	XmNtopAttachment	= XmATTACH_WIDGET ;
	XmNtopWidget       	= XmDrawingArea oMouseDrawArea ;
	XmNbottomAttachment = XmATTACH_FORM ;
    };
    controls
    {
        XmToggleButton  oMouseButton0;
        XmToggleButton  oMouseButton1;
        XmToggleButton  oMouseButton2;
        XmToggleButton  oMouseButton3;
        XmToggleButton  oMouseButton4;
        XmToggleButton  oMouseButton5;
    };
};

object oMouseButton0 : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure mouseSel (1);
    };
};

object oMouseButton1 : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure mouseSel (2);
    };
};

object oMouseButton2 : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure mouseSel (4);
    };
};

object oMouseButton3 : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure mouseSel (8);
    };
};

object oMouseButton4 : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure mouseSel (12);
    };
};

object oMouseButton5 : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure mouseSel (16);
    };
};

!!***************************************************************
!! Option box magnification selection
!!***************************************************************
object oMagTitle : XmLabel
{
    arguments
	{
		XmNalignment   = XmALIGNMENT_CENTER;
		XmNfontList    = labelFont ;
		XmNmarginTop        = vLabelOffset;

		XmNleftAttachment	= XmATTACH_FORM ;
		XmNrightAttachment	= XmATTACH_FORM ;

		XmNtopAttachment	= XmATTACH_WIDGET ;
		XmNtopWidget      	= XmFrame oMouseFrame;
    };
};

object oMagFrame : XmFrame
{
    arguments
    {
	XmNshadowType       = vFrameShadow ;
        XmNmarginWidth		= vOptionMargin;
        XmNmarginHeight		= vOptionMargin;

	XmNleftAttachment	= XmATTACH_POSITION ;
	XmNleftPosition		= 20;
	XmNrightAttachment	= XmATTACH_POSITION ;
	XmNrightPosition	= 80;

	XmNtopAttachment    = XmATTACH_WIDGET ;
	XmNtopWidget      	= XmLabel oMagTitle;
	XmNbottomAttachment	= XmATTACH_POSITION;
	XmNbottomPosition	= vBottomPosition;
    };
    controls
    {
        XmRadioBox      oMagRadioBox;
    };
};

object oMagRadioBox : XmRadioBox
{
    arguments
    {
        XmNorientation  	= XmVERTICAL;
        XmNisHomogeneous	= true;
		XmNpacking			= XmPACK_COLUMN;
		XmNnumColumns		= 2;
    };
    controls
    {
        XmToggleButton  oMagButton0;
        XmToggleButton  oMagButton1;
        XmToggleButton  oMagButton2;
        XmToggleButton  oMagButton3;
        XmToggleButton  oMagButton4;
        XmToggleButton  oMagButton5;
        XmToggleButton  oMagButton6;
        XmToggleButton  oMagButton7;
    };
};

object oMagButton0 : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure magnificationSel (25);
    };
};

object oMagButton1 : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure magnificationSel (50);
    };
};

object oMagButton2 : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure magnificationSel (75);
    };
};

object oMagButton3 : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure magnificationSel (100);
    };
};

object oMagButton4 : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure magnificationSel (150);
    };
};

object oMagButton5 : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure magnificationSel (200);
    };
};

object oMagButton6 : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure magnificationSel (300);
    };
};

object oMagButton7 : XmToggleButton
{
    arguments
    {
        XmNfontList    = labelFont;
    };
    callbacks
    {
        XmNvalueChangedCallback = procedure magnificationSel (400);
    };
};

!!***************************************************************
!! Buffer box drawing areas
!!***************************************************************
object bLabel0 : XmLabel
{
    arguments
    {
        !!XmNbackground     = color('blue');
        XmNalignment        = XmALIGNMENT_CENTER;
        XmNfontList         = labelFont ;

        XmNleftAttachment   = XmATTACH_FORM ;
        XmNrightAttachment  = XmATTACH_WIDGET ;
        XmNrightWidget      = XmDrawingArea bDrawArea1;

        XmNtopAttachment    = XmATTACH_FORM ;
        XmNbottomAttachment = XmATTACH_WIDGET ;
        XmNbottomWidget     = XmDrawingArea bDrawArea0;
    };
};

object bDrawArea0 : XmDrawingArea
{
    arguments
    {
        !!XmNbackground     = color('green');
        XmNheight           = vBufferDrawHeight;
        XmNwidth            = vBufferDrawWidth;

        XmNleftAttachment   = XmATTACH_FORM ;

        XmNbottomAttachment = XmATTACH_FORM ;
    };
    callbacks
    {
        MrmNcreateCallback = procedure createProc (cBufferDrawArea0);
        XmNexposeCallback = procedure bufferExposeProc ();
    };
};

object bLabel1 : XmLabel
{
    arguments
    {
        !!XmNbackground     = color('green');
        XmNalignment        = XmALIGNMENT_CENTER;
        XmNfontList         = labelFont ;

        XmNleftAttachment   = XmATTACH_WIDGET ;
        XmNleftWidget       = XmDrawingArea bDrawArea0;
        XmNrightAttachment  = XmATTACH_FORM ;

        XmNtopAttachment    = XmATTACH_FORM ;
        XmNbottomAttachment = XmATTACH_WIDGET ;
        XmNbottomWidget     = XmDrawingArea bDrawArea1;
    };
};

object bDrawArea1 : XmDrawingArea
{
    arguments
    {
        !!XmNbackground     = color('blue');
        XmNheight           = vBufferDrawHeight;
        XmNwidth            = vBufferDrawWidth;

        XmNleftAttachment   = XmATTACH_WIDGET ;
        XmNleftWidget       = XmDrawingArea bDrawArea0;
        XmNrightAttachment  = XmATTACH_FORM ;

        XmNbottomAttachment = XmATTACH_FORM ;
    };
    callbacks
    {
        MrmNcreateCallback = procedure createProc (cBufferDrawArea1);
        XmNexposeCallback = procedure bufferExposeProc ();
    };
};


!!***************************************************************
end module;

