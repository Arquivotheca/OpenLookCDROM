/*
 * $RCSfile: ScrollWraps.psw,v $
 *
 * (c) Copyright 1992-1994 Adobe Systems Incorporated.
 * All rights reserved.
 * 
 * Permission to use, copy, modify, distribute, and sublicense this software
 * and its documentation for any purpose and without fee is hereby granted,
 * provided that the above copyright notices appear in all copies and that
 * both those copyright notices and this permission notice appear in
 * supporting documentation and that the name of Adobe Systems Incorporated
 * not be used in advertising or publicity pertaining to distribution of the
 * software without specific, written prior permission.  No trademark license
 * to use the Adobe trademarks is hereby granted.  If the Adobe trademark
 * "Display PostScript"(tm) is used to describe this software, its
 * functionality or for any other purpose, such use shall be limited to a
 * statement that this software works in conjunction with the Display
 * PostScript system.  Proper trademark attribution to reflect Adobe's
 * ownership of the trademark shall be given whenever any such reference to
 * the Display PostScript system is made.
 * 
 * ADOBE MAKES NO REPRESENTATIONS ABOUT THE SUITABILITY OF THE SOFTWARE FOR
 * ANY PURPOSE.  IT IS PROVIDED "AS IS" WITHOUT EXPRESS OR IMPLIED WARRANTY.
 * ADOBE DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING ALL
 * IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NON- INFRINGEMENT OF THIRD PARTY RIGHTS.  IN NO EVENT SHALL ADOBE BE LIABLE
 * TO YOU OR ANY OTHER PARTY FOR ANY SPECIAL, INDIRECT, OR CONSEQUENTIAL
 * DAMAGES OR ANY DAMAGES WHATSOEVER WHETHER IN AN ACTION OF CONTRACT,
 * NEGLIGENCE, STRICT LIABILITY OR ANY OTHER ACTION ARISING OUT OF OR IN
 * CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  ADOBE WILL NOT
 * PROVIDE ANY TRAINING OR OTHER SUPPORT FOR THE SOFTWARE.
 * 
 * Adobe, PostScript, and Display PostScript are trademarks of Adobe Systems
 * Incorporated which may be registered in certain jurisdictions
 * 
 * Author:  Adobe Systems Incorporated
 */

/***************************************************************
**
** FUNCTION:	PSWGetTransform
**
** DESCRIPTION:	Gets the current transform matrices and offset
**		coordinates.
**
** PARAMETERS:	None
**
** RETURN:	Ctm		array of current transform matrix
**		Invctm		array of inverted matrix
**		XOffset		X offset value
**		YOffset		Y offset value
**
***************************************************************/
defineps PSWGetTransform (| float Ctm[6], Invctm[6]; 
			int *XOffset, *YOffset)
	matrix currentmatrix dup Ctm
	matrix invertmatrix Invctm
	currentXoffset YOffset XOffset
endps

/***************************************************************
**
** FUNCTION:	PSWSetMatrixAndGetTransform
**
** DESCRIPTION:	Sets the current matrix to have the specified
**		translation, scale, and halftone phase, and returns
**		the matrices
**
** PARAMETERS:	tx, ty		translation
**		s		scale
**		hx, hy		halftonephase
**
** RETURN:	Ctm		array of current transform matrix
**		Invctm		array of inverted matrix
**		XOffset		X offset value
**		YOffset		Y offset value
**
***************************************************************/
defineps PSWSetMatrixAndGetTransform (float tx, ty, s; int hx, hy
		| float Ctm[6], Invctm[6]; int *XOffset, *YOffset)
        initmatrix
	tx ty translate
	s s scale
	hx hy sethalftonephase
	initclip
	matrix currentmatrix dup Ctm
	matrix invertmatrix Invctm
	currentXoffset YOffset XOffset
endps

/***************************************************************
**
** FUNCTION:	PSWDrawFrame
**
** DESCRIPTION:	Draw frame around the displayable page.
**
** PARAMETERS:	Ox	X coordinate of lower left corner.
**		Oy	Y coordinate of lower left corner.
**		Dx	width
**		Dy	height
**
** RETURN:	None
**
***************************************************************/
defineps PSWDrawFrame(int Ox; int Oy; int Dx; int Dy)
	gsave

	newpath
	Ox Oy moveto
	0 Dy rlineto
	Dx 0 rlineto
	0 Dy neg rlineto
	closepath
	-32768 -32768 moveto
	32767 -32768 lineto
	32767 32767 lineto
	-32768 32767 lineto
	closepath
	0.8 setgray fill

	newpath
	10 -10 translate
	Ox Oy moveto
	Dx 0 rlineto
	0 Dy rlineto
	-10 0 rlineto
	0 Dy neg 10 add rlineto
	Dx neg 10 add 0 rlineto
	closepath
	0 setgray fill
	-10 10 translate

	4 setlinewidth
	0 setgray
	Ox Oy Dx Dy rectstroke
	1 setgray
	Ox Oy Dx Dy rectfill

	grestore
endps

/***************************************************************
**
** FUNCTION:    PSWSetMatrixAndOffset
**
** DESCRIPTION: Sets the drawable, matrix, and offset for the context
**
** PARAMETERS:  window		new drawable
**		ctm		new transformation matrix
**		x, y		new X offset
**
** RETURN:	None
**
***************************************************************/

defineps PSWSetMatrixAndOffset(int window; float ctm[6]; int x, y)
    currentXgcdrawable pop pop pop window x y setXgcdrawable
    ctm setmatrix
endps

/***************************************************************
**
** FUNCTION:    PSWSetContextDrawable
**
** DESCRIPTION: Sets the drawable and offset
**
** PARAMETERS:  draw	The drawable
**		x, y	offset of drawable
**
** RETURN:	None
**
***************************************************************/
defineps PSWSetContextDrawable(int draw, x, y)
    currentXgcdrawable pop pop pop draw x y setXgcdrawable
endps

/***************************************************************
**
** FUNCTION:    PSWSetRectViewClip
**
** DESCRIPTION: Sets the view clip to the rectangles
**
** PARAMETERS:  Rect		List of rectangles
**		NumRect		Number of points in Rect
**
** RETURN:      None
**
***************************************************************/

defineps PSWSetRectViewClip(float numstring Rect[NumRect]; int NumRect)
    Rect rectviewclip
endps

defineps PSWSetGraphicsParams(boolean rgbcolor; float gray, red, green,
			      blue, linewidth, miterlimit;
			      int linejoin, linecap)
    rgbcolor {
	red green blue setrgbcolor
    } {
	gray setgray
    } ifelse

    linewidth setlinewidth
    miterlimit setmiterlimit
    linejoin setlinejoin
    linecap setlinecap
endps

