.\" @(#)rpcgen.1	1.2 87/11/27 3.9 RPCSRC
.TH RPCGEN 1 "3 November 1987"
.SH NAME
rpcgen \- an RPC protocol compiler
.SH SYNOPSIS
\fBrpcgen\fP \fIinfile\fP
.br
\fBrpcgen\fP \fB-h\fP \fB[-o \fIoutfile\fP]\fP \fB[\fIinputfile\fP]\fP
.br
\fBrpcgen\fP \fB-c\fP \fB[-o \fIoutfile\fP]\fP \fB[\fIinfile\fP]\fP
.br
\fBrpcgen\fP \fB-s\fP \fItransport\fP \fB[-o\fP \fIoutfile\fP]\fP \fB[\fIinfile\fP]\fP
.br
\fBrpcgen\fP \fB-l\fP \fB[-o\fP \fIoutfile\fP]\fP \fB[\fIinfile\fP]\fP
.br
\fBrpcgen\fP \fB-m\fP \fB[-o\fP \fIoutfile\fP]\fP \fB[\fIinfile\fP]\fP
.br
.SH DESCRIPTION
.IX "compilers" rpcgen "" "\fLrpcgen\fR \(em generate RPC protocols, C header files"
.IX rpcgen "" "\fLrpcgen\fR \(em generate RPC protocol, C header files, and server skeleton"
.IX RPC "generate protocols \(em \fLrpcgen\fR"
\fIrpcgen\fP is a tool that generates
.B C
code to implement an
.SM RPC
protocol.  The input to \fIrpcgen\fP is a language similar
.B C 
known as RPC Language (Remote Procedure Call Language).  Information
about the syntax of RPC Language is available in the \fI`rpcgen' 
Programming Guide\fP.
.LP
.I rpcgen 
is normally used as in the first synopsis where it takes an input file
and generates four output files. If the \fIinfile\fP is named \fIproto.x\fP,
then \fIrpcgen\fP will generate a header file in \fIproto.h\fP, XDR
routines in \fIproto_xdr.c\fP, server-side stubs in \fIproto_svc.c\fP
and client-side stubs if \fIproto_clnt.c\fP.  
.LP
The other synopses shown above are used when one does not want to 
generate all the output files, but only a particular one.  Their
usage is described in the \fBUSAGE\fP section below.
.LP
The C-preprocessor, \fIcpp(1)\fP, is run on all input files before they are
actually
interpreted by \fIrpcgen\fP, so all the cpp directives are legal within
an \fIrpcgen\fP input file.  For each type of output file, \fIrpcgen\fP defines
a special cpp symbol for use by the \fIrpcgen\fP programmer:
.PP
.PD 0
.TP
.SM RPC_HDR
defined when compiling into header files
.TP
.SM RPC_XDR
defined when compiling into XDR routines
.TP
.SM RPC_SVC
defined when compiling into server-side stubs
.TP
.SM RPC_CLNT
defined when compiling into client-side stubs
.PD
.PP
In addition, \fIrpcgen\fP does a little preprocessing of its own. Any line
beginning with `%' is passed directly into the output file, uninterpreted
by \fIrpcgen\fP.  
.LP
You can customize some of your XDR routines by leaving those data
types undefined.  For every data type that is undefined, \fIrpcgen\fP 
will assume that there exists a routine with the name `xdr_' prepended
to the name of the undefined type. 
.SH OPTIONS
.IP \fB-c\fP
Compile into XDR routines.
.IP \fB-h\fP
Compile into
.B C 
data-definitions (a header file)
.IP "\fB-l\fP
Compile into a client-side stubs.
.IP "\fB-s\fP \fItransport\fP"
Compile into server-side stubs, using the the given transport.  The
supported transports
are \fBudp\fP and \fBtcp\fP. This option may be invoked more than once
so as to compile a server that serves multiple transports.
.IP "\fB-m\fP
Compile into a server-side stubs, but do not produce a \fImain()\fP routine.
This option is useful if you want to supply your own \fImain()\fP.
.IP "\fB-o\fP \fIoutfile\fP"
Specify the name of the output file.  If none is specified, standard
output is used (\fB-c\fP, \fB-h\fP, \fB-l\fP and \fB-s\fP modes only).
.SH "SEE ALSO"
\fI`rpcgen' Programming Guide\fP
.SH BUGS
Nesting is not supported. As a work-around, structures can be declared at
top-level, and their name used inside other structures in order to achieve 
the same effect.
.LP
Name clashes can occur when using program definitions, since the apparent
scoping does not really apply. Most of these can be avoided by giving 
unique names for programs, versions, procedures and types.

