\begindata{text, 736768}
\textdsversion{12}
\template{roff}




\begindata{bp,842220}
\enddata{bp,842220}
\view{bpv,842220,0,0,0}



\majorheading{FXCL(3)    UNIX Programmer's Manual    FXCL(3)

}


\indent1{\tempindentneg1{\bold{NAME 

}}fx_open, fx_close, fx_create, fx_acl_add, fx_acl_del, fx_acl_list, 
fx_acl_list_destroy, fx_list, fx_list_destroy, paper_copy, fx_move, fx_copy, 
fx_delete - File Exchange Client Library 


\tempindentneg1{
\bold{SYNOPSIS 

}}\bold{#include <fxcl.h>



}\bold{FX *fx_open(s, codep)

     char *s;

     long *codep;



}\bold{void fx_close(fxp)

     FX *fxp;



}\bold{long fx_create(fxp, name)

     FX *fxp;

     char *name;



}\bold{long fx_acl_add(fxp, aclname, person)

     FX *fxp;

     char *aclname, *person;



}\bold{long fx_acl_del(fxp, aclname, person)

     FX *fxp;

     char *aclname, *person;



}\bold{typedef struct stringnode *stringlist;



}\bold{struct stringnode \{

        char *s;

        stringlist next;

\};



}\bold{typedef struct stringnode stringnode;



}\bold{struct stringlist_res \{

        long errno;

        union \{

                stringlist list;

        \} stringlist_res_u;

\};



}\bold{typedef struct stringlist_res stringlist_res;



}\bold{long fx_acl_list(fxp, aclname, ret)

     FX *fxp;

     char *aclname;

     stringlist_res **ret;



}\bold{void fx_acl_list_destroy(list)

     stringlist_res **list;



}\bold{typedef struct PaperNode *Paperlist;



}\bold{struct PaperNode \{

        Paper p;

        Paperlist next;

\};



}\bold{typedef struct PaperNode PaperNode;



}\bold{struct Paperlist_res \{

        long errno;

        union \{

                Paperlist list;

        \} Paperlist_res_u;

\};



}\bold{typedef struct Paperlist_res Paperlist_res;



}\bold{long fx_list(fxp, pp, ret)

     FX *fxp;

     Paper *pp;

     Paperlist_res **ret;



}\bold{void fx_list_destroy(plist)

     Paperlist_res **plist;



}\bold{paper_copy(src, dest)

     Paper *src, *dest;



}\bold{long fx_move(fxp, src, dest)

     FX *fxp;

     Paper *src, *dest;



}\bold{long fx_copy(fxp, src, dest)

     FX *fxp;

     Paper *src, *dest;



}\bold{long fx_delete(fxp, p)

     FX *fxp;

     Paper *p;



}\tempindentneg1{\bold{DESCRIPTION 

}}The File Exchange Client Library helps C programmers write applications 
which imitate the paper handling done in a classroom. A variety of paper types 
is supported. 


}\tempindentneg2{\indent1{\indent2{\bold{EXCHANGE 

}}}}\indent1{\indent2{papers can be removed by its author or by any grader. 

}}\tempindentneg2{\indent1{\indent2{\bold{TURNEDIN 

}}}}\indent1{\indent2{papers can be written by anyone but can be read only by 
graders and the papers' authors. The various types distinguish the stages in 
grading. 

}}\tempindentneg2{\indent1{\indent2{\bold{TAKEN 

}}}}\indent1{\indent2{is the paper type to which papers are moved when a 
grader decides to grade them. This avoids a condition of more than one grader 
taking the same paper at the same time. Any grader can also move a paper back 
to type TURNEDIN upon deciding that it was taken by mistake, or that the 
grader who took it will never grade it. 

}}\tempindentneg2{\indent1{\indent2{\bold{GRADED 

}}}}\indent1{\indent2{papers are written by graders. (Usually they are papers 
previously turned in by someone else, which the grader has modified to add 
comments and possibly a grade). A graded paper can be read by graders and by 
the paper's author. 

}}\tempindentneg2{\indent1{\indent2{\bold{PICKEDUP 

}}}}\indent1{\indent2{is the paper type to which the orignal author moves a 
GRADED paper to show that it's now ok for a grader to remove the paper from 
the server (assuming the grader doesn't want to keep it for archival 
purposes.) 

}}\tempindentneg2{\indent1{\indent2{\bold{HANDOUT 

}}}}\indent1{\indent2{papers can be written by graders and read by anyone. 

}}\tempindentneg2{\indent1{\indent2{\bold{TEACHERS_ARCHIVE and 
TEACHERS_HANDOUT 

}}}}\indent1{\indent2{papers can be written and read only by graders. 


}}\indent1{This document describes the library functions needed to handle 
these papers by communicating with the file exchange server. 


\italic{fx_open }takes the name of the file exchange, and a pointer which, if 
non-null, will be filled in with an error code. If successful, It returns a 
pointer to an open course. 


There are three possibilities for the error status: 


A non-null pointer is returned and *codep is zero, meaning no error was 
encountered. 


A non-null pointer is returned and *codep is non-zero, meaning some error was 
encountered that may limit access to the file exchange. 


A null pointer is returned and *codep is non-zero, meaning the file exchange 
could not be opened. 


Normally, a file exchange should not be held open while waiting for user 
input, because each open file exchange uses up at least one file descriptor at 
the server. If more than fifty users might be using a server at the same time, 
it is imperative that the client program open the file exchange, do what needs 
to be done, and close the file exchange immediately. 


Normally, \italic{fx_open }uses hesiod information to find which server 
machines it should try to contact. A user can override this by setting the 
environment variable FXPATH to host1:host2:etc. 


\italic{fx_close }takes a pointer to an open course and closes the connection 
to it. 


NOTE: On some systems, closing a file exchange twice may cause subsequent 
calls to \italic{malloc }not to function correctly. To be sure this doesn't 
happen, follow this convention: 


\bold{        if (fxp) \{ fx_close(fxp); fxp = NULL; \}

}
\tempindentneg1{
\bold{Error Handling 

}}The \italic{fx_open }function may have to try several servers before it can 
actually connect to one. In the worst case, several timeouts may occur, so 
that the user does not know why a program is taking so long. To combat this 
situation, \italic{fx_open }, when it fails to connect to a host, will print 
an error message if there are still hosts to try to contact. This behavior can 
be modified by changing \italic{fx_open_error_hook .}


\bold{void (*fx_open_error_hook)() = fx_open_perror;



}\bold{void fx_open_perror(fxp, code)

     FX *fxp;

     long code;

\{

  if (code)

    com_err(fxp->host, code, "(%s)", fxp->name);

\}



}Client programs may use alternate error reporting routines with the same 
parameters as \italic{fx_open_perror}. Such routines may make use of 
fxp->host, the machine for which the error occurred, and fxp->name, the file 
exchange for which the error occurred. For details on com_err, see the MIT 
Student Information Processing Board's document, \italic{A Common Error 
Description Library for (Reg.).IR UNIX .


}\italic{fx_create }takes a file exchange already opened for authentication, 
and the name of the file exchange to be created. The error code returned can 
be diagnosed by \italic{com_err}. 


Not all users can create file exchanges, only those in the server's global 
access-control list. One authenticates to the server upon opening a file 
exchange. A nameless file exchange ("") can always be opened for the purpose 
of authentication before creating new file exchanges. 


The first thing to do after creating a file exchange is to adjust the access 
control lists \bold{ACL_TURNIN}, \bold{ACL_GRADER}, and \bold{ACL_MAINT}. 


Initially only the creator of the course is in each of these lists. Everyone 
connected with the file exchange should be in the turnin list. Add "*" if all 
authenticated users in your kerberos realm should have access. (To give access 
to users in, say, the LCS.MIT.EDU, add rs get the privileges described in the 
overview. Users in the maint list are allowed to change the access control 
lists. 


\italic{fx_acl_add }and \italic{fx_acl_del }take the file exchange whose 
access control lists are to be changed, the aclname is one of 
\bold{ACL_TURNIN}, \bold{ACL_GRADER}, or \bold{ACL_MAINT}, and person is a 
username or kerberos principal. 


\italic{fx_acl_list }retrievs the contents of the access control lists from 
server into a \italic{stringlist_res }structure, which should be destroyed 
after use to free allocated memory. 


Client programs are only concerned with the stringlist_res_u.list member of 
the structure, since errno will be returned by the \italic{fx_acl_list 
}function. It may seem awkward to have to deal with a pointer to such an 
unwieldy structure rather than just a simple stringlist, but this is the best 
way to allow the entire structure returned by the server to be destroyed at 
the discretion of the client program. 


The structure is retrieved by \italic{fx_acl_list}, which returns error 
status, and destroyed by \italic{fx_acl_list_destroy}, which always succeeds. 


The strings returned are the usernames of members of the access control list 
if those users are in the same kerberos realm as the user who retrieves the 
ACL. If there are members of the list from other realms, the full kerberos 
principal will be returned. 

\tempindentneg1{
\bold{Sending a Paper 

}}Here is a Simple Example using \italic{paper_clear}, \italic{fx_send_file}, 
and \italic{fx_send}: 


The following program sends a file called ``essay.dvi'' to the file exchange 
given on the command line, and then sends a corresponding ``essay.PS'' without 
actually creating the file locally. It serves as an example of how easy it is 
to send files. 

\bold{#include <stdio.h>

#include <fxcl.h>


main(argc, argv)

     int argc;

     char *argv[];

\{

  FX *fxp;

  long code;

  Paper p;

  FILE *pipe;


  if (argc != 2) \{

    fprintf(stderr, "Usage: %s <exchange>0, argv[0]);

    exit(1);

  \}

  fxp = fx_open(argv[1], &code);

  if (!fxp) \{

    com_err(argv[0], code, "while opening %s", argv[1]);

    exit(1);

  \}

  /* Send the essay.dvi file */

  paper_clear(&p);

  code = fx_send_file(fxp, &p, "essay.dvi");

  if (code) \{

    com_err(argv[0], code, "while sending essay.dvi");

    exit(1);

  \}

  pipe = popen("dvi2ps -r essay.dvi", "r");

  if (!pipe) \{

    fprintf(stderr, "%s: Could not run dvi2ps0, argv[0]);

    exit(1);

  \}

  /* Send the essay.PS file */

  p.filename = "essay.PS";

  code = fx_send(fxp, &p, pipe);

  if (code) \{

    com_err(argv[0], code, "while sending essay.PS");

    exit(1);

  \}

  fx_close(fxp);

  (void) pclose(pipe);

  exit(0);

\}

}

Notice that in the preceding example the programmer was not obligated to 
specify the paper type; it defaults to EXCHANGE. Assignment defaults to 1. 
Filename defaults to the name of the local file for \italic{fx_send_file }and 
to ``x'' for \italic{fx_send}. Author defaults to the sender, but a grader may 
attribute the authorship of a paper to someone else. (The file exchange server 
will set authorship to the sender for everyone else.) In summary, the 
preceding program could have set 

}\tempindentneg2{\indent1{\indent2{\bold{p.assignment 

}}}}\indent1{\indent2{to an integer, the assignment number. 

}}\tempindentneg2{\indent1{\indent2{\bold{p.type 

}}}}\indent1{\indent2{to any PaperType listed in the overview of this 
document. 

}}\tempindentneg2{\indent1{\indent2{\bold{p.filename 

}}}}\indent1{\indent2{to any valid Unix base filename. 

}}\tempindentneg2{\indent1{\indent2{\bold{p.author 

}}}}\indent1{\indent2{to any string (preferably username or kerberos 
principal). 


}}\indent1{\italic{fx_list }retrieves lists of papers from the server into a 
Paperlist_res structure, which should be destroyed after use to free allocated 
memory by using \italic{fx_list_destroy }(which always succeeds.) 


Client programs are only concerned with the Paperlist_res_u.list member of the 
structure, since errno will be returned by the \italic{fx_list }function. It 
may seem awkward to have to deal with a pointer to such an unwieldy structure 
rather than just a simple Paperlist, but this is the best way to allow the 
entire structure returned by the server to be destroyed at the discretion of 
the client program. 


The paper pointer, pp, passed to \italic{fx_list }should first be cleared with 
\italic{paper_clear }(see the example program in a previous section), and then 
filled in with criteria for the list. For example, if you were only searching 
for papers associated with assignment 2, you would 

set pp->assignment = 2. 


A user who is not in the grader list will not be able to list papers by other 
authors except for types EXCHANGE and HANDOUT. 


Modifying the contents of a paper in the list returned by \italic{fx_list }may 
cause problems when you later destroy that list, it is better to copy into a 
new paper first using \italic{paper_copy}. 


Do not destroy the list until you are done with all Papers copied from nodes 
of the list. 


\italic{fx_retrieve_file }and \italic{fx_retrieve }take the same types of 
parameters as \italic{fx_send_file }and \italic{fx_send}, but the paper 
pointer passed must be taken from the list returned by \italic{fx_list}. 


When using \italic{fx_copy }and \italic{fx_move}, src should come from the 
list returned by \italic{fx_list}, and dest should be a modified copy of src. 


The most frequent use of \italic{fx_move }is to change the PaperType during 
grading. A TURNEDIN file should be changed to TAKEN before a grader retrieves 
it for annotating. The annotated version should be sent with type GRADED. 
After retrieving the file, a student should change the status to PICKEDUP. 


One possible use of \italic{fx_copy }would be to use a TURNEDIN file as an 
example for the whole class to look at, changing it to type HANDOUT. 


When using \italic{fx_delete}, p should come from the list returned by 
\italic{fx_list}. 

\tempindentneg1{
\bold{IMPORTANT BUILD NOTES 

}}We build with a particular version of the Sun Remote Procedure Call library 
which we know works for fxcl. 


Compilation requires the right additional include directory: 


\bold{ -I/usr/lib/athena/fx 


}Linking requires the remote procedure call library. Link with the additional 
flags: 


\bold{-L/usr/athena/lib -lfxcl -lfxrpc 


}Share and enjoy 

\tempindentneg1{
\bold{AUTHORS 

}}Bruce R. Lewis, Bill Cattey }



\majorheading{Printed 4/14/92    March 12, 1990    

}
\begindata{bp,987684}
\enddata{bp,987684}
\view{bpv,987684,1,0,0}
\indent1{
}\enddata{text,736768}
