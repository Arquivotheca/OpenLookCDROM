\begindata{text,538373940}
\textdsversion{12}
\template{default}
\define{global
}
\define{indentexp
menu:[Region~4,IndentExp]
attr:[LeftMargin LeftMargin Cm 124846]
attr:[Indent LeftMargin Cm -124846]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]}
\define{function
}
\chapter{\center{Figview: a Drawing View}}



\section{Quick reference list:}


\indentexp{figview_DestroyToolset();

figview_FlushDataChanges();

figview_ChangeZoom(long dir);

figview_ClearSelection();

figview_Select(struct figobj *o);

figview_SelectByRef(long ref);

figview_ToggleSelect(struct figobj *o);

figview_ToggleSelectByRef(long ref);

figview_Unselect(struct figobj *o);

figview_UnselectByRef(long ref);

figview_IsSelected(long ref) returns boolean;

figview_EnumerateSelection(procedure func, long rock);

figview_GetOneSelected() returns long;

figview_SetFocusByRef(long ref);

figview_SetExpertMode(boolean val);

figview_SetBuildKeystate(struct keystate *ks);

figview_SetNumHighlights(int num);

figview_BlockUpdates(boolean val);

figview_ToPixX(long val);

figview_ToPixY(long val);

figview_ToPixW(long val);

figview_ToPixH(long val);

figview_ToFigX(long val);

figview_ToFigY(long val);

figview_ToFigW(long val);

figview_ToFigH(long val);

figview_ToDefFigX(long val);

figview_ToDefFigY(long val);

figview_ToDefFigW(long val);

figview_ToDefFigH(long val);

figview_ToPrintPixX(long val);

figview_ToPrintPixY(long val);

figview_ToPrintPixW(long val);

figview_ToPrintPixH(long val);

figview_GetNumSelected();

figview_GetFocusRef();

figview_SetFocusChangeFlag(boolean val);

figview_GetNumHighlights();

figview_SetHighlightSize(long val, long x, long y, long w, long h);

figview_SetHighlight(long val, struct rectangle *rr);

figview_GetHighlight(long val);

figview_SetPrintRect(struct rectangle *rect);

}

\section{Removing the Toolset Window}


\indentexp{void figview_DestroyToolset(self)

struct figview *self;

}
This method destroys the toolset window, if one is displayed.


\section{Zooming In / Out}


\indentexp{void figview_ChangeZoom(self, val)

struct figview *self;

long val;

}
This method changes the zoom level of the figview and redraws the window to 
match. \italic{val} should be 1 to zoom in (increase objects' sizes), -1 to 
zoom out, and 0 to return to the normal zoom level.


\section{Delaying View Updates}


\indentexp{void \function{figview_BlockUpdates}(self, val)

struct figview *self;

boolean val;

}
If \italic{val} is TRUE, the view will begin caching (and not processing) all 
WantUpdate(self, self) calls. When BlockUpdates(self, FALSE) is called, the 
view will resume processing WantUpdates() calls, including any that were 
cached during the interval of the blockage.


Direct calls to either Update() or FullUpdate() are not affected by 
BlockUpdates().


Obviously, it is impolite to block updates for too long. This call was 
designed to be used by applications that want to do direct drawing on the view 
during mouse events. It is reasonable to turn blocking on at a mouse-down 
event and turn it off at the mouse-up event.


\section{Updating the Figview Internal Data}


\indentexp{void figview_FlushDataChanges(self)

struct figview *self;

}
This method forces the figview to look through its figure for changes, and 
incorporate them into its own cache. No changes are made to the screen. This 
is normally done in Update() and FullUpdate(); however, it is sometimes 
necessary to flush the changes without waiting for an update. (For example, 
one might want to add a new figobj to the figure and then select it 
immediately. Since the view keeps track of selection information, it would be 
necessary to call figview_FlushDataChanges() after adding the object.)


\section{Converting Figure Coordinates to Screen Coordinates and back}


\indentexp{long figview_ToPixX(struct figview *self, long val)

long figview_ToPixY(struct figview *self, long val)

long figview_ToPixW(struct figview *self, long val)

long figview_ToPixH(struct figview *self, long val)

}
These macros convert a value \italic{val} in standard figure coordinates to a 
screen coordinate (at the current scale and scroll position.) ToPixX() and 
ToPixY() convert X and Y positions; ToPixW() and ToPixH() convert distances 
(width and height.) 


\indentexp{long figview_ToFigX(struct figview *self, long val)

long figview_ToFigY(struct figview *self, long val)

long figview_ToFigW(struct figview *self, long val)

long figview_ToFigH(struct figview *self, long val)

}
These macros do the opposite conversion -- screen coordinates to standard 
figure coordinates.


\indentexp{figview_ToDefFigX(struct figview *self, long val)

figview_ToDefFigY(struct figview *self, long val)

figview_ToDefFigW(struct figview *self, long val)

figview_ToDefFigH(struct figview *self, long val)

}
These macros convert screen coordinates to standard figure coordinates. 
However, they do not use the current scale and scroll position; instead, they 
assume that the scale is normal and the document is panned to the origin.


\indentexp{long figview_ToPrintPixX(struct figview *self, long val)

long figview_ToPrintPixY(struct figview *self, long val)

long figview_ToPrintPixW(struct figview *self, long val)

long figview_ToPrintPixH(struct figview *self, long val)

}
These macros convert standard figure coordinates to printing coordinates. That 
is, they return what the ToPix*() macros would return if the window is at 
normal zoom and panned to the origin. 

These values are \italic{not} affected by the print scaling set in the figure. 


\section{Selecting Objects}


It is important to note that all information about which objects are selected 
is stored in the figview, not the figure. Therefore, if an object is added to 
the figure, it cannot be selected until the figview has noticed its presence; 
nor can you check its status with figview_IsSelected(). This normally happens 
at the next call to figview_Update() or figview_FullUpdate(). If you need to 
select an object sooner than that, you can call figview_FlushDataChanges() to 
bring the view up to date.


If you change the selection yourself, you should immediately call 
figview_WantUpdate() to make the changes visible.


\indentexp{void figview_ClearSelection(self)

struct figview *self;

}
This method clears the selection in the view; all objects will be unselected.


\indentexp{long figview_GetNumSelected(struct figview *self)}     [macro]


This returns the number of objects that are selected.


\indentexp{boolean figview_IsSelected(self, ref)

struct figview *self;

long ref;

}
This checks whether the figobj with reference \italic{ref} is selected or not.


\indentexp{void figview_Select(self, o)

struct figview *self;

struct figobj *o;

}
This selects object \italic{o}.


\indentexp{void figview_Unselect(self, o)

struct figview *self;

struct figobj *o;

}
This unselects object \italic{o}.


\indentexp{void figview_ToggleSelect(self, o)

struct figview *self;

struct figobj *o;

}
This selects object \italic{o} if it is unselected, or unselects it if it is 
selected.


\indentexp{void figview_SelectByRef(self, ref)

struct figview *self;

long ref;


void figview_UnselectByRef(self, ref)

struct figview *self;

long ref;


void figview_ToggleSelectByRef(self, ref)

struct figview *self;

long ref;

}
These three calls are similar to the previous three, except that they take a 
reference \italic{ref} instead of a figobj pointer \italic{o}. Using a 
reference is somewhat faster, since the view does not have to search through a 
list of object pointers.


\indentexp{long figview_GetOneSelected(self)

struct figview *self;

}
If exactly one object in the view is selected, this will return a reference to 
it. If none are, or more than one, it returns figure_NULLREF.


\indentexp{void figview_EnumerateSelection(self, func, rock)

struct figview *self;

void (*func)();

long rock;

}
This method calls \italic{func} on every selected object in \italic{self}. The 
calls are made in the order that objects are stacked in the group, from back 
to front. Groups are called before their contents.


\italic{func} should fit the declaration


\leftindent{\indentexp{void func(struct figobj *o, long ref, struct figview 
*self, rock)}

}
When \italic{func} is called for a figobj, \italic{o} will be a pointer to the 
object, \italic{ref} will be the object's reference, \italic{self} will be the 
figview, and \italic{rock} will be the \italic{rock} argument passed to 
figview_EnumerateSelection(). 


\section{The Focus Group}


\indentexp{void figview_SetFocusByRef(self, ref)

struct figview *self;

long ref;

}
This sets the view's focus group to \italic{ref}, which must be a reference to 
a figogrp. If \italic{ref} is figure_NULLREF, the focus is set to the root 
group.


After calling this function, you should immediately call figview_WantUpdate() 
to make the change visible.


\indentexp{long figview_GetFocusRef(struct figview *self)}     [macro]


This returns a reference to the focus group.


\section{Expert Mode Options

}
\indentexp{void figview_SetExpertMode(self, val)

struct figview *self;

boolean val;

}
This sets expert mode on or off, according to val. This method calls 
figview_SetFocusChangeFlag(self, val); see below.


\indentexp{figview_SetFocusChangeFlag(struct figview *self, boolean val) 
}    [macro]


This enables or disables the keys (normally the arrow keys) that allow the 
user to change the focus group. By default, they are disabled; if this macro 
is called with \italic{val} TRUE, they are enabled.


\section{The Highlights}


A highlight is a rectangle that can be drawn in a given position on the 
figview. By default, there are two highlights defined, both of which are 
reserved by figview: 

0: around the focus group (if the focus is not the root group). This one is 
continuously updated by the redraw methods.

1: the area that will be on the page if the document is printed. This is 
turned on and off by the \typewriter{figview-show-print-area} proctable entry.


Subclasses of figview, or views that incorporate figviews, may use the 
following methods to add more highlights (numbered 2, 3, 4, etc.)


\indentexp{long figview_GetNumHighlights(struct figview *self)}     [macro]

This returns the number of highlights currently available for the figview.


\indentexp{void figview_SetNumHighlights(self, num)

struct figview *self;

int num;

}
This creates additional highlights, if necessary, so that the figview has (at 
least) \italic{num} highlights defined. The new highlights created are empty 
(not visible).


\indentexp{figview_SetHighlightSize(struct figview *self, long val, long x, 
long y, long w, long h)}     [macro]

\indentexp{figview_SetHighlight(struct figview *self, long val, struct 
rectangle *rr)}     [macro]


Set highlight number \italic{val} to the rectangle given (either a struct 
rectangle pointer or as (X, Y, Width, Height).)

To turn off a highlight entirely, call figview_SetHighlightSize(self, val, 0, 
0, -1, -1). You can also call figview_SetHighlight(self, rr), where \italic{rr} 
is a pointer to an empty rectangle (but \italic{not} a NULL pointer.)


\indentexp{struct rectangle *figview_GetHighlight(struct figview *self, long 
val)}     [macro]


Returns a pointer to a struct rectangle containing the position of highlight 
number \italic{val}. The contents of the rectangle are used by other routines, 
and should not be deallocated or changed except with figview_SetHighlight() or 
figview_SetHighlightSize().



\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,802,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538373940}
