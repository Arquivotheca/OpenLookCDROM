\begindata{text,539045048}
\textdsversion{12}
\template{default}
\define{global
}
\define{indentexp
menu:[Region~4,IndentExp]
attr:[LeftMargin LeftMargin Cm 124846]
attr:[Indent LeftMargin Cm -124846]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]}
\chapter{\center{figattr: an object to store figobj attributes}}


The attributes currently implemented are shade, color, line width, 
round-rectangle corner width, font size, font family, font style, text 
position. They have indices assigned to them, from 0 to 7:

\leftindent{figattr_Shade

figattr_Color

figattr_LineWidth

figattr_RRectCorner

figattr_FontSize

figattr_FontStyle

figattr_FontFamily

figattr_TextPos

}
Several methods use an unsigned long mask to indicate a subset of these eight 
attributes. The one-bit masks corresponding with them are made by setting the 
index'th bit of the mask. (That is, the mask indicating only line width is (1 
<< figattr_LineWidth).)


The combined mask (all 8 bits) can be abbreviated figattr_MaskAll.

For convenience, figattr_NumAttributes is defined as 8.


Each attribute is either active or inactive. If it's inactive, it has no 
well-defined value.


Shade is an integer from -1 to 8. -1 is transparent, 0 is white, 1-7 are 
shades of grey, 8 is black. For ease of reading, the transparent constant is 
defined in figattr.ch as figattr_ShadeClear.

Color is a string containing the name of a color.

Line width is an integer greater than 0. 0 means a hairline (always draw with 
the narrowest possible resolution). Positive numbers give line widths in 
points (1/72 inch at normal scaling.)

Round-rectangle corner is an integer greater than 0, giving the radius of the 
corner arcs on a rounded rectangle. 0 gives no rounding (a rectangle.) 
Positive numbers give the radius of the corner arcs in points  (1/72 inch at 
normal scaling.)

Font size is a positive integer, giving the font size in points.

Font style is a long integer mask. Its values are defined in fontdesc.doc. The 
values currently implemented are fontdesc_Plain, fontdesc_Italic, 
fontdesc_Bold, and (fontdesc_Italic | fontdesc_Bold).

Font family is a string containing the name of a font. The values currently 
implemented are "andy", "andysans", and "andytype".

Text position is an integer, containing one of the constants figattr_PosLeft, 
figattr_PosRight, figattr_PosCenter (defined in figattr.ch). These mean 
left-justified text, right-justified text, and centered text, respectively.


\section{Quick reference list:}


\indentexp{figattr_CopySelf() returns struct figattr *;

figattr_CopyData(struct figattr *src, unsigned long mask);

figattr_SetActive(int att, boolean val)

figattr_IsActive(int att)


figattr_SetShadeVal(long val)

figattr_GetShadeVal()

figattr_SetShade(long val)

figattr_GetShade(struct figattr *def)


figattr_SetLineWidthVal(long val)

figattr_GetLineWidthVal()

figattr_SetLineWidth(long val)

figattr_GetLineWidth(struct figattr *def)


figattr_SetRRectCornerVal(long val) 

figattr_GetRRectCornerVal() 

figattr_SetRRectCorner(long val)

figattr_GetRRectCorner(struct figattr *def)


figattr_SetColorVal(char *val)

figattr_GetColorVal()

figattr_SetColor(char *val)

figattr_GetColor(struct figattr *def)


figattr_SetFontFamilyVal(char *val)

figattr_GetFontFamilyVal()

figattr_SetFontFamily(char *val)

figattr_GetFontFamily(struct figattr *def)


figattr_SetFontSizeVal(long val)

figattr_GetFontSizeVal()

figattr_SetFontSize(long val)

figattr_GetFontSize(struct figattr *def)


figattr_SetFontStyleVal(long val)

figattr_GetFontStyleVal()

figattr_SetFontStyle(long val)

figattr_GetFontStyle(struct figattr *def)

}
\indentexp{figattr_SetTextPosVal(long val)

figattr_GetTextPosVal()

figattr_SetTextPos(long val)

figattr_GetTextPos(struct figattr *def)

}

\section{Copying the Figattr}


\indentexp{struct figattr *figattr_CopySelf(self)

struct figattr *self;

}
This method allocates and returns a new figattr, identical to \italic{self}.


\indentexp{void figattr_CopyData(self, src, mask)

struct figattr *self;

struct figattr *src;

unsigned long mask;

}
This method copies some or all of the attribute data from \italic{src} to 
\italic{self}. The bits of \italic{mask} determine which attributes are copied 
and which are ignored. (If an attribute of \italic{src} is inactive but its 
bit of \italic{mask} is TRUE, that attribute in \italic{self} is set inactive 
also.)


\section{Getting and Setting Attribute Values}


\indentexp{boolean figattr_IsActive(struct figattr *self, int att)} 
    [macro]


This determines whether a particular attribute is active or not. \italic{att} 
should be an attribute index (figattr_Shade, figattr_Color, etc.)


\indentexp{figattr_SetActive(struct figattr *self, int att, boolean val)} 
    [macro]


This sets an attribute to active or inactive. \italic{att} should be an 
attribute index. If \italic{val} is TRUE, you must also set the attribute's 
value with the appropriate figattr_SetXxxxxxVal() macro.




There are four value-access macros for each attribute. The ones for shade are 
described below; the others work in a parallel fashion.


\indentexp{figattr_SetShade(struct figattr *self, long val) }    [macro]


This sets the shade attribute of \italic{self} to active and sets its value to 
\italic{val}. 


\indentexp{long figattr_GetShade(struct figattr *self, struct figattr *def)} 
    [macro]


This returns the shade value from \italic{self}. If shade is undefined in 
\italic{self}, it returns the shade value from \italic{def} instead (which 
must have shade active.)


\indentexp{figattr_SetShadeVal(struct figattr *self, long val)}     [macro]


This sets the shade value of \italic{self} to \italic{val}, but does not 
affect whether it is active or not.


\indentexp{long figattr_GetShadeVal(struct figattr *self)}     [macro]


This returns the shade value from \italic{self}. If shade is undefined in 
\italic{self}, the returned value is undefined.



\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,812,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,539045048}
