\begindata{text,538405900}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Stylesheets}}


A \italic{stylesheet} is a collection of the styles which have been defined 
for use in a particular object.  An object has only one stylesheet, and that 
stylesheet may contain zero or more styles.  Thus, the stylesheet for one 
object may contain many different styles, while the stylesheet of another 
object may have none.  To facilitate the use of stylesheets in text objects, 
the Andrew Toolkit provides a mechanism for saving stylesheet information into 
a file, called a \italic{template}.  In this way, several documents can 
contain identical stylesheets by referencing a single template.  The 
\italic{templatelist} module (\italic{templatelist.c}) provides routines for 
reading in template files and keeping the most recently used templates in 
memory. 


\section{Quick reference list for Stylesheet}



\fixedtext{void \bold{stylesheet_}Add }\fixedindent{(struct stylesheet 
*\paramname{stylesheet}, struct style *\paramname{styleptr});} 

\fixedtext{void \bold{stylesheet_}Delete }\fixedindent{(struct stylesheet 
*\paramname{stylesheet}, struct style *\paramname{styleptr});} 

\fixedtext{struct style *\bold{stylesheet_}EnumerateStyles 
}\fixedindent{(struct stylesheet *\paramname{stylesheet}, procedure 
\paramname{func}, long \paramname{data});} 

\fixedtext{void \bold{stylesheet_}FinalizeObject }\fixedindent{(struct 
stylesheet *\paramname{self});} 

\fixedtext{struct style *\bold{stylesheet_}Find }\fixedindent{(struct 
stylesheet *\paramname{stylesheet}, char *\paramname{name});} 

\fixedtext{void \bold{stylesheet_}FreeStyles }\fixedindent{(struct stylesheet 
*\paramname{stylesheet});} 

\fixedtext{struct style *\bold{stylesheet_}GetGlobalStyle 
}\fixedindent{(struct stylesheet *\paramname{stylesheet});} 

\fixedtext{struct menulist *\bold{stylesheet_}GetMenuList 
}\fixedindent{(struct stylesheet *\paramname{stylesheet}, procedure 
\paramname{procname}, struct classinfo *\paramname{infotype});} 

\fixedtext{char *\bold{stylesheet_}GetTemplateName }\fixedindent{(struct 
stylesheet *\paramname{stylesheet});} 

\fixedtext{boolean \bold{stylesheet_}InitializeObject }\fixedindent{(struct 
stylesheet *\paramname{self});} 

\fixedtext{long \bold{stylesheet_}Read }\fixedindent{(struct stylesheet 
*\paramname{stylesheet}, FILE *\paramname{fileptr}, boolean 
\paramname{template});} 

\fixedtext{void \bold{stylesheet_}SetTemplateName }\fixedindent{(struct 
stylesheet *\paramname{stylesheet}, char *\paramname{name});} 

\fixedtext{void \bold{stylesheet_}Write }\fixedindent{(struct stylesheet 
*\paramname{stylesheet}, FILE *\paramname{fileptr});} 



\section{Overview of stylesheets}


\subsection{External data representation}


The basic paradigm for the templatelist, templates, stylesheets, styles and 
devices is that each of them contain a list of their subordinates (e.g. a 
style contains a list of devices), and most of the methods deal with adding 
to, deleting from or finding subordinates within that list.  Contexts are 
somewhat different in that their subordinates are the specific attributes 
whose values can be set or retrieved (see the documentation on context for the 
somewhat lengthy list of attributes which can be manipulated). 


The external data representation is entirely in ascii, and is expected to be 
used both for storing objects in files and for cut and paste operations.  A 
stylesheet can contain zero or more styles, each of which can contain multiple 
device definitions.  Each device can contain multiple contexts, and every 
context can set zero or more attributes. 


Text documents which contain no style information or other objects are treated 
as uninterpreted files and stored in a straightforward manner.  Text documents 
which do contain these extra dimensions are written with a special syntax. 
 The syntax of these interpreted files follows the protocols defined below: 


\subsection{Protocol Definition}


\bold{Reserved Characters}


\\

\{

\}


These characters are reserved, and should be quoted with a \\ (backslash) in 
interpreted documents.  Quoting should not be used in uninterpreted documents. 




\bold{Views and Data Objects}



\example{\\begindata\{\italic{datatype}, \italic{dataname}\}

	\italic{text}

\\enddata\{\italic{datatype}\}}



The begindata, enddata pair mark the extent of the data included in a 
particular data object.  Use of the begindata, enddata pair indicate that the 
data should be stored in memory, and the location of the data and it's 
\italic{dataname}, a canonical name used to refer to that data object, should 
be stored and registered in a data registry.  \italic{Datatype} refers to the 
type of data being stored (e.g. text, array, etc). 



\example{\\view\{\italic{viewtype}, \italic{viewname}, \italic{dataname}\}}


The view string is used to mark the place in the document where the view 
should appear.  The definition of the data object (it's begindata, enddata 
markers) and the view marker need not be adjacent, however a data object 
definition must precede any view marker which refers to it.  Multiple view 
markers may refer to a single data object.  \italic{Viewtype} refers to the 
body of code which can be dynamically loaded to be used in displaying the view 
(e.g. delta, eq, zip, etc.).  \italic{Viewname} is a canonical name used to 
refer to the view and is registered in an view registry.  The \italic{viewname} 
is also used to register the view as a viewer of a particular data object. 
 \italic{Dataname} is a reference to the data object being used by this view. 



\bold{Version Header}


\example{\\textdsversion\{\italic{versionnumber}\}}


This string should be included as the first line of the highest level data 
object in the document.  This string is used to distinguish formatted 
documents from plain text documents.  \italic{Versionnumber} refers to the 
version of the new text datastream that was used to write the document and it 
determines which read procedure will be used to read it. 



\bold{Template Inclusion}


\example{\\template\{\italic{templatename}\}}


The template string may be used in a text document to indicate that a template 
should be read before the document is processed.  \italic{Templatename} refers 
to the name of the template to be used.  \italic{Templatename} may include a 
full path (e.g. /cmu/itc/maria/templates/my.template), or may use the default 
path (/usr/andrew/lib/Templates/xxx.template, where the user has typed in the 
'xxx' portion of the path) or a path that is defined in the user's preference 
file.  The inclusion of a template string in the file does not preclude the 
inclusion of additional style definitions, however a document may include only 
one template string. 

\begindata{bp,538927688}
\enddata{bp,538927688}
\view{bpv,538927688,418,0,0}
\paragraph{Style Definitions}


\example{
\\define\{stylename

menu:[menuname]

device:[devicename

context:[contextname

attr:[attribute basis unit param]

	.

	.

attr:[attribute basis unit param]]

	.

	.

context:[contextname

attr:[attribute basis unit param]]]

	.

	.

device:[devicename

context:[contextname

attr:[attribute basis unit param]]]\}

}

A style is a series of  attribute modifications which create the desired 
effect on the selected text.  The \italic{device} and \italic{context} 
specifications may be omitted, in which case the default will be used (the 
default device is display, and the default context is main).  It is not 
necessary to set the menu name for a style.  If no menu name is given, the 
style will not be added to the menu.  (The prioritization in the menu string, 
specified by the '~#' convention,  may also be omitted). 


\bold{Styles in the data}


\example{\\\italic{stylename}\{\italic{text ... more text}\}}


A backslash followed by a command which is not one of the above commands, will 
be interpreted as a style command.  That is, the indicated style should be 
used to modify the selected text.  \italic{Stylename} refers to the name of 
the style to be used in the modification of the document.  An error will 
result if a style with that name is not found.  The curly brackets define the 
extent of the text for which the appropriate style modifications will be in 
effect. 


\subsection{The stylesheet structure}


The stylesheet structure consists of the following: 


\description{
\formatnote{\smaller{char *templateName }}\formatnote{ --  }the name of the 
template used, if any. 


\formatnote{\smaller{long nstyles }}\formatnote{ --  }the number of styles in 
this stylesheet. 


\formatnote{\smaller{long maxStyles }}\formatnote{ --  }the number of styles 
currently allocated. 


\formatnote{\smaller{long version }}\formatnote{ --  }the version number for 
menulist update. 


\formatnote{\smaller{struct style **styles }}\formatnote{ --  }the array of 
the styles themselves. 


\formatnote{\smaller{struct menulist *styleMenu }}\formatnote{ --  }the 
current menulist for the styles. 


}
\begindata{bp,538927816}
\enddata{bp,538927816}
\view{bpv,538927816,419,0,0}
\paragraph{Creating an instance of a stylesheet} 
\indexi{ \italic{stylesheet_New}}

\example{struct stylesheet *stylesheet_New()

}
\leftindent{\bold{Class procedure description. }\italic{stylesheet_New} 
creates a new stylesheet by dynamically allocating memory for a stylesheet 
structure. 


\bold{Return value.}  A pointer to the newly created stylesheet. 


\bold{Usage.}  This procedure would be called to create a new stylesheet. 


\bold{Example.} 


\example{
struct stylesheet *SelectedTextStyles;

SelectedTextStyles = stylesheet_New();} 


creates the stylesheet, SelectedTextStyles. 

}


\paragraph{Freeing all styles from a stylesheet} 
\indexi{ \italic{stylesheet_FreeStyles}}

\example{void stylesheet_FreeStyles(stylesheet)

struct stylesheet *stylesheet;} 


\leftindent{\bold{Method description.  }  \italic{stylesheet_FreeStyles} 
deletes all of the styles in a stylesheet and frees the space allocated to 
those styles. 


\bold{Usage.}  This method would be called to remove the contents of a 
stylesheet without removing the stylesheet itself. 


\bold{Example.} 


\example{
struct stylesheet *SelectedTextStyles;

stylesheet_FreeStyles(SelectedTextStyles);} 


deletes any styles in the stylesheet, SelectedTextStyles, and frees the space 
allocated to those styles. 

}

\begindata{bp,538927880}
\enddata{bp,538927880}
\view{bpv,538927880,420,0,0}
\paragraph{Adding a stylesheet} \indexi{ \italic{stylesheet_Add}}


\example{void stylesheet_Add(stylesheet, styleptr)

struct stylesheet *stylesheet;

struct style *styleptr;} 


\leftindent{\bold{Method description.  }  \italic{stylesheet_Add} checks that 
the style to be added is not already in the stylesheet's style list (by 
comparing the style pointers).  If not found, it then adds the style to the 
style list, allocating more space to the style list if necessary. 


\bold{Usage.}  This method would be called to add a single style to a 
stylesheet. 


\bold{Example.} 


\example{struct stylesheet *SelectedTextStyles;

struct style *HighlightStyle;


stylesheet_Add(SelectedTextStyles, HighlightStyle);} 


adds the style, HighlightStyle, to the style list in the stylesheet, 
SelectedTextStyles. 

}

\paragraph{Deleting a stylesheet} \indexi{ \italic{stylesheet_Delete}}


\example{void stylesheet_Delete(stylesheet, styleptr)

struct stylesheet *stylesheet;

struct style *styleptr;} 


\leftindent{\bold{Method description.  }  \italic{stylesheet_Delete} checks 
that the style to be deleted is in the stylesheet's style list (by comparing 
the style pointers).  If found, it then deletes that style from the 
stylesheet. 


\bold{Usage.}  This method would be called to remove a single style from a 
stylesheet. 


\bold{Example.} 


\example{
struct stylesheet *SelectedTextStyles;

struct style *HighlightStyle;


stylesheet_Delete(SelectedTextStyles, HighlightStyle);} 


removes the style, HighlightStyle, from the style list for the stylesheet, 
SelectedTextStyles. 

}

\begindata{bp,538927944}
\enddata{bp,538927944}
\view{bpv,538927944,421,0,0}
\paragraph{Finding a stylesheet} \indexi{ \italic{stylesheet_Find}}


\example{struct style *stylesheet_Find(stylesheet, name)

struct stylesheet *stylesheet;char *name;} 


\leftindent{\bold{Method description.  }  \italic{stylesheet_Find} uses the 
style's name to find a style in the stylesheet's style list. 


\bold{Return value. } A pointer to the named style, if found. 


\bold{Usage.}  This method would be used to find a particular style in a 
stylesheet, given the style's name. 


\bold{Example.} 


\example{
struct stylesheet *SelectedTextStyles;

struct style *HighlightStyle;

HighlightStyle = stylesheet_Find(SelectedTextStyles, "highlight");} 


returns a pointer to the style, HighlightStyle, if it finds a style in the 
style list for the stylesheet, SelectedTextStyles, which has the name 
"highlight". 

}

\paragraph{Getting a menu for a stylesheet} 
\indexi{ \italic{stylesheet_GetMenuList}}


\example{struct menulist *stylesheet_GetMenuList(stylesheet, procname, 
infotype)

struct stylesheet *stylesheet;

int (*procname)();

struct classinfo *infotype;} 


\leftindent{\bold{Method description.  }  \italic{stylesheet_GetMenuList} 
clears the menulist or creates a new menulist, if one doesn't already exist. 
 It then generates menu items for the menulist by cycling through the styles 
in the stylesheet. 


\bold{Return value.}  A pointer to the new menu list. 


\bold{Usage.}  This method would be used to create a menulist which can be 
incorporated into the normal menu structure to make styles available via the 
menu.  (Note: The menulist must still be posted to the interaction manager.) 


\bold{Example.} 


\example{
struct stylesheet *SelectedTextStyles;

int (*Stylize)();

struct classinfo *infotype;

struct menulist *SelectedTextMenus;

SelectedTextMenus = stylesheet_GetMenuList(SelectedTextStyles, Stylize,

infotype);} 


returns a pointer to the menulist, SelectedTextMenus. 

}\
\begindata{bp,538928008}
\enddata{bp,538928008}
\view{bpv,538928008,422,0,0}
\paragraph{Reading a stylesheet} \indexi{ \italic{stylesheet_Read}}


\example{long stylesheet_Read(stylesheet, fileptr, template)

struct stylesheet *stylesheet;

FILE *fileptr;

boolean template;} 


\leftindent{\bold{Method description.  }  \italic{stylesheet_Read} parses the 
contents of a style definition (e.g.  the contents of "\\define\{...\}" in the 
external data representation).  A style name is expected, followed by a 
newline.  If a style is found in the stylesheet which has that name, that 
stylesheet is overwritten.  Otherwise, a new style is created with that name 
and added to the stylesheet's style list.  The \italic{template} value for the 
style is set to True if this style definition was read from a template. 
 \italic{style_Read} is then called to parse the actual style definition. 


\bold{Return value.}  NULL is returned if successful.  -1 is returned if an 
error occurred. 


\bold{Usage.}  This method would be used to read style definitions from the 
external data representation.  Once the superior read routine parses 
"\\define\{", this routine would be called and it would return after its 
subordinate routines return. 


\bold{Example.} 


\example{
struct stylesheet *SelectedTextStyles;

FILE *myfile;

boolean template;


if (stylesheet_Read(SelectedTextStyles, myfile, template) < 0)

	fprintf(stderr, "Error occurred while reading file.\\n");} 


reads the next style definition in the file, myfile, and prints an error 
message if the read returned an error. 


}\
\begindata{bp,538928072}
\enddata{bp,538928072}
\view{bpv,538928072,423,0,0}
\paragraph{Writing a stylesheet} \indexi{ \italic{stylesheet_Write}}


\example{void stylesheet_Write(stylesheet, fileptr)

struct stylesheet *stylesheet;

FILE *fileptr;} 


\leftindent{\bold{Method description.  }  \italic{stylesheet_Write} writes all 
externally defined styles (i.e. all styles whose \italic{template} value is 
False - if \italic{template} is True, then the style was read from a template 
and a template reference should have been written earlier in the file by 
\italic{text_Write}).  For each style, the \italic{template} value is checked 
and, if False, "\\define\{" is written to the file and then 
 \italic{style_Write} is called to write the specifics of the style 
definition.  On returning from \italic{style_Write}, the final "\}\\n" is 
written. 


\bold{Usage.}  This method would be used to write style definitions for all 
styles which were did not originate from the current template. 


\bold{Example.} 


\example{
struct stylesheet *SelectedTextStyles;

FILE *myfile;


stylesheet_Write(SelectedTextStyles, myfile);} 


writes all of the externally defined styles in the stylesheet, 
SelectedTextStyles, out to the file, myfile. 

}

\begindata{bp,538928136}
\enddata{bp,538928136}
\view{bpv,538928136,424,0,0}
\paragraph{Setting a template name} 
\indexi{ \italic{stylesheet_SetTemplateName}}


\example{void stylesheet_SetTemplateName(stylesheet, templateName)

struct stylesheet *stylesheet;

char *templateName;} 


\leftindent{\bold{Method description.  }  \italic{stylesheet_SetTemplateName} 
saves the name of the template currently being used. 


\bold{Usage.}  This method would be used to store the name of the current 
template so that it is available when writing the template reference. 


\bold{Example.} 


\example{
struct stylesheet *SelectedTextStyles;


stylesheet_SetTemplateName(SelectedTextStyles, "default");} 


sets the name of the template reference for the stylesheet, 
SelectedTextStyles, to "default". 

}

\paragraph{Getting a template name} 
\indexi{ \italic{stylesheet_GetTemplateName}}


\example{char *stylesheet_GetTemplateName(stylesheet)

struct stylesheet *stylesheet;} 


\leftindent{\bold{Method description.  }  \italic{stylesheet_GetTemplateName} 
retrieves the name of the template currently being used. 


\bold{Return value.}  A template name. 


\bold{Usage.}  This method would be used when writing out the template 
reference. 


\bold{Example.} 


\example{
struct stylesheet *SelectedTextStyles;

char *templatename;


templatename = stylesheet_GetTemplateName(SelectedTextStyles);} 


returns the name of the current template, templatename, for the stylesheet, 
SelectedTextStyles. 

}\
\begindata{bp,538928264}
\enddata{bp,538928264}
\view{bpv,538928264,425,0,0}
\paragraph{Evaluating over all styles} 
\indexi{ \italic{stylesheet_EnumerateStyles}}


\example{struct style *stylesheet_EnumerateStyles(stylesheet, func, data);

struct stylesheet *stylesheet;

boolean (*func)();

long data;} 


\leftindent{\bold{Method description.  }  \italic{stylesheet_EnumerateStyles} 
calls \italic{func(style, data)} for each style in the stylesheet.  The 
boolean value returned by \italic{func} is True if the function has finished 
enumerating. 


\bold{Return value.}  If \italic{func} finished enumerating correctly, then 
the last style that was processed is returned.  Otherwise, NULL is returned. 

}

\paragraph{Getting the global styles} 
\indexi{ \italic{stylesheet_GetGlobalStyle}}


\example{struct style *stylesheet_GetGlobalStyle(stylesheet)

struct stylesheet *stylesheet;} 


\leftindent{\bold{Method description.  }  \italic{stylesheet_GetGlobalStyle} 
finds a style in the stylesheet which has the name "global". 


\bold{Return value.}  A pointer to the global style or NULL. 


\bold{Usage.}  This method is used to find the global style, if one exists. 


\bold{Example.} 


\example{
struct stylesheet *SelectedTextStyles;

struct style *GlobalStyle;


GlobalStyle = stylesheet_GetGlobalStyle(SelectedTextStyles);} 


returns a pointer to the global style for the stylesheet, SelectedTextStyles. 

}

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,427,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538405900}
