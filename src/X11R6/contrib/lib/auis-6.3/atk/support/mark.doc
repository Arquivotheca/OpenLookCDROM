\begindata{text,538609936}
\textdsversion{12}
\template{default}
\define{global
}
\define{programexample
}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Marks}}


Marks can be used for many purposes, but their primary purpose is to mark a 
region of an object and save it for future reference.  For example, in many 
text-editors, the redraw routine uses marks to keep track of what needs to be 
redrawn.  In such an editor, the  text "view" consists of a set of lines on 
the display and a set of marks that keep track of the text corresponding to 
each line.  When the user modifies text within a mark, the mark's modified 
flag is set.  When the text-editor receives a redraw request, it redraws the 
lines that have modified marks and clears the modified flags. 


The class \italic{mark} provides the methods and class procedures for creating 
marks and using them.  If you want to create marks in the Andrew Toolkit class 
\italic{text}, however, you should not use the class \italic{mark} directly; 
you should use the methods that \italic{text} inherits from the class 
\italic{simpletext}.  On the other hand, if you are creating an object like 
the class \italic{text} that is going to use marks, you would use the class 
\italic{mark} directly.  In either case, you will probably want to read the 
following section, \italic{Overview of Marks}. 



\section{Quick reference list for Mark}


\fixedtext{struct mark *\bold{mark_}Allocate }\fixedindent{();} 

\fixedtext{void \bold{mark_}Deallocate }\fixedindent{(struct mark 
*\paramname{self});} 

\fixedtext{\bold{mark_}GetEndPos }\fixedindent{(struct mark 
*\paramname{mark});} 

\fixedtext{\bold{mark_}GetLength }\fixedindent{(struct mark 
*\paramname{mark});} 

\fixedtext{\bold{mark_}GetModified }\fixedindent{(struct mark 
*\paramname{mark});} 

\fixedtext{\bold{mark_}GetNext }\fixedindent{(struct mark *\paramname{mark});} 


\fixedtext{\bold{mark_}GetObject }\fixedindent{(struct mark 
*\paramname{mark});} 

\fixedtext{\bold{mark_}GetPos }\fixedindent{(struct mark *\paramname{mark});} 

\fixedtext{\bold{mark_}IncludeBeginning }\fixedindent{(struct mark 
*\paramname{mark});} 

\fixedtext{\bold{mark_}IncludeEnding }\fixedindent{(struct mark 
*\paramname{mark});} 

\fixedtext{struct mark *\bold{mark_}NewWithStyle }\fixedindent{(boolean 
\paramname{beginning}, boolean \paramname{ending});} 

\fixedtext{\bold{mark_}ObjectFree }\fixedindent{(struct mark 
*\paramname{mark});} 

\fixedtext{\bold{mark_}SetLength }\fixedindent{(struct mark *\paramname{mark}, 
\paramname{len});} 

\fixedtext{\bold{mark_}SetModified }\fixedindent{(struct mark 
*\paramname{mark}, \paramname{val});} 

\fixedtext{\bold{mark_}SetNext }\fixedindent{(struct mark *\paramname{mark}, 
\paramname{n});} 

\fixedtext{\bold{mark_}SetObjectFree }\fixedindent{(struct mark 
*\paramname{mark}, \paramname{v});} 

\fixedtext{\bold{mark_}SetObject }\fixedindent{(struct mark *\paramname{mark}, 
\paramname{obj});} 

\fixedtext{\bold{mark_}SetPos }\fixedindent{(struct mark *\paramname{mark}, 
\paramname{position});} 

\fixedtext{void \bold{mark_}SetStyle }\fixedindent{(struct mark 
*\paramname{mark}, boolean \paramname{beginning}, boolean \paramname{ending});} 


\fixedtext{void \bold{mark_}UpdateMarks }\fixedindent{(struct mark 
*\paramname{mark}, long \paramname{pos}, long \paramname{size});} 


\section{Overview of Marks}


\subsection{Position and length}


Each \italic{mark} marks a region of an object by means of two pieces of 
information: a  beginning position and a length.  For example, Figure 
\formatnote{@ref(mark)} depicts the region marked in a text buffer by a mark 
with the beginning position set to 1 and length set to 3.  Note that 
characters in the buffer are \italic{at} particular positions (e.g., O is at 
position 0, n is at position 1, etc.) but that a mark at a particular position 
is \italic{between} the characters (e.g., a mark at position 1 and length 3 is 
between the characters at position 0 and 1 and the characters at position 3 
and 4). 

\formatnote{\formatnote{

    ___mark position = 1, length = 3

__|______    |_________________________

O | n | c | e |  | u | p | o | n|   | a |    |  t |  . . . |  |

---------------------------------------------

 0   1   2  3  4  5  6    7  8 9 10 11 12


}}
There are macromethods for setting the position and length of a mark and 
getting their values. 


\subsection{Insertion} When the user inserts a character at the same position 
as one of the end points of a mark, the character could be inserted inside or 
outside the mark.  There are methods that allow you to specify where the 
character should be inserted. 


\subsection{The modified flag}


Each mark has a flag to keep track of whether anything within its region has 
been modified.  If you are creating an object that uses marks and want to use 
this flag, you must write the object's insertion and deletion routines so that 
they update the modified flag appropriately.  There are methods for setting 
the modified flag and getting its value.  On the other hand, if you are using 
the class \italic{text}, the modified flag is used to keep track of updates to 
the display and you must not use it for other purposes. 


\subsection{Linked list of marks}


Most applications of marks keep a linked list of marks.  There are 
macromethods for inserting a mark into the list and getting the next mark on 
the list. 


\begindata{bp,538927432}
\enddata{bp,538927432}
\view{bpv,538927432,454,0,0}
\subsection{The mark's object}


Each mark has a pointer to the object containing the mark.  There are methods 
for setting the object and getting it. 


\section{Creating marks}


\subsection{Creating an instance of a mark}


\example{struct mark *mark_New ()

}
\leftindent{\bold{Class procedure description.}  \italic{mark_New } creates an 
instance of a mark.  When the user inserts material at the same point as the 
beginning of the mark, the material will not be included within the mark; when 
the user inserts material at the same point as the end of the mark, the 
inserted text will be included. 


\bold{Return value.}  A pointer to the newly created mark; \smaller{NULL} upon 
failure. 


\bold{Usage.}  If you want to specify what should happen to inserted material, 
you should use \italic{mark_NewWithStyle}, described below, to create the 
mark, or alternatively, call \italic{mark_SetStyle} to change an already 
existing mark. 


\bold{Example}. 

\programexample{
struct mark *m;

m = mark_New();

}
}

\section{Managing insertions at the end points of a mark}


\subsection{Creating a mark with end point specifications}


\example{struct mark *mark_NewWithStyle(beginning, ending)

boolean beginning;

boolean ending;} 


\leftindent{\bold{Class procedure description.}  \italic{mark_NewWithStyle} 
creates an instance of a mark.  When the user inserts material at the same 
point as the beginning of the mark, the material will be included in the mark 
if the parameter \italic{beginning} is \smaller{TRUE}; not included if it is 
\smaller{FALSE}.  When the user inserts material at the same point as the end 
of the mark, the inserted text will be included if the parameter 
\italic{ending} is \smaller{TRUE}; not included if it is \smaller{FALSE}. 


\bold{Return value.}  A pointer to the newly created mark; \smaller{NULL} upon 
failure. 


\bold{Usage.}  If you want material inserted at the front of a mark to be 
included in the mark, then \italic{beginning} should be \smaller{TRUE}.  If 
you want material inserted at the end of a mark to be included in the mark, 
then \italic{ending} should be \smaller{TRUE}. 


\bold{Example}.  The following creates a mark in which material inserted at 
the same location as either end point will be included within the mark: 

\programexample{
struct mark *m;

m = mark_NewWithStyle(TRUE, TRUE);

}
}
\begindata{bp,538927368}
\enddata{bp,538927368}
\view{bpv,538927368,455,0,0}
\subsection{Specifying insertions at the end points of a mark}


\example{void mark_SetStyle(m, beginning, ending)

struct mark *m;

boolean beginning;

boolean ending;} 


\leftindent{
\bold{Method description.}  \italic{mark_SetStyle} specifies whether material 
inserted at the end points of a mark should be included within the scope of 
the mark  When the user inserts material at the same point as the beginning of 
the mark, the material will be included in the mark if the parameter 
\italic{beginning} is \smaller{TRUE}; not included if it is \smaller{FALSE}. 
When the user inserts material at the same point as the end of the mark, the 
inserted text will be included if the parameter \italic{ending} is 
\smaller{TRUE}; not included if it is \smaller{FALSE}. 


\bold{Usage.}  If you wish to change the way insertions at the end points of a 
mark are managed, then you should call this method. 

}

\subsection{Getting the value of the beginning insertion specification}


\example{boolean mark_IncludeBeginning (m)

struct mark *m;

}

\leftindent{
\bold{Macro method description.}  \italic{mark_IncludeBeginning} returns 
\smaller{TRUE} if insertions at the beginning of the mark will be included in 
the mark; otherwise \smaller{FALSE}. 


\bold{Return value.}  A boolean, \smaller{TRUE} or \smaller{FALSE}. 


\bold{Usage.}  Arguments to macros should not have side effects. 

}

\subsection{Getting the value of the end point insertion specification}


\example{boolean mark_IncludeEnding (m)

struct mark *m;

}

\leftindent{
\bold{Macro method description.}  \italic{mark_IncludeEnding} returns 
\smaller{TRUE} if insertions at the beginning of the mark will be included in 
the mark; otherwise \smaller{FALSE}. 


\bold{Return value.}  A boolean, \smaller{TRUE} or \smaller{FALSE}. 


\bold{Usage.}  Arguments to macro methods should not have side effects. 

}


\section{Position and length}


\subsection{Setting the beginning position of a mark}


\example{mark_SetPos (m, pos)

struct mark *m;

long pos;

}
\leftindent{
\bold{Macro method description.}  \italic{mark_SetPos} sets the position of 
mark \italic{m} to \italic{pos}. 


\bold{Usage.}  Arguments to macro methods should not have side effects. 

}


\subsection{Getting the beginning position of a mark}


\example{long mark_GetPos (m)

struct mark *m;

}
\leftindent{
\bold{Macro method description.}  \italic{mark_GetPos} gets the position of 
mark \italic{m}.  The return value is 0 if the position has never been set. 



\bold{Return value.}  Returns a \italic{long} indicating the position. 


\bold{Usage.}  Arguments to macro methods should not have side effects. 

}


\subsection{Setting the length of a mark} \example{mark_SetLength (m, length)

struct mark *m;

long length;

}
\leftindent{
\bold{Macro method description.}  \italic{mark_SetLength} sets the length of 
mark \italic{m} to \italic{length}. 


\bold{Usage.}  Arguments to macro methods should not have side effects. 

}


\subsection{Getting the length of a mark}


\example{long mark_GetLength (m)

struct mark *m;

}
\leftindent{
\bold{Macro method description.}  \italic{mark_GetLength} gets the length of 
mark \italic{m}.  The return value is 0 if length has never been set. 



\bold{Return value.}  Returns a \italic{long}. 


\bold{Usage.}  Arguments to macro methods should not have side effects.   Note 
that a mark's \italic{length} is not the same as its end position. 

}


\subsection{Getting the end position of a mark} 

\example{long mark_GetEndPos (m)

struct mark *m;

}
\leftindent{
\bold{Macro method description.}  \italic{GetEndPos} gets the end position of 
mark \italic{m}.  The return value is \smaller{UNDEFINED} if \italic{position} 
or \italic{length} have never been set. 



\bold{Return value.}  Returns a \italic{long}. 


\bold{Usage.}  Arguments to macro methods should not have side effects. 

}

\section{Modifications}


\subsection{Setting a mark's modified flag}


\example{mark_SetModified (m, val)

struct mark *m;

boolean val;

}
\leftindent{
\bold{Macro method description.}  \italic{mark_SetModified} sets mark 
\italic{m}'s modified flag to \italic{val}, which should be one of 
\smaller{TRUE} or \smaller{FALSE}. 


\bold{Usage.}  If you are creating an object like the class \italic{text} that 
uses marks, then you will want to write routines that manage the modified flag 
of the marks.  Arguments to macro methods should not have side effects. 

}

\subsection{Getting a mark's modified flag}


\example{boolean mark_GetModified (m)

struct mark *m;

}
\leftindent{
\bold{Macro method description.}  \italic{mark_GetModified} gets the value of 
mark \italic{m}'s modified flag.  The return value is \smaller{FALSE} if it 
has never been set. 



\bold{Return value.}   One of \smaller{TRUE} or \smaller{FALSE}. 


\bold{Usage.}  If you are creating an object like the class \italic{text} that 
uses marks, then you will want to write routines that manage the modified flag 
of the marks.  Arguments to macro methods should not have side effects. 

}
\begindata{bp,538927496}
\enddata{bp,538927496}
\view{bpv,538927496,456,0,0}
\subsection{Updating a mark}


\example{void mark_UpdateMarks(mlist, pos, size)

struct mark *mlist;

long pos;

long size;

}
\leftindent{
\bold{Method description.}  Marks point at the same position in an object, 
regardless of what the user inserts or deletes.  \italic{mark_UpdateMarks} is 
the method that adjusts the marks to reflect changes in the object.  The first 
parameter, \italic{mlist} is normally the head of a list of marks.  The second 
parameter, \italic{pos} specifies the position in the object at which the 
insertion or deletion occurred; the third parameter, \italic{size} specifies 
the size of the insertion or deletion.  The value of \italic{size} is negative 
for deletions.   For each mark in the list, \italic{mark_UpdateMarks} adjusts 
the position and length of the mark appropriately. 


\bold{Side effect.}  Changes the position and length of the marks.  If the 
insertion or deletion occurred within mark's region, \italic{mark_UpdateMarks} 
sets the mark's modified flag. 


\bold{Usage.}  If you are creating an object like the class \italic{text} that 
uses marks, then you will want to write routines that manage the marks and 
call \italic{UpdateMarks} appropriately. 

}

\section{Linked list of marks}


\subsection{Setting the next field of a mark}


\example{mark_SetNext (m1, m2)

struct mark *m1, *m2;

}
\leftindent{
\bold{Macro method description.}  \italic{mark_SetNext} sets mark 
\italic{m1}'s next field to mark \italic{m2}. 


\bold{Usage.}  Used for performing insertion or deletions of marks in a linked 
list.  Arguments to macromethods should not have side effects. 

}

\subsection{Getting the next mark}


\example{struct mark *mark_GetNext (m)

struct mark *m;

}
\leftindent{
\bold{Macro method description.}   \italic{mark_GetNext} returns the next mark 
after mark \italic{m} in a linked list of marks.  The return value is 
\smaller{NULL} if it has never been set. 



\bold{Return value.}  A pointer to a mark. 


\bold{Usage.}  Used to traverse a linked list of marks.  Arguments to macro 
methods should not have side effects. 

}

\section{The mark's object}


\subsection{Associating a mark with an object}


\example{mark_SetObject (m, object)

struct mark *m;

struct basicobject *object;

}
\leftindent{
\bold{Macro method description.}  \italic{mark_SetObject} associates the 
object \italic{object} with mark \italic{m}. 


\bold{Usage.}  Allows access from a mark to the object it is marking. 
 Arguments to macro methods should not have side effects. 


\bold{Example.}  The following associates a newly created mark with a 
simpletext object: 

\programexample{
struct simpletext *stxt;

struct mark *m;


m = mark_New();

mark_SetObject (m, stxt);

}
}

\subsection{Getting a mark's associated object}


\example{struct basicobject *mark_GetObject (m)

struct mark *m;

}
\leftindent{
\bold{Macro method description.}  \italic{mark_GetObject} returns mark 
\italic{m}'s associated object.  The return value is \smaller{UNDEFINED} if it 
has never been set. 


\bold{Return value.}  A pointer to the mark's associated object. 


\bold{Usage.}  Before getting a mark's associated object, you should check 
that the object has not been freed with \italic{ObjectFree}.  Arguments to 
macromethods should not have side effects. 

}

\subsection{Checking that an object has not been freed}


\example{boolean mark_ObjectFree (m)

struct mark *m;

}
\leftindent{
\bold{Macro method description.}  \italic{mark_ObjectFree} returns 
\smaller{TRUE} if the mark's associated object has been freed; \smaller{FALSE} 
otherwise. 


\bold{Return value.}  A boolean, one of \smaller{TRUE} or \smaller{FALSE}. 


\bold{Usage.}  When an object is freed, it cannot free the marks that have 
been associated with it:  Other objects may want to access those marks; were 
those objects to do so and the object were freed, the program would core dump. 
 Instead, the object must set an Object Free flag to \smaller{TRUE}.  Before 
accessing a mark, you should check to make sure the object has not been freed. 
 Arguments to macro methods should not have side effects. 

}
\begindata{bp,538927560}
\enddata{bp,538927560}
\view{bpv,538927560,457,0,0}
\subsection{Setting the Object Free flag}


\example{SetObjectFree(m, val)

struct mark *m;

boolean val;

}
\leftindent{
\bold{Macro method description.}  \italic{SetObjectFree} sets mark 
\italic{m}'s Object Free flag to the boolean value, \italic{val}. 


\bold{Usage.}  If you are creating an object, like \italic{text}, that uses 
marks, then when the object is freed, it should call \italic{SetObjectFree} in 
its \italic{FinalizeObject} class procedure for any marks that have been 
associated with it.  Arguments to macro methods should not have side effects. 


\bold{Example.}  Assume that there is a class, \italic{buffer}, that maintains 
a list of marks in the list \italic{mlist}.  It should have the following as 
part of its \italic{FinalizeObject} class procedure: 

\programexample{
void buffer__FinalizeObject(classID, b)

struct classheader *classID;

struct buffer *b;  \{

    struct mark *m;

    

    if (b->mlist != NULL)  \{

	for (m = b->mlist; m != NULL; m = mark_GetNext(m))

	    mark_SetObjectFree(m, TRUE);

    \}

}}

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,459,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538609936}
