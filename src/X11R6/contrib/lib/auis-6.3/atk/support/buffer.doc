\begindata{text,538395716}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{The Buffer Package}}\indexi{Buffer package}


The buffer package provides a set of routines to manage a set of views 
corresponding to a set of data objects.  The data objects may be associated 
with files.  A buffer is a named entity consisting of a data object, a 
(possibly empty) set of views viewing that data object, and an optional file 
name.  These buffers may be thought of as emacs buffers. 


The buffer package  provides two useful classes of operations.  First, it 
 provides a data base keeping track of which file's data objects have already 
been loaded into memory, so that later attempts to read or write a file can be 
directed to the appropriate already-loaded data object.  The buffer package 
can be used to tell whether or not there are data objects that have been 
modified since they have been written out last, so that an editor can refuse 
to exit without at least giving clients one last chance to save their files. 


The buffer package also, for each data object, keeps track of a set of views 
viewing the data object, and which views are in use, that is, are visible on 
the screen somewhere.  In order to make a data object visible, the  programmer 
can interrogate the buffer package as to whether there exists an view viewing 
the appropriate data object that is not in use.  If so, the programmer can use 
this view instead of creating a new one.  Of course, this interface also 
provides a procedure to call with an view when one is finished with it, so 
that it can be placed back in the free pool for that data object. 


The class \italic{buffer} is a subclass of \italic{observable} and provides 
methods and class procedures for creating and setting attributes for buffers. 


\section{Quick reference list for Buffer}

 

\fixedtext{struct buffer *\bold{buffer_}Create }\fixedindent{(char 
*\paramname{bufferName}, char *\paramname{fileName}, char 
*\paramname{objetName}, struct dataobject *\paramname{data});} 

\fixedtext{struct view *\bold{buffer_}EnumerateViews }\fixedindent{(struct 
buffer *\paramname{buffer}, procedure \paramname{mapFunction}, long 
\paramname{functionData});} 

\fixedtext{struct buffer *\bold{buffer_}Enumerate }\fixedindent{(procedure 
\paramname{mapFunction}, long \paramname{functionData});} 

\fixedtext{void \bold{buffer_}FinalizeObject }\fixedindent{(struct buffer 
*\paramname{self});} 

\fixedtext{struct buffer *\bold{buffer_}FindBufferByData }\fixedindent{(struct 
dataobject *\paramname{data});} 

\fixedtext{struct buffer *\bold{buffer_}FindBufferByFile }\fixedindent{(char 
*\paramname{filename});} 

\fixedtext{struct buffer *\bold{buffer_}FindBufferByName }\fixedindent{(char 
*\paramname{bufferName});} 

\fixedtext{struct buffer *\bold{buffer_}GetBufferOnFile }\fixedindent{(char 
*\paramname{filename}, long \paramname{flags});} 

\fixedtext{\bold{buffer_}GetCkpClock }\fixedindent{(struct buffer 
*\paramname{buffer});} 

\fixedtext{\bold{buffer_}GetCkpFilename }\fixedindent{(struct buffer 
*\paramname{buffer});} 

\fixedtext{\bold{buffer_}GetCkpLatency }\fixedindent{(struct buffer 
*\paramname{buffer});} 

\fixedtext{\bold{buffer_}GetCkpVersion }\fixedindent{(struct buffer 
*\paramname{buffer});} 

\fixedtext{\bold{buffer_}GetData }\fixedindent{(struct buffer 
*\paramname{buffer});} 

\fixedtext{\bold{buffer_}GetDefaultViewname }\fixedindent{(struct buffer 
*\paramname{buffer});} 

\fixedtext{long \bold{buffer_}GetFileDate }\fixedindent{(struct buffer 
*\paramname{buffer});} 

\fixedtext{\bold{buffer_}GetFilename }\fixedindent{(struct buffer 
*\paramname{buffer});} 

\fixedtext{\bold{buffer_}GetLastTouchDate }\fixedindent{(struct buffer 
*\paramname{buffer});} 

\fixedtext{\bold{buffer_}GetMadeBackup }\fixedindent{(struct buffer 
*\paramname{buffer});} 

\fixedtext{\bold{buffer_}GetName }\fixedindent{(struct buffer 
*\paramname{buffer});} 

\fixedtext{\bold{buffer_}GetScratch }\fixedindent{(struct buffer 
*\paramname{buffer});} 

\fixedtext{struct view *\bold{buffer_}GetView }\fixedindent{(struct buffer 
*\paramname{buffer}, struct view **\paramname{inputFocus}, struct view 
**\paramname{targetView}, char *\paramname{ViewName});} 

\fixedtext{\bold{buffer_}GetWriteVersion }\fixedindent{(struct buffer 
*\paramname{buffer});} 

\fixedtext{void \bold{buffer_}GuessBufferName }\fixedindent{(char 
*\paramname{filename}, char *\paramname{bufferName}, int 
\paramname{nameSize});} 

\fixedtext{boolean \bold{buffer_}InitializeClass }\fixedindent{();} 

\fixedtext{boolean \bold{buffer_}InitializeObject }\fixedindent{(struct buffer 
*\paramname{self});} 

\fixedtext{int \bold{buffer_}ReadFile }\fixedindent{(struct buffer 
*\paramname{buffer}, char *\paramname{filename});} 

\fixedtext{void \bold{buffer_}RemoveView }\fixedindent{(struct buffer 
*\paramname{buffer}, struct view *\paramname{unusedView});} 

\fixedtext{void \bold{buffer_}SetCkpClock }\fixedindent{(struct buffer 
*\paramname{buffer}, long \paramname{clock});} 

\fixedtext{void \bold{buffer_}SetCkpLatency }\fixedindent{(struct buffer 
*\paramname{buffer}, long \paramname{latency});} 

\fixedtext{void \bold{buffer_}SetCkpVersion }\fixedindent{(struct buffer 
*\paramname{buffer}, long \paramname{version});} 

\fixedtext{void \bold{buffer_}SetData }\fixedindent{(struct buffer 
*\paramname{buffer}, struct dataobject *\paramname{data});} 

\fixedtext{void \bold{buffer_}SetDefaultObject }\fixedindent{(char 
*\paramname{objectname});} 

\fixedtext{void \bold{buffer_}SetDefaultViewname }\fixedindent{(struct buffer 
*\paramname{buffer}, char *\paramname{name});} 

\fixedtext{void \bold{buffer_}SetFilename }\fixedindent{(struct buffer 
*\paramname{buffer}, char *\paramname{fileName});} 

\fixedtext{\bold{buffer_}SetMadeBackup }\fixedindent{(struct buffer 
*\paramname{buffer}, boolean \paramname{value});} 

\fixedtext{void \bold{buffer_}SetName }\fixedindent{(struct buffer 
*\paramname{buffer}, char *\paramname{name});} 

\fixedtext{void \bold{buffer_}SetScratch }\fixedindent{(struct buffer 
*\paramname{buffer}, boolean \paramname{scratch});} 

\fixedtext{void \bold{buffer_}SetWriteVersion }\fixedindent{(struct buffer 
*\paramname{buffer}, long \paramname{version});} 

\fixedtext{boolean \bold{buffer_}Visible }\fixedindent{(struct buffer 
*\paramname{buffer});} 

\fixedtext{int \bold{buffer_}WriteToFile }\fixedindent{(struct buffer 
*\paramname{buffer}, char *\paramname{filename}, long \paramname{flags});} 




\paragraph{Creating a new buffer} \indexi{ \italic{buffer_Create}}

\example{struct buffer *buffer_Create(bufferName, filename, objectName,

data)

char *bufferName, *filename, *objectName;

struct dataobject *data;} 


\leftindent{\bold{Class procedure description. }Creates a new buffer with the 
name \italic{bufferName}.  Either the file name or the object name may be 
null.  The corresponding data object for the buffer is set to the data object 
parameter, and similarly, the associated file name is set to the file name 
parameter. 


\bold{Return value.}  A pointer to the new buffer. 


\bold{Usage.}  Buffer names should be unique. 

}

\begindata{bp,538927560}
\enddata{bp,538927560}
\view{bpv,538927560,472,0,0}
\paragraph{Running a procedure on buffers} \indexi{ \italic{buffer_Enumerate}}

\example{struct buffer *buffer_Enumerate(mapFunction, functionData)

boolean (*mapFunction)();

long functionData;} 


\leftindent{\bold{Class procedure description.}The procedure 
\italic{mapFunction} is called on every buffer in existence. 


}
\paragraph{Finding a buffer by its file name} 
\indexi{ \italic{buffer_FindBufferByFile}}

\example{struct buffer *buffer_FindBufferByFile(filename)

char *filename;} 


\leftindent{\bold{Class procedure description. 
}\italic{buffer_FindBufferByFile} finds a buffer by its file name. 


\bold{Return value.}  A pointer to the buffer. 

}

\paragraph{Finding a buffer by its data} 
\indexi{ \italic{buffer_FindBufferByData}}

\example{struct buffer *buffer_FindBufferByData(bufferData)

struct dataobject *bufferData;} 


\leftindent{\bold{Class procedure description. 
 }  \italic{buffer_FindBufferByData} find a buffer given its data. 


\bold{Return value.}  A pointer to a buffer. 


}
\paragraph{Finding a buffer by its name} 
\indexi{ \italic{buffer_FindBufferByName}}

\example{struct buffer *buffer_FindBufferByName(bufferName)

char *bufferName;} 


\leftindent{\bold{Class procedure description. 
 }  \italic{buffer_FindBufferByName} finds a buffer given its name. 


\bold{Return value.}  A pointer to a buffer.} 



\paragraph{Getting a buffer on file} \indexi{ \italic{buffer_GetBufferOnFile}}

\example{struct buffer *buffer_GetBufferOnFile(filename, mustExist)

char *filename;

boolean mustExist;} 


\leftindent{\bold{Class procedure description. 
 }  \italic{buffer_GetBufferOnFile} tries to find a buffer file; 
\italic{mustExist} specifies whether the file should exist or not. 


\bold{Return value.}  A pointer to a buffer. 

}
\begindata{bp,538927368}
\enddata{bp,538927368}
\view{bpv,538927368,473,0,0}
\paragraph{Guessing a buffer's name} \indexi{ \italic{buffer_GuessBufferName}}

\example{void buffer_GuessBufferName (filename, bufferName, nameSize)

char *filename, *bufferName;

int nameSize;} 


\leftindent{\bold{Class procedure description. 
 }  \italic{buffer_GuessBufferName

} guesses a buffer's name given a file name and a likely name for the buffer. 


}
\paragraph{Getting the view for a buffer} \indexi{ \italic{buffer_GetView}}

\example{struct view *buffer_GetView(buf, inputFocus, targetView, viewName)

struct buffer *buf;

struct view **inputFocus, **targetView; 

char *viewName;

}

\leftindent{\bold{Method description.  }  \italic{buffer_GetView} gets the 
view for a buffer.   Use viewName to override the default view class that will 
be associated with the buffer's dataobject.


\bold{Return value.}  A pointer to a view. 

}

\paragraph{Removing a buffer's view} \indexi{ \italic{buffer_RemoveView}}

\example{void buffer_RemoveView(buf, unusedView)

struct buffer *buf;

struct view *unusedView;} 


\leftindent{\bold{Method description.  }  \italic{buffer_RemoveView} removes a 
view from a buffer.} 



\paragraph{Finding if a buffer is visible} \indexi{ \italic{buffer_Visible}}

\example{boolean buffer_Visible(buf)

struct buffer *buf;} 


\leftindent{\bold{Method description.  }  \italic{buffer_Visible} finds is a 
buffer is visible. 


\bold{Return value.}  True if the buffer is visible. 


}
\paragraph{Setting the file name for a buffer} 
\indexi{ \italic{buffer_SetFilename}}

\example{void buffer_SetFilename(buf, filename)

struct buffer *buf;

char *filename;} 


\leftindent{\bold{Method description.  }  \italic{buffer_SetFilename} sets the 
file name associated with buffer \italic{buf} to \italic{filename.} 

}
\begindata{bp,538927432}
\enddata{bp,538927432}
\view{bpv,538927432,474,0,0}
\paragraph{Setting the data for a buffer} \indexi{ \italic{buffer_SetData}}

\example{void buffer_SetData(buf, bufferData)

struct buffer *buf;

struct dataobject *bufferData;} 


\leftindent{\bold{Method description.  }  \italic{buffer_SetData} assigns data 
to a buffer.} 



\paragraph{Setting the name of a buffer} \indexi{ \italic{buffer_SetName}}

\example{void buffer_SetName(buf, bufferName)

struct buffer *buf;

char *bufferName;} 


\leftindent{\bold{Method description.  }  \italic{buffer_SetName} sets the 
name for a buffer. 

}

\paragraph{Setting the version for a buffer} 
\indexi{ \italic{buffer_SetWriteVersion}}

\example{void buffer_SetWriteVersion(buf, version)

struct buffer *buf;

long version;} 


\leftindent{\bold{Method description.  }  \italic{buffer_SetWriteVersion} sets 
the version number of a buffer.} 



\paragraph{Setting the CKP version for a buffer} 
\indexi{ \italic{buffer_SetCkpVersion}}

\example{void buffer_SetCkpVersion(buf, version)

struct buffer *buf;

long version;} 


\leftindent{\bold{Method description.  }  \italic{buffer_SetCkpVersion} set a 
CKP version number for the buffer. 


}
\paragraph{Setting the CKP clock} \indexi{ \italic{buffer_SetCkpClock}}

\example{void buffer_SetCkpClock(buf, clock)

struct buffer *buf;

long clock;} 


\leftindent{\bold{Method description.  }  \italic{buffer_SetCkpClock} sets the 
time interval for CKP updates.} 

\begindata{bp,538927624}
\enddata{bp,538927624}
\view{bpv,538927624,475,0,0}
\paragraph{Setting the CKP latency} \indexi{ \italic{buffer_SetCkpLatency}}

\example{void buffer_SetCkpLatency(buf, latency)

struct buffer *buf;

long latency;} 


\leftindent{\bold{Method description.  }  Sets the CKP version latency to 
\italic{latency}.} 


\paragraph{Setting the scratch} \indexi{ \italic{buffer_SetScratch}}

\example{void buffer_SetScratch(buf, scratch)

struct buffer *buf;

boolean scratch;} 


\leftindent{\bold{Method description.  }  \italic{buffer_SetScratch} sets the 
scratch for a buffer.} 


\paragraph{Applying a function over all views} 
\indexi{ \italic{buffer_EnumerateViews}}

\example{struct view *buffer_EnumerateViews(buf, mapFunction, functionData)

struct buffer *buf;

struct view *(*mapFunction)();

long functionData;} 


\leftindent{\bold{Method description.  }  \italic{buffer_EnumerateViews} 
applies a function over all the views for a buffer. 


}
\paragraph{Writing a buffer to a file} \indexi{ \italic{buffer_WriteToFile}}

\example{int buffer_WriteToFile(buf, filename)

struct buffer *buf;

char *filename;} 


\leftindent{\bold{Method description.  }  \italic{buffer_WriteToFile} writes a 
buffer to a file.} 



\paragraph{Reading a file} \indexi{ \italic{buffer_ReadFile}}

\example{int buffer_ReadFile(buf, filename)

struct buffer *buf;

char *filename;} 


\leftindent{\bold{Method description.  }  Reads a file into a buffer.} 



\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,477,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538395716}
