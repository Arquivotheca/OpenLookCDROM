\begindata{text,538444388}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Environment}}\indexi{Environment class}


Nested marks delimit areas of a document in a tree structure; once delimited, 
nested mark regions can have environments wrapped around it.  Briefly, if you 
are working with text and you want to incorporate styles, the region you want 
to give a style is delimited and given pointers with calls to environment 
procedures, then assigned the style.  The class environment, a subclass of the 
class nested mark, provides the methods and class procedures for wrapping a 
text region in an environment, i.e., setting the pointers, and inserting and 
removing environments. 


\section{Quick reference list for Environment}



\fixedtext{struct environment *\bold{environment_}Allocate }\fixedindent{();} 

\fixedtext{void \bold{environment_}Deallocate }\fixedindent{(struct 
environment *\paramname{self});} 

\fixedtext{void \bold{environment_}FinalizeObject 
}\fixedindent{(\paramname{self});} 

\fixedtext{struct environment *\bold{environment_}GetRootEnvironment 
}\fixedindent{();} 

\fixedtext{boolean \bold{environment_}InitializeObject 
}\fixedindent{(\paramname{self});} 

\fixedtext{struct thisobject *\bold{environment_}InsertStyle 
}\fixedindent{(struct environment *\paramname{environment}, long 
\paramname{rpos}, struct style *\paramname{style}, boolean 
\paramname{doinsert});} 

\fixedtext{struct thisobject *\bold{environment_}InsertView 
}\fixedindent{(struct environment *\paramname{environment}, long 
\paramname{rpos}, struct view *\paramname{view}, boolean 
\paramname{doinsert});} 

\fixedtext{struct thisobject *\bold{environment_}Insert }\fixedindent{(struct 
environment *\paramname{environment}, long \paramname{rpos}, enum 
environmenttype \paramname{type}, union environmentcontents \paramname{data}, 
boolean \paramname{doinsert});} 

\fixedtext{struct environment *\bold{environment_}NewButSimilar 
}\fixedindent{(struct environment *\paramname{environment});} 

\fixedtext{boolean \bold{environment_}Remove }\fixedindent{(struct environment 
*\paramname{environment}, long \paramname{pos}, long \paramname{length}, enum 
\paramname{environmenttype}, boolean \paramname{deleteall});} 

\fixedtext{struct thisobject *\bold{environment_}WrapStyle 
}\fixedindent{(struct environment *\paramname{environment}, long 
\paramname{pos}, long \paramname{length}, struct style *\paramname{style});} 

\fixedtext{struct thisobject *\bold{environment_}WrapView 
}\fixedindent{(struct environment *\paramname{environment}, long 
\paramname{pos}, long \paramname{length}, struct view *\paramname{view});} 

\fixedtext{struct thisobject *\bold{environment_}Wrap }\fixedindent{(struct 
environment *\paramname{environment}, long \paramname{pos}, long 
\paramname{length}, enum environmenttype \paramname{type}, union 
environmentcontents \paramname{data});} 




\paragraph{Creating an instance of an environment}

\indexi{ \italic{environment_New }} 


\example{struct environment *environment_New (environment) 

struct environment *environment;}


\leftindent{\bold{Class procedure description.}  \italic{environment_New} 
creates an instance of an environment. 


\bold{Return value.}  A pointer to the newly created instance.} 


\paragraph{Getting the root environment}

\indexi{ \italic{environment_GetRootEnvironment}} 


\example{struct environment *environment_GetRootEnvironment() }


\leftindent{\bold{Class proceduredescription.} 
 \italic{environment_GetRootEnvironment} gets the root environment, which is 
essentially the environment corresponding to the top-level node in the tree. 


\bold{Return value.}  A pointer to the root environment. 


}
\paragraph{Wrapping an environment}

\indexi{ \italic{environment_Wrap}} 


\example{struct environment *environment_Wrap(env,pos,length,type,data) 

struct environment *env;  

long pos;  

long length;  

enum environmenttype type;  

union environmentcontents data;} 


\leftindent{\bold{Method description.}  \italic{environment_Wrap} wraps an 
environment around a marked region. }

\begindata{bp,538927496}
\enddata{bp,538927496}
\view{bpv,538927496,462,0,0}
\paragraph{Inserting an environment}

\indexi{ \italic{environment_Insert}} 


\example{struct environment *environment_Insert(env, rpos, type, data, 
doinsert) 

struct environment *env;  

long rpos;  

enum environmenttype type;  

union environmentcontents data;  

boolean doinsert;} 


\leftindent{\bold{Method description.}  \italic{environment_Insert} inserts an 
environment.  The parameter \italic{rpos} is the  relative position of the 
environment. 


\bold{Usage.} This method is equivalent to calling 
\italic{nestedmark_SetLength}; a environment is inserted by moving over the 
existing nested marks/environments. 


}
\paragraph{Remove an environment}

\indexi{ \italic{environment_Remove}} 


\example{void environment_Remove(env, pos, length, type, deleteall) struct 
environment *env;  

long pos;  

long length;  

enum environmenttype type;  

boolean deleteall;} 


\leftindent{\bold{Method description.}  \italic{environment_Remove} deletes an 
environment by removing the pointers. 


}

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,464,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538444388}
