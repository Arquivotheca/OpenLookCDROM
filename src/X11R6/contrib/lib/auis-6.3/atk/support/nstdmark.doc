\begindata{text,538395716}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Nested Mark}}\indexi{Nested mark class}


Nested marks are used to specify regions of text in order to create text in 
different styles.  If you choose a region in a text and make it bold face, for 
example, that portion of the text is delimited using nested marks. 


As its name suggests, nested marks can be nested to some extent.  You can 
create a nested mark within another nested mark, i.e., embed as in 
@bold(@italic(foo)), but you cannot overlap two nested marks. Nested marks are 
kept as a 23 tree which guarantees that the nested marks will be nicely 
nested.  The difference between a nested mark and a mark is that the former 
keeps a tree structure of children and parents, whereas the latter just stores 
the position of the mark.  Since a mark is not intended to have embedded 
structure, it would be inefficient to store tree information for them. 


The class \italic{nestedmark} provides the methods and class procedures for 
creating nested marks, and managing the nested mark tree. 


\section{Quick reference list for Nestedmark}



\fixedtext{struct thisobject *\bold{nestedmark_}Add }\fixedindent{(struct 
nestedmark *\paramname{nestedmark}, long \paramname{pos}, long 
\paramname{length});} 

\fixedtext{void \bold{nestedmark_}Delete }\fixedindent{(struct nestedmark 
*\paramname{nestedmark});} 

\fixedtext{long \bold{nestedmark_}Distance }\fixedindent{(struct nestedmark 
*\paramname{nestedmark}, struct thisobject *\paramname{nmark});} 

\fixedtext{long \bold{nestedmark_}Eval }\fixedindent{(struct nestedmark 
*\paramname{nestedmark});} 

\fixedtext{void \bold{nestedmark_}FreeTree }\fixedindent{(struct nestedmark 
*\paramname{nestedmark});} 

\fixedtext{struct thisobject *\bold{nestedmark_}GetChild }\fixedindent{(struct 
nestedmark *\paramname{nestedmark}, long \paramname{position});} 

\fixedtext{struct thisobject *\bold{nestedmark_}GetCommonParent 
}\fixedindent{(struct nestedmark *\paramname{nestedmark}, struct thisobject 
*\paramname{nmark});} 

\fixedtext{struct thisobject *\bold{nestedmark_}GetEnclosing 
}\fixedindent{(struct nestedmark *\paramname{nestedmark}, long 
\paramname{pos});} 

\fixedtext{struct thisobject *\bold{nestedmark_}GetInnerMost 
}\fixedindent{(struct nestedmark *\paramname{nestedmark}, long 
\paramname{pos});} 

\fixedtext{\bold{nestedmark_}GetLength }\fixedindent{(struct nestedmark 
*\paramname{nestedmark});} 

\fixedtext{long \bold{nestedmark_}GetNextChange }\fixedindent{(struct 
nestedmark *\paramname{nestedmark}, long \paramname{pos});} 

\fixedtext{struct thisobject *\bold{nestedmark_}GetNextChild 
}\fixedindent{(struct nestedmark *\paramname{nestedmark}, struct thisobject 
*\paramname{current}, long \paramname{pos});} 

\fixedtext{\bold{nestedmark_}GetParent }\fixedindent{(struct nestedmark 
*\paramname{nestedmark});} 

\fixedtext{struct thisobject *\bold{nestedmark_}GetPreviousChild 
}\fixedindent{(struct nestedmark *\paramname{nestedmark}, struct thisobject 
*\paramname{current}, long \paramname{pos});} 

\fixedtext{struct thisobject *\bold{nestedmark_}NewButSimilar 
}\fixedindent{(struct nestedmark *\paramname{nestedmark});} 

\fixedtext{long \bold{nestedmark_}NumberOfChildren }\fixedindent{(struct 
nestedmark *\paramname{nestedmark});} 

\fixedtext{void \bold{nestedmark_}SetLength }\fixedindent{(struct nestedmark 
*\paramname{nestedmark}, long \paramname{length});} 

\fixedtext{void \bold{nestedmark_}SetStyle }\fixedindent{(struct nestedmark 
*\paramname{nestedmark}, boolean \paramname{includebeginning}, boolean 
\paramname{includeending});} 

\fixedtext{struct thisobject *\bold{nestedmark_}Split }\fixedindent{(struct 
nestedmark *\paramname{nestedmark}, long \paramname{rpos});} 

\fixedtext{void \bold{nestedmark_}Update }\fixedindent{(struct nestedmark 
*\paramname{nestedmark}, long \paramname{pos}, long \paramname{length});} 




\paragraph{Creating an instance of a nested mark} 
\indexi{ \italic{nestedmark_New }}

 

\example{struct nestedmark_New (nmark)

struct nestedmark *nmark;} 


\leftindent{\bold{Class procedure description. }\italic{nestedmark_New} 
creates a nested mark. 


\bold{Return value.}  A pointer to the newly created instance. 


\bold{Usage.}  If you want to provide style editing facilities for parts of a 
text document, you will want to provide for nested marks. 


}
\paragraph{Freeing a tree of marks}

\indexi{ \italic{nestedmark_FreeTree}} 


\example{void nestedmark_FreeTree(nmark)

struct nestedmark *nmark; }


\leftindent{\bold{Method description.  }  \italic{nestedmark_FreeTree} frees a 
tree containing the nested mark \italic{nmark}. 


\bold{Usage.}  When styles are stripped, the corresponding tree of marks that 
marked the styles should also be deleted by calling this method. 

}


\paragraph{Adding a nested mark}

\indexi{ \italic{nestedmark_Add}} 


\example{struct *nmark nestedmark_Add(nmark, pos, length)

struct nestedmark *nmark;

long pos;

long length; }


\leftindent{\bold{Method description.  }  \italic{nestedmark_Add} adds a mark 
as the specified position.  The length of the mark is passed so child and 
parent marks can modify their positions accordingly. 


\bold{Usage.}  If a mark is to be added, then this procedure should be used. 


}
\paragraph{Deleting a nested mark}

\indexi{ \italic{nestedmark_Delete}} 

\example{void nestedmark_Delete(nmark)

struct nestedmark *nmark;} 


\leftindent{\bold{Method description.  }\italic{nestedmark_Delete} deletes a 
nested mark. 


\bold{Usage.}   If a mark is to be deleted then this procedure should be used. 




}

\paragraph{Updating nested marks}

\indexi{ \italic{nestedmark_Update}} 


\example{void nestedmark_Update(nmark, pos, length)

struct nestedmark *nmark;

long pos;

long length;} 


\leftindent{\bold{Method description.  }  \italic{nestedmark_Update} updates 
all the marks in the nested mark tree. 


\bold{Usage.}  If a mark is added or deleted, then the positions of all other 
nested marks in the tree must be modified with a call to this method. 

}

\paragraph{Getting the innermost nested mark}

\indexi{ \italic{nestedmark_GetInnerMost}} 


\example{struct nestedmark *nestedmark_GetInnerMost(nmark, pos)

struct nestedmark *nmark;

long pos; }


\leftindent{\bold{Method description.  }  \italic{nestedmark_GetInnerMost} 
finds the innermost mark, i.e. the lowest member of the tree. 


\bold{Return value.}  Pointer to the innermost nested mark.} 



\paragraph{Getting the enclosing nested mark}

\indexi{ \italic{nestedmark_GetEnclosing}} 


\example{struct nestedmark *nestedmark_GetEnclosing(nmark, pos)

struct nestedmark *nmark;

long pos;} 


\leftindent{\bold{Method description.  }  \italic{nestedmark_GetEnclosing} 
tales a nested mark and finds its enclosing nested mark, i.e., its parent in 
the tree. 


\bold{Return value.}  A pointer to the enclosing nested mark. 


}
\paragraph{Evaluating a nested mark}

\indexi{ \italic{nestedmark_Eval}} 


\example{long nestedmark_Eval(nmark)

struct nestedmark *nmark;} 


\leftindent{\bold{Method description.  }  \italic{nestedmark_Eval} finds the 
position of the nested mark in the nested mark tree. 


\bold{Return value.}  The value indication the position of the nested mark in 
the tree. 


}
\paragraph{Setting the length of a nested mark}

\indexi{ \italic{nestedmark_SetLength}} 


\example{void nestedmark_SetLength(nmark, length)

struct nestedmark *nmark;

long length; }


\leftindent{\bold{Method description.  }  \italic{nestedmark_SetLength} sets 
the length of the nested mark. 


\bold{Usage.}  It is important to set the length for a nested mark, since that 
is what is used to update the positions of all nested mark in the tree when a 
new nested mark is added or deleted.  If the exact length of the nested mark 
to be added is not known, then this method should be called with a length of 
9999 or a similar large number, then re-set when the exact length is known. 


\bold{Example.}  If an editor provides a facility for inserting a file, the 
number of characters in the file to be inserted is not known initially. 
 Therefore, nestedmark_SetLength is first called with a large length to 
accommodate the file to be inserted.  After the file has been included, then 
the length of the nested mark, i.e. the region containing the inserted text, 
can be reset to its exact length. 

}

\paragraph{Getting the next change}

\indexi{ \italic{nestedmark_GetNextChange}} 


\example{long nestedmark_GetNextChange(nmark, pos)

struct nestedmark *nmark;

long pos; }


\leftindent{\bold{Method description.  }  \italic{nestedmark_GetNextChange} 
goes through the data stream information in the text to find the next change 
identified by the beginning of another nested mark. 


\bold{Return value.}  The position of the next nested mark. 

}


\paragraph{Getting the common parent of nested marks}

\indexi{ \italic{nestedmark_GetCommonParent}} 


\example{struct nestedmark *nestedmark_GetCommonParent(nmark1, nmark2)

struct nestedmark *nmark1;

struct nestedmark *nmark2;} 


\leftindent{\bold{Method description.  }  \italic{nestedmark_GetCommonParent} 
gets the common parent for two marks, i.e. the parent node. 


\bold{Return value.}  A pointer to the parent nested mark. 

}

\paragraph{Finding the distance to another nested mark}

\indexi{ \italic{nestedmark_Distance}} 


\example{long nestedmark_Distance(nmark1, nmark2)

struct nestedmark *nmark1;

struct nestedmark *nmark2;} 


\leftindent{\bold{Method description.  }  \italic{nestedmark_Distance} finds 
the number of levels in the nested mark tree it takes from the first mark to 
the second. 


\bold{Return value.}  The number of levels away the second mark is from the 
first.} 



\paragraph{Setting the styles on a nested mark}

\indexi{ \italic{nestedmark_SetStyle}} 


\example{void nestedmark_SetStyle(nmark, includebeginning, includeending)

struct nestedmark *nmark;

boolean includebeginning;

boolean includeending;} 


\leftindent{\bold{Method description.  }  \italic{nestedmark_SetStyle} sets 
the endstyles for the nested mark, i.e.  it sets whether text inserted before 
and after a nested mark should be included within the nested mark or not. 


\bold{Usage.}  If  \italic{includebeginning} is True, then text inserted at 
the beginning will be included in the nested mark; if \italic{includeending} 
is True, then text inserted at the end of the nested mark will be included 
within the nested mark. 

}


\paragraph{Getting the previous child}

\indexi{ \italic{nestedmark_GetPreviousChild}} 


\example{struct nestedmark *nestedmark_GetPreviousChild(nmark1, nmark2, pos)

struct nestedmark *nmark1;

struct nestedmark *nmark2;

long pos;} 


\leftindent{\bold{Method description.  }  \italic{nestedmark_GetPreviousChild} 
gets the nested mark on the previous branch on the nested mark tree.  If the 
three children on a branch of the tree are designated 0, 1, and 2, and 
\italic{nestedmark_GetPreviousChild} is called on 1, then the method will 
return the nested mark in position 0. 


\bold{Return value.}  A pointer to the previous nested mark. 

}

\paragraph{Getting the next child}

\indexi{ \italic{nestedmark_GetNextChild}} 


\example{struct nestedmark *nestedmark_GetNextChild(nmark1, nmark2, pos)

struct nestedmark *nmark1;

struct nestedmark *nmark2;

long pos;} 


\leftindent{\bold{Method description.  }  \italic{nestedmark_GetNextChild} 
gets gets the nested mark on the Next branch on the nested mark tree.  If the 
three children on a branch of the tree are designated 0, 1, and 2, and 
\italic{nestedmark_GetNextChild} is called on 1, then the method will return 
the nested mark in position 2. 


\bold{Return value.}  The next child. 

}

\paragraph{Finding the number of children}

\indexi{ \italic{nestedmark_NumberOfChildren}} 


\example{long nestedmark_NumberOfChildren(nmark)

struct nestedmark *nmark;} 


\leftindent{\bold{Method description.  }  \italic{nestedmark_NumberOfChildren} 
finds how many children a nested mark has. 


\bold{Return value.}  The number of children for the nested mark.} 



\paragraph{Getting a child}

\indexi{ \italic{nestedmark_GetChild}} 


\example{struct nestedmark *nestedmark_GetChild(nmark, pos)

struct nestedmark *nmark;

long pos;} 


\leftindent{\bold{Method description.  }  Gets a child object for the mark at 
\italic{pos}. 


\bold{Return value.}  A pointer to the object..} 



\paragraph{Setting a new but similar nested mark}

\indexi{ \italic{nestedmark_NewButSimilar}} 


\example{struct nestedmark *nestedmark_NewButSimilar(nmark)

struct nestedmark *nmark;} 


\leftindent{\bold{Method description.  }  Sets a new nested mark similar to 
the previous. 


\bold{Return value.}  A pointer to a nested mark.} 



\paragraph{Getting the length of a nested mark}

\indexi{ \italic{nestedmark_GetLength}} 


\example{nestedmark_GetLength(nmark)

struct nestedmark *nmark;} 


\leftindent{\bold{Macro method description.  }  Gets the length of a nested 
mark. 


}
\paragraph{Getting the parent nested mark}

\indexi{ \italic{nestedmark_GetParent}} 


\example{nestedmark_GetParent(nmark)

struct nestedmark *nmark;} 


\leftindent{\bold{Macro method description.  }  Gets the parent for the nested 
mark.} 


\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,453,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538395716}
