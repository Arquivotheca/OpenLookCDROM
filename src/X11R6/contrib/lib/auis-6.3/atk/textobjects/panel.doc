\begindata{text,538288584}
\textdsversion{12}
\template{default}
\define{global
}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\chapter{Panel}


The panel class supports simple caption lists.  A caption list is a scrollable 
set of caption strings of arbitrary length.  A caption may be selected by 
placing the mouse cursor over a particular caption and clicking with either 
the left or right mouse button.  Only a single caption may be selected at a 
time.  Each caption may have an associated client-specific datum that is 
passed to a client-specified call-back routine when that caption is selected. 
 As well, the font for the highlighted caption can be specified such that the 
caption will be surrounded in that font when selected.  By default, normalized 
captions are in a 10-point plain font.  As well as providing selection via 
user-interaction, the client program can cause caption selection via certain 
panel classmethods.


Caption lists are useful for applications that require the user to choose one 
of many possible alternative items.  An example of an application that takes 
advantage of the panel class is Help.  The 'Overview' and 'Programs' lists on 
the right side of the window are panel objects.  


\section{Quick reference list for panel

}

\fixedtext{struct panel_Entry *\bold{panel_}Add }\fixedindent{(struct panel 
*\paramname{panel}, char *\paramname{item}, char *\paramname{tag}, int 
\paramname{showNow});} 

\fixedtext{void \bold{panel_}AssignKey }\fixedindent{(struct panel 
*\paramname{panel}, char \paramname{c}, void (*proc)(\paramname{)}, long 
\paramname{rock});} 

\fixedtext{void \bold{panel_}ClearSelection }\fixedindent{(struct panel 
*\paramname{panel});} 

\fixedtext{\bold{panel_}CurrentHighlight }\fixedindent{(struct panel 
*\paramname{panel});} 

\fixedtext{void \bold{panel_}FinalizeObject }\fixedindent{(struct panel 
*\paramname{self});} 

\fixedtext{void \bold{panel_}FullUpdate }\fixedindent{(struct panel 
*\paramname{panel}, enum view_UpdateType \paramname{type}, long \paramname{x}, 
long \paramname{y}, long \paramname{w}, long \paramname{h});} 

\fixedtext{struct view *\bold{panel_}Hit }\fixedindent{(struct panel 
*\paramname{panel}, enum view_MouseAction \paramname{action}, long 
\paramname{x}, long \paramname{y}, long \paramname{numberOfClicks});} 

\fixedtext{boolean \bold{panel_}InitializeClass }\fixedindent{();} 

\fixedtext{boolean \bold{panel_}InitializeObject }\fixedindent{(struct panel 
*\paramname{self});} 

\fixedtext{void \bold{panel_}MakeSelection }\fixedindent{(struct panel 
*\paramname{panel}, struct panel_Entry *\paramname{entry});} 

\fixedtext{void \bold{panel_}PostKeyState }\fixedindent{(struct panel 
*\paramname{panel}, struct keystate *\paramname{ks});} 

\fixedtext{void \bold{panel_}PostMenus }\fixedindent{(struct panel 
*\paramname{panel}, struct menulist *\paramname{ml});} 

\fixedtext{void \bold{panel_}RemoveAll }\fixedindent{(struct panel 
*\paramname{panel});} 

\fixedtext{void \bold{panel_}Remove }\fixedindent{(struct panel 
*\paramname{panel}, struct panel_Entry *\paramname{entry});} 

\fixedtext{void \bold{panel_}SelectNext }\fixedindent{(struct panel 
*\paramname{panel});} 

\fixedtext{void \bold{panel_}SelectPrevious }\fixedindent{(struct panel 
*\paramname{panel});} 

\fixedtext{\bold{panel_}SetCursorFont }\fixedindent{(struct panel 
*\paramname{panel}, struct fontdesc *\paramname{cf});} 

\fixedtext{\bold{panel_}SetCursorIcon }\fixedindent{(struct panel 
*\paramname{panel}, char \paramname{c});} 

\fixedtext{\bold{panel_}SetHandler }\fixedindent{(struct panel 
*\paramname{panel}, void (*proc)(\paramname{)}, char *\paramname{gt});} 

\fixedtext{\bold{panel_}SetHighlightStyle }\fixedindent{(struct panel 
*\paramname{panel}, struct style *\paramname{s});} 



\bold{Creating a new panel}\subheading{

}\example{struct panel *panel_New()

}
\leftindent{\bold{Class procedure description.}  A new panel object is 
allocated and initialized.


\bold{Return value.}  A pointer to the new panel. 


\bold{Usage. }} Call whenever you want to create a new, empty panel object.


\bold{Adding a caption to a panel

}\indent{struct panel_Entry *panel_Add (panel, item, tag, showNow)

struct panel *\italic{panel};

char *\italic{item};

char *\italic{tag};

int \italic{showNow};


\bold{Class procedure description.} To add a caption to a panel use panel_Add. 
 The caption is passed as \italic{item}, a client-specific datum as 
\italic{tag}, and a boolean that specifies whether or not the caption is to be 
displayed immediately, \italic{showNow}.  A pointer to a panel_Entry structure 
is returned upon success and NULL is returned otherwise.  The returned 
panel_Entry handle can be used to remove the caption (see panel_Remove).


\bold{Return value.}  A pointer to a struct panel_Entry.


\bold{Usage.}  Use panel_Add to build up a caption list in a valid panel 
object.


}\bold{Binding a client procedure to a key

}\indent{void panel_AssignKey (panel,key,proc,rock)

struct panel *\italic{panel};

char \italic{key};

void (*\italic{proc})();

long \italic{rock};


\bold{Class procedure description.}  It is possible for the panel client to 
bind a call-back procedure, \italic{proc}, to a particular keyboard key, 
\italic{key}.  When the user types that key, the call-back procedure is 
invoked with these arguments:


(proc)(rock,panel,key)


where \italic{rock} is the client-specific datum and \italic{key} is the key 
pressed.


\bold{Return value.}  None.


\bold{Usage.}  This feature is only useful when the panel object has the input 
focus.  In normal usage, selecting a list item causes the input focus to 
remain with whatever view had it before the selection operation.  By default, 
the keys 'P', 'p', 'B', 'b' are bound to panel_SelectPrevious.  The keys 'F', 
'f', 'N', 'n' are bound to panel_SelectNext.  To override these bindings or to 
provide additional bindings use panel_AssignKey.  


}
\bold{Normalizing any selected caption

}\indent{void panel_ClearSelection (panel)

struct panel *\italic{panel};


\bold{Class procedure descritpion.} To de-highlight any selected (highlighted) 
captions, use panel_ClearSelection.


\bold{Return value.}  None.


}\bold{Accessing the currently selected caption

}\indent{struct panel_Entry *panel_CurrentHighlight (panel)

struct panel *panel;


\bold{Class procedure description.} To access the currently selected caption 
use panel_CurrentHighlight.


\bold{Return value.}  A pointer to a panel_Entry structure.


}\bold{Simulating a user selection of a particular caption

}\indent{void panel_MakeSelection (panel, entry)

struct panel *\italic{panel};

struct panel_Entry *\italic{entry};


\bold{Class procedure description.} To cause the caption associated with a 
particular panel_Entry structure to become selected use panel_MakeSelection. 
 If a NULL entry is passed, any currently selected caption is de-highlighted.


\bold{Return value.}  None.


}\bold{Removing a caption from a panel

}\indent{void panel_Remove (panel,entry)

struct panel *\italic{panel};

struct panel_Entry *\italic{entry};


\bold{Class procedure description.} To remove the caption associated with a 
particular panel_Entry use panel_Remove.  If an invalid entry is passed the 
call is a no-op, otherwise the caption associated with the entry is removed 
from the list and the memory associated with the entry is freed.  \bold{Note:} 
the client-specific \italic{tag} is not freed.  To free all the tags 
associated with a panel, see panel_FreeAllTags.


\bold{Return value.}  None.


}\bold{Removing all the captions from a panel

}\indent{void panel_RemoveAll (panel)

struct panel *\italic{panel};


\bold{Class procedure description.}  To clear a panel of all the captions that 
it contains use panel_RemoveAll.  The memory associated with each panel_Entry 
is freed.   \bold{Note:} the client-specific \italic{tag} is not freed.  To 
free all the tags associated with a panel, see panel_FreeAllTags.


\bold{Return value.}  None.


}\bold{Selecting the next caption in the panel list

}\indent{void panel_SelectNext (panel)

struct panel *\italic{panel};


\bold{Class procedure description.}  To select the caption directly following 
the currently highlighted caption use panel_SelectNext.  If there is no 
currently selected caption, or the last caption is currently selected, this 
call is a no-op; otherwise the next caption is highlighted. 


\bold{Return value. } None.


\bold{Usage.}  


}\bold{Selecting the previous caption in the panel list

}\indent{void panel_SelectPrevious (panel)

struct panel *\italic{panel};


\bold{Class procedure description.}  To select the caption directly preceding 
the currently highlighted caption, use panel_SelectPrevious.  If there is no 
currently selected caption, or the first caption in the list is currently 
highlighted, this call is a no-op; otherwise the previous caption is 
highlighted.  


\bold{Return value.}  None.


}\bold{Specifying the font for the mouse cursor}\bold{

}\indent{panel_SetCursorFont (panel,cursor_font)

struct panel *\italic{panel};

struct fontdesc *\italic{cursor_font};


\bold{Class procedure description.}  One can specify a particular font family 
from which the cursor can be chosen by using panel_SetCursorFont (see 
fontdesc.doc).  After setting the font family one can choose a particular 
character from within that family to be the cursor (see panel_SetCusorIcon 
below).


\bold{Return value.}  None.


}\bold{Specifying a character for the mouse cursor

}\indent{panel_SetFontIcon (panel)

struct panel *\italic{panel};


\bold{Class procedure description.}  Once a cursor font family has been 
chosen, use this procedure to chose a particular character from that family to 
be the mouse cursor (see panel_SetCursorFont above).


}\bold{Specifying a selection call-back routine

}\indent{panel_SetHandler (panel,handler,globalTag)

struct panel *\italic{panel};

(void) (*\italic{handler}) ();

long \italic{globalTag};


\bold{Class procedure description.}  Whenever a caption is selected, the 
client-supplied routine, \italic{handler}, is called with these arguments:


\indent{(handler)(globalTag, tag, panel);

}
where \italic{tag} is the client-datum associated with the selected caption's 
panel_Entry.


\bold{Return value.}  None.


\bold{Usage.}  To give the panel any client-specific meaning it is necessary 
for the client to be able to gain control of any user-initiated selection 
event.  This handler is used to gain that control.


}
\bold{Specifying that a particular font be used to display the selected 
caption

}\indent{panel_SetHighlightStyle (panel,font)

struct panel *\italic{panel};

struct fontdesc *\italic{font};


\bold{Class procedure description.}  To specify that a particular font be used 
to display the selected caption use panel_SetHighlightStyle.  


\bold{Return value.}  None.


\bold{Usage.}  


}\bold{Freeing all client data tags

}\indent{panel_FreeAllTags (panel)

struct panel*\italic{panel};


\bold{Class procedure description.}  The methods panel_Remove and 
panel_RemoveAll are used to remove captions from a panel.  These methods free 
the caption's associated panel_Entry but do not free the client-specific data, 
\italic{tag}.  This routine frees all the tags associated with a panel.


\bold{Return value.} None.}


\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,156,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538288584}
