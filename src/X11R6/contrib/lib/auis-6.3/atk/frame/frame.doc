\begindata{text,538471136}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Frame}}\indexi{Frame}


The frame is a view that provides a message interface.  It divides its 
rectangle into two areas, a subview and a message line.  The message interface 
provides the programmer the ability to post messages to the user using either 
the message line or a dialog box.  Frame is a subclass of the lpair view. 
 Frames can either be associated with buffers or directly to views. 


\section{Working with frames}


\subsection{Creating frames}


\paragraph{Creating an instance of a frame}\indexi{Frame++New} 
\indexi{ \italic{frame_New}}

\example{struct frame_New(frame)

struct frame *frame;} 


\leftindent{\bold{Class procedure description.  }  \italic{frame_New} creates 
a new instance of a frame. 


\bold{Return value.}  Pointer to the newly created instance. 


\bold{Usage.}  If you are going to associate a view with a frame you should 
use frame_New.  If you are going to associate a buffer with a frame you should 
use frame_Create.  If you do use frame_New there are some other steps that you 
need to take in addition to linking the frame to its subview (see 
frame_SetView) and to its parent interaction manager (see im_SetView). You 
must post the default handler for this frame (see view_PostDefaultHandler) so 
that the message package knows what msghandler to use for interacting with the 
user (default msghandler is "message").  As well, if your application will map 
multiple windows (interaction managers) and you do not override frame's Quit 
menu, you may want to specify how frame_Exit operates.  Use 
frame_SetQuitWindowFlag to specify that only the window whose Quit menu was 
chosen is to be destroyed.  If QuitWindowFlag is FALSE, the process will exit. 
 If QuitWindowFlag is TRUE, only the window whose Quit menu was chosen will be 
destroyed.


}
\paragraph{Creating a frame}\indexi{Frame++Creating} 
\indexi{ \italic{frame_Create}}

\example{struct frame *frame_Create(buffer)

register struct buffer *buffer;} 


\leftindent{\bold{Class procedure description.  }  \italic{frame_Create} 
creates a frame for the named buffer. 


\bold{Return value.}  A pointer to the frame. 


\bold{Usage.}  If the application is using the buffer package, this call would 
be made to associate a buffer with a frame.  The buffer package provides a set 
of routines to manage a set of views corresponding to a set of data objects. 
  This method will get a handle on one of those views and cause it to be 
displayed as the subview of the frame.  

}
\paragraph{Applying a function to a frame}\indexi{Frame++Applying functions} 
\indexi{ \italic{frame_Enumerate}}

\example{struct frame *frame_Enumerate(mapFunction, functionData)

boolean (*mapFunction)();

long functionData;} 


\leftindent{\bold{Method description.  } \italic{frame_Enumerate} iterates a 
function over all frames within a given process.  \italic{functionData} is 
data to be passed to the function.  The enumeration will continue as long as 
\italic{mapFunction} returns FALSE.  If \italic{mapFunction} returns TRUE the 
Enumeration method will return the associate frame.  If no calls to 
\italic{mapFunction} returns TRUE then the Enumerate method will return NULL. 


\bold{Return value.}  A pointer to the frame where mapFunction returns TRUE or 
NULL if no call to mapFunction return TRUE.

}
\begindata{bp,538929416}
\enddata{bp,538929416}
\view{bpv,538929416,798,0,0}
\subsection{Managing frames}


\paragraph{Setting the view for a frame}\indexi{Frame++Setting a view} 
\indexi{ \italic{frame_SetView}}

\example{void frame_SetView(frame, view)

struct frame *frame;

struct view *view;} 


\leftindent{\bold{Method description.  }  \italic{frame_SetView} sets the 
subview for \italic{frame} to be \italic{view}.  It also attempts to get the 
input focus to \italic{view} (by making a call to \italic{view}'s 
WantInputFocus method)


\bold{Usage.}  If you are using a frame but are not using the buffer package, 
this method is used to place a view into a frame (see frame_New). 


}
\paragraph{Setting the buffer for a frame}\indexi{Frame++Setting a buffer} 
\indexi{ \italic{frame_SetBuffer}}


\example{void frame_SetBuffer(frame, buffer, setInputFocus)

struct frame *frame;

struct buffer *buffer;

boolean setInputFocus;} 


\leftindent{\bold{Method description.  }  \italic{frame_SetBuffer} sets the 
subview for \italic{frame} to be one of the views managed by \italic{buffer}. 
 If \italic{setInputFocus} is set to TRUE then this method passes the input 
focus to one of the descendants of the view. 


\bold{Usage.}  This method is used when an application is using the buffer 
package to handle multiple files. 


}
\paragraph{Enabling  commands in a frame}\indexi{Frame++Enabling a command} 
\indexi{ \italic{frame_SetCommandEnable}}

\example{void frame_SetCommandEnable(frame, enable)

struct frame *frame;

boolean enable;} 


\leftindent{\bold{Method description.  }  \italic{frame_SetCommandEnable} 
enables/disables command interaction with the frame.   The frame provides a 
number of commands that are used for handling files, deleting windows, etc. 
 These commands are automatically enabled when using frames in conjunction 
with the buffer package.  


}
\paragraph{Associating a title with a frame}\indexi{Frame++Setting a title} 
\indexi{ \italic{frame_SetTitle}}

\example{void frame_SetTitle(frame, title)

struct frame *frame;

char *title;} 


\leftindent{\bold{Description. } \italic{frame_SetTitle} sets the title of the 
\italic{frame} to \italic{title}.  This is then used to set the title of the 
window containing the frame.}



\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,800,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538471136}
