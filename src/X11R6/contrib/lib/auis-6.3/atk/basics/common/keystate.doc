\begindata{text,539004492}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\section{Key State}\indexi{Keystate} 

\formatnote{
For more information on keymaps and keystates, please refer to documentation 
of keymap.


\section{Quick reference list for Keystate}



\fixedtext{struct keystate *\bold{keystate_}AddAfter }\fixedindent{(struct 
keystate *\paramname{keystate}, struct keystate *\paramname{ks});} 

\fixedtext{struct keystate *\bold{keystate_}AddBefore }\fixedindent{(struct 
keystate *\paramname{keystate}, struct keystate *\paramname{ks});} 

\fixedtext{struct keystate *\bold{keystate_}Allocate }\fixedindent{();} 

\fixedtext{enum keystate_ApplyKeyValues \bold{keystate_}ApplyKey 
}\fixedindent{(struct keystate *\paramname{keystate}, char \paramname{key}, 
struct proctable_Entry **\paramname{ppe}, long *\paramname{rockP}, struct 
basicobject **\paramname{pobject});} 

\fixedtext{struct keystate *\bold{keystate_}Create }\fixedindent{(struct 
basicobject *\paramname{object}, struct keymap *\paramname{keymap});} 

\fixedtext{void \bold{keystate_}Deallocate }\fixedindent{(struct keystate 
*\paramname{ks});} 

\fixedtext{enum keystate_DoProcValues \bold{keystate_}DoProc 
}\fixedindent{(struct keystate *\paramname{keystate}, struct proctable_Entry 
*\paramname{pe}, long \paramname{rock}, struct basicobject 
*\paramname{object});} 

\fixedtext{void \bold{keystate_}FreeChain }\fixedindent{(struct keystate 
*\paramname{keystate});} 

\fixedtext{\bold{keystate_}GetObject }\fixedindent{(struct keystate 
*\paramname{keystate});} 

\fixedtext{void \bold{keystate_}GetOverride }\fixedindent{(struct keystate 
*\paramname{keystate}, procedure *\paramname{function}, long 
*\paramname{functionData});} 

\fixedtext{void \bold{keystate_}Reset }\fixedindent{(struct keystate 
*\paramname{keystate});} 

\fixedtext{void \bold{keystate_}SetObject }\fixedindent{(struct keystate 
*\paramname{keystate}, struct basicobject *\paramname{object});} 

\fixedtext{void \bold{keystate_}SetOverride }\fixedindent{(struct keystate 
*\paramname{keystate}, procedure \paramname{function}, long 
\paramname{functionData});} 

}

\subsection{Creating key states and establishing precedence} 


\paragraph{Creating state information for a key map} 
\indexi{ \italic{keystate_Create}}

\indexi{Keystate++Creating}

\example{struct keystate *keystate_Create(object, keymap)

struct basicobject *object;

struct keymap *keymap;} 


\leftindent{\bold{Class procedure description.} \italic{keymap_Create} 
allocates a new \italic{keystate} for the key map, \italic{keymap, }and 
initializes it. 


\bold{Return value.}  \italic{keymap_Create} returns a pointer to the newly 
allocated \italic{keystate}. 


\bold{Usage.}  If you are creating an view named \italic{x }and you want to 
use key maps,  then in the \italic{x_Init} procedure for the view, you should 
call  \italic{x_keymap_pointer = keymap_create ()} for each key map that your 
view needs.  Then, you should call \italic{keymap_insertproc} or 
\italic{keymap_insertmap} as needed to bind procedures and sub-key maps to 
character entries in the key map.  Finally, you should call 
\italic{keymap_Create} to create and initialize a key state for the root key 
map, and store the key state with your view. 

}


\paragraph{Giving precedence to the view} \indexi{ \italic{keystate_AddBefore}}

\indexi{Keystate++Precedence}

\example{struct keystate *keystate_AddBefore(childkeystate, parentkeystate)

struct keystate *childkeystate;

struct keystate *parentkeystate;} 


\leftindent{\bold{Method description.} \italic{keystate_AddBefore}  takes the 
key state \italic{childkeystate} and gives it precedence over key state 
\italic{parentkeystate}. 


\bold{Return value.}  A pointer to the new combined key state. 


\bold{Usage.}  If you have defined a key map for your view, but want a child 
view to be able to override it with its own key map, then you should call 
\italic{keystate_AddBefore} to indicate the precedence. 

}



\begindata{bp,538929032}
\enddata{bp,538929032}
\view{bpv,538929032,1228,0,0}
\paragraph{Giving a key state secondary precedence} 
\indexi{ \italic{keystate_AddAfter}}

\indexi{Keystate++Precedence}

\example{struct keystate *keystate_AddAfter(childkeystate, parentkeystate)

struct keystate *childkeystate;

struct keystate *parentkeystate;} 


\leftindent{\bold{Method description.} \italic{keystate_AddAfter} gives 
\italic{childkeystate}precedence right after the key state 
\italic{parentkeystate}. 


\bold{Return value.} A pointer to the new combined key state. 


\bold{Usage.}  If you have a key map defined for your view, and want a child 
view to have secondary preference right after a certain parent view, then you 
would use \italic{keystate_AddAfter} to indicate that preference. 

}


\subsection{The key state chain}\indexi{Key state chain}


\paragraph{Resetting the key state chain} \indexi{ \italic{keystate_Reset}}

\indexi{Keystate++Resetting the chain}

\example{void keystate_Reset(keystate)

struct keystate *keystate;} 


\leftindent{\bold{Method description.} \italic{keystate_Reset} calls 
\italic{InitState} on \italic{keystate}, re-initializing the entire key state 
chain, and clearing out arguments. 


\bold{Usage.}  If there is a key state chain that has had some changes made to 
it, and you want to set it back to its original state, you would call 
\italic{keystate_Reset}. 

}

\paragraph{Destroying the key state chain} \indexi{ \italic{keystate_FreeChain}}

\indexi{Keystate++Freeing the chain}

\example{void keystate_FreeChain(keystate)

register struct keystate *keystate;} 


\leftindent{\bold{Method description.} \italic{keystate_FreeChain}  calls a 
destroy on each key state object but not on the key state itself.  In other 
words, although each object in the key state will be destroyed, the key state 
itself remains as an empty key state. 


\bold{Usage.}  If you want to clear out a key state chain, but do not want to 
re-create a key state later, you can call \italic{keystate_FreeChain} to empty 
an existing key state chain. 

}

\begindata{bp,538929224}
\enddata{bp,538929224}
\view{bpv,538929224,1229,0,0}
\subsection{Finding and applying procedures


}\paragraph{Finding a procedure in a key state} 
\indexi{ \italic{keystate_ApplyKeyValues}}

\indexi{Keystate++Finding procedures}

\example{enum keystate_ApplyKeyValues keystate_ApplyKey(keystate, key,

ppe, rockP, pobject)

struct keystate *keystate;

long key;

struct proctable_Entry **ppe;

long *rockP;

struct basicobject **pobject;} 


\leftindent{\bold{Method description.} \italic{keystate_ApplyKey}  finds a key 
procedure (or key map) and applies it to an object unless an earlier key map 
takes precedence.  If the procedure is found, it returns that procedure; if 
not, it calls for a Reset.  It does not, however, execute the procedure. 
 Instead, it is used to modify the key state. 


\bold{Usage.}  The application programmer would typically not call this 
procedure directly, since it is usually called through the interaction 
manager.  \italic{keystate_ApplyKey} is typically used in conjunction with 
\italic{keystate_DoProc} below, however, it can be used alone as in a 
\italic{describekey} procedure which would return a list of all the keys and 
the procedures bound to them, but does not execute any of the procedures. 


}
\paragraph{Applying a procedure to an object in the key state chain} 
\indexi{ \italic{keystate_DoProcValues}}

\indexi{Keystate++Applying procedures}

\example{enum keystate_DoProcValues keystate_DoProc(keystate, pe, rock,

object)

struct keystate *keystate;

struct proctable_Entry *pe;

long rock;

struct basicobject *object;} 


\leftindent{\bold{Method description.}  \italic{keystate_DoProc} applies the 
procedure \italic{pe} in a procedure table entry to \italic{object}, or to an 
object of the correct type as found in the key state chain. 


\bold{Usage.}  The application programmer would typically not call this 
procedure directly since it is usually called through the interaction manager. 





}\
\begindata{bp,538271624}
\enddata{bp,538271624}
\view{bpv,538271624,1230,0,0}
\subsection{The object field} 


\paragraph{Setting the object field for a key state} 
\indexi{ \italic{keystate_SetObject}}

\indexi{Keystate++Object field}

\example{void keystate_SetObject(keystate, object)

struct keystate *keystate;

struct basicobject *object;} 


\leftindent{\bold{Method description.}  \italic{keystate_SetObject} sets the 
object field type for a key state by looking for a match in the procedure 
table.  If there is no initial match, SetObject tries other entries in the 
procedure table until it does find a match or runs out of entries to check. 
 If there is no match in the entire table, the procedure will return an error. 






}\paragraph{Getting the object field for a key state}


\example{GetObject(keystate)} \indexi{ \italic{keystate_GetObject}}

\indexi{Keystate++Object field}

\leftindent{\bold{Macro method description.}  \italic{keystate_GetObject} is a 
macro that gets the object field for a key state. 


\bold{Return value.}  An object type. 

}

\subsection{Overrides} 


\paragraph{Setting an override in a key state} 
\indexi{ \italic{keystate_SetOverride}}

\indexi{Keystate++Override}

\example{void keystate_SetOverride(keystate, function, functionData)

struct keystate *keystate;

enum keymap_Types (*function)();

long functionData;} 


\leftindent{\bold{Method description.}  \italic{keystate_SetOverride} sets an 
override on a key state. Once the override has taken place, the normal key 
state is used. 


\bold{Example.}  One way to accomplish a "Press any key" procedure in a view 
would be to set an override on the normal key state until a key is pressed and 
the override function is completed. 

}

\paragraph{Getting the override} \indexi{ \italic{keystate_GetOverride}}

\indexi{Keystate++Override}

\example{void keystate_GetOverride(keystate, function, functionData)

struct keystate *keystate;

enum keymap_Types (**function)();

long *functionData;} 


\leftindent{\bold{Method description.}  \italic{keystate_GetOverride} gets the 
override function for a  key state if an override has been set. 
 \italic{keystate_ApplyKey} should call \italic{keystate_GetOverride} first to 
check for override functions.} 



\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,1232,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,539004492}
