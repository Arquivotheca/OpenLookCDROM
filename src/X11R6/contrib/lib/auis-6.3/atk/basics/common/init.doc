\begindata{text,538873680}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}


\begindata{bp,538928456}
\enddata{bp,538928456}
\view{bpv,538928456,1248,0,0}
\chapter{\formatnote{Init} }\indexi{Init class}  \indexi{User customizations} 
 \indexi{Initialization files}


The init package contains functions necessary for user "customizations". 
 (These customizations are read from an initialization or "init" file hence 
the name.) The features supported are binding of key and menus, and modifying 
an editors behavior on certain types of files. The complete format of an init 
file is documented in the user documentation. 


\section{Quick reference list for Init}



\fixedtext{void \bold{init_}AddKeyBinding }\fixedindent{(struct init 
*\paramname{init}, char *\paramname{class}, boolean \paramname{inherit}, 
struct keymap *\paramname{keymap});} 

\fixedtext{void \bold{init_}AddMenuBinding }\fixedindent{(struct init 
*\paramname{init}, char *\paramname{class}, boolean \paramname{inherit}, 
struct menulist *\paramname{menulist});} 

\fixedtext{void \bold{init_}DeleteKeyBinding }\fixedindent{(struct init 
*\paramname{init}, char *\paramname{class}, boolean \paramname{inherit}, 
struct keymap *\paramname{keymap});} 

\fixedtext{void \bold{init_}DeleteMenuBinding }\fixedindent{(struct init 
*\paramname{init}, char *\paramname{class}, boolean \paramname{inherit}, 
struct menulist *\paramname{menulist});} 

\fixedtext{struct init *\bold{init_}Duplicate }\fixedindent{(struct init 
*\paramname{init});} 

\fixedtext{int \bold{init_}Load }\fixedindent{(struct init *\paramname{init}, 
char *\paramname{filename}, procedure \paramname{errorProc}, long 
\paramname{errorRock}, boolean \paramname{executeImmediately});} 

\fixedtext{struct keystate *\bold{init_}ModifyKeystate }\fixedindent{(struct 
init *\paramname{init}, struct keystate *\paramname{ks});} 

\fixedtext{struct menulist *\bold{init_}ModifyMenulist }\fixedindent{(struct 
init *\paramname{init}, struct menulist *\paramname{ml});} 




\paragraph{Creating an initialization file reader} \indexi{ \italic{init_New}}

\example{struct init *init_New()

}
\leftindent{\bold{Class procedure description.  }\italic{init_New} is used to 
allocate a new init object. 


\bold{Return value.}  A pointer to an init or NULL if an error occurred. 


}
\paragraph{Modify a menu list} \indexi{ \italic{init_ModifyMenulist}}

\example{struct menulist *init_ModifyMenulist(init, menulist)

struct init *init;

struct menulist *menulist;} 


\leftindent{\bold{Method description.  }  \italic{init_ModifyMenulist} returns 
a menulist which is the menulist passed to the function with modifications as 
specified by the given init structure. 


\bold{Return value.}  Returns a pointer to the new menu list. 


\bold{Usage.}  If you want to change the existing initial menus, you should 
call  \italic{init_ModifyMenulist} with the desired menu list.  This function 
is mostly useful internally to im, but it is conceivable that it could be used 
for configuring menulists in application code. 

}


\paragraph{Modify a key state} \indexi{ \italic{init_ModifyKeystate}}

\example{struct keystate *init_ModifyKeystate(initfile, keystate)

struct init *initfile;

struct keystate *keystate;} 


\leftindent{\bold{Method description.  }  \italic{init_ModifyMenulist} returns 
a keystate which is the keystate passed to the function with modifications as 
specified by the given init structure. 


\bold{Return value.}  A pointer to the new key state. 


\bold{Usage.}  If you want to change a user's initial key bindings you should 
call \italic{init_ModifyKeystate} with the desired key state. This function is 
mostly useful internally to im, but it is conceivable that it could be used 
for configuring keystates in application code. 

}
\begindata{bp,538271624}
\enddata{bp,538271624}
\view{bpv,538271624,1249,0,0}
\paragraph{Duplicating an initialization file} \indexi{ \italic{init_Duplicate}}

\example{struct init *init_Duplicate(init)

struct init *init;} 


\leftindent{\bold{Method description.  }  \italic{init_Duplicate} takes a 
 initialization file and makes a copy of it. 


\bold{Return value.}  A pointer to the new initialization file. 

 

\bold{Usage.} A unique init must be used for every set of menus and keystates 
you wish to modify simultaneously. For example, im creates a copy of the 
global init structure for every window. Since it is not possible to have more 
than one set of menus or keystates in a window at once, this is sufficient to 
ensure uniqueness. The reason for this is that the process of modifying 
menulists and keystates involves allocating new menulists and keystates. The 
init package uses the init structure to keep track of this memory allocation. 
Each time you use an init structure the menulists and keystates allocated to 
it are reused. 

}

\paragraph{Loading a user's initialization file} \indexi{ \italic{init_Load}}

\example{int init_Load(init, filename, errorProc, errorRock, 
executeImmediately)

struct init *init;

char *filename;

void (*errorProc)();

pointer errorRock;

boolean executeImmediately;} 


\leftindent{\bold{Method description.  }  \italic{init_Load} reads an init 
file and adds the appropriate information to the init object it is invoked on. 
The \formatnote{filename} is relative to the current working directory. The 
\formatnote{errorProc} argument is a function which will be called when an 
error occurs. Its calling convention is like so: 


\example{(*errorProc)(errorRock, errorMessage)

    /* Type */ errorRock;

    char *errorMessage;

}
The \formatnote{errorRock} is a transparent type which will be passed through 
to the \formatnote{errorProc} procedure. Error reporting is done for syntax 
and logical errors in the init file. The \formatnote{executeImmediately 
}argument is \formatnote{TRUE} to force full evaluation at read time or 
\formatnote{FALSE} to lazy evaluate when possible. Normally this argument 
should be FALSE, but it can be set to \formatnote{TRUE} when full error 
checking of the init file is important. For example, the ez editor has a -f 
switch which forces full evaluation of the .ezinit file. This causes all 
classes referenced by the init file to be loaded at startup instead of as they 
are used. 


\bold{Return value.}  -1 if an error was encountered (i.e. the init file does 
not exist), or nonnegative otherwise. 


\bold{Side effect.}  The init structure is modified appropriately. 


}



\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,1251,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538873680}
