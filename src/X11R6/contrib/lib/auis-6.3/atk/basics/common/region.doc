\begindata{text,538375988}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Region}}\indexi{Region class}


\section{Quick reference list for Region}



\fixedtext{boolean \bold{region_}AreRegionsEqual }\fixedindent{(struct region 
*\paramname{region}, struct region *\paramname{TestRegion});} 

\fixedtext{void \bold{region_}ClearRegion }\fixedindent{(struct region 
*\paramname{region});} 

\fixedtext{void \bold{region_}CopyRegion }\fixedindent{(struct region 
*\paramname{Destination}, struct region *\paramname{Source});} 

\fixedtext{struct region *\bold{region_}CreateEmptyRegion }\fixedindent{();} 

\fixedtext{struct region *\bold{region_}CreateOvalRegion }\fixedindent{(struct 
rectangle *\paramname{RegionShape});} 

\fixedtext{struct region *\bold{region_}CreatePolyRegion }\fixedindent{(struct 
point *\paramname{PointArray}, short \paramname{PointCount});} 

\fixedtext{struct region *\bold{region_}CreateRectRegion }\fixedindent{(struct 
rectangle *\paramname{RegionShape});} 

\fixedtext{struct region *\bold{region_}DuplicateRegion }\fixedindent{(struct 
region *\paramname{region});} 

\fixedtext{void \bold{region_}FinalizeObject }\fixedindent{(struct region 
*\paramname{self});} 

\fixedtext{boolean \bold{region_}InitializeObject }\fixedindent{(struct region 
*\paramname{self});} 

\fixedtext{void \bold{region_}InsetRegion }\fixedindent{(struct region 
*\paramname{region}, long \paramname{DeltaX}, long \paramname{DeltaY});} 

\fixedtext{void \bold{region_}IntersectRegion }\fixedindent{(struct region 
*\paramname{region}, struct region *\paramname{RHS}, struct region 
*\paramname{Result});} 

\fixedtext{boolean \bold{region_}IsPointInRegion }\fixedindent{(struct region 
*\paramname{region}, struct point *\paramname{TestPt});} 

\fixedtext{boolean \bold{region_}IsRectInRegion }\fixedindent{(struct region 
*\paramname{region}, struct rectangle *\paramname{TestRect});} 

\fixedtext{boolean \bold{region_}IsRegionEmpty }\fixedindent{(struct region 
*\paramname{region});} 

\fixedtext{void \bold{region_}OffsetRegion }\fixedindent{(struct region 
*\paramname{region}, long \paramname{DeltaX}, long \paramname{DeltaY});} 

\fixedtext{void \bold{region_}RectRegion }\fixedindent{(struct region 
*\paramname{region}, struct rectangle *\paramname{NewRegnRect});} 

\fixedtext{void \bold{region_}SubtractRegion }\fixedindent{(struct region 
*\paramname{region}, struct region *\paramname{RHS}, struct region 
*\paramname{Result});} 

\fixedtext{void \bold{region_}UnionRegion }\fixedindent{(struct region 
*\paramname{region}, struct region *\paramname{RHS}, struct region 
*\paramname{Result});} 

\fixedtext{void \bold{region_}XorRegion }\fixedindent{(struct region 
*\paramname{region}, struct region *\paramname{RHS}, struct region 
*\paramname{Result});} 



\paragraph{Creating an instance of a region} \indexi{ \italic{region_New}}


\example{struct region *region_New()}


\leftindent{\bold{Class procedure description.  }  \italic{region_New }creates 
a new instance of a region. 


\bold{Return value.}  A pointer to the new region. 


\bold{Usage.}  You should not need to call this procedure directly. 

}

\paragraph{Creating an empty region} \indexi{ \italic{region_CreateEmptyRegion}}


\example{struct region * region_CreateEmptyRegion()}


\leftindent{\bold{Class procedure description. 
 }  \italic{region_CreateEmptyRegion}


\bold{Return value.}  A pointer to the new empty region. 


}
\paragraph{Creating a rectangular region} 
\indexi{ \italic{region_CreateRecRegion}}


\example{struct region * region_CreateRectRegion(RegionShape)

struct rectangle * RegionShape;} 


\leftindent{\bold{Class procedure description. 
 }  \italic{region_CreateRectRegion} creates a rectangular region in a 
rectangle. 


\bold{Return value.}  A pointer to the new rectangular region. 


}
\paragraph{Creating an oval region} \indexi{ \italic{region_CreateOvalRegion}}


\example{struct region * region_CreateOvalRegion(RegionShape)

struct rectangle * RegionShape;} 


\leftindent{\bold{Class procedure description. 
 }  \italic{region_CreateOvalRegion} creates an oval region in a rectangle. 


\bold{Return value.}  A pointer to the new oval region.} 

\begindata{bp,538928456}
\enddata{bp,538928456}
\view{bpv,538928456,1177,0,0}
\paragraph{Copying a region} \indexi{ \italic{region_CopyRegion}}


\example{void region_CopyRegion(Destination,Source)

struct region * Destination;

struct region * Source;} 


\leftindent{\bold{Class procedure description.  }  \italic{region_CopyRegion} 
copies a region at the \italic{destination} region to a \italic{source} 
region. 


}
\paragraph{Creating an empty region} \indexi{ \italic{region_XorRegion}}


\example{void region_XorRegion(region, RHS)

struct region * region;

struct region * RHS;} 


\leftindent{\bold{Method description.  }  \italic{region_XorRegion} creates an 
XOR of two regions. 


}
\paragraph{Creating a union of regions} \indexi{ \italic{region_UnionRegion}}


\example{void region_UnionRegion(region, RHS)

struct region * region;

struct region * RHS; }


\leftindent{\bold{Method description.  }  \italic{region_UnionRegion} creates 
a union of two regions. 

}

\paragraph{Creating an intersection of regions} 
\indexi{ \italic{region_IntersectRegion}}


\example{void region_IntersectRegion(region, RHS)

struct region * region;

struct region * RHS;} 


\leftindent{\bold{Method description.  }  \italic{region_IntersectRegion} 
creates a region that is the intersection of two regions. 


}
\paragraph{Creating a subtract region} \indexi{ \italic{region_SubtractRegion}}


\example{void region_SubtractRegion(region, RHS)

struct region * region;

struct region * RHS;} 


\leftindent{\bold{Method description.  } 

}
\begindata{bp,538928520}
\enddata{bp,538928520}
\view{bpv,538928520,1178,0,0}
\paragraph{Clearing a region} \indexi{ \italic{region_ClearRegion}}


\example{void region_ClearRegion(region)

struct region * region; }


\leftindent{\bold{Method description.  }  \italic{region_ClearRegion} clears a 
region. 

}

\paragraph{creating a rectangular region} \indexi{ \italic{region_RectRegion}}


\example{void region_RectRegion(region, NewRegnRect)

struct region * region;

struct rectangle * NewRegnRect;} 


\leftindent{\bold{Method description.  }  \italic{region_RectRegion} takes a 
rectangle and makes it into a region. 


}
\paragraph{Creating a duplicate region} 
\indexi{ \italic{region_DuplicateRegion}}


\example{struct region * region_DuplicateRegion(region)

struct region * region;} 


\leftindent{\bold{Method description.  }  \italic{region_DuplicateRegion} 
duplicates a region. 


\bold{Return value.}  A pointer to the duplicate region. 

}

\paragraph{Offsetting a region} \indexi{ \italic{region_OffsetRegion}}


\example{void region_OffsetRegion(region, DeltaX,DeltaY)

struct region * region;

int16 DeltaY;

int16 DeltaX;} 


\leftindent{\bold{Method description.  }  \italic{region_OffsetRegion} offsets 
a region by \italic{DeltaY }vertically and \italic{DeltaX} horizontally. 

}
\begindata{bp,538928584}
\enddata{bp,538928584}
\view{bpv,538928584,1179,0,0}
\paragraph{Creating an inset region} \indexi{ \italic{region_InsetRegion}}


\example{void region_InsetRegion(region, DeltaX, DeltaY)

struct region * region;

int16 DeltaY;

int16 DeltaX;} 


\leftindent{\bold{Method description.  } 


}
\paragraph{Finding if a region is empty} \indexi{ \italic{region_IsRegionEmpty}}


\example{boolean region_IsRegionEmpty(region)

struct region * region;} 


\leftindent{\bold{Method description.  }  \italic{region_IsRegionEmpty} is 
called to find out if a particular region is empty. 


\bold{Return value.}  If the region is empty, returns True, otherwise False. 

}

\paragraph{Finding if a point is in the region} 
\indexi{ \italic{region_IsPointInRegion}}


\example{boolean region_IsPointInRegion(region,TestPt)

struct region * region;

struct point * TestPt;} 


\leftindent{\bold{Method description.  }  \italic{region_IsPointInRegion} 
takes a point and tries to find it in the region. 


\bold{Return value.}  Boolean:  True if the point is in the region, False 
otherwise. 

}

\paragraph{Finding if a rectangle is in the region} 
\indexi{ \italic{region_IsRectInRegion}}


\example{boolean region_IsRectInRegion(region, TestRect)

struct region * region;

struct rectangle * TestRect;} 


\leftindent{\bold{Method description.  }  \italic{region_IsRectInRegion} tests 
to see if a rectangle is in the region. 


\bold{Return value.}  Boolean:  True if the rectangle is in the region, False 
otherwise. 


}
\paragraph{Finding if two regions are equal} 
\indexi{ \italic{region_AreRegionsEqual}}


\example{boolean region_AreRegionsEqual(region,TestRegion)

struct region * region;

struct region * TestRegion;} 


\leftindent{\bold{Method description.  }  \italic{region_AreRegionsEqual} 
compares two regions to see if they are equal. 


\bold{Return value.}  Boolean:  True if the regions are equal, False 
otherwise. 

}

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,1181,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538375988}
