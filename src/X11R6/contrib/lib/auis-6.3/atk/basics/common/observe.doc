\begindata{text,539031628}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Observable}} \indexi{Observable}


If you want to create an object that can notify other objects that it has 
changed, you should make it observable, that is, you should create it as a 
sub-class of the class \italic{observable}.  Both views and data objects are 
observables.  The class observable provides the methods, class procedures and 
data structures needed for one object, the \italic{observed} or 
\italic{observable} object, to communicate about changes with another object, 
the \italic{observer}.  The observer must also be a subclass of observable. 
 Each observable can have any number of other objects observing it.  The 
observable object is responsible for appropriately notifying observers about 
changes.  If an object wants to observe another object, it must add itself to 
the list of observers.  If an object is observing another object, it can 
expect to be notified when the observed object changes and to be told the 
nature of the change.    It can also expect to be told if the object ceases to 
exist.  Finally, an object can request to be removed from the list of objects 
observing another object. 


\section{Quick reference list for Observable}


\fixedtext{void \bold{observable_}AddObserver }\fixedindent{(struct observable 
*\paramname{observable}, struct thisobject *\paramname{observer});} 

\fixedtext{boolean \bold{observable_}AddRecipient }\fixedindent{(struct 
observable *\paramname{observable}, struct atom *\paramname{trigger}, struct 
basicobject *\paramname{rcvr}, void (*func)(\paramname{)}, long 
\paramname{rock});} 

\fixedtext{void \bold{observable_}DefineTrigger }\fixedindent{(struct 
basicsobject *\paramname{classinstance}, struct atom *\paramname{trigger});} 

\fixedtext{void \bold{observable_}DeleteRecipient }\fixedindent{(struct 
observable *\paramname{observable}, struct atom *\paramname{trigger}, struct 
basicobject *\paramname{rcvr});} 

\fixedtext{long \bold{observable_}DisableCount }\fixedindent{(struct 
observable *\paramname{observable}, struct atom *\paramname{trigger});} 

\fixedtext{void \bold{observable_}DisableTrigger }\fixedindent{(struct 
observable *\paramname{observable}, struct atom *\paramname{trigger});} 

\fixedtext{void \bold{observable_}EnableTrigger }\fixedindent{(struct 
observable *\paramname{observable}, struct atom *\paramname{trigger});} 

\fixedtext{void \bold{observable_}FinalizeObject }\fixedindent{(struct 
observable *\paramname{self});} 

\fixedtext{boolean \bold{observable_}InitializeObject }\fixedindent{(struct 
observable *\paramname{self});} 

\fixedtext{struct atomlist *\bold{observable_}ListTriggers 
}\fixedindent{(struct basicsobject *\paramname{classinstance});} 

\fixedtext{void \bold{observable_}NotifyObservers }\fixedindent{(struct 
observable *\paramname{observable}, long \paramname{value});} 

\fixedtext{void \bold{observable_}ObservedChanged }\fixedindent{(struct 
observable *\paramname{observable}, struct thisobject *\paramname{changed}, 
long \paramname{value});} 

\fixedtext{void \bold{observable_}PullTrigger }\fixedindent{(struct observable 
*\paramname{observable}, struct atom *\paramname{trigger});} 

\fixedtext{void \bold{observable_}RemoveObserver }\fixedindent{(struct 
observable *\paramname{observable}, struct thisobject *\paramname{observer});} 




\section{Overview of observable}


An observable object can have \italic{n} number of observers.  Whenever an 
observable object changes, it must notify its observers that it has changed by 
calling its \italic{NotifyObservers} method. For each observer, 
\italic{observer\smaller{\subscript{i}}} , \italic{NotifyObservers} calls 
\italic{observer}\subscript{\italic{i}'}s \italic{Observedchanged} method 
which each \italic{observer \smaller{\subscript{i} }} must supply.


The class \italic{observable} provides a list of observers and methods for 
adding an observer to the list, removing an observer, and notifying all 
observers that the observed object has changed. 


\subsection{Example}


Suppose that you are creating an object, called \italic{budget},  that will 
contain budget data, and are creating two objects to provide views for the 
budget data: a \italic{spreadsheet} and a \italic{piechart}. 


\paragraph{Defining the observable object} \indexi{Observable++Defining}


You will want to define the object \italic{budget }as as sub-class of the 
class \italic{observable}.  In addition, when you write any \italic{budget_ 
}method that changes the values in the object \italic{budget}, you will want 
to call the method \italic{budget_NotifyObservers.}  You should not need to 
override \italic{observer_NotifyObservers }which simply calls the 
\italic{Observedchanged} procedure for all observers. 


\paragraph{Defining the observers} \indexi{Observable++Defining observers}


When you define \italic{spreadsheet} and \italic{piechart}, you will want to 
create the methods \italic{spreadsheet_Observedchanged} and 
\italic{piechart_Observedchanged,} which should override the default method 
\italic{observable_Observedchanged}.  The \italic{Observedchanged} methods 
should do whatever is necessary for any instances of \italic{spreadsheet} and 
\italic{piechart} that are observing an instance of \italic{budget} to respond 
to the change in the instance. 


\paragraph{Creating and deleting of instances of observers}

\indexi{Observable++Creating}  

\indexi{Observable++Deleting}

 

When you create instances of \italic{spreadsheet} and \italic{piechart}, you 
will want to add them to the list of observers.  When you destroy the 
instances of \italic{spreadsheet} and \italic{piechart}, you will want to 
remove them from the list of observers.  You should not need to override 
\italic{observable}'s methods for adding and removing objects from a list of 
observers. 



\paragraph{Creating an instance of an observable} \indexi{Observable++Creating}

\indexi{ \italic{observable_New}}

\example{struct observable *observable_New()}


\leftindent{\bold{Class procedure description.}  \italic{observable_New} 
creates an instance of \italic{observable}.  The list of observers will be 
empty. 


\bold{Return value.}  Returns a pointer to the newly created instance. 


\bold{Usage.}   You should not need to call \italic{observable_New} directly. 
 If you create an object that is in the sub-class \italic{observable},  it 
will inherit the data structures and methods of \italic{observable, }as 
illustrated in the following example. 


\bold{Example.}  Suppose that \italic{budget} is a sub-class of the class 
\italic{observable}. 


\example{struct budget *bdgt;


bdgt = budget_New();

}
creates an instance of \italic{budget}; \italic{bdgt} points to the newly 
created instance.  Since \italic{bdgt} is an \italic{observable}, it has a 
list of observers that is initialized to \smaller{NULL}; 

}

\begindata{bp,538928520}
\enddata{bp,538928520}
\view{bpv,538928520,1190,0,0}
\paragraph{Adding an object to a list of an object's observers} 
\indexi{Observable++Adding an observer}\indexi{ \italic{observable_AddObserver}}

\example{void observable_AddObserver(observed, observer)

register struct observable *observed;

register struct observable *observer;} 


\leftindent{\bold{Method description.}  \italic{observable_AddObserver} adds 
\italic{observer} to the list of objects that are viewing \italic{observed}. 


\bold{Usage.}  If you want the one object, \italic{object2}, to be notified 
whenever another object, \italic{object1}, changes, you should call 
\italic{observable_AddObserver (object1, object2)}.  When creating a sub-class 
of \italic{observable}, you should not need to override this method. 


\bold{Example.}  Suppose that \italic{budget} is a sub-class of the class 
\italic{observable} and that \italic{spreadsheet} and \italic{piechart} are 
objects that provide users with views onto the object \italic{budget}.  Then 
after creating instances of the views, you should add them to the list of 
observers of the instance of budget: 

\example{
struct budget *bdgt;

struct piechart *pchart;

struct spreadsheet *sprdsheet;


bdgt = budget_New();

pchart = piechart_New();

sprdsheet = spreadsheet_New();


budget_AddObserver (bdgt, pchart);

budget_AddObserver (bdget, sprdsheet);

}
}
\begindata{bp,538928584}
\enddata{bp,538928584}
\view{bpv,538928584,1191,0,0}
\paragraph{Notifying an object's observers that it has changed} 
\indexi{Observable++Notifying observers}\indexi{ 
\italic{observable_NotifyObservers}}

\example{void observable_NotifyObservers(observed, status)

register struct observable *observed;

long status;} 

\leftindent{
\bold{Method description.}  \italic{observable_NotifyObservers} notifies all 
the observers of \italic{observed} that it has changed and now has the status, 
\italic{status}. 


The parameter \italic{status} can be one of the following values: 


\leftindent{\formatnote{\italic{observer}_\smaller{OBJECTDESTROYED}\
\formatnote{  --  }The object \italic{observed} has been destroyed.


\smaller{NULL}\formatnote{  --  }The object \italic{observed} has changed in 
some unspecified

way.

}}
You could create your own set of status codes for particular objects.  Codes 
should be greater than 0.  This is really a flag to indicate that the observed 
object has been destroyed. 


\bold{Usage.}  If you create an observable object, then whenever the 
\italic{observable} object changes values, you should call 
\italic{NotifyObservers}.  When creating a sub-class of \italic{observable}, 
you should not need to override this method. 


\bold{Example.}  Suppose that you are creating the object \italic{budget,} a 
sub-class of the class \italic{observable} and that \italic{spreadsheet} and 
\italic{piechart} are objects that provide users with views onto the object 
\italic{budget}.  Suppose further that you are writing a method, 
\italic{budget_InsertString}, that you intend to use to insert text into 
budget cells.  When you write \italic{InsertString}, you should include a call 
to \italic{NotifyObservers}: 

\example{
budget_InsertString (bdgt, bcell, pos, string, strlen)

struct budget *bdgt;

struct budgetcell *bcell;

long pos;

char *string;

long strlen; \{

    budget_InsertCharacters (bcell, pos, string, strlen);

    budget_NotifyObservers (bdgt, NULL);

\}

}

The call \italic{budget_NotifyObservers} insures that any observers (e.g., 
instances of \italic{spreadsheet} or \italic{piechart}) are notified of the 
change in the cell value. 

}

\begindata{bp,538927560}
\enddata{bp,538927560}
\view{bpv,538927560,1192,0,0}
\paragraph{Taking action when notified that an observed object has changed} 
\indexi{Observable++Observing a change}

\indexi{ \italic{observable_ObservedChanged}}

\example{void observable_ObservedChanged(observer, observed, status)

struct observable *observer;

struct observable *observed;

long status;} 

\leftindent{
\bold{Method description.}  \italic{observable_ObservedChanged} should take 
whatever action is appropriate for the object \italic{observer} to take, given 
that the object \italic{observed} has changed and now has the status, 
\italic{status}. 


The parameter \italic{status} can be one of the following values: 

\leftindent{
\formatnote{\italic{observer}_\smaller{OBJECTDESTROYED}\formatnote{  --  }The 
object \italic{observed} is has been destroyed.


\smaller{NULL}\formatnote{  --  }The object \italic{observed} has changed in 
some unspecified

way.

}}
You could create your own set of status codes for particular objects. 


\bold{Usage.}  If you are creating an object that will observe another object, 
you should create an \italic{ObservedChanged} method that overrides 
\italic{observable_ObservedChanged}.  The method should do whatever it needs 
to do when the \italic{observed} object changes (e.g., call 
\italic{WantUpdate}).  If you fail to supply this method, it will default to 
its parent method.  The default method, \italic{observable_ObservedChanged,} 
is a no-op. 


\bold{Example.}  Suppose you are creating the object spreadsheet which will be 
observing the object budget.  You should create the method 
\italic{spreadsheet_ObservedChanged}: 


\example{
spreadsheet_ObservedChanged (sprdsheet, bdgt, status)

struct spreadsheet *sprdsheet;

struct budget *bdgt;

long status; \{

    if (status == observer_OBJECTDESTROYED)

          spreadsheet_WantUpdate(sprdsheet, sprdsheet);

\}}

}
\begindata{bp,538928712}
\enddata{bp,538928712}
\view{bpv,538928712,1193,0,0}
\paragraph{Removing an observer from the list of an object's observers} 
\indexi{Observable++Removing an observer}

\indexi{ \italic{observable_RemoveObserver}}

\example{void observable_RemoveObserver(observed, observer)

register struct observable *observed;

register struct observable *observer;} 


\leftindent{\bold{Method description.}  \italic{observable_RemoveObserver} 
removes the object \italic{observer} from the list of objects observing 
\italic{observed}. 


\bold{Usage.}  If you no longer want an object, \italic{object2}, to be 
notified of changes to \italic{object1}, you should call 
\italic{observer_RemoveObserver(object1, object2)}.  The usual place to do 
this is in the object's \italic{FinalizeObject} class procedure.  When 
creating a sub-class of \italic{observable}, you should not need to override 
this method. 


\bold{Example.}  Suppose you are creating the object \italic{spreadsheet 
}which will be observing the object \italic{budge}t.  You should include a 
call to \italic{budget_RemoveObserver} in spreadsheet's \italic{FinalizeObject} 
class procedure: 

\programexample{
void spreadsheet_FinalizeObject (sprdsheet)

struct spreadsheet *sprdsheet;\{

    if  (sprdsheet->budget != NULL) \{

        budget_RemoveObserver(sprdsheet->budget, sprdsheet);

    \}

\}

}
}



\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,1195,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,539031628}
