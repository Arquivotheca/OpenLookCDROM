\begindata{text,538471384}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Menu List}}

\indexi{Menu lists}\indexi{Menus}


Menu lists provide stacks of menu cards that a user can pop-up within the body 
of your program's windows.  Each menu list corresponds to one stack of menu 
cards.  Your program can have only one stack of menu cards per window, but any 
number of cards can be in a stack.  Each card in the stack can have a title 
and any number of menu items. 



\section{Quick reference list for Menulist}



\fixedtext{void \bold{menulist_}AddToML }\fixedindent{(struct menulist 
*\paramname{menulist}, char *\paramname{menuString}, struct procTableEntry 
*\paramname{menuProc}, long \paramname{functionData}, long \paramname{mask});} 



\fixedtext{void \bold{menulist_}ChainAfterML }\fixedindent{(struct menulist 
*\paramname{menulist}, struct menulist *\paramname{chainee}, long 
\paramname{key});} 

\fixedtext{void \bold{menulist_}ChainBeforeML }\fixedindent{(struct menulist 
*\paramname{menulist}, struct menulist *\paramname{chainee}, long 
\paramname{key});} 

\fixedtext{void \bold{menulist_}ClearChain }\fixedindent{(struct menulist 
*\paramname{menulist});} 

\fixedtext{void \bold{menulist_}ClearML }\fixedindent{(struct menulist 
*\paramname{menulist});} 

\fixedtext{struct menulist *\bold{menulist_}Create }\fixedindent{(struct view 
*\paramname{view});} 

\fixedtext{void \bold{menulist_}DeleteFromML }\fixedindent{(struct menulist 
*\paramname{menulist}, char *\paramname{menustring});} 

\fixedtext{struct menulist *\bold{menulist_}DuplicateML }\fixedindent{(struct 
menulist *\paramname{menulist}, struct view *\paramname{view});} 

\fixedtext{void \bold{menulist_}FinalizeObject }\fixedindent{();} 

\fixedtext{struct menulist *\bold{menulist_}GetChainedML }\fixedindent{(struct 
menulist *\paramname{menulist}, long \paramname{key});} 

\fixedtext{\bold{menulist_}GetMask }\fixedindent{(struct menulist 
*\paramname{menulist});} 

\fixedtext{void \bold{menulist_}IncrementMLVersion }\fixedindent{();} 

\fixedtext{boolean \bold{menulist_}InitializeObject }\fixedindent{(struct 
menulist *\paramname{self});} 

\fixedtext{\bold{menulist_}ItemIsEnabled }\fixedindent{(struct menulist 
*\paramname{menulist}, \paramname{item});} 

\fixedtext{struct menulist *\bold{menulist_}NextAfterMC }\fixedindent{(struct 
menulist *\paramname{menulist});} 

\fixedtext{struct menulist *\bold{menulist_}NextBeforeMC }\fixedindent{(struct 
menulist *\paramname{menulist});} 

\fixedtext{boolean \bold{menulist_}NextME }\fixedindent{(struct menulist 
*\paramname{menulist}, char **\paramname{outString}, long 
*\paramname{outData}, struct procTable **\paramname{outProc});} 

\fixedtext{int \bold{menulist_}NextMLVersion }\fixedindent{();} 

\fixedtext{boolean \bold{menulist_}SetMask }\fixedindent{(struct menulist 
*\paramname{menulist}, long \paramname{mask});} 

\fixedtext{void \bold{menulist_}SetView }\fixedindent{(struct menulist 
*\paramname{menulist}, struct view *\paramname{view});} 

\fixedtext{void \bold{menulist_}UnchainML }\fixedindent{(struct menulist 
*\paramname{menulist}, long \paramname{key});} 



\section{Overview of menu lists}


\subsection{Menus and menu chains}\indexi{Menu chains} \indexi{Menulist++Chain}

\indexi{Menulist++Cards}


Each menu list contains a stack of menu cards.  There are methods for adding 
menu cards to the stack and deleting them, adding menu items to a card and 
deleting them, and deleting all the cards from the stack. 


In the \bold{Andrew ToolKit}, an object can contain other objects.  For 
example, a multi-media editor may contain a drawing editor.  Since an object 
may not know what other objects it will contain in advance, there must be a 
protocol that allows objects to coordinate the menu items that each object may 
add or delete from the stack of menus.  For example, if the multi-media editor 
and the drawing editor both add the menu item \bold{Quit}, there must be a way 
to decide which menu item takes priority.  \italic{Menu chains} establish the 
priority of menu items.  Menu chains work according to the following protocol: 
 Each object posts the menus that it wants.  If the object is contained in 
another object, the parent object determines the placement of the child's menu 
list in a menu chain. 


If a menu list \italic{ml}\italic{\subscript{j}}occurs after the menu list 
\italic{ml}\italic{\subscript{i}} on the menu chain, then 
\italic{ml}\italic{\subscript{j}}'s menus take precedence over 
\italic{ml}\italic{\subscript{i}}'s.  Thus, a parent object can decide that 
its menus should have precedence over its child's menus, or that its child's 
menus should have precedence.  The usual way to decide precedence is based on 
input focus:  the menus of the object with the input focus should have 
precedence. 



\subsection{Protocols}


An object will normally define its menus when it is first loaded.  In this 
case, the object's class procedure, \italic{InitializeClass}, will create a 
menu list and add its menu items to the menus.  Normally, the object will 
create all the menu lists it will ever use.  At this point, the menu items are 
defined, but they are not yet visible to the user. 


There is a method that enables all objects in the same class to share menus. 
 To make use of this method, when an instance of an object is created, its 
\italic{InitializeObject} method should not define the menus, but should 
\italic{duplicate} the menus of its class. 


Eventually, the menu list must be posted to any parents and finally to the 
\italic{Interaction Manager}.  The \italic{Interaction Manager} uses the 
decision rule that the object in the current input focus should control which 
menus are available to the user.  When an object receives the input focus, it 
should post the menu list that it wants to have displayed to the user.  When a 
child posts menus, its parent's \italic{post menu} method is called.  If a 
parent object wants to control which menus appear, it should save all its 
children's menu lists when it creates the children.  After the parent has 
created all its children, it should create its own menu list, and chain its 
children's menu lists into the menu chain according to the priority it 
desires.  Then in its \italic{post menu} method, it should post the chained 
list.  The menu list that the top-most object posts defines the complete set 
of menu items that the user will see. 



\subsection{Naming menu cards and items} \indexi{Menulist++Naming menu items}


Menu list entries have the form of: 


\example{card name~prioritynumber,item name,~prioritynumber: procedure}


Only the item name is required.  Priority numbers are always two digits.  The 
first digit for the card priority indicates the card number, the second digit 
is usually zero, unless there are sub-menus.  In the cluster priority, the 
first digit is the cluster number, and the second, the order in that cluster. 
 Thus the Mail/News menu card in typescript is defined as: 



\leftindent{Mail/News~30,Read Mail~13:readmail

Mail/News~30,Read News~15:messages

Mail/News~30,Send Message~25:sendmessage

Mail/News~30,Send Comment~33:sendmessage advisor}



The name of the menu cards is Mail/News, and it is the third card in the 
stack.  There are three clusters of menu items.  The first cluster contains 
Read Mail and Read News menu items which call readmail and messages 
respectively.  Then there is a space, followed by Send Message, another space, 
then Send Comment.  Note that the priority numbers allow for additions of new 
menu items. 



\subsection{Menu masks} \indexi{Menulist++Masks}


Each menu item has a bitmask associated with it, defined by menulist_AddToML's 
last argument (or indirectly through the new field in bind_Description).  Each 
menulist also has a bitmask associated with it, defined with menulist_SetMask. 





In general, if you change the mask on a menulist, you should repost it 
(SetMask returns a boolean, which is TRUE if the mask changes, to facilitate 
this). 


When a menulist is installed, each item is installed only if ((I&M)==I), where 
I is the bitmask on the item and M is the bitmask on its associated menulist. 


As an example of how the construct might be used, you might define some flags 
in your program: 


\programexample{
#define FOO_MENUS 0x1

#define BAR_MENUS 0x2

#define BAZ_MENUS 0x4


...


     menulist_AddToML(myml,"(1) Do baz thing",...,FOO_MENUS);

     menulist_AddToML(myml,"(2) Do bar thing",...,"BAR_MENUS);

     menulist_AddToML(myml,"(3) Do baz thing",...,"BAZ_MENUS);

     menulist_AddToML(myml,"(4) Bar-ify abaz",...,"BAR_MENUS+BAZ_MENUS);



}Then at various points in your program: 

\programexample{
	/* turn on foo menu items */ 


if(menulist_SetMask(myml,menulist_GetMask(myml)|FOO_MENUS))


	    ack_PostMenus(self,myml);


     ....


	/* turn off foo menu items */ 


if(menulist_SetMask(myml,menulist_GetMask(myml)&~FOO_MENUS))


	    ack_PostMenus(self,myml);


}
And so on.  Items 1 2 and 3 will show up only if the FOO, BAR, and BAZ bits 
are set in the menulist's mask.  Item 4 will show up if *both* the BAR and BAZ 
bits are set.  A zero for the item mask means that item will always show up on 
this menulist. 



\begindata{bp,538929288}
\enddata{bp,538929288}
\view{bpv,538929288,1216,0,0}
\subsection{Creating menu lists}


\paragraph{Creating an instance of a menu list} \indexi{ \italic{menulist_New}}

\indexi{Menulist++Creating}

\example{struct menulist *menulist_New ()

}
\leftindent{\bold{Class procedure description.}  \italic{menulist_New} creates 
a new, empty menu list, but does not assign it a view. 


\bold{Return value.}  Returns a pointer to the newly created menu list. 


\bold{Usage.}  You  can have any number of menu lists.  Each list should 
describe the menu items that your application needs at a given time.   If you 
are creating an object that is going to have menus, you should declare an 
\italic{InitializeClass} class procedure and create all the menus your object 
will ever need in it. 


This procedure is used primarily for creating a prototype menu list, which can 
be duplicated later.  If you are creating a menu list for a particular view, 
you can call instead \italic{menulist_Create} below. 



\bold{Example.}  Suppose you are creating a \italic{helloworld} object, then 
you would declare a \italic{helloworld__InitializeClass} procedure,

\example{
struct menulist *hwmlist;

void helloworld__InitializeClass() \\\{


         hwmlist = menulist_New();


}which creates a new menulist and saves the pointer to it in the variable, 
\italic{hwmlist}. 


}


\paragraph{Creating a menu list and associating it with a view}

\indexi{ \italic{menulist_Create}}

\indexi{Menulist++Association with view}\example{struct menulist 
*menulist_Create(,view)

struct view *view;} 


\leftindent{\bold{Class procedure description.}  \italic{menulist_Create} 
creates a new menu list and assigns it to a view by calling 
\italic{menulist_New} and \italic{menulist_SetView}. 


\bold{Return value.}  A pointer to the new menu list. 


\bold{Usage.}  If you want to create menus for a particular view, then you 
should call \italic{menulist_Create}. 

}
\begindata{bp,538928712}
\enddata{bp,538928712}
\view{bpv,538928712,1217,0,0}
\subsection{Menu list versions}


\paragraph{Getting the next menu list version number}


\indexi{ \italic{menulist_NextMLVersion}}

\indexi{Menulist++Version}

\example{int menulist_NextMLVersion()

}
\leftindent{\bold{Class procedure description.} 
 \italic{menulist_NextMLVersion} gets the next menu list version. 


\bold{Return value.}  Returns the next menu list version number. 


\bold{Usage.}  The application programmer should not need to call this 
procedure; it is usually called through the interaction manager.  The 
application programmer should not need to call this procedure; it is usually 
called through the interaction manager. 

}


\paragraph{Changing the menu list version number}

\indexi{ \italic{menulist_IncrementMLVersion}}

\indexi{Menulist++Versions}

\example{void menulist_IncrementMLVersion()

}
\leftindent{\bold{Class procedure description.} 
  \italic{menulist_IncrementMLVersion()} increments the menu list version by 
one. 


\bold{Usage.}  The application programmer should not need to call this 
procedure; it is usually called through the interaction manager.  The 
application programmer should not need to call this procedure; it is usually 
called through the interaction manager. 

}
\begindata{bp,538927560}
\enddata{bp,538927560}
\view{bpv,538927560,1218,0,0}
\subsection{Copying a menu list}


\paragraph{Duplicating a menu list}

\indexi{ \italic{menulist_DuplicateML}}

\indexi{Menulist++Duplicating}


\example{struct menulist *menulist_DuplicateML(mlist, view)

struct menulist *mlist;

struct view *v;} 

\leftindent{
\bold{Method description.}   \italic{menulist_DuplicateML} duplicates the menu 
list, \italic{mlist} and sets the duplicate to the view, \italic{v}. 


\bold{Return value.}  Returns a pointer to the duplicate menu list. 


\bold{Usage.}    \italic{menulist_DuplicateML} enables all objects in the same

class to share menus.  To make use of it, you should declare a global menu 
list variable and assign it to the result of menulist_New in the class 
procedure InitializeClass; then declare an \italic{InitializeObject} method 
and in it, call \italic{menulist_DuplicateML }with the global menu list and a 
pointer to the instance of the object.   Thus, you can create a prototype, 
uncorrupted menu list with \italic{menulist_New}, and make copies of it for 
specific views using \italic{menulist_DuplicateML}. 


\bold{Example.}  For example, suppose you are creating a \italic{helloworld} 
object and wanted each instance to share menus.  Suppose that the result of 
\italic{menulist_New }is in the global variable \italic{hwmlist}.  Then the 
\italic{helloworld_InitializeObject} method,

\example{
struct menulist *hwmlist;

struct helloworld *hw;


void helloworld__InitializeObject(hw) \\\{


hw->menulist = menulist_DuplicateML(hwmlist,hw);

\\\}

}
sets \italic{hw->menulist}, the menu list of new instance of 
\italic{helloworld} pointed to by \italic{hw} to the menu list of the 
helloworld class, \italic{hwmlist}. 

}
\begindata{bp,538928584}
\enddata{bp,538928584}
\view{bpv,538928584,1219,0,0}
\subsection{Linking views and menu lists}



\paragraph{Associating a view with a menu list}

\indexi{ \italic{menulist_SetView}}

\indexi{Menulist++Association with view}


\example{void menulist_SetView(mlist, v)

struct menulist *mlist;

struct view *v;} 

\leftindent{
\bold{Method description.}  \italic{menulist_SetView} associates the menu 
list, \italic{mlist}. with the view, v. 


\bold{Usage.}  If you duplicate menus, you do not need to call 
\italic{menulist_SetView},since the menus are associated with the view by 
\italic{DuplicateML}.  If you do not duplicate menus, however, you must 
associate the menus with a newly created object;s view:  In 
\italic{InitializeObject}, after calling \italic{newmenus= menulist_New}, you 
should call \italic{menulist_SetView (newmenus, v)} where \italic{v }is the 
view for the newly loaded class. 


\bold{Example.}  For example, suppose you are creating a \italic{helloworld} 
object, but did not want instances to share menus.  Then the 
\italic{helloworld_InitializeObject} method,


\example{struct menulist *hwmlist;

struct helloworld *hw;


void helloworld__InitializeObject(hw) \\\{


  hw->mlist = menulist_New();

  menulist_SetView (hw->mlist, hw);

\\\}

}
associates \italic{hw->mlist}, the menu list of new instance with the new 
instance. 
}\
\begindata{bp,538928520}
\enddata{bp,538928520}
\view{bpv,538928520,1220,0,0}


\subsection{Adding and deleting items}


\paragraph{Adding an item to a menu list}\indexi{ \italic{menulist_AddToML}}

\indexi{Menulist++Adding an item}

\indexi{Menulist++Deleting a}\example{void menulist_AddToML(mlist, item, 
menuProc, functionData,mask)

struct menulist *mlist;

char *item;

struct procTableEntry *menuProc;

long functionData;

long mask;} 


\leftindent{\bold{Method description.}  \italic{menulist_AddToML} adds the 
menu item, \italic{item}, to the stack of menu cards pointed to by 
\italic{mlist}.  \italic{MenuProc} specifies the procedurethat will be called 
when the user selects the menu item.  \italic{functionData} is a long integer 
that will be passed to the \italic{MenuProc} when the menu item is selected. 
If the string specified by \italic{item} is already in the menu list, the 
\italic{MenuProc} and \italic{functionData} associated with the string will be 
changed. The effects of adding a menu item with a string that is the same as 
another menu item in a chained menu list is undefined.  The version number of 
the menu list, \italic{mlist}, is changed automatically, insuring that the 
menu list will be reinstalled when it is posted to the interaction manager. 


\bold{Usage.}  See \italic{Andrew Programmer's Guide to the Window Manager} 
for description of how to work with menus.  Normally, you should call AddtoML 
in \italic{InitializeClass}. 


\bold{Example.}    If you are creating a \italic{helloworld} object with two

menus items, \bold{Center}, which will center 'Hello World' in helloworld's 
rectangle, and \bold{Invert}, which will invert the helloworld's rectangle, 
your code might look like this: 

\example{
struct menulist *hwmlist;

void helloworld__InitializeClass() \\\{

struct proctable_Entry *tempProc;

hwmlist = menulist_New();


tempProc = proctable_DefineProc("helloworld-center", 
Center,&helloworld_classinfo,NULL, "Center the helloworld string.");


menulist_AddToML(hwmlist, "Center", tempProc, NULL);


tempProc = proctable_DefineProc("helloworld-invert", 
Invert,&helloworld_classinfo,NULL, "Invert the helloworld image.");


menulist_AddToML(hwmlist, "Invert", tempProc, NULL);


\\\}

}
}\
\begindata{bp,538928456}
\enddata{bp,538928456}
\view{bpv,538928456,1221,0,0}
\paragraph{Clearing a menu list}

\indexi{ \italic{menulist_ClearML}}

\indexi{Menulist++Clearing}\example{void menulist_ClearML(mlist)

struct menulist *mlist;} 


\leftindent{\bold{Method description.}  \italic{menulist_ClearML} clears the 
menu list, \italic{mlist}.  The menu list version will be changed 
automatically, so that it will be reinstalled by the interaction manager. 


\bold{Usage.}  You should not need to call this method; it is used when 
deleting a menu list.  If you do need to use it, you should not call it if 
there are still instances sharing the menus pointed to by mlist. 


\bold{Example.}  The following checks for any instances that might be sharing 
the menus before calling \italic{menulist_ClearML}: 


if (!mlist->sharedItems)

        menulist_ClearML(mlist); 

}

\paragraph{Deleting an item from a menu list}

\indexi{ \italic{menulist_DeleteFromML}}

\indexi{Menulist++Deleting}\example{void menulist_DeleteFromML(mlist, item)

struct menulist *mlist;

char *item;} 


\leftindent{\bold{Method description.}  Deletes an item from a menu list.} 


\begindata{bp,538271624}
\enddata{bp,538271624}
\view{bpv,538271624,1222,0,0}

\subsection{Menu list hierarchy}


\paragraph{Clearing the precedence chain}

\indexi{ \italic{menulist_ClearChain}}\indexi{Menulist++Precedence}

            \example{void menulist_ClearChain(mlist)

struct menulist *mlist;} 


\leftindent{\bold{Method description.}  Clears the precedence chain to 
\smaller{NULL}. 


\bold{Usage.}  Before deleting a menu list, you should clear its precedence 
chain so that there is no danger of following meaningless pointers. 

}

\paragraph{Assigning the child's menus precedence over the parent's menus}

\indexi{ \italic{menulist_ChainBeforeML}}\indexi{Menulist++Precedence}

\example{void menulist_ChainBeforeML(parentml, childml, key)

struct menulist *parentml;

struct menulist *childml;

long key;} 


\leftindent{\bold{Method description.} \italic{menulist_ChainBeforeML} chains 
the menu list, \italic{childml}, before the menu list, \italic{parentml}. 
 This results in the child's menus, \italic{childml,} taking precedence over 
the parent's, \italic{parentml}.  The parameter \italic{key } is used to 
uniquely identify this menulist on the chain.  If you add a new menulist to 
the chain with the same key as one that is already there, the existing one is 
replaced. Chains are essentially special property lists where the key is given 
by the key argument and the value is the childml menulist. 


\bold{Usage.}  Normally, any unique key will do so one just uses the childml 
value a second time. That is, most calls look like this: 


menulist_ChainBeforeML(self, childml, childml); 


However, there are certain instances where a parent view is managing a number 
of children and has a complex menu structure that it builds from the 
children's menulists and its own menulist. In these cases, it might be useful 
to be able to remove or replace a child's menulist without having to remember 
the menulist explicitly. To do this, one can place the children's menulists 
under "natural" keys, like 1 for the first child, 2 for the second child, 3 
for the third child, and so on. 


\bold{Example.}  A frame may have a menu item called \italic{quit }and its 
parent, an interaction manger, may also have a menu item called\italic{ quit}. 
 The frame's \italic{quit} function will check for modified buffers, but the 
interaction manager's \italic{quit }will not.  If you want the frame's 
\italic{quit} to take precedence when that menu item is chosen, then you would 
chain the frame's menu list before the interaction manager's menu list. 


}

\begindata{bp,538929224}
\enddata{bp,538929224}
\view{bpv,538929224,1223,0,0}
\paragraph{Assigning the parent's menus precedence over the child's menus} 
\indexi{Menulist++Precedence}

\indexi{ \italic{menulist_ChainAfterML}}

\example{void menulist_ChainAfterML(parentml, childml, key)

struct menulist *parentml;

struct menulist *childml;

long key;} 


\leftindent{\bold{Method description.}  \italic{menulist_ChainAfterML} chains 
the menu list, \italic{childml}, after the menu list, \italic{parentml}.  This 
results in the parent's menus, \italic{parentml,}taking precedence over the 
child's, \italic{childml}. 


\bold{Usage.}   If a child's menu list and a parent's menu list containmenu 
items of the same name, but different function, then you would want to use 
either \italic{menulist_ChainBeforeML} or \italic{menulist_ChainAfterML}to 
make the priority clear.  The parameter \italic{key } is used to uniquely 
identify this menulist on the chain.  If you add a new menulist to the chain 
with the same key as one that is already there, the existing one is replaced. 
Chains are essentially special property lists where the key is given by the 
key argument and the value is the childml menulist. 


\bold{Example.}  In the example for \italic{ChainBeforeML} above, if you did 
not want the frame's quit to take precedence, then you would chain it's menu 
list after the interaction manager's menu list with a call to 
\italic{menulist_ChainAfterML}. 

}

\paragraph{Removing a menu list from its precedence chain}

\indexi{ \italic{menulist_UnchainML}}

\indexi{Menulist++Unchaining}

\example{void menulist_UnchainML(mlist, key)

struct menulist *mlist;

long key;} 


\leftindent{\bold{Method description.}  \italic{menulist_UnchainML }removes 
the menu list, \italic{mlist}, from its precedence chain.  The parameter 
\italic{key} is used to quiquely identify the menulist on the menulist chain. 
Chains are essentially special property lists where the key is given by the 
key argument and the value is the childml menulist. 


\bold{Usage.}  If you want to change the priority of a menu list in the chain, 
then you would call this method to unchain the menu list before re-positioning 
it in the chain. 

}

\paragraph{Getting a menu list from the precedence chain}

\indexi{ \italic{menulist_GetChainedML}}

\indexi{Menulist++Getting}

\example{struct menulist *menulist_GetChainedML(mlist,key)

struct menulist *mlist;

long key;} 


\leftindent{\bold{Method description.}  \italic{menulist_GetChainedML} finds a 
menu list in a chain given its association key.  The key is a label assigned 
to the menu list when it is chained. 


\bold{Return value.}  Returns a pointer to the menu list if found; otherwise 
\smaller{NULL}. 


\bold{Usage.}  If you want to get a menu list but you do not know where it is 
in the chain, then you can use this method. 


}\
\begindata{bp,538929032}
\enddata{bp,538929032}
\view{bpv,538929032,1224,0,0}
\paragraph{Getting the next menu item}

\indexi{ \italic{menulist_NextME}}

\indexi{Menulist++Next}

\example{boolean menulist_NextME(mlist, item, outdata, outproc)

struct menulist *mlist;

char **item;

long **outdata;

struct proctable_Entry **outproc;} 


\leftindent{\bold{Method description.}  \italic{menulist_NextME} gets the next 
menu item from a menu list.  \italic{item} will be set to the menu item that 
the usersees; \italic{outdata }will be set to the data that will be sent when 
the user selects the item; \italic{outproc} will be set to the procedure that 
will be called when the user selects the item. 


\bold{Return value.}  Returns \smaller{FALSE} if there are no more menu items; 
\smaller{TRUE} otherwise. 


\bold{Usage.}  To look at all the menu items in a menu list, you should call 
menu_RewindML to set the current item to the first item, and then call 
menu_NextME until it returns \smaller{FALSE}.  Note that the method only 
iterates through the menu list; it will not search associated lists, e.g. a 
stack of cards created by chained menu lists. 

}
\paragraph{Iteration on the before list}

\indexi{ \italic{menulist_NextBeforeMC}}

\indexi{Menulist++Next before}

\example{struct menulist *menulist_NextBeforeMC(mlist)

struct menulist *mlist;} 


\leftindent{\bold{Method description.}   The \italic{menulist_NextBeforeMC} 
method iterates the before list. 


\bold{Usage.}  You can use this macro to do the stepwise loop after the before 
list has been rewound.  Warning:  The design of the code for menulists is 
non-reenterant; if one procedure is iterating over menulists, it must not call 
another procedure that also iterates over the same menulist.  However, a 
problem occurs when the iteration variable is in the menulist rather than in 
the caller.

}

\paragraph{Iteration on the after list}

\indexi{ \italic{menulist_NextAfterMC}}

\indexi{Menulist++Next after}

\example{struct menulist *menulist_NextAfterMC(mlist)

struct menulist *mlist;} 


\leftindent{\bold{Method description.}   \italic{menulist_NextAfterMC} 
iterates the after list. 


\bold{Usage.}  You can use this macro to do the stepwise loop after the after 
list has been rewound. Warning:  The design of the code for menulists is 
non-reenterant; if one procedure is iterating over menulists, it must not call 
another procedure that also iterates over the same menulist.  However, a 
problem occurs when the iteration variable is in the menulist rather than in 
the caller.

}\
\begindata{bp,538929736}
\enddata{bp,538929736}
\view{bpv,538929736,1225,0,0}
\paragraph{Rewinding the menu list}

\indexi{ \italic{menulist_RewindML}}

\indexi{Menulist++Rewinding}

\example{#define menu_RewindML(alist)}


\leftindent{\bold{Macro description.}  \italic{menu_RewindML} is a macro that 
"rewinds," or iterates over the menu list chain. 


\bold{Usage.}  In a stepwise loop situation, you would use this macro to set 
the i=0 condition to the beginning of the menu list. 


}
\paragraph{Rewinding the before menu list}

\indexi{ \italic{menulist_RewindBeforeMC}}

\indexi{Menulist++Rewinding before}\example{#define menu_RewindBeforeMC(alist)

}
\leftindent{\bold{Macro description.}  The \italic{menu_RewindBeforeMC} macro 
does a rewind on the before menu list chain.  It is used by 
\italic{menulist_NextBeforeMC}. 


\bold{Usage.}  In a stepwise loop situation, you would use this macro to set 
the boundary of the loop to the before list only (the portion of the menu 
chain before the menu list). 

}

\paragraph{Rewinding the after menu list}

\indexi{ \italic{menulist_RewindAfterMC}}

\indexi{Menulist++Rewinding after}\example{#define menu_RewindAfterMC(alist)}


\leftindent{\bold{Macro description.}  The \italic{menu_RewindAfterMC} macro 
is similar to \italic{RewindBeforeMC }except the rewinding occurs for the 
after chain.  It is used by \italic{menulist_NextAfterMC}. 


\bold{Usage.}  In a stepwise loop situation, you would use this macro to set 
the loop boundary to the after list only (the portion of the menu chain after 
the menu list). 


}
\paragraph{Getting the menu list version number}


\indexi{ \italic{menulist_GetMLVersion}}

\indexi{Menulist++Versio}\example{#define menulist_GetMLVersion(alist)}

\leftindent{
\bold{Macro description.}  Gets the version number for a menu list.]}





\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,1227,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538471384}
