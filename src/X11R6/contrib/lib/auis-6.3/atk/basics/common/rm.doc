\begindata{text,538471384}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\chapter{\formatnote{Resource Manager} }\indexi{Rm class}  \indexi{Resource 
manager}


The resouce manager, rm, manages resources in the Andrew Toolkit. 


\section{Quick reference list for Rm}



\fixedtext{void \bold{rm_}ContextualPostResource }\fixedindent{(struct 
atomlist *\paramname{context}, *\paramname{path}, long \paramname{data}, 
struct atom *\paramname{type});} 

\fixedtext{void \bold{rm_}GetManyResources }\fixedindent{(struct resourceList 
*\paramname{resources}, struct atomlist *\paramname{name}, struct atomlist 
*\paramname{className});} 

\fixedtext{short \bold{rm_}GetResource }\fixedindent{(struct atomlist 
*\paramname{name}, struct atomlist *\paramname{className}, struct atom 
*\paramname{type}, long *\paramname{data});} 

\fixedtext{boolean \bold{rm_}InitializeClass }\fixedindent{();} 

\fixedtext{void \bold{rm_}PostConverter }\fixedindent{(struct atom 
*\paramname{fromtype}, struct atom *\paramname{totype}, procedure 
\paramname{converter});} 

\fixedtext{void \bold{rm_}PostManyResources }\fixedindent{(struct resourceList 
*\paramname{resources}, struct atomlist *\paramname{context});} 

\fixedtext{void \bold{rm_}PostResource }\fixedindent{(struct atomlist 
*\paramname{path}, long \paramname{data}, struct atom *\paramname{type});} 




\paragraph{Initializing the class} \indexi{ \italic{rm_InitializeClass}}

\example{boolean rm_InitializeClass( classID )

}
\leftindent{\bold{Class procedure description.  }  Initializes the class.} 



\paragraph{Posting a converter} \indexi{ \italic{rm_PostConverter}}

\example{void rm_PostConverter( classID, from, to, converter )

struct atom * from;

struct atom * to;

procedure converter;

}
\leftindent{\bold{Class procedure description.  }  Posts a converter.} 



\paragraph{Posting resources} \indexi{ \italic{rm_PostManyResources}}

\example{void rm_PostManyResources( classID, resources, context )

struct resourceList * resources;

struct atomlist * context;} 


\leftindent{\bold{Class procedure description.  }  Posts many resources into a 
context.} 



\paragraph{Getting a resource} \indexi{ \italic{rm_GetResource}}

\example{short rm_GetResource( classID, name, class, type, data )

struct atomlist * name;

struct atomlist * class;

struct atom * type;

long * data;} 


\leftindent{\bold{Class procedure description.  }  Gets a resource from a 
list.} 

\begindata{bp,538927560}
\enddata{bp,538927560}
\view{bpv,538927560,1174,0,0}
\paragraph{Getting more than one resource} 
\indexi{ \italic{rm_GetManyResources}}

\example{void rm_GetManyResources( classID, resources, name, class, type, data

)

struct resourceList* resources;

struct atomlist * name;

struct atomlist * class;

struct atom * type;

long * data;

}

\leftindent{\bold{Class procedure description.  }  Gets many resources from a 
list.} 



\paragraph{Contextual posting} \indexi{ \italic{rm_ContextualPostResource}}

\example{void

rm_ContextualPostResource( classID, context, path, data, type )

struct atomlist * context;

struct atomlist * path;

long data;

struct atom * type;} 


\leftindent{\bold{Class procedure description.  }  Posts a resource.} 




Note:  Conversion routines are called Convert( fromrock, outputrock) they 
should return FALSE (0) if the conversion fails




\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,1176,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538471384}
