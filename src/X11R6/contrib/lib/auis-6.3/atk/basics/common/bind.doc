\begindata{text,538945396}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{itemize
}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Bind Package}}\indexi{Bind package}


The bind package is used along with the Andrew Toolkit classes \italic{Keymap} 
and \italic{Keystate} in order to set a sequence of keys to a procedure.  For 
example, if you bind \italic{Ctrl-x Ctrl-s} to a procedure called 
\italic{Write_Buffer_to_File}, then when the user types \italic{Ctrl-x 
Ctrl-s}, the \italic{Interaction Manager}  invokes the 
\italic{Write_Buffer_to_File} procedure.  Likewise, if you bind the key stroke 
\italic{a} to \italic{Insert_Character}, then when the user types an 
\italic{a}, the \italic{Interaction Manager} will invoke the procedure 
\italic{Insert_Character}.  For more information on key procedures, see the 
chapter \italic{Keymap}. 



\section{Quick reference list for Bind}



\fixedtext{void \bold{bind_}BindList }\fixedindent{(struct bind_Description 
*\paramname{bl}, struct keymap *\paramname{km}, struct menulist 
*\paramname{ml}, struct classinfo *\paramname{type});} 




\section{Overview of key bindings}


All key bindings for a class must be described in a \italic{bind description}. 
 Binding descriptions contain the following elements: 


\itemize{
\bold{User invocation name}.  In addition to allowing users to invoke a 
procedure by typing the sequence of keys it is bound to, many applications 
allow users to invoke a procedure by its name.  For example, in the EMACS 
editor, the user can save the current file by typing \italic{Ctrl-x Ctrl-s} or 
by typing \italic{ESC-X write-current-file.} The user invocation name is the 
name the user types to invoke the procedure, for example, 
\italic{write-current-file}.  Unlike EMACS, the name should begin with the 
name of the object to avoid collisions among dynamically loaded objects.  For 
example, \italic{helloworldview} uses \italic{helloworld-center} and 
\italic{helloworld-invert} as its user invocation names. 


\bold{Key sequence.}  This is the \smaller{ASCII} string representation for 
the sequence of keys that the user will type to invoke the function.  For 
example, Ctrl-x Ctrl-s would be represented as \italic{" \\\\030\\\\023"}. 


\bold{Key data.}  The data, if any, that should be passed to the procedure 
when the user invokes the procedure through the key sequence.  In this case, 
the data is a "rock," or constant value. 


\bold{Menu entry.}  The menu, if any, that will invoke the procedure.  Menus 
will be discussed in Example 5. 


\bold{Menu data.}  The data, if any, that should be passed to the procedure 
when the user invokes the procedure through the menu item.  In this case, the 
data is a "rock," or constant value. 


\bold{Menu mask.}  The mask, if any, that controls the circumstances under 
which the menu item will appear.  For example, EZ uses menu masks to control 
the menus that appear when a region is selected and when there is no selected 
region.  It should be 0 unless you want to use them. 


\bold{Procedure.}  A pointer to the procedure.  If the procedure is not given, 
the module name must be given.  The module should supply the procedure.  For 
example, EZ invokes the spelling module without supplying a pointer to the 
procedure and the spelling module supplies it. 


\bold{Brief documentation.}  A string that gives a brief description of the 
procedure (something suitable for a command-line description \italic{a la} 
 \smaller{EMACS} \italic{apropos}).  For example, \italic{write-current-file} 
might have the description "Saves current file." 


\bold{Module name.}  The name of the module in which the procedure can be 
found. 

}

\subsection{Creating a key binding}


The description of the key bindings should be stored in a \smaller{NULL} 
terminated array of struct \italic{bind_Description}.  Each entry in the array 
should be a description of a single key binding. 



In general, a bind description must have the user invocation name of the 
procedure, either the key sequence or the menu entry that invokes the 
procedure, the brief documentation, and either the pointer to the procedure or 
the module in which the procedure may be found. 


The rock data is not generally used, but it can be a useful option.  For 
example, in creating a procedure to do screen inversions, you could create two 
key command or menu options, "black-to-white," and "white-to-black." Instead 
of actually writing two separate procedures, however, you could write one 
general "invert" procedure, and pass the procedure an appropriate rock value 
which would tell the procedure which kind of inversion to perform. 



\paragraph{Creating a bind list} \indexi{ \italic{bind_BindList}}

\example{void bind_BindList(classID,bl,km,ml,type)

struct bind_Description *bl;

struct keymap *km;

struct menulist *ml;

struct classinfo *type;} 


\leftindent{\bold{Class procedure description.  } \italic{bind_BindList} 
creates a bind list with specified keymap, menulist, class information.  The 
procedure takes four parameters:  The first is a  description of the key 
bindings, \italic{struct bind_Description}; the second is a  keymap, 
\italic{struct keymap}; the third is a list of menus, \italic{struct menulist} 
 (in this example \smaller{NULL}); and the fourth is the class information, 
\italic{struct classinfo}, which is generated automatically by the class 
preprocessor. 


For any class \italic{x}, to access the class information from the class that 
exports it, you must write \italic{&x_classinfo}  (e.g., 
\italic{&helloworld_classinfo}).  To access the class information from 
everywhere else, you write \italic{class_load("x")} .  For instance,  a file, 
compile.c, which supplies procedures for use with the class \italic{textview} 
(and therefore needs to pass the address of a \italic{textview_classinfo} 
structure to bind_BindList or to a proctable_DefineProc) would use 
class_load("textview"), not &textview_classinfo. 


\bold{Example.}  Two key bindings for a class called \italic{helloworldview} 
are described by the following array, \italic{helloworldviewBindings} which is 
located in the class' \italic{.c} file: 


\programexample{
static struct bind_Description helloworldviewBindings[]=\{

    \{"helloworld-center", "\\003", 0, NULL, 0, 0, Center, "Center the 

helloworld string."\},

    \{"helloworld-invert", "\\011",0, NULL, 0, 0, Invert, "Invert the 
 helloworld

string."\},

    NULL

\};

}

The first entry in the array describes the binding of the key \italic{Ctrl-c} 
to the procedure \italic{Center}.  The first item in the first entry, 
\italic{"helloworld-center,"} is the user invocation name. The second, 
\italic{"\\003,"} is the \smaller{ASCII} string representation of 
\italic{Ctrl-c}.  The next item, \italic{0}, represents the data to be passed 
to the procedure; in this example, none. The next three entries, 
\smaller{NULL},  \italic{0}, \italic{0}, are the menu entry, menu data, and 
menu masks; again, in this example, none.  The next item, \italic{Center}, is 
the name of the procedure that will be bound to the key \italic{Ctrl-c}.  The 
next item, \italic{"Center the helloworld string,"} is the brief 
documentation. 


Likewise, the second entry in the array binds the key \italic{Ctrl-i} to the 
procedure \italic{Invert}.  The third entry in the array is \smaller{NULL} and 
indicates the end of the description of the key bindings.  The actual 
procedure operations would be described elsewhere in the program file. 


}


\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,1328,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538945396}
