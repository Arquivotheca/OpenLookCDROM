\begindata{text,539404080}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Key Recording}}\indexi{Key rec package}  \indexi{Key 
recording}


The key recording package manipulates two types of structures: recordings 
(struct key) and record states (struct keyrec).  Essentially, a recording is a 
sequence of key strokes, mouse hits and menu selections that can be replayed 
at a later time.  A record state variable stores state information used for 
two purposes.  First, it contains the state required to create a recording. 
 This information is used only during the time that the recording is being 
made.   Second, it contains the information required to manage a stack of 
input sources.  When replaying a recording, the record state keeps track of 
where in the recording the replay has reached.  A recording can recursively 
call another recording, in which case the recording state stack is also 
recorded in the record state variable. 


\section{Quick reference list for Keyrec}



\fixedtext{void \bold{keyrec_}Clear }\fixedindent{(struct keyrec 
*\paramname{keyrec});} 

\fixedtext{struct thisobject *\bold{keyrec_}Copy }\fixedindent{(struct keyrec 
*\paramname{keyrec});} 

\fixedtext{void \bold{keyrec_}FinalizeObject }\fixedindent{(struct keyrec 
*\paramname{self});} 

\fixedtext{boolean \bold{keyrec_}InitializeObject }\fixedindent{(struct keyrec 
*\paramname{self});} 

\fixedtext{boolean \bold{keyrec_}NextKey }\fixedindent{(struct keyrec 
*\paramname{keyrec}, enum keyrec_EventType *\paramname{type}, struct view 
**\paramname{view}, union keyrec_KeyValue *\paramname{value1}, union 
keyrec_KeyValue *\paramname{value2}, union keyrec_KeyValue 
*\paramname{value3});} 

\fixedtext{void \bold{keyrec_}RecordEvent }\fixedindent{(struct keyrec 
*\paramname{keyrec}, enum keyrec_EventType \paramname{type}, struct view 
*\paramname{view}, union keyrec_KeyValue \paramname{value1}, union 
keyrec_KeyValue \paramname{value2}, union keyrec_KeyValue \paramname{value3});} 


\fixedtext{boolean \bold{keyrec_}Recording }\fixedindent{(struct keyrec 
*\paramname{keyrec});} 

\fixedtext{boolean \bold{keyrec_}StartPlaying }\fixedindent{(struct keyrec 
*\paramname{keyrec});} 

\fixedtext{boolean \bold{keyrec_}StartRecording }\fixedindent{(struct keyrec 
*\paramname{keyrec});} 

\fixedtext{void \bold{keyrec_}StopPlaying }\fixedindent{(struct keyrec 
*\paramname{keyrec});} 

\fixedtext{boolean \bold{keyrec_}StopRecording }\fixedindent{(struct keyrec 
*\paramname{keyrec});} 



\paragraph{Creating an instance of a key recording} 
\indexi{ \italic{keyrec_New}}

\example{struct keyrec *keyrec_New()

}
\leftindent{\bold{Class procedure description.  }\italic{keyrec_New} creates 
an instance of a key recording. 


\bold{Return value.}  A pointer to the newly created instance. 


}
\paragraph{Recording a key event} \indexi{ \italic{keyrec_RecordEvent}}

\example{keyrec_RecordEvent(keyrec, type, view, value1, value2, value3)

struct keyrec *keyrec;

enum keyrec_EventType type;

struct view *view;

union keyrec_KeyValue value1;

union keyrec_KeyValue value2;

union keyrec_KeyValue value3;

}

\leftindent{\bold{Method description.  }\italic{keyrec_RecordEvent} adds a new 
key stroke, menu hit or mouse hit to the recording being made in the record 
state. 


\bold{Usage.  } To save the key events in a key recording, a call to 
\italic{keyrec_StartRecording} must have been made prior to the RecordEvent. 
The \italic{keyrec }parameter is a pointer to the record state describing this 
recording operation.  A simple editor would likely have one global record 
state for use when someone is recording a keyboard macro.  The \italic{type} 
parameter is one of \italic{keyrec_Keystroke}, \italic{keyrec_Menu}, or 
\italic{keyrec_MouseHit}.  The \italic{view} parameter simply records the view 
where the event occurred.  The operation-specific parameters\italic{ p1, p2, 
} and\italic{ p3 }describe additional information for each of the possible 
interaction events:  For mouse hits, we record the action, x and y values from 
the window manager's mouse hit procedure; for keyboard input, we simply record 
the character typed.  Menu hits are currently not supported (selecting an item 
from a menu currently results in a predefined string of characters being sent 
to the keyboard input procedure). 

}
\begindata{bp,538929224}
\enddata{bp,538929224}
\view{bpv,538929224,1233,0,0}
\paragraph{Finding if a recording is in progress} 
\indexi{ \italic{keyrec_Recording}}

\example{boolean keyrec_Recording(keyrec)

struct keyrec *keyrec;} 


\leftindent{\bold{Method description.  }\italic{keyrec_Recording} will tell if 
there is a recording in progress or not. 


\bold{Return value.} Boolean:  True if there is a recording in progress, False 
otherwise. 


\bold{Usage.}  This method can be used to decide if a recording should be 
started or stopped, or to ensure that multiple recordings of a single event 
will not occur. 

}

\paragraph{Starting a recording} \indexi{ \italic{keyrec_StartRecording}}

\example{keyrec_StartRecording (keyrec)

struct keyrec *keyrec;} 


\leftindent{\bold{Method description.  }\italic{keyrec_StartRecording} is 
called to reset the record state to its initial state, with no events 
recorded. 


\bold{Return value.}   Boolean: returns True if you were not recording 
previously, and False otherwise. 


\bold{Usage. } This method can be used to start a recording by accepting calls 
to \italic{keyrec_RecordEvent}, or to clear a recording and restart. 

}
 


\paragraph{Stopping a recording} \indexi{ \italic{keyrec_StopRecording}}

\example{keyrec_StopRecording (keyrec)

struct keyrec *keyrec;} 

 

\leftindent{\bold{Method description.  }  \italic{keyrec_StopRecording} stops 
a recording. 


\bold{Return value.}  Boolean:  returns True if you were recording, and False 
otherwise. 


\bold{Usage.}  This method is called to set the record state so that no 
further \italic{keyrec_RecordEvent} calls are accepted. 

}

\begindata{bp,538929032}
\enddata{bp,538929032}
\view{bpv,538929032,1234,0,0}
\paragraph{Clearing a key recording} \indexi{ \italic{keyrec_Clear}}

\example{void keyrec_Clear(keyrec)

struct keyrec *keyrec;} 


\leftindent{\bold{Method description.  }  \italic{keyrec_Clear} clears a key 
recording. 


\bold{Usage.}  A key recording may be cleared, but not destroyed.  Clearing 
and reusing a key record is more efficient than destroying an old record and 
creating a new one. 

}


\paragraph{Playing a key sequence} \indexi{ \italic{keyrec_StartPlaying}}

\example{keyrec_StartPlaying(keyrec)

struct keyrec *keyrec;} 


\leftindent{\bold{Method description.  }  \italic{keyrec_StartPlaying} plays 
out the key sequence.   If the key sequence cannot be played, then all 
continued playing is reset. 


\bold{Return value.}  Boolean.  True if the key sequence can be played, False 
otherwise. 


\bold{Usage.}  You would call this method in order to see a key record. 

}


\paragraph{Stopping key sequence playing} \indexi{ \italic{keyrec_StopPlaying}}

\example{void keyrec_StopPlaying(keyrec)

struct keyrec *keyrec;} 


\leftindent{\bold{Method description.  }  \italic{keyrec_StopPlaying} stops a 
play. 


\bold{Usage.}  This method should be called to stop the play after a call to 
\italic{keyrec_StartPlaying}. 

}

\begindata{bp,538929736}
\enddata{bp,538929736}
\view{bpv,538929736,1235,0,0}
\paragraph{Getting the next key sequence} \indexi{ \italic{keyrec_NextKey}}

\example{keyrec_NextKey(keyrec, type, view, value1, value2, value3)

struct keyrec *keyrec;

enum keyrec_EventType *type;

struct view **view;

union keyrec_KeyValue *value1;

union keyrec_KeyValue *value2;

union keyrec_KeyValue *value3;

}

\leftindent{\bold{Method description.  }  \italic{keyrec_NextKey} gets the 
next key sequence from the key recording structure. 


\bold{Return value.}  Returns a pointer to  the next key event to perform, 
when replaying  a record state.  It returns null if there is no more input in 
the recording. 


\bold{Usage.} This method is used to play back one key sequence. 

}


\paragraph{Copying a key record} \indexi{ \italic{keyrec_Copy}}

\example{keyrec_Copy(keyrec)

struct keyrec *keyrec;} 


\leftindent{\bold{Method description.  } \italic{keyrec_Copy} returns a new 
recording that is an exact copy of the input recording. 


\bold{Return value.  } A pointer to the new recording. 


\bold{Usage.} You would want to copy a key record  to keep the original if you 
plan to change the key record in any way. 

}

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,1237,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,539404080}
