\begindata{text,538487060}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Update List} } \indexi{Update list class}


Updatelist provides a mechanism for  a view to maintain a list of its children 
that have requested an update.  This mechanism is used by the im object.  The 
updatelist mechanism allows views to be added to the list at the same time as 
the updatelist is being cleared. 


Views that use the updatelist will have a WantUpdate method that caches the 
requesting view on its updatelist and pass itself up the view tree.  At some 
later time a call will be made to its Update method.  During that method, the 
updatelist should be cleared.  The updatelist mechanism does not specify an 
order in which the views are updated. 


\section{Quick reference list for updlist}



\fixedtext{void \bold{updatelist_}AddTo }\fixedindent{(struct updatelist 
*\paramname{updatelist}, struct view *\paramname{view});} 

\fixedtext{void \bold{updatelist_}Clear }\fixedindent{(struct updatelist 
*\paramname{updatelist});} 

\fixedtext{void \bold{updatelist_}DeleteTree }\fixedindent{(struct updatelist 
*\paramname{updatelist}, struct view *\paramname{tree});} 

\fixedtext{void \bold{updatelist_}FinalizeObject }\fixedindent{(struct 
updatelist *\paramname{self});} 

\fixedtext{boolean \bold{updatelist_}InitializeObject }\fixedindent{(struct 
updatelist *\paramname{self});} 

\fixedtext{\bold{updatelist_}UpdatesPending }\fixedindent{(struct updatelist 
*\paramname{updatelist});} 



\paragraph{Creating an instance of an update list} 
\indexi{ \italic{updatelist_New}}

\example{struct updatelist_New(updatelis)

struct updatelist *updatelis;} 


\leftindent{\bold{Class procedure description. }\italic{updatelist_New} 
creates an instance of an update list. 


}
\paragraph{Adding a redraw request to an updatelist} 
\indexi{ \italic{updatelist_AddTo}}

\example{void updatelist_AddTo (updatelis, view)

struct updatelist *updatelis;

struct view *view;

}
\leftindent{\bold{Method description.  }  \italic{updatelist_AddTo} adds an 
update request (a call to \italic{view_Update}) for \italic{view} to the 
updatelist pointed to by \italic{ updatelis}. 



}\paragraph{Clearing an updatelist} \indexi{ \italic{updatelist_Clear}}

\example{void updatelist_Clear (updatelis)

struct updatelist *updatelis;} 


\leftindent{\bold{Method description.  }  \italic{updatelist_Clear} removes 
all queued views from  the designated update list \italic{updatelis}, calling 
\italic{view_Update }on each one in turn.  Any views added to updatelis after 
to the call to this method will not have their Update method called.  A second 
call will have to be made (as described above). 

}\
\begindata{bp,538928456}
\enddata{bp,538928456}
\view{bpv,538928456,1171,0,0}
\paragraph{Deleting a tree of updates} \indexi{ \italic{updatelist_DeleteTree}}

\example{void updatelist_DeleteTree(updatelis, tree)

struct updatelist *updatelis;

struct view *tree;} 


\leftindent{\bold{Method description.  }  This method removes from the 
updatelist \italic{updatelis} any references to views that are contained in 
the view tree headed by \italic{tree}. 


\bold{Usage.}  This method is used in conjunction with unlinking the view 
tree.  If updatelis is maintaining its own update list and part of the view 
tree below updatelis is being unlinked, the updatelist must be cleared of the 
views being unlinked. 


\bold{Example.}  All im objects share a global update list.  When an im object 
receive an unlink notification it clears the unlinked views from the global 
update list. 


\example{
im_UnlinkNotification(im, unlinkedTree)

struct im *im;

struct view *unlinkedTree;  \{

    ....


    updatelist_DeleteTree(globalUpdateList, unlinkedTree);

    ....

\}}

}

\paragraph{Determining if there are updates pending} 
\indexi{ \italic{updatelist_UpdatesPending}}

\example{boolean updatelist_UpdatesPending(updatelis)

    struct updatelist *updatelis;} 


\leftindent{\bold{Method description.  }  This method returns TRUE if there 
are any views on the updatelist \italic{updatelis}. 


\bold{Usage.}  This is normally used during a views Update method. 


\bold{Example.}  Since views can be added to the updatelist while it is being 
cleared the proper way to do the updates is: 


\example{
while (updatelist_UpdatesPending(ul))

updatelist_Clear(ul);} 


}

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,1173,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538487060}
