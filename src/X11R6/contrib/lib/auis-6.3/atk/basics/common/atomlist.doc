\begindata{text,539404080}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Atom List}}\indexi{Atom list class}



Atoms are used only by the resource manager package, \italic{rm}, and as such 
are not ordinarily of interest to the applications programmer. 


\section{Quick reference list for Atomlist}



\fixedtext{void \bold{atomlist_}Append }\fixedindent{(struct atomlist 
*\paramname{atomlist}, struct atom *\paramname{newitem});} 

\fixedtext{struct atomlist *\bold{atomlist_}Copy }\fixedindent{(struct 
atomlist *\paramname{oldlist});} 

\fixedtext{void \bold{atomlist_}Cut }\fixedindent{(struct atomlist 
*\paramname{atomlist}, struct atoms *\paramname{mark});} 

\fixedtext{void \bold{atomlist_}DropFirst }\fixedindent{(struct atomlist 
*\paramname{atomlist});} 

\fixedtext{void \bold{atomlist_}FinalizeObject }\fixedindent{(struct atomlist 
*\paramname{trashed});} 

\fixedtext{\bold{atomlist_}First }\fixedindent{(struct atomlist 
*\paramname{atomlist});} 

\fixedtext{boolean \bold{atomlist_}InitializeObject }\fixedindent{(struct 
atomlist *\paramname{self});} 

\fixedtext{void \bold{atomlist_}JoinToBeginning }\fixedindent{(struct atomlist 
*\paramname{atomlist}, struct atomlist *\paramname{otherlist});} 

\fixedtext{void \bold{atomlist_}JoinToEnd }\fixedindent{(struct atomlist 
*\paramname{atomlist}, struct atomlist *\paramname{otherlist});} 

\fixedtext{struct atom *\bold{atomlist_}Last }\fixedindent{(struct atomlist 
*\paramname{atomlist});} 

\fixedtext{\bold{atomlist_}Mark }\fixedindent{(struct atomlist 
*\paramname{atomlist});} 

\fixedtext{short \bold{atomlist_}Memberp }\fixedindent{(struct atomlist 
*\paramname{atomlist}, struct atom *\paramname{list});} 

\fixedtext{void \bold{atomlist_}Prepend }\fixedindent{(struct atomlist 
*\paramname{atomlist}, struct atom *\paramname{newitem});} 

\fixedtext{struct atomlist *\bold{atomlist_}StringToAtomlist 
}\fixedindent{(char *\paramname{string});} 

\fixedtext{\bold{atomlist_}TraversalAtom }\fixedindent{(struct atomlist 
*\paramname{atomlist}, struct atoms *\paramname{loc});} 

\fixedtext{\bold{atomlist_}TraversalNext }\fixedindent{(struct atomlist 
*\paramname{atomlist}, struct atoms *\paramname{loc});} 

\fixedtext{\bold{atomlist_}TraversalStart }\fixedindent{(struct atomlist 
*\paramname{atomlist});} 



\paragraph{Creating an atom list} \indexi{ \italic{atomlist_New}}

\example{void atomlist_New( )

}
\leftindent{\bold{Class procedure description.  }  Creates a new atom list. 

}

\paragraph{Copying an atom list} \indexi{ \italic{atomlist_Copy}}

\example{struct atomlist * atomlist_Copy( oldlist )

struct atomlist * oldlist;} 


\leftindent{\bold{Class procedure description.  }  Copies an atom list.} 



\paragraph{Writing a string to an atom list} 
\indexi{ \italic{atomlist_StringToAtomlist}}

\example{struct atomlist * atomlist_StringToAtomlist( string

)

char * string;} 


\leftindent{\bold{Class procedure description.  }  Adds a string to an atom 
list. 

}

\paragraph{Starting an atom list traversal} 
\indexi{ \italic{atomlist_TraversalStart}}

\example{struct atoms * atomlist_TraversalStart( atomlis )

struct atomlist * atomlis;} 


\leftindent{\bold{Method description.  }  Strarts an atom list traversal. 

}
\begindata{bp,538928456}
\enddata{bp,538928456}
\view{bpv,538928456,1329,0,0}
\paragraph{Getting the next traverse} \indexi{ \italic{atomlist_TraversalNext}}

\example{struct atoms * atomlist_TraversalNext( atomlis, loc )

struct atomlist * atomlis;

struct atoms * loc;} 


\leftindent{\bold{Method description.  }  Performs the next traverse.} 



\paragraph{Setting the traversal atom} \indexi{ \italic{atomlist_TraversalAtom}}

\example{struct atom * atomlist_TraversalAtom( atomlis, loc )

struct atomlist * atomlis;

struct atoms * loc;} 


\leftindent{\bold{Method description.  }  Sets the next traverse atom.} 



\paragraph{Getting the first atom on the atom list} 
\indexi{ \italic{atomlist_First}}

\example{struct atom * atomlist_First( atomlis )

struct atomlist * atomlis;} 


\leftindent{\bold{Method description.  }  Gets the first atom on the list. 

}

\paragraph{Getting the last atom on the atom list} 
\indexi{ \italic{atomlist_Last}}

\example{struct atom * atomlist_Last( atomlis )

struct atomlist * atomlis;} 


\leftindent{\bold{Method description.  }  Gets the last atom on the list.} 


\begindata{bp,538928520}
\enddata{bp,538928520}
\view{bpv,538928520,1330,0,0}
\paragraph{Finding if an atom is on an atom list} 
\indexi{ \italic{atomlist_Memberp}}

\example{short atomlist_Memberp( atomlis, key )$$

struct atomlist * atomlis;

struct atom * key;} 


\leftindent{\bold{Method description.  }  Finds if an atom is on the atom 
list.} 



\paragraph{Drop the first atom list item} \indexi{ \italic{atomlist_DropFirst}}

\example{void atomlist_DropFirst( atomlis )

struct atomlist * atomlis;} 


\leftindent{\bold{Method Description.  }Drops the first item of a list.} 



\paragraph{Prepending an atom on the list} \indexi{ \italic{atomlist_Prepend}}

\example{void atomlist_Prepend( atomlis, atom )

struct atomlist * atomlis;

struct atom * atom;} 


\leftindent{\bold{Method description.  }  Prepends an atom to a list. 

}

\paragraph{Appending an atom on the list} \indexi{ \italic{atomlist_Append}}

\example{void atomlist_Append( atomlis, atom )

struct atomlist * atomlis;

struct atom * atom;} 


\leftindent{\bold{Method description.  }  Appends an atom to a list. 

}
\begindata{bp,538929224}
\enddata{bp,538929224}
\view{bpv,538929224,1331,0,0}
\paragraph{Joining a list to the end of another} 
\indexi{ \italic{atomlist_JoinToEnd}}

\example{void atomlist_JoinToEnd( atomlis, otherlist )

struct atomlist * atomlis;

struct atomlist * otherlist;} 


\leftindent{\bold{Method description.  }  Joins one list at the end of 
another. 

}

\paragraph{Joining a list to the beginning of another} 
\indexi{ \italic{atomlist_JoinToBeginning}}

\example{void atomlist_JoinToBeginning( atomlis, otherlist )

struct atomlist * atomlis;

struct atomlist * otherlist;} 


\leftindent{\bold{Method description.  }  Joins one list to the beginning of 
another. 

}

\paragraph{Marking an atom} \indexi{ \italic{atomlist_Mark}}

\example{struct atoms * atomlist_Mark( atomlis )

struct atomlist * atomlis;} 


\leftindent{\bold{Method description.  }  Creates a mark in the list. 

}

\paragraph{Cutting a mark atom} \indexi{ \italic{atomlist_Cut}}

\example{void atomlist_Cut( atomlis, mark )

struct atomlist * atomlis;

struct atoms * mark;} 


\leftindent{\bold{Method description.  }  Cuts the mark out of the list.} 




\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,1333,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,539404080}
