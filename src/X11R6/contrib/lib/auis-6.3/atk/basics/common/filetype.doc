\begindata{text,538490288}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{File Type}}\indexi{File type class} \indexi{File name 
extensions}


An applications program, such as an editor or a printing package, may need to 
know what type of file it is accessing, since it may treat different types of 
files in different ways.  Often, the necessary information can be gleaned from 
the file's data stream, or from the filename extension.  Therefore, a print 
command can print a \italic{.c} file in one format, and a\italic{ .d }or 
\italic{.mss} file in another.  The file type package provides the class 
procedures for accessing and modifying file type information.  File type is 
not an object per se in that it has no associated data object, and therefore 
does not need to be explicitly created.  In general, the file type procedures 
are not called directly by the applications programmer, but called instead by 
the buffer or init packages. Filetype also provides one very useful general 
routine for "canonicalizing" filenames.  This is useful for converting a 
filename typed by the user into a standard (or canonical) format. 


A few of the filetype functions use an attributes structure. This is 
essentially a linked list of key-value pairs. The datatype is implemented in a 
straight forward C fashion as a structure. The structure is as follows: 


\example{struct attributes \{

    struct attributes *next; /* Representation is a linked list. */

    char *key; /* attribute name. */

    union \{ /* Value can either be an integer or a string. */

        long integer;

        char *string;

    \} value;

\};

}

\section{Quick reference list for Filetype}



\fixedtext{void \bold{filetype_}AddEntry }\fixedindent{(char 
*\paramname{extesion}, char *\paramname{dataName}, char 
*\paramname{attributes});} 

\fixedtext{int \bold{filetype_}DeleteEntry }\fixedindent{(char 
*\paramname{extension});} 




\paragraph{Adding an entry to a file type} \indexi{ \italic{filetype_AddEntry}}

\example{void filetype_AddEntry(extension, dataName, attributes)

char *extension, *dataName

char *attributes;} 


\leftindent{\bold{Class procedure description.  }\italic{filetype_AddEntry} 
maps an extension to a data object. 


\bold{Usage.}  The procedure is used to specify that a file with a specific 
extension should use a particular data object. 


\bold{Example.} filetype_AddEntry can be used to specify that a file with the 
extension\italic{ .d }should be edited with a text object. 

}


\paragraph{Deleting an entry} \indexi{ \italic{filetype_DeleteEntry}}

\example{filetype_DeleteEntry(extension)

register char *extension;} 


\leftindent{\bold{Class procedure description. }  filetype_DeleteEntry is used 
to remove a mapping added with filetype_AddEntry.} 

\begindata{bp,538269640}
\enddata{bp,538269640}
\view{bpv,538269640,1300,0,0}
\paragraph{Looking up a file type} \indexi{ \italic{filetype_Lookup}}

\example{char *filetype_Lookup(file, filename, objectID ,attributes)

FILE *file;

register char *filename;

long *objectID;

struct attributes **attributes;} 


\leftindent{\bold{Class procedure description. }\italic{filetype_Lookup} looks 
up a file type for a file.  \italic{file} is the pointer to a file and 
\italic{filename } is the name of the file; one or the other of these 
parameters may be null.  The objectID is used by \italic{data_Write} in the 
data object package. 


\bold{Return value.}   Returns the name of the data object type for the file, 
e.g. "text" or NULL if the file is not in the Toolkit datastream format. 


\bold{Usage.}  If a function of program needs to know what type of file it is 
operating on, it should include a \italic{filetype_Lookup} so that

the information can be read in.    Note:  the value returned through

the attributes parameter contains pointers to static storage.  Its value 
should be used before the next call to the procedure.  If use of the return 
value cannot be guaranteed, you should make a copy of the attributes list. 

}


\paragraph{Canonicalizing a file name} 
\indexi{ \italic{filetype_CanonicalizeFilename}}

\example{void filetype_CanonicalizeFilename(canonicalName, name, maxSize)

char *canonicalName, *name;

int maxSize;} 


\leftindent{\bold{Class procedure description. 
}\italic{filetype_CanonicalizeFilename} will take a path name \italic{name} 
and make it into canonical form.  Thus, if a '/ or '~ is passed to the 
procedure, it would expand the file name appropriately. \italic{maxsize} is 
the maximum length of the path name. 


\bold{Usage.}  If you have an application in which a path name might be 
entered, you should call this procedure to convert the path name to canonical 
form. 


\bold{Example.}  You can use this procedure in an editor for a 
\italic{FindFile} function, for example, where the user may type in a name, 
but might also type in a full path or a path beginning with a ~. 

}

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,1302,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538490288}
