\begindata{text,538490288}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Environ}}\indexi{Environ class} \indexi{Preference files} 
\indexi{User preferences}


Preference files exist so that a user may change certain default parameters 
such as search paths, window displays, window fonts, printing devices, and so 
on.  The elements in a preference file are in the form \italic{variable: 
 value} where \italic{variable }is the name of an environment variable, such 
as \italic{print.printer} or \italic{Typescript.bodyfont}, and \italic{value 
}is a string, a number, or a yes/no depending on the type of variable it is 
associated with. 


A preference file for an Andrew System user might look something like this: 


\programexample{
messages.BinaryOptions:0x40000000/0x40000000, 0x0/0x0

*.fontpath:/usr/andrew/fonts

wm.startup:console MuchVice;typescript

*.mspath:$DEFAULT

wm.Columns: h %45 (v1) %55 (v2)

wm.ShrinkToPosition: -1

wm.BorderStyle: 3

wm.NewMenus:on

print.pathdir:  /cmu/common/printing/spool

print.printer: pine

Readnews.new_news: yes      

Sendmail.bcc: no

readmail.classes:yes

Sendnews.bcc: no

*.bodyfont: AndySans11

*.justified: off

}

In some cases, an application program may need to know what preferences have 
been set by the user, and even override them to ensure the program's 
operation.  The class \italic{Environ} provides class procedures for reading 
and modifying the environment variables in a user's preference file. 




\section{Quick reference list for Environ}



\fixedtext{char *\bold{environ_}AndrewDir }\fixedindent{(char 
*\paramname{str});} 

\fixedtext{void \bold{environ_}Delete }\fixedindent{(char 
*\paramname{variable});} 

\fixedtext{void \bold{environ_}FreeConfigureList }\fixedindent{(struct 
configurelist *\paramname{cList});} 

\fixedtext{char *\bold{environ_}GetConfiguration }\fixedindent{(char 
*\paramname{key});} 

\fixedtext{char *\bold{environ_}GetConfig }\fixedindent{(struct configurelist 
*\paramname{cList}, char *\paramname{key}, boolean \paramname{usedefault});} 

\fixedtext{char *\bold{environ_}GetHome }\fixedindent{(char 
*\paramname{user});} 

\fixedtext{long \bold{environ_}GetProfileInt }\fixedindent{(char 
*\paramname{preference}, long \paramname{defaultValue});} 

\fixedtext{boolean \bold{environ_}GetProfileSwitch }\fixedindent{(char 
*\paramname{preference}, boolean \paramname{defaultValue});} 

\fixedtext{char *\bold{environ_}GetProfile }\fixedindent{(char 
*\paramname{preference});} 

\fixedtext{char *\bold{environ_}Get }\fixedindent{(char 
*\paramname{variable});} 

\fixedtext{char *\bold{environ_}LocalDir }\fixedindent{(char 
*\paramname{str});} 

\fixedtext{boolean \bold{environ_}ProfileEntryExists }\fixedindent{(char 
*\paramname{preference}, boolean \paramname{useDefault});} 

\fixedtext{void \bold{environ_}Put }\fixedindent{(char *\paramname{variable}, 
char *\paramname{value});} 

\fixedtext{struct configurelist *\bold{environ_}ReadConfigureFile 
}\fixedindent{(char *\paramname{filename});} 

\fixedtext{void \bold{environ_}SetProgramName }\fixedindent{(char 
*\paramname{string});} 





\paragraph{Creating an instance of an environ} \indexi{ \italic{environ_New}}

\example{struct environ *environ_New()

}
\leftindent{\bold{Class procedure description.  }  \italic{environ_New} 
creates an instance of an environment variable reader. 


\bold{Return value.}  A pointer to the newly created instance. 


\bold{Usage.}  You would call this procedure if you need to look at or change 
a preference file variable. 

}


\begindata{bp,538271624}
\enddata{bp,538271624}
\view{bpv,538271624,1305,0,0}
\paragraph{Adding a variable} \indexi{ \italic{environ_Put}}

\example{void environ_Put(variable, value)

char *variable, *value;

}
\leftindent{\bold{Class procedure description.  }  \italic{environ_Put} places 
a variable with the specified value into the list of environment variables. 


\bold{Usage.}  If you need to override a variable value in a preference file, 
you would call this method with the name fo the variable, and its new value. 


\bold{Example.}  A function called \italic{Set Printer} can be created for an 
editing window which would override the printer device set up in the 
preferences file, and instead print to whatever printer the user inputs.  So, 
if a user has a \italic{print.printer} set to a printer named\italic{ fir}, 
but the user wants to print on printer \italic{pine}, \italic{Set Printer} 
would change the variable accordingly.  Set Printer would merely call 
\italic{environ_Put} with the variable print.printer and the value pine. 

}

\paragraph{Deleting a variable} \indexi{ \italic{environ_Delete}}

\example{void environ_Delete( variable)

char *variable;

}
\leftindent{\bold{Class procedure description.  }  \italic{environ_Delete} 
deletes a variable from the environment variable list in a user's preference 
file. 


}
\paragraph{Getting a variable} \indexi{ \italic{environ_Get}}

\example{char *environ_Get(variable)

char *variable;

}
\leftindent{\bold{Class procedure description.  }  \italic{environ_Get} gets 
an environment variable from a preference file. 


\bold{Usage.}  This procedure would be used to find a variable value if it is 
not known. 


\bold{Example.}  A text view might call this procedure to look up the 
preference for a body font that has been set by the user for text views. 

}
\begindata{bp,538271496}
\enddata{bp,538271496}
\view{bpv,538271496,1306,0,0}
\paragraph{Getting a profile from a preference file} 
\indexi{ \italic{environ_GetProfile}}

\example{char *environ_GetProfile( preference)

char *preference;

}
\leftindent{\bold{Class procedure description.  }  \italic{environ_GetProfile} 
gets a preference string from the named preference file. 


\bold{Usage.}  This procedure would be used to get an entire string from a 
file, as opposed to the values of a specific variable. 


}
\paragraph{Getting the variable value if the value is a switch} 
\indexi{ \italic{environ_GetProfileSwitch}}

\example{boolean environ_GetProfileSwitch(preference, defaultValue)

char *preference;

boolean defaultValue;} 


\leftindent{\bold{Class procedure description. 
 }  \italic{environ_GetProfileSwitch} gets the profile switch for a preference 
file. 


\bold{Return value.}  Boolean: Yes or No. 


\bold{Usage.}  A profile switch is a yes/no question in the preference file. 
This procedure can retrieve information of a profile switch form. 


\bold{Example.}  For example, the variable \italic{Sendmail:bcc} asks if mail 
should be sent with a blind copy or not.  The value for the variable is either 
a yes or no. \italic{ environ_GetProfileSwitch }can find if the variable is 
set to yes or no and the default value. 

}

\begindata{bp,538271432}
\enddata{bp,538271432}
\view{bpv,538271432,1307,0,0}
\paragraph{Getting a variable value if the value is a number} 
\indexi{ \italic{environ_GetProfileInt}}

\example{long environ_GetProfileInt( preference, defaultValue)

char *preference;

long defaultValue;} 


\leftindent{\bold{Class procedure description. 
 }  \italic{environ_GetProfileInt} gets value for a variable if the value is a 
number. 


\bold{Return value.}  The value and the default value. 


\bold{Usage.}  If the value of a variable is in number form, then you can use 
this procedure to retrieve that information. 


\bold{Example.} The display of the console in an Andrew window display can be 
controlled by the variable\italic{ console.column }whose default value is 1 
indicating the top left corner.  The value can be changed by the user so the 
console will appear in different locations on the screen. 
 \italic{environ_GetProfileInt }can get this information if needed. 

}


\paragraph{Finding if a profile entry exists} 
\indexi{ \italic{environ_ProfileEntryExists}}

\example{boolean environ_ProfileEntryExists( preference, useDefault)

char *preference;

boolean useDefault;} 


\leftindent{\bold{Class procedure description.  }  Checks to see if a profile 
entry exits.} 



\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,1309,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538490288}
