\begindata{text,537993528}
\textdsversion{12}
\template{default}
\define{global
}
# Copyright 1992 Carnegie Mellon University. All rights reserved.

# $Disclaimer: 

# Permission to use, copy, modify, and distribute this software and its 

# documentation for any purpose is hereby granted without fee, 

# provided that the above copyright notice appear in all copies and that 

# both that copyright notice, this permission notice, and the following 

# disclaimer appear in supporting documentation, and that the names of 

# IBM, Carnegie Mellon University, and other copyright holders, not be 

# used in advertising or publicity pertaining to distribution of the software 

# without specific, written prior permission.

# 

# IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

# DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

# ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

# SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

# BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

# DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

# WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

# ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

# OF THIS SOFTWARE.

#  $

#~group X Related Preferences


#~type boolean

#~view string boolean

#~help

When yes ATK applications will use XInstallColormap to force the 
installation of a colormap.  This should only be set to yes when using a 
window manager which fails to conform to the ICCCM conventions for colormap 
management.  The symptom of such a failure is that images will appear with 
completely bogus colors.

#~endhelp

ForceInstallColormaps: no


#~type boolean

#~view string boolean

#~help

This is used by the X11 version of ATK to tell you when a font substitution 
is happening.  When set to "yes," if a program asks for one font, it 
doesn't exist and another font is used, you will be notified.

#~endhelp

AnnounceFontSubstitutions: yes


#~type string list ,

#~view string stringlist

#~help

Allows you to change the ordering of menus.  Each menu has a priority from 
1 to 100, menus with lower priority are placed to the left in the menubar 
and towards the front in the "stack of cards".  The format for this 
preference is:


\example{*.CardOrder: "Card1Name~\italic{Card1Priority}", 
"Card2Name~\italic{Card2Priority}"

}
(The above may appear as two or more lines on the screen but is really only 
one line.)   The strings in italics should be replaced by a number from 1 
to 100 indicating the priority of the corresponding menu.  (Remember: never 
put styles in your preferences file, they are used here only for ease of 
discussion.)

This preference can change the order menus appear in \bold{both} the stack 
of cards and in the menubar.  The ~\italic{CardPriority} strings can be 
omitted for some or all of the cards. In this case the first card will 
default to a priority of 10, and any others will default to the priority of 
the previous card plus the value of the \bold{PriorityStep} preference.

#~endhelp

CardOrder:


#~type string list ,

#~view string stringlist

#~help

This preference allows you to control the size difference when requesting X 
fonts with the Andy font names.  (e.g. andysans12 by default maps to a 14 
point helvetica font.)  One suggested setting for this preference is:

75:2,100:0


The first number is the DPI of the display, typically near 75, or 100 dpi 
(dots per inch).  The second is the 'fudge' factor to be added to the andy 
font sizes to get the corresponding X font size.  (See the output of 
xdpyinfo for the DPI of your display.)

#~endhelp

AndyFontsFudgeFactor: 75:2


#~type integer

#~view integer slider

#~range 75 150

#~help

If your X server reports an incorrect DPI (dots per inch), you can use this 
preference to override the server's report for ATK applications.

#~endhelp

XDPI:


#~type integer

#~view integer slider

#~range 75 150

#~help

If your X server reports an incorrect DPI (dots per inch) horizontally, you 
can use this preference to override the server's report for ATK 
applications.

#~endhelp

XHorizontalDPI:


#~type integer

#~view integer slider

#~range 75 150

#~help

If your X server reports an incorrect DPI (dots per inch) vertically, you 
can use this preference to override the server's report for ATK 
applications.

#~endhelp

XVerticalDPI:


#~type integer

#~view integer slider

#~range 1 99

#~help

The amount to offset the priority of each menu from the previous menu in 
the \bold{CardOrder} preferences if no priority is given.

#~endhelp

PriorityStep: 5


#~type boolean

#~view string boolean

#~help

This is used by the X11 version of ATK to decide whether to try to 
automatically add the appropriate font directory to the X server's font 
path.  The appropriate directory is usually $ANDREWDIR/X11fonts, but may be 
set with the AndrewFontDir preference or the ANDREWFONTDIR environment 
variable.

#~endhelp

AddFontPath: yes


#~type string

#~view string

##~defaultproc xim-fontdir-default

#~help

This is used by the X11 version of ATK to decide what directory to add to 
the X server's font path to try to get the Andrew fonts.

#~endhelp

AndrewFontDir: \



#~type boolean

#~view string boolean

#~help

This is used by the X11 version of ATK to decide whether or not to redirect 
error messages printed to stderr to the ATK console program or not.  The 
ATKCONSOLEHOST environment variable can also be used to direct error 
messages to a console on a different host than that indicated by $DISPLAY. 
 It can also be used to indicate that a different port number should be 
used.  e.g.  setenv ATKCONSOLEHOST foo:9000 would send error messages to 
the host foo, at port 9000.

#~endhelp

ErrorsToConsole: yes


#~type boolean

#~view string boolean

#~help

Indicates whether menu items with key equivalents should have those key 
equivalents displayed on the pulldown menu cards and on the popup menus 
(unless overriden by the MenubarShowKeys or PopupsShowKeys preferences).

#~endhelp

MenusShowKeys: yes


#~type boolean

#~view string boolean

#~help

Indicates whether menu items which are not currently applicable should be 
displayed.  If they are displayed they will be grayed out.

#~endhelp

MenusShowInactive: yes


#~type boolean

#~view string boolean

#~help

Under X11, you can run with the application using backing store.  In this 
case when menus are brought up the server will attempt to repaint the bits 
when they go down.  Also overlapping windows will use this feature. 
 Unfortunatley on some servers backing store is very expensive and having 
the client repaint is a better choice.

#~endhelp

UseBackingStore: yes


#~type integer

#~view integer slider

#~range 0 500

#~help

Under  some X servers with two button mice a problem occurs when the user 
presses both buttons:  Sometimes the server sends first the down stroke for 
one button and then the down stroke for both.  To adapt to this problem, 
ATK waits a short time after any mouse down operation to see if the other 
button is going to go down.  The wait time is given by the preference 
option MouseHysteresis, an integer number of milliseconds.  The default 
value of 1/20th second has worked well and should not need to be changed.

#~endhelp

MouseHysteresis: 50


#~type integer

#~view  integer slider

#~range 0 500

#~help

Under X if the geometry specifies a size and position and the user brings 
up a second window with the same geometry, they overlay each other exactly. 
 To avoid this, ATK attempts to offset windows after the first.  The new 
window will be LeftIncrement pixels further to the right and TopIncrement 
pixels down from the previous window.

#~endhelp

LeftIncrement: 10


#~type integer

#~view integer slider

#~range 0 500

# reuse the help from LeftIncrement

# #~help

# #~endhelp

TopIncrement: 10


#~type integer list

#~view integer stringlist

#~help

LeftIncrementList and TopIncrementList provide a more generalized version 
of the LeftIncrement and RightIncrement preferences.  You can use it to 
specify a sequence of positions where new windows will appear, each is 
relative to the position of the last window brought up.

#~endhelp

LeftIncrementList: \



#~type integer list

#~view integer stringlist

# reuse the help from LeftIncrementList

# #~help

# #~endhelp

TopIncrementList: \



#~type boolean

#~view string boolean

#~help

When yes this preference allows ATK to supply and request the X selection 
as well as using cut buffers when doing a copy, cut or paste operation.

#~endhelp

SelectionAndCB: yes


#~type integer

#~view  integer slider

#~range -1 50

#~help

The value limits the maximum length of the string in a window's icon label. 
 The default value is -1, indicating that the length of the window's icon 
label is unlimited.  The icon label is made up of two different parts: the 
first is the program name; the second some application-specific string.  In 
the case of the Ez editor, the program name is "\bold{ez}" and the 
application-specific portion is the current file name or buffer.  When a 
positive value is specified, the front part of the application-specific 
string is truncated, limiting its total length to this value.  This 
preference is most useful with programs that place a potentially long, 
filename in the icon label. \


#~endhelp

MaxIconLabelLength: -1


#~type integer

#~view  integer slider

#~range -1 50

#~help

The value limits the maximum length of the string in the window title bar. 
 The default value is -1, indicating that the length of the window title 
bar string is unlimited.  The title bar string is made up of two different 
parts: the first, which may be omitted, is the program name; the second, 
some application-specific string.  In the case of the Ez editor, the 
program name is "\bold{ez}" and the application-specific portion is the 
current file name or buffer.  When a positive value is specified, the front 
part of the application-specific string is truncated, limiting its total 
length to this value.  This preference is most useful with programs that 
place a potentially long, filename in the title bar.  \


#~endhelp

MaxTitleLength: -1


#~type boolean

#~view string boolean

#~help

If this is set to "no", then the program name will not be included in the 
window title bar.  The default is that the program name will be included in 
the window title bar.

#~endhelp

UseProgramNameInTitle: yes



#~group Cursors

#~type color

#~view string color

#~help

The color used for the foreground of the pointer cursor.

#~endhelp

cursorforegroundcolor: black


#~type color

#~view string color

#~help

The color used for the background of the pointer cursor.

#~endhelp

cursorbackgroundcolor: white



#~group Pulldown Menus

#~grouphelp

\section{Pulldown Menus}

The pulldown menus are activated by clicking with the mouse in the strip at 
the top of the window.  These preferences allow you to alter the appearance 
and order of the menu cards.

#~endhelp


#~type boolean

#~view string boolean

#~help

When yes, the new shadow color computations are used.   The default value 
is inherited from the value of the preference UseNewShadows.

#~endhelp

MenubarUseNewShadows: yes


#~type string list , \


#~view string list

#~help\bold{

}This preference works just like the CardOrder preference except it only 
affects the menubar.

#~endhelp

MenubarCardOrder:


#~type boolean

#~view string boolean

#~help

Determines whether a menubar is provided across the top of every window.

#~endhelp

Menubar: yes


#~type boolean

#~view string boolean

#~help

Indicates whether menu items with key equivalents should have those key 
equivalents displayed on the pulldown menu cards.

#~endhelp

MenubarShowKeys: yes


#~type boolean

#~view string boolean

#~help

Indicates whether menu items which are not currently applicable should be 
displayed in pulldown menus.  If they are displayed they will be grayed 
out.

#~endhelp

MenubarShowInactive: yes


#~type integer

#~view integer slider

#~range -1 30

#~help

Sets amounts of extra space (in pixels) between "groups" of items in the 
menucards.  Groups are sets of menu items with priorities starting with the 
same digit.  (See the help on initfiles.)  If this value is set to -1 then 
the spacing will be 1/3 of the height of the menubar item font.

#~endhelp

MenubarGroupSpacing: -1


#~type integer

#~view integer slider

#~range 0 20

#~help

Sets amount of extra space (in pixels) between the shadow borders and their 
contents.

#~endhelp

MenubarPadding: 2


#~type integer

#~view integer slider

#~range 0 100

#~help

Percentage brighter or darker than the foreground the default gray should 
be.  An explicit color can be given with the MenubarGrayTitleColor and 
MenubarGrayItemColor preferences.

#~endhelp

MenubarGrayPercentage: 40


#~type integer

#~view integer slider

#~range 0 100

#~help

Percentage brighter or darker than the foreground the default TopShadow 
color should be.  An explicit color can be given with the 
MenubarGrayTitleColor and MenubarGrayItemColor preferences.

#~endhelp

MenubarTopShadowPercentage: 50


#~type integer

#~view integer

#~range 1 3

#~help

When this button is used to activate the menubar but is released over the 
menubar  or the name of a menu card on the "More" menu the menu card will 
remain displayed and a click can then select an item or restart dragging.

#~endhelp

MenubarHoldButton: 1


#~type integer

#~view integer slider

#~range 0 20

#~help

Sets amount of extra space (in pixels) around the names of menus in the 
menubar.

#~endhelp

MenubarSpacing: 5


#~type integer

#~view integer slider

#~range 0 20

#~help

Sets amounts of extra space (in pixels) around the names of items in 
menucards.

#~endhelp

MenubarCardSpacing: 5


#~type integer

#~view integer slider

#~range 0 20

#~help

Sets the amount of extra space between the longest menu item and the key 
equivalents (if they are being displayed, otherwise it has no effect.)

#~endhelp

MenubarKeysSpacing: 5


#~type integer

#~view integer slider

#~range 0 20

#~help

The width of the boxes around selected items.

#~endhelp

MenubarShadowDepth: 2


#~type integer

#~view integer slider

#~range 0 1000

#~help

When one menucard is visible this is the amount of time, in milliseconds, 
the mouse must remain stationary before a new menucard will be brought up.

#~endhelp

MenubarCardDelay: 0


#~type font

#~view string font

#~help

The font to use for the menu card names.

#~endhelp

MenubarTitleFont: andy12b


#~type font

#~view string font

#~help

The font to use for the item names on the menu cards.

#~endhelp

MenubarItemFont: andy12b


#~type font

#~view string font

#~help

The font to use for the key equivalents on the menu cards.

#~endhelp

MenubarKeysFont: andy12bi


#~type color

#~view string color

#~help

The color to draw the menu card names in.

#~endhelp

MenubarTitleColor: black


#~type color

#~view string color

#~help

The color to draw the menu card names in.

#~endhelp

MenubarGrayTitleColor: black


#~type color

#~view string color

#~help

The background color to use in the menubar.

#~endhelp

MenubarBackgroundColor: white


#~type filename

#~view filename filechoices

#~help

The pathname of an Xstipple pattern to draw the titles of inactive menu 
cards, or None if no stipple pattern is desired.  For color displays this 
will default to None, for monchrome displays it will default to a grey bit 
pattern.

#~endhelp

MenubarGrayTitleStipple: \



#~type color

#~view string color

#~help

The color to draw the top of the selection box in the menubar in.  This 
defaults to black on monochrome screens and to a grey color on color 
screems.

#~endhelp

MenubarTopShadowColor: \



#~type filename

#~view filename filechoices

#~help

The path of an X stipple pattern to draw the top of the selection box in 
the menubar with, or None if no stipple pattern is desired.  For color 
displays this will default to None, for monchrome displays it will default 
to a grey bit pattern.

#~endhelp

MenubarTopShadowStipple: \




#~type filename

#~view filename filechoices

#~help

The path to a stipple pattern to draw the bottom of the selection box in 
the menubar in, or None if no stipple pattern is desired. \


#~endhelp

MenubarBottomShadowStipple: None


#~type color

#~view string color

#~help

The color to draw the bottom of the selection box in the menubar in.

#~endhelp

MenubarBottomShadowColor: black


#~type color

#~view string color

#~help

The color to draw menu items in.

#~endhelp

MenubarItemColor: black


#~type color

#~view string color

#~help

The background color to use in menu cards.

#~endhelp

MenubarCardBackgroundColor: white


#~type color

#~view string color

#~help

The color to draw inactive menu items in.

#~endhelp

MenubarGrayItemColor: black


#~type filename

#~view filename filechoices

#~help

The stipple pattern to draw inactive menu items.  For color displays this 
will default to None, for monchrome displays it will default to a grey bit 
pattern.

#~endhelp

MenubarGrayItemStipple: \




#~type color

#~view string color

#~help

The color for the top of the selection box in the menubar.  This defaults 
to black on monochrome screens and to a grey color on color screems.

#~endhelp

MenubarCardTopShadowColor: \



#~type filename

#~view filename filechoices

#~help

The stipple pattern to draw inactive menu items.  For color displays this 
will default to None, for monchrome displays it will default to a grey bit 
pattern.

#~endhelp

MenubarCardTopShadowStipple: \



#~type color

#~view string color

#~help\leftindent{

}The color for the bottom of the selection box in the menubar.

#~endhelp

MenubarCardBottomShadowColor: black


#~type filename

#~view filename filechoices

#~help

The stipple pattern for inactive menu items.  \


#~endhelp

MenubarCardBottomShadowStipple: None



#~type color

#~view string color

#~help\leftindent{

}The color for the key equivalents of menu items.

#~endhelp

MenubarKeysColor: black


#~group Popup Menus


#~grouphelp

\section{Popup Menus}

The popup menus are activated by clicking with the middle mouse button (or 
both buttons on some machines with two-button mice).  These preferences 
allow you to alter the appearance and order of the menu cards.

#~endhelp


#~type boolean

#~view string boolean

#~help

When yes, the new shadow color computations are used.   The default value 
is inherited from the value of the preference UseNewShadows.

#~endhelp

PopupsUseNewShadows: yes

\bold{
}#~type string list ,

#~view string stringlist

#~help

This preference works just like the CardOrder preference except it only 
affects the "popup" or stack of cards.

#~endhelp

PopupCardOrder:


#~type boolean

#~view string boolean

#~help

Determines whether popup (aka stack of cards) menus are provided.

#~endhelp

PopupMenus: yes


#~type boolean

#~view string boolean

#~help

Indicates whether menu items with key equivalents should have those key 
equivalents displayed on the popup menu cards.

#~endhelp

PopupsShowKeys: yes


#~type string list ,

#~view string stringlist

#~help

Allows you to list the names of menucards which should always appear on a 
popup "stack of cards" menu.   If the menubar is active and this preference 
exists and is non-empty only menus in the list given will appear on the 
"stack of cards".  The format for this preference is:


\example{*.PopupMenuList: "Card1Name", "Card2Name"}


Note that more than two cards can be listed and each card name must be 
enclosed in quotes.  There should be no space before the commas, and 
leading spaces, trailing spaces and tabs will be ignored.

#~endhelp

PopupMenuList:


#~type boolean

#~view string boolean

#~help

Indicates whether menu items which are not currently applicable should be 
displayed in popup menus.  If they are displayed they will be grayed out.

#~endhelp

PopupsShowInactive: yes


#~type integer

#~view integer slider

#~range 0 20

#~help

Determines the amount of space between the longest item name and the key 
equivalents.

#~endhelp

PopupKeysSpacing: 5


#~type color

#~view string color

#~help

Determines the color to use for the foreground when drawing the menus.  The 
default value for the foreground color is black. \


#~endhelp

PopupForegroundColor: black


#~type color

#~view string color

#~help

Determines the color to use for the key equivalents. \


#~endhelp

PopupKeysColor: black


#~type color

#~view string color

#~help

Determines the color to use for the background when drawing the menus.  The 
default value for the background color is white.

#~endhelp

PopupBackgroundColor: white


#~type color

#~view string color

#~help

Determines the color to use for the top/left shadow when drawing the menu 
cards in the Motif 3D style.

#~endhelp

PopupTopShadowColor: white


#~type color

#~view string color

#~help

Determines the color to use for the top/right shadow when drawing the menu 
cards in the Motif 3D style.

#~endhelp

PopupBottomShadowColor: black


#~type boolean

#~view string boolean

#~help

Determines whether or not to use a Motif 3D style for the menu cards.

#~endhelp

MotifPopupMenus: no


#~type boolean

#~view string boolean

#~help

Determines whether or not the X server will save the bits under the menus 
so that the application will not have to redraw the window when the menus 
are retracted.  The default value is 1.  The reason this option exists is 
for those displays (like the QDSS) where save unders are available, but 
slower than just redrawing.

#~endhelp

PopupUseSaveUnder: no


#~type integer

#~view integer slider

#~range 0 500

#~help

This attribute (in milliseconds) determines the period of time, from the 
onset of the depression of the middle mouse button, during which you may 
release the middle mouse button and still have the menus up on the screen 
for selection purposes.  In other words, you can peruse the menu stack 
without having the middle mouse button depressed.  To select a menu option 
while in this state, you must again depress the middle mouse button on the 
selection of your choice.  There is an invisible bounding box around the 
menu stack which, if you cross while the menus are up, will force the menus 
to be retracted without a selection.

#~endhelp

PopupClickInterval: 350


#~type font

#~view string font

#~help

Controls the font that is used for the title of each menu pane.  Any valid 
X font may be used.

#~endhelp

PopupTitleFont: AndySans12b


#~type real

#~view string

#~help

Determines the separation distance between the edges of two consecutive 
menu cards in the menu stack.  To specify that the cards be twice as 
separated, PaneSpread should be set to the value 2.

#~endhelp

PopupPaneSpread: 1


#~type font

#~view string font

#~help

Controls the font that is used for the items of each menu pane.  Any valid 
X font may be used.

#~endhelp

PopupItemFont: AndySans12b


#~type font

#~view string font

#~help

Controls the font that is used for the key equivalents on each menu pane. 
 Any valid X font may be used.

#~endhelp

PopupKeysFont: AndySans12bi


#~type integer

#~view integer slider

#~range 0 100

#~help

Determines the percentage of overlap that is used when flipping to the 
previous menu card.  By setting this value to 50, the user can move the 
mouse cursor halfway across a menu card before it flips to the previous 
card.  Setting this value to 100 will keep the current menu card showing 
until the user moves completely off the right edge of the card onto the 
previous card.  By setting this value to 0 (the default), the previous menu 
card will flip over after moving slightly past its left edge.  No setting 
of this value will cause the previous menu to be displayed without at least 
moving the mouse slightly past its left edge.

#~endhelp

PopupOverlapPct: 0


#~type integer

#~view integer slider

#~range 2 256

#~help

If a static gray display has fewer than this many color cells, ATK will 
treat it like a static gray monochrome display.  The default is: 16.

#~endhelp

ForceMonochromeThreshold: 16


#~type integer

#~view integer slider

#~range 8 216

#~help

This value specifies the number of color cells that are to be used in the 
color cube that ATK uses for displaying all images on color displays.  This 
value should be a cubic (ie. 8, 27, 64, 125, 216).  If undefined, ATK will 
use the largest cubic that is less that half of the total available color 
cells on the display.

#~endhelp

ColorCubeSize:

\enddata{text,537993528}
