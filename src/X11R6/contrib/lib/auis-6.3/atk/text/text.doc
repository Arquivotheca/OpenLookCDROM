\begindata{text,538444452}
\textdsversion{12}
\template{default}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fieldheading
menu:[Region~4,Fieldheading]
attr:[Justification LeftJustified Point 0]
attr:[FontFace Bold Int Set]
attr:[FontFamily AndySans Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fieldtext
menu:[Region~4,Fieldtext]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFamily AndySans Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\chapter{text}


The class\italic{ text}, together with its view, \italic{textview}, provide 
the data structures, methods, and class procedures you need to build an 
application that displays text and allows users to format and edit it. 
 \italic{Text} is most useful for building word processors, drawing editors or 
any application that provides users with full text formatting capabilities, 
including saving the formatting in a file;  if your application does not 
require saving text formatting in a file, you should probably use 
\italic{text}'s superclass, \italic{smpltext }(simple text).


\section{About this section}


The class \italic{text} is a subclass of \italic{smpltext}, 
\italic{dataobject}, and \italic{observable}.  This section assumes you are 
familiar with the following:


-- class

-- view

-- observable

-- dataobject

-- smpltext


This section is related to the sections \italic{textview,} 
\italic{environment}, and \italic{style.}  \italic{Example 14}, \italic{Vol. 
1}, illustrates how to use \italic{text/textview} in an application program. 
 \italic{Example 15}, \italic{Vol. 1}, illustrates how to format \italic{text} 
using \italic{environment} and \italic{style}.


\section{About \italic{text}}


\paragraph{The text buffer}


To understand \italic{text}, it is useful to think of text as being stored in 
an array, called a text buffer.  Each position in the text buffer stores one 
character.  The first character in the text is stored at position 0, the 
second at 1, and so on.  The length of the buffer equals the number of 
characters in the text.  The buffer grows in length as more characters are 
added, and shrinks as characters are deleted.  The class \italic{text} 
provides a text buffer and methods for managing it.  You can add characters to 
the text buffer and delete them; you can clear the contents of a buffer; you 
can ask for a character at a particular position;  you can find out the length 
of the buffer; and you can read from a file into the buffer or write a buffer 
to a file.


\section{Related classes}


\paragraph{Marks}


A \italic{mark} provides a way to point between two characters in the text, no 
matter what gets inserted or deleted around the characters.  Marks are useful 
for keeping track of specific locations in a text or regions of text.  The 
class \italic{text} provides a list of \italic{marks}.  You can create marks 
at specified positions in the text buffer and delete them. 


\paragraph{Formatting environments and style sheets

}
When a user formats a region of text (\italic{e.g.}, makes a string of 
characters bold and centered), the formatting information is stored in a 
structure called an \italic{environment}.  The environment consists of (1) the 
starting point of the formatting in the text buffer; (2) how many characters 
are in the formatting environment, \italic{i.e.}, the length of the 
environment;  and (3)  a \italic{style sheet} describing the nature of the 
formatting.  The class \italic{text} provides \italic{environments} and 
\italic{style sheets} to store the formatting information for the text.  It 
also provides a \italic{style sheet} that determines the formatting attributes 
of the entire text.


\section{Using \italic{text}}


\italic{Example 14}, \italic{Vol. 1}, illustrates how to use 
\italic{text/textview} in an \italic{application} program.  If you are 
creating an \italic{inset}, then the usual place to create \italic{text} is in 
the inset's \italic{InitializeObject} routine by a call to \italic{text_New}.


\section{Sub-classing \italic{text}}


The class \italic{text} can also be usefully sub-classed.  For example, 
\italic{ctext} subclasses \italic{tex}t in order to provide specializations 
for dealing with C code.


\begindata{bp,538271624}
\enddata{bp,538271624}
\view{bpv,538271624,254,0,0}
\section{\italic{text} functions}


______________________________________________________				


\paragraph{text_AddStyle} \indexi{ \italic{text_AddStyle}}				


\majorheading{Add a style to a region of text}

______________________________________________________


\fixedtext{struct environment *\bold{text_AddStyle }(}\fixedindent{

struct text *\paramname{text},

long \paramname{pos},

long \paramname{len},

struct style *\paramname{style});}


\fieldheading{Category}

\fieldtext{Method

}

\fieldheading{Description}   

\fieldtext{Adds \paramname{style} to a region of length \paramname{len} at 
position \paramname{pos} of \paramname{text}, provided the text is \italic{not} 
READONLY and \italic{pos} is less than the position of a text fence, if any. 



}\fieldheading{Return Value}

\fieldtext{A pointer to the newly created environment; NULL if  \italic{text} 
is READONLY,  \italic{pos} is greater than or equal to any text fence, or a 
new environment could not be created.

}

\fieldheading{Usage}

\fieldtext{If you want to add a style to a READONLY document (e.g., the 
program \bold{messages} bolds the current message caption), use 
\italic{text_AlwaysAddStyle}; otherwise use this routine.


}
\fieldheading{Side Effects}

\fieldtext{Modifies the environment tree associated with \italic{text}.

}

\fieldheading{See Also}

\fieldtext{See also \italic{text_AlwaysAddStyle},  \italic{stylesheet_Find 
}(atk/support/stylesht.doc) and \italic{environment_SetStyle} 
(atk/support/envrment.doc).



}\fieldheading{Example}


\fieldtext{\fixedtext{struct text *textptr;

struct environment *envptr;

struct style *boldStyleptr = NULL;


boldStyleptr = stylesheet_Find (textptr->styleSheet, "bold");

if (boldStyleptr != NULL) \{

       envptr = text_AddStyle (textptr, pos, len + 1, boldStyleptr);

	   environment_SetStyle (envptr, FALSE, FALSE);

\}}

}\
\begindata{bp,538271560}
\enddata{bp,538271560}
\view{bpv,538271560,255,0,0}
______________________________________________________				


\paragraph{text_AddView} \indexi{ \italic{text_AddView}}				


\majorheading{Add a view to the text}

______________________________________________________


\fixedtext{struct environment *\bold{text_AddView }(}\fixedindent{

struct text *\paramname{text},

long \paramname{pos},

char *\paramname{viewtype},

struct dataobject *\paramname{dataobject});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Adds a view reference specified by \italic{viewtype} and 
\italic{dataobject} to \italic{text} at position \italic{pos}, provided the 
text is \italic{not} READONLY and \italic{pos} is less than the position of a 
text fence, if any. 


}
\fieldheading{Return Value}

\fieldtext{A pointer to the newly created environment; NULL if  \italic{text} 
is READONLY,  \italic{pos} is greater than or equal to any text fence, or a 
new environment could not be created.}



\fieldheading{Usage}

\fieldtext{If you want to add a view to a READONLY document, use 
\italic{text_AlwaysAddView}; otherwise use this routine.


}
\fieldheading{Side Effects}

\fieldtext{Modifies the environment tree associated with \italic{text}.}


\fieldheading{See Also}

\fieldtext{See also \italic{text_AlwaysAddView}; to get the name of a 
dataobject's default view, see \italic{dataobject_ViewName} 
(atk/basics/common/dataobj.doc).}



\fieldheading{Example}

\fieldtext{\fixedtext{struct fnote *fnote;

struct text *text;


fnote = fnote_New();

text_AddView(text, pos,"fnotev",fnote);}

}\
\view{bpv,538271560,256,0,0}
______________________________________________________				


\paragraph{text_AlwaysAddStyle} \indexi{ \italic{text_AlwaysAddStyle}}				


\majorheading{Add a style to a region of text, even if text is READONLY or 
fenced.}

______________________________________________________


\fixedtext{struct environment *\bold{text_AlwaysAddStyle }(}\fixedindent{

struct text *\paramname{text},

long \paramname{pos},

long \paramname{len},

struct style *\paramname{style});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Adds \paramname{style} to a region of length \paramname{len} at 
position \paramname{pos} of \paramname{text}, even if the text is READONLY or 
\italic{pos} is less than the position of a text fence, if any.}




\fieldheading{Return Value}

\fieldtext{A pointer to the newly created environment; NULL if a new 
environment could not be created.}



\fieldheading{Usage}

\fieldtext{Use this routine if you want to add a style to a READONLY document 
(e.g., the program \bold{messages} bolds the current message caption), use 
\italic{text_AlwaysAddStyle}; otherwise use \italic{text_AddStyle}.

}

\fieldheading{Side Effects}

\fieldtext{Modifies the environment tree associated with \italic{text}.}



\fieldheading{See Also}

\fieldtext{See also \italic{text_AddStyle},  \italic{styleheet_Find 
}(atk/support/stylesht.doc) and \italic{environment_SetStyle} 
(atk/support/envrment.doc).}

\view{bpv,538271560,257,0,0}
______________________________________________________				


\paragraph{text_AlwaysAddView} \indexi{ \italic{text_AlwaysAddView}}				


\majorheading{Add a style to a region of text, even if text is READONLY or 
fenced.}

______________________________________________________


\fixedtext{struct environment *\bold{text_AlwaysAddView }(}\fixedindent{

struct text *\paramname{text},

long \paramname{pos},

char *\paramname{viewtype},

struct dataobject *\paramname{dataobject});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Adds a view reference specified by \italic{viewtype} and 
\italic{dataobject} to \italic{text} at position \italic{pos}, even if the 
text is READONLY or \italic{pos} is less than the position of a text fence, if 
any.}


\fieldheading{Return Value}

\fieldtext{A pointer to the newly created environment; NULL if  \italic{text} 
is READONLY,  \italic{pos} is greater than or equal to any text fence, or a 
new environment could not be created.}



\fieldheading{Usage}

\fieldtext{If you want to add a view to a READONLY document, use this routine; 
otherwise use \italic{text_AddView}; otherwise use this routine.


}
\fieldheading{Side Effects}

\fieldtext{Modifies the environment tree associated with \italic{text}.}



\fieldheading{See Also}

\fieldtext{See also \italic{text_AddView}; to get the name of a dataobject's 
default view, see \italic{dataobject_ViewName} 
(atk/basics/common/dataobj.doc).}

\view{bpv,538271560,258,0,0}
______________________________________________________				


\paragraph{text_AlwaysCopyText} \indexi{ \italic{text_AlwaysCopyText}}				


\majorheading{Copies text to destination text.}

______________________________________________________


\fixedtext{void \bold{text_AlwaysCopyText }(}\fixedindent{

struct text *\paramname{destext},

long \paramname{despos},

struct thisobject *\paramname{srctext},

long \paramname{srcpos},

long \paramname{srclen});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Copies the region of \italic{srctext}\italic{--}including styles 
and views--specified by \italic{srcpos} and \italic{srclen} to \italic{destext} 
at position \italic{despos}}\fieldtext{. 
\fieldtext{ }}\fieldtext{\paramname{Srclen} must be greater than 0 and less 
than or equal to the length of the \paramname{srctext}.  \paramname{Srcpos} 
must be greater than or equal to zero.


}
\fieldheading{Side Effects}

\fieldtext{The environment tree of \paramname{destext} is modified.}



\fieldheading{See Also}

\fieldtext{See also \paramname{simpletext_CopyText} (atk/text/smpltext.doc).}

\begindata{bp,538271496}
\enddata{bp,538271496}
\view{bpv,538271496,259,0,0}_

______________________________________________________				


\paragraph{text_AlwaysInsertFile} \indexi{ \italic{text_AlwaysInsertFile}}			


\majorheading{Insert a file into a text, even if text is READONLY or fenced.}

______________________________________________________


\fixedtext{long \bold{text_AlwaysInsertFile }(}\fixedindent{

struct text *\paramname{text},

FILE *\paramname{file},

char *\paramname{filename},

long \paramname{pos});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Inserts the file specified by \paramname{file} or 
\paramname{filename} at position \paramname{pos} of \paramname{text}, even if 
the text is READONLY or \italic{pos} is less than the position of a text 
fence, if any.  The parameter \italic{file} can be NULL; it will try to open 
\italic{filename}.  The parameter \italic{filename} can be NULL.  If the 
\paramname{filetype}  of the file specified by \paramname{file} or 
\paramname{filename} is an object other than the type "text," then 
\paramname{text} should allow object insertion.


}
\fieldheading{Return Value}

\fieldtext{The length of the file or error message that was inserted; 0 if 
\paramname{file} is NULL and \paramname{filename} is NULL, or the 
\paramname{file} is NULL and the file specified by \paramname{filename} could 
not be opened for a read.}



\fieldheading{Usage}

\fieldtext{If you want to insert a file into a READONLY document, use this 
routine; otherwise use \italic{text_InsertFile.}

}

\fieldheading{Error Conditions}

\fieldtext{If the \paramname{filetype} specified by \paramname{file} or 
\paramname{filename} is an object other than "text" and \paramname{text}  does 
\italic{not} allow object insertion, then the object is ignored, the message 
"Insertion of objects not allowed, ignoring %s!\\n" is printed to 
\paramname{stderr}, and the string "[A %s OBJECT WAS INSERTED HERE]" is 
inserted into \paramname{text} at position \paramname{pos}, where 
\paramname{%s} is the name of the object.


}
\fieldheading{See Also}

\fieldtext{See also \paramname{text_InsertFile}; 
\paramname{simpletext_SetObjectInsertionFlag} (atk/text/smpltext.doc).}


\begindata{bp,538271432}
\enddata{bp,538271432}
\view{bpv,538271432,260,548,0}_________________________________________________\
____				


\paragraph{text_AlwaysReplaceCharacters}\indexi{\italic{text_AlwaysReplaceChara\
cters}}				

\majorheading{Replace the specified characters, even if text is READONLY or 
fenced}

______________________________________________________


\fixedtext{void \bold{text_AlwaysReplaceCharacters }(}\fixedindent{

struct text *\paramname{text},

long \paramname{pos},

long \paramname{len},

char *\paramname{repStr},

long \paramname{replen});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Replaces \paramname{text}'s characters between \paramname{pos} and 
\paramname{len} with the replacement string, \paramname{repStr,} even if the 
text is READONLY or \italic{pos} is less than the position of a text fence, if 
any. The parameter \paramname{replen} should equal the length of the 
replacement string.}


\fieldheading{Usage}

\fieldtext{Use this routine if you want to add replace a string in a READONLY 
document; otherwise use \italic{text_ReplaceCharacters}.}



\fieldheading{See Also}

\fieldtext{\paramname{text_ReplaceCharacters}.}



\fieldheading{Example}


\fixedtext{\fixedindent{struct text *textptr;

struct textview *textvptr;

char wordBuffer [BUFSIZE];


text_AlwaysReplaceCharacters (textptr, textview_GetDotPosition(textvptr),

    textview_GetDotLength(textvptr), wordBuffer, strlen(wordBuffer));}}

\begindata{bp,538271368}
\enddata{bp,538271368}
\view{bpv,538271368,261,0,0}

______________________________________________________				


\paragraph{text_ApplyEnvironment} \indexi{ \italic{text_ApplyEnvironment}}				


\majorheading{Function description}

______________________________________________________


\fixedtext{void \bold{text_ApplyEnvironment }(}

\fixedindent{struct text_statevector *\paramname{sv},

struct style *\paramname{defaultStyle},

struct environment *\paramname{env});}


\fieldheading{Category}

\fieldtext{Classprocedure}



\fieldheading{Description}   

\fieldtext{Takes the state vector, \paramname{sv}, and the environment, 
\paramname{env}, and modifies \paramname{sv} so that it reflects the 
application of \paramname{env}.  The parameter \paramname{defaultStyle} 
specifies the default style; it can be NULL.}



\fieldheading{See Also}

\fieldtext{\paramname{textview_GetDefaultStyle}.}

\begindata{bp,538268488}
\enddata{bp,538268488}
\view{bpv,538268488,262,0,0}___________________________________________________\
___				


\paragraph{text_Clear} \indexi{ \italic{text_Clear}}				


\majorheading{Clear the text buffer}

______________________________________________________


\fixedtext{void \bold{text_Clear }(}\fixedindent{

struct text *\paramname{text});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Clears the buffer associated with \paramname{text} of all 
characters and styles.}

\begindata{bp,538268296}
\enddata{bp,538268296}
\view{bpv,538268296,263,0,0}

______________________________________________________				


\paragraph{text_ClearCompletely} \indexi{ \italic{text_ClearCompletely}}				


\majorheading{Clear the text buffer completely}

______________________________________________________


\fixedtext{void \bold{text_ClearCompletely }(}\fixedindent{

struct text *\paramname{text});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Clears the buffer associated with \paramname{text} of all 
characters and styles, including an data objects embedded in the text.}



\fieldheading{Usage}

\fieldtext{Only used in \bold{messages} to take care of core leaks.}

\begindata{bp,538270984}
\enddata{bp,538270984}
\view{bpv,538270984,264,0,0}

______________________________________________________				


\paragraph{text_EnumerateEnvironments}\indexi{\italic{text_EnumerateEnvironment\
s}}				

\majorheading{Apply a function to the specified environments}

______________________________________________________


\fixedtext{struct environment *\bold{text_EnumerateEnvironments 
}(}\fixedindent{

struct text *\paramname{text},

long \paramname{pos},

long \paramname{len},

procedure \paramname{callBack},

long \paramname{rock});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Calls the function \paramname{callBack} on every environment (style 
or view) found starting at \paramname{pos} and continuing \paramname{len} 
characters in \paramname{text}.  Passes the function the found environment and 
the \paramname{rock} to distinguish invocations.}\fieldtext{

}

\fieldheading{Return Value}

\fieldtext{If \paramname{callBack} returns TRUE, it returns the current 
environment; NULL otherwise.}



\fieldheading{Usage}

\fieldtext{Could use this to implement a search function that would look for 
everything in bold.}

\begindata{bp,538269640}
\enddata{bp,538269640}
\view{bpv,538269640,265,0,0}___________________________________________________\
____				


\paragraph{text_FinalizeObject} \indexi{ \italic{text_FinalizeObject}}				


\majorheading{Finalizes the text object}

______________________________________________________


\fixedtext{void \bold{text_FinalizeObject }(}

\fixedindent{struct text *\paramname{self});}


\fieldheading{Category}

\fieldtext{Classprocedure}



\fieldheading{Description}   

\fieldtext{Clears styles, destroys the root environment and any style sheets 
or template names.}



\fieldheading{Usage}

\fieldtext{Not a user-callable function.}



\fieldheading{See Also}

\fieldtext{\paramname{FinalizeObject} in class/doc/class.doc.}

\begindata{bp,538271688}
\enddata{bp,538271688}
\view{bpv,538271688,266,0,0}___________________________________________________\
___				


\paragraph{text_FinalizeStateVector}\indexi{\italic{text_FinalizeStateVector}}	
			


\majorheading{Finalize the state vector}

______________________________________________________


\fixedtext{void \bold{text_FinalizeStateVector }(}

\fixedindent{struct text_statevector *\paramname{sv});}


\fieldheading{Category}

\fieldtext{Classprocedure}



\fieldheading{Description}   

\fieldtext{Make the state vector go away.  Actually, it just calls tabs_Death 
on the tabs component.}

\fieldheading{
Usage}

\fieldtext{Call \italic{text_FinalizeStateVector} when you are through with 
using a state vector.  Call it only on a state vector that has been 
initialized with \italic{text_InitializeStateVector}. Otherwise a nonexistant 
tabs component will be destroyed.}

\begindata{bp,538927112}
\enddata{bp,538927112}
\view{bpv,538927112,267,0,0}___________________________________________________\
__				


\paragraph{text_FindViewreference} \indexi{\italic{text_FindViewreference}}	
			


\majorheading{Find a view reference}

______________________________________________________


\fixedtext{struct viewref *\bold{text_FindViewreference }(}\fixedindent{

struct text *\paramname{text},

long \paramname{pos},

long \paramname{len});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Finds the first view reference in the \paramname{text} region 
specified by \paramname{pos} and \paramname{len}.}


\fieldheading{Return Value}

\fieldtext{The found view reference; NULL if none found.}

\begindata{bp,538927176}
\enddata{bp,538927176}
\view{bpv,538927176,268,0,0}_

______________________________________________________				


\paragraph{text_GetExportEnvironments}\indexi{\italic{text_GetExportEnvironment\
s}}				

\majorheading{Get the export environment}

______________________________________________________


\fixedtext{boolean }\fixedtext{\bold{text_GetExportEnvironments 
}(}\fixedindent{

struct text *\paramname{text});}


\fieldheading{Category}

\fieldtext{Macromethod}



\fieldheading{Description}   

\fieldtext{Gets the value of \paramname{text}'s export environment flag, which 
indicates whether styles will be written to the file corresponding to text. 
 The initial value is TRUE.}


\fieldheading{Return Value}

\fieldtext{TRUE if styles should be written; FALSE otherwise.}



\fieldheading{Usage}

\fieldtext{Used for applications of text like ctext, which have styles that 
are not written.}



\fieldheading{See Also}

\fieldtext{\paramname{text_SetExportEnvironments}.}

\begindata{bp,538927240}
\enddata{bp,538927240}
\view{bpv,538927240,269,0,0}___________________________________________________\
__				


\paragraph{text_GetGlobalStyle} \indexi{ \italic{text_SetGlobalStyle}}				


\majorheading{Get the global style}

______________________________________________________


\fixedtext{struct style *\bold{text_GetGlobalStyle }(}\fixedindent{

struct text *\paramname{text});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Returns a pointer to the global style that has been set for 
\paramname{text}.

}

\fieldheading{Return Value}

\fieldtext{A pointer to the global style.


}
\fieldheading{See Also}

\fieldtext{\paramname{text_SetGlobalStyle}; 
\paramname{environment_GetRootEnvironment} (atk/support/envrment.doc).}

\begindata{bp,538927304}
\enddata{bp,538927304}
\view{bpv,538927304,270,0,0}___________________________________________________\
___				


\paragraph{text_GetModified} \indexi{ \italic{text_GetModified}}				


\majorheading{Get the number of modifications}

______________________________________________________


\fixedtext{long \bold{text_GetModified }(}\fixedindent{

struct text *\paramname{text});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Gets the number of modifications to \paramname{text}. }\fieldtext{

}

\fieldheading{Return Value}

\fieldtext{A number equal to the number of times \paramname{text} was modified 
since it was created.}



\fieldheading{Usage}

\fieldtext{Call this method in order to keep track of modifications to a text 
object.  If two calls to this method return the same value, then the text 
object has not been modified between the calls.}



\fieldheading{See Also}

\fieldtext{\paramname{dataobject_SetModified}; 
\paramname{dataobject_GetModified} (atk/basics/common/dataobj.doc).}

\begindata{bp,538927368}
\enddata{bp,538927368}
\view{bpv,538927368,271,0,0}

______________________________________________________				


\paragraph{text_GetStyleSheet} \indexi{ \italic{text_GetStyleSheet}}				


\majorheading{Get a text's style sheet}

______________________________________________________


\fixedtext{struct stylesheet *}\fixedtext{\bold{text_GetStyleSheet 
}(}\fixedindent{

struct text *\paramname{text});}


\fieldheading{Category}

\fieldtext{Macromethod}



\fieldheading{Description}   

\fieldtext{Get \paramname{text}'s style sheet.}\fieldtext{

}

\fieldheading{Return Value}

\fieldtext{The style sheet associated with text.}

\begindata{bp,538927432}
\enddata{bp,538927432}
\view{bpv,538927432,272,0,0}
______________________________________________________				


\paragraph{text_HandleCloseBrace} \indexi{\italic{text_HandleCloseBrace}}				


\majorheading{Insert a closing brace}

______________________________________________________


\fixedtext{long \bold{text_HandleCloseBrace }(}\fixedindent{

struct text *\paramname{text},

long \paramname{pos},

FILE *\paramname{file});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Inserts \bold{ \italic{\}} }into the \paramname{text}'s buffer at 
the position \paramname{pos}.  The position \paramname{pos} should be an 
integer greater than or equal to zero.  If zero,  \bold{\italic{\}}}\bold{ 
 }will be inserted at the beginning of the text; if \italic{pos} is negative 
or greater than the length of \paramname{text}'s buffer, then the insertion is 
undefined.}\fieldtext{

}

\fieldheading{Return Value}

\fieldtext{Returns 1, the number of characters inserted into 
\paramname{text}'s buffer.}


\fieldheading{Usage}

\fieldtext{\italic{text_HandleCloseWord }is a helping function, useful in 
conjunction with \italic{text_HandleKeyWord.}}



\fieldheading{See Also}

\fieldtext{\paramname{dataobject_HandleCloseWord} 
(atk/basics/common/dataobj.doc).}

\begindata{bp,538927496}
\enddata{bp,538927496}
\view{bpv,538927496,273,0,0}___________________________________________________\
___				


\paragraph{text_HandleKeyWord} \indexi{ \italic{text_HandleKeyWord}}				


\majorheading{Insert a keyword}

______________________________________________________


\fixedtext{long \bold{text_HandleKeyWord }(}\fixedindent{

struct text *\paramname{text},

long \paramname{pos},

char *\paramname{keyword},

FILE *\paramname{file});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Inserts \bold{\\}<\italic{keyword>} \bold{\{} into the 
\paramname{text}'s buffer at the position \paramname{pos}.  The position 
\paramname{pos} should be an integer greater than or equal to zero.  If zero, 
 \bold{\\}<\italic{keyword>} \bold{\{ }will be inserted at the beginning of 
\paramname{text}; if \paramname{pos} is negative or greater than the length of 
\paramname{text}, then the insertion is undefined.


<\italic{keyword>} should be one of \italic{begindata}, \italic{define, 
 dversion, enddata}, \italic{view,} or \italic{template}.}


\fieldheading{Return Value}

\fieldtext{Returns the number of characters inserted into \paramname{text}'s 
buffer.}


\fieldheading{Usage}

\fieldtext{\italic{text_HandleKeyWord }is a helping function, useful in 
conjunction with \italic{text_Read} and \italic{text_Write}.  You could use 
\italic{text_HandleKeyWord} to insert a text's external data representation 
into the buffer, then call \italic{text_Write} to write it to a file. }



\fieldheading{See Also}

\fieldtext{\paramname{dataobject_HandleKeyWord} 
(atk/basics/common/dataobj.doc).}



\fieldheading{Example}

\fieldtext{\italic{text_HandleKeyWord (txt, 0, "dversion", \smaller{NULL})} 
inserts \italic{\\dversion \{} at the beginning of \italic{txt}'s buffer. }

\begindata{bp,538927560}
\enddata{bp,538927560}
\view{bpv,538927560,274,0,0}_

______________________________________________________				


\paragraph{text_InitStateVector} \indexi{ \italic{text_InitStateVector}}				


\majorheading{Initialize the state vector}

______________________________________________________


\fixedtext{void \bold{text_InitStateVector }(}

\fixedindent{struct text_statevector *\paramname{sv});}


\fieldheading{Category}

\fieldtext{Classprocedure}



\fieldheading{Description}   

\fieldtext{Initializes  the environment state vector for text and controls 
formatting of the text.  Attributes set by this procedure include margins, 
indentations, spacings, spread, flags, fonts, justifications, 
tabs.}\fieldtext{

}\
\begindata{bp,538927624}
\enddata{bp,538927624}
\view{bpv,538927624,275,0,0}

______________________________________________________				


\paragraph{text_InsertFile} \indexi{ \italic{text_InsertFile}}				


\majorheading{Insert a file into a text.}

______________________________________________________


\fixedtext{long \bold{text_InsertFile }(}\fixedindent{

struct text *\paramname{text},

FILE *\paramname{file},

char *\paramname{filename},

long \paramname{pos});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Inserts the file specified by \paramname{file} or 
\paramname{filename} at position \paramname{pos} of \paramname{text}, provided 
that \paramname{text} is \italic{not} READONLY or \italic{pos} is greater than 
or equal to the position of a text fence, if any.  The parameter \italic{file} 
can be NULL; the method will try to open \italic{filename}.  The parameter 
\italic{filename} can be NULL.  If the \paramname{filetype}  of the file 
specified by \paramname{file} or \paramname{filename} is an object other than 
the type "text," then \paramname{text} should allow object insertion.


}
\fieldheading{Return Value}

\fieldtext{The length of the file or error message that was inserted; 0 if 
text is READONLY or  \italic{pos} is less than the position of a text fence, 
if any.  Also 0 if \paramname{file} is NULL and \paramname{filename} is NULL, 
or the \paramname{file} is NULL and the file specified by \paramname{filename} 
could not be opened for a read.}


\fieldheading{Usage}

\fieldtext{If you want to insert a file into a READONLY document, use 
\paramname{text_AlwaysInsertFile}; otherwise use this routine.

}

\fieldheading{Error Conditions}

\fieldtext{If the \paramname{filetype} specified by \paramname{file} or 
\paramname{filename} is an object other than "text" and \paramname{text}  does 
\italic{not} allow object insertion, then the object is ignored, the message 
"Insertion of objects not allowed, ignoring %s!\\n" is printed to 
\paramname{stderr}, and the string "[A %s OBJECT WAS INSERTED HERE]" is 
inserted into \paramname{text} at position \paramname{pos}, where 
\paramname{%s} is the name of the object.


}
\fieldheading{See Also}

\fieldtext{See also \paramname{text_AlwaysInsertFile}; 
\paramname{simpletext_SetObjectInsertionFlag} (atk/text/smpltext.doc).}


\begindata{bp,538927688}
\enddata{bp,538927688}
\view{bpv,538927688,276,0,0}
______________________________________________________				


\paragraph{text_InsertObject} \indexi{ \italic{text_InsertObject}}				


\majorheading{Insert an object}

______________________________________________________


\fixedtext{struct viewref *\bold{text_InsertObject }(}\fixedindent{

struct text *\paramname{text},

long \paramname{pos},

char *\paramname{name},

char *\paramname{viewname});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Inserts a new object named \paramname{name} at position 
\paramname{pos} in \paramname{text}, then assigns it the view 
\italic{viewname}.}


\fieldheading{Return Value}

\fieldtext{A pointer to the newly created view reference.}



\fieldheading{Usage}

\fieldtext{If you want to insert an object into a text buffer, you would call 
this method. }


\fieldheading{Side Effects}

\fieldtext{Registers the object in the dictionary with a \italic{UniqueID.} 


}
\fieldheading{Known Bugs}

\fieldtext{Should be AlwaysInsertObject, but there isn't?}

\begindata{bp,538927752}
\enddata{bp,538927752}
\view{bpv,538927752,277,0,0}___________________________________________________\
__				


\paragraph{text_LengthChanged} \indexi{ \italic{text_LengthChanged}}				


\majorheading{Function description}

______________________________________________________


\fixedtext{void \bold{text_LengthChanged }(}\fixedindent{

struct text *\paramname{text},

long \paramname{pos},

long \paramname{len});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Update marks and root environment.}


\fieldheading{Return Value}

\fieldtext{What does it return?}



\fieldheading{Usage}

\fieldtext{Internal; never called by user.

}

\fieldheading{Error Conditions}

\fieldtext{What will cause errors?  What are the errors?}



\fieldheading{Side Effects}

\fieldtext{What are the side effects, if any?}



\fieldheading{Known Bugs}

\fieldtext{What are the known bugs?  What is the status of the known bugs?}



\fieldheading{See Also}

\fieldtext{List of related commands?  Other sections of relevant interest? 
 Refer by class/procedure,view name,  by document, by source file.  (Example: 
message_AskForStringCompleted, Msghndler.doc, txtvcmds.c)}



\fieldheading{Example}

\fieldtext{Concrete example.}

\begindata{bp,538927816}
\enddata{bp,538927816}
\view{bpv,538927816,278,0,0}

______________________________________________________				


\paragraph{text_ObservedChanged} \indexi{\italic{text_ObservedChanged}}				


\majorheading{Function description}

______________________________________________________


\fixedtext{void \bold{text_ObservedChanged }(}\fixedindent{

struct text *\paramname{text},

struct observable *\paramname{changed},

long \paramname{value});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{What does it do?  What are the arguments?  Can arguments be NULL? 
Assumptions about paths or environment? etc.}


\fieldheading{Return Value}

\fieldtext{What does it return?}



\fieldheading{Usage}

\fieldtext{Internal; never called by user.

}

\fieldheading{Error Conditions}

\fieldtext{What will cause errors?  What are the errors?}



\fieldheading{Side Effects}

\fieldtext{What are the side effects, if any?}



\fieldheading{Known Bugs}

\fieldtext{What are the known bugs?  What is the status of the known bugs?}



\fieldheading{See Also}

\fieldtext{List of related commands?  Other sections of relevant interest? 
 Refer by class/procedure,view name,  by document, by source file.  (Example: 
message_AskForStringCompleted, Msghndler.doc, txtvcmds.c)}



\fieldheading{Example}

\fieldtext{Concrete example.}

\begindata{bp,538927880}
\enddata{bp,538927880}
\view{bpv,538927880,279,0,0}
______________________________________________________				


\paragraph{text_Read} \indexi{ \italic{text_Read}}				


\majorheading{Clear the text buffer and read a file into it}

______________________________________________________


\fixedtext{long \bold{text_Read }(}\fixedindent{

struct text *\paramname{text},

FILE *\paramname{file},

long \paramname{id});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Clears the buffer associated with the instance of \paramname{text} 
of all characters and reads from \paramname{file }into the buffer, beginning 
at the first location in the buffer. The third parameter, \italic{id}, is 
either zero, indicating that no data stream header was found, or an integer 
identification for the data object, guaranteed to be unique within the data 
stream. The file should conform to the Andrew Toolkit \italic{data stream} 
standards; if it does not, the method will generate error messages to 
\italic{stderr}.

}

\fieldheading{Return Value}

\fieldtext{dataobject_NOREADERROR.}



\fieldheading{Usage}

\fieldtext{Because it clears the buffer of any previous text, 
\italic{text_Read} should be used if you want to read from a file initially or 
replace the previous contents of a buffer with a new file;  however, If you 
want to insert a file in a buffer or append to one, you should use 
\italic{text_ReadSubString}.

}

\fieldheading{Side Effects}

\fieldtext{The \paramname{text}'s inherited \italic{dataobject} \italic{id} 
will be set to the \italic{id} read from the file.  Its \italic{dataobject} 
\italic{modified} flag will be set to \smaller{FALSE}, indicating that the 
there have been no modifications to the data that would require it to be 
written to a file.

}

\fieldheading{See Also}

\fieldtext{\italic{text_ReadSubString; text_Write.}}

\begindata{bp,538927944}
\enddata{bp,538927944}
\view{bpv,538927944,280,0,0}_

______________________________________________________				


\paragraph{text_ReadSubString} \indexi{ \italic{text_ReadSubString}}

				

\majorheading{Read a file into the text buffer; do not clear the buffer}

______________________________________________________


\fixedtext{long \bold{text_ReadSubString }(}\fixedindent{

struct text *\paramname{text},

long \paramname{pos},

FILE *\paramname{file},

boolean \paramname{quoteCharacters});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Reads \paramname{file} into \paramname{text'}s buffer, beginning at 
position \paramname{pos}.  The position\paramname{ pos} should be an integer 
greater than or equal to zero.  If zero, characters will be inserted at the 
beginning of the buffer; if \paramname{pos} is negative or greater than the 
length of \paramname{text}'s buffer, then the insertion is undefined.


The parameter \italic{file} should be a file that conforms to the Andrew 
Toolkit data stream protocol.  If \italic{text_ReadSubString} encounters a 
data object, it calls that data object's read method.  The parameter 
 \italic{quoteCharacters} should be \smaller{TRUE} or \smaller{FALSE}.  If 
\smaller{TRUE}, then if two backslashes are encountered in the data stream 
(\italic{e.g.}, \\\\etc\\\\passwd), the second backslash will be read but not 
interpreted as a data stream reserve symbol (\italic{e.g.}, \\\\etc\\\\passwd 
would get read as \\etc\\passwd); if \smaller{FALSE}, the two backslashes will 
both be read and interpreted.}


\fieldheading{Return Value}

\fieldtext{The length of the text that was read.}


\fieldheading{See Also}

\fieldtext{\paramname{text_Read}.}

\begindata{bp,538928008}
\enddata{bp,538928008}
\view{bpv,538928008,281,0,0}_

______________________________________________________				


\paragraph{text_ReadTemplate} \indexi{ \italic{text_ReadTemplate}}				


\majorheading{Add a template to a text}

______________________________________________________


\fixedtext{long \bold{text_ReadTemplate }(}\fixedindent{

struct text *\paramname{text},

char *\paramname{templateName},

boolean \paramname{inserttemplatetext});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Add a template named \paramname{templateName} to \paramname{text}. 
 If \paramname{inserttemplatetext} is TRUE, then insert any text in the 
template.}


\fieldheading{Return Value}

\fieldtext{What does it return?


}
\fieldheading{Example}

\fieldtext{
\fixedtext{struct text *commandLogptr;

struct style *boldStyle = NULL;


if (text_ReadTemplate (commandLogptr, "compile", FALSE) < 0)

        boldStyle = NULL;

    else

        boldStyle = stylesheet_Find (commandLogptr->styleSheet, "bold");}}

\begindata{bp,538928072}
\enddata{bp,538928072}
\view{bpv,538928072,282,0,0}___________________________________________________\
_				


\paragraph{text_ReplaceCharacters} \indexi{ \italic{text_ReplaceCharacters}}

				

\majorheading{Replace the specified characters}

______________________________________________________


\fixedtext{boolean \bold{text_ReplaceCharacters }(}\fixedindent{

struct text *\paramname{text},

long \paramname{pos},

long \paramname{len},

char *\paramname{repstr},

long \paramname{replen});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Replaces the \paramname{text} characters specified by position 
\paramname{pos} and length \paramname{len} by the replacement string 
\paramname{repstr} of length \paramname{replen}, provided  the text is 
\italic{not} READONLY and the replacement region is less than the position of 
a text fence, if any.


}
\fieldheading{Usage}

\fieldtext{If you want to replace characters in a READONLY document, use 
\italic{text_AlwaysReplaceCharacters}; otherwise use this routine.}



\fieldheading{See Also}

\fieldtext{\italic{text_AlwaysReplaceCharacters}.}


\fieldheading{Example}

\fieldtext{
\fixedtext{struct text *textptr;

struct textview *textvptr;

char wordBuffer [BUFSIZE];


text_ReplaceCharacters (textptr, textview_GetDotPosition(textvptr),

    textview_GetDotLength(textvptr), wordBuffer, strlen(wordBuffer));}}

\begindata{bp,538928136}
\enddata{bp,538928136}
\view{bpv,538928136,283,0,0}
______________________________________________________				


\paragraph{text_SetAttributes} \indexi{\italic{text_SetAttributes}}				


\majorheading{Set text attributes}

______________________________________________________


\fixedtext{void \bold{text_SetAttributes }(}\fixedindent{

struct text *\paramname{text},

struct attributes *\paramname{attributes});}


\fieldheading{Category}

\fieldtext{Method  override}



\fieldheading{Description}   

\fieldtext{Set the attributes of \paramname{text} to the specified 
\paramname{attributes} (e.g., readOnlyAttr).


What attributes are there?  What can they be set too?


}
\fieldheading{See Also}

\fieldtext{\paramname{dataobject_SetAttributes} 
(atk/basics/common/dataobj.doc).


}
\fieldheading{Example}

\fixedindent{if ((newobject = (struct dataobject *) 
class_NewObject(objectname)))  \{

	    /* Setup readonly state for object. */

	    

	    struct attributes readOnlyAttr;


	    readOnlyAttr.key = "readonly";

	    readOnlyAttr.value.integer = TRUE;

	    readOnlyAttr.next = NULL;

	    dataobject_SetAttributes(newobject, &readOnlyAttr);

\}}

\begindata{bp,538928200}
\enddata{bp,538928200}
\view{bpv,538928200,284,0,0}

______________________________________________________				


\paragraph{text_SetEnvironmentStyle} \indexi{ \italic{text_SetEnvironmentStyle}}

				

\majorheading{Function description}

______________________________________________________


\fixedtext{void \bold{text_SetEnvironmentStyle }(}\fixedindent{

struct text *\paramname{text},

struct environment *\paramname{envptr},

struct style *\paramname{styleptr});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{What does it do?  What are the arguments?  Can arguments be NULL? 
Assumptions about paths or environment? etc. }


\fieldtext{The following comment was in the .ch file:

<no comment was found>

}

\fieldheading{Return Value}

\fieldtext{What does it return?}



\fieldheading{Usage}

\fieldtext{Inserting styles can take a long time due to the way the style tree 
is implemented.  Wraps all styles rather than inserting.

}

\fieldheading{Error Conditions}

\fieldtext{What will cause errors?  What are the errors?}



\fieldheading{Side Effects}

\fieldtext{What are the side effects, if any?}



\fieldheading{Known Bugs}

\fieldtext{What are the known bugs?  What is the status of the known bugs?}



\fieldheading{See Also}

\fieldtext{List of related commands?  Other sections of relevant interest? 
 Refer by class/procedure,view name,  by document, by source file.  (Example: 
message_AskForStringCompleted, Msghndler.doc, txtvcmds.c)}



\fieldheading{Example}

\fieldtext{Concrete example.}

\begindata{bp,538928264}
\enddata{bp,538928264}
\view{bpv,538928264,285,0,0}

______________________________________________________				


\paragraph{text_SetExportEnvironments} 
\indexi{ \italic{text_SetExportEnvironments}}

				

\majorheading{Set the export environment}

______________________________________________________


\fixedtext{\bold{text_SetExportEnvironments }(}\fixedindent{

struct text *\paramname{text},

boolean \paramname{val});}


\fieldheading{Category}

\fieldtext{Macromethod}



\fieldheading{Description}   

\fieldtext{Sets \paramname{text}'s export environment flag to \paramname{val}, 
where TRUE indicates that styles should be written upon a write request, FALSE 
that styles should \italic{not} be written.  The initial value is TRUE.

}

\fieldheading{Usage}

\fieldtext{Used for applications of text like ctext, which have styles that 
are not written.}


\fieldheading{See Also}

\fieldtext{\paramname{text_GetExportEnvironments}.}

\begindata{bp,538928328}
\enddata{bp,538928328}
\view{bpv,538928328,286,0,0}___________________________________________________\
___				


\paragraph{text_SetGlobalStyle} \indexi{ \italic{text_GetGlobalStyle}}

				

\majorheading{Set the global style}

______________________________________________________


\fixedtext{void \bold{text_SetGlobalStyle }(}\fixedindent{

struct text *\paramname{text},

struct style *\paramname{styleptr});}


\fieldheading{Category}

\fieldtext{Method}



\fieldheading{Description}   

\fieldtext{Sets \paramname{text}'s global style to \paramname{styleptr}.

}

\fieldheading{Error Conditions}

\fieldtext{If \paramname{text}'s root environment type is not equal to 
\paramname{environment_View}, the following message is printed to standard 
error:  "Can't set global style; wrong environment type.\\n"


}
\fieldheading{See Also}

\fieldtext{\paramname{text_GetGlobalStyle}.}

\view{bpv,538928200,287,0,0}


______________________________________________________				


\paragraph{text_Write} \indexi{ \italic{text_Write}}

				

\majorheading{Write the text buffer to a file}

______________________________________________________


\fixedtext{long \bold{text_Write }(}\fixedindent{

struct text *\paramname{text},

FILE *\paramname{file},

long \paramname{writeID},

int \paramname{level});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{If \paramname{text}'s \italic{dataobject writeID} is not equal to 
the parameter \paramname{writeID}, \italic{text_Write }writes the buffer 
associated with \paramname{text} to the file \paramname{file}.  If the 
\paramname{leve}l is non-\smaller{NULL}, the  method will enclose the contents 
of the buffer with the necessary datastream protocol information.}\fieldtext{

}

\fieldheading{Return Value}

\fieldtext{Returns \paramname{text}'s dataobject \italic{id.}}


\fieldheading{Usage}

\fieldtext{Use \italic{text_Write} if you want to write the entire contents of 
a buffer to a file.  If you want to write part of a buffer to a file, use 
\italic{text_WriteSubString}.}



\fieldheading{Side Effects}

\fieldtext{Sets \paramname{text}'s \italic{dataobject writeID} to 
\paramname{writeID}.  Sets \paramname{text'}s dataobject modified flag to 
FALSE, indicating that there is no modified data that would need to be written 
to a file. }



\fieldheading{See Also}

\fieldtext{\italic{text_WriteSubString}; \paramname{dataobject_Write} 
(atk/basics/common/dataobj.doc).}

\begindata{bp,538928392}
\enddata{bp,538928392}
\view{bpv,538928392,288,0,0}

______________________________________________________				


\paragraph{text_WriteSubString} \indexi{ \italic{text_WriteSubString}}

				

\majorheading{Write part of the text buffer to a file}

______________________________________________________


\fixedtext{void \bold{text_WriteSubString }(}\fixedindent{

struct text *\paramname{text},

long \paramname{pos},

long \paramname{len},

FILE *\paramname{file},

boolean \paramname{quoteCharacters});}


\fieldheading{Category}

\fieldtext{Override}



\fieldheading{Description}   

\fieldtext{Writes the characters defined by position \paramname{pos} and 
length \paramname{len} in \paramname{text}'s buffer to  the file 
\paramname{file}.


The parameter \italic{quoteCharacters} should be \smaller{TRUE} or 
\smaller{FALSE}.  If \smaller{TRUE}, then the data stream reserve symbols, \\, 
\{, and \} will be quoted, i.e., they will be written so that a subsequent 
read will not interpret them; if \smaller{FALSE}, the symbols will be written 
so that a read will interpret them as data stream symbols. }


\fieldheading{See Also}

\fieldtext{\paramname{text_Write}; \paramname{dataobject_WriteSubString} 
(atk/basics/common/dataobj.doc)}.

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,290,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538444452}
