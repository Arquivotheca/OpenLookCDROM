\begindata{text,538395864}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Simple Text}}


Needs to be converted to new format.  The class \italic{smpltext} (simple 
text) provides simple editable text.  \italic{Smpltext} is useful if you want 
to display formatted text (\italic{e.g.}, display bold, centered text in 
Andysans11) and allow users to edit it, but you do not need to enable users to 
save the format of the text.  Thus, \italic{smpltext} is most useful for 
applications such as displaying labels in diagrams, displaying user messages, 
or capturing users' responses to requests for information.  If you want to 
enable users to save formatted text, you will want to use \italic{smpltext}'s 
sub-class, \italic{text}, and its view, \italic{textv} (text view), described 
previously in this section.  \italic{Text }allows formatting information to be 
written to a file.  Thus, it is more useful for building word processors, 
drawing editors, etc. 



\section{Overview of simple text}


\subsection{\paragraph{The text buffer}}


To understand simple text, it is useful to think of text as being stored in an 
array, called a text buffer.  Each position in the text buffer stores one 
character.  The first character in the text is stored at position 0, the 
second at 1, and so on.  The length of the buffer equals the number of 
characters in the text.  The buffer grows in length as more characters are 
added, and shrinks as characters are deleted. 


The class \italic{smpltext} provides a text buffer and methods for managing 
it.  You can add characters to the text buffer and delete them; you can clear 
the contents of a buffer; you can ask for a character at a particular 
position; you can find out the length of the buffer; and you can read or write 
to and from files and buffers. 


\subsection{Marks}


A \italic{mark} provides a way to point between two characters in the text, no 
matter what gets inserted or deleted around the characters.  Marks are useful 
for keeping track of specific locations in a text or regions of text (see 
\bold{Marks}).  The class \italic{smpltext} provides a list of \italic{marks}. 
 You can create marks at specified positions in the text buffer and delete 
them. 



\subsection{Creating simple texts}


\paragraph{Creating an instance of simple text} \indexi{ \italic{smpltext_New}}

\example{struct smpltext *smpltext_New()}


\leftindent{\bold{Class procedure description. }\italic{smpltext_New} creates 
an instance of \italic{smpltext}.  The text buffer will initialized to length 
zero.  The list of marks will be \smaller{NULL}. 


\bold{Return value.}  Returns a pointer to the newly created instance. 

}
\begindata{bp,538928392}
\enddata{bp,538928392}
\view{bpv,538928392,291,0,0}
\subsection{The text buffer}


\paragraph{Inserting characters into a buffer} 
\indexi{ \italic{smpltext_InsertCharacters}}

\example{void smpltext_InsertCharacters(stxt, pos, str, len) struct smpltext 
*stxt;  long pos;  char *str;  long len;} 


\leftindent{\bold{Method description.  }  smpltext_InsertCharacters inserts 
the first n characters of  the string, str, at position pos in stxt's buffer. 
 The position pos should be an integer greater than or equal to zero.  If 
zero, str will be inserted at the beginning of the buffer; if pos is greater 
than or equal to the length of stxt's buffer, then the insertion will occur at 
the end of the buffer.  Calls AlwaysInsertCharacters if there is no fenced 
text in the region; otherwise, returns False. 


\bold{Side effects. } Sets stxt's dataobject.modified flag to TRUE, indicating 
that data in the buffer has been modified since last written to a file. 

}

\paragraph{Always inserting characters} 
\indexi{ \italic{smpltext_AlwaysInsertCharacters}}

\example{void smpltext_AlwaysInsertCharacters(stxt, pos, str, len) struct 
smpltext *stxt;  long pos;  char *str;  long len; }


\leftindent{\bold{Method description.  }  Called by InsertCharacters. 


}\
\begindata{bp,538928200}
\enddata{bp,538928200}
\view{bpv,538928200,292,0,0}
\paragraph{Deleting characters from a buffer} 
\indexi{ \italic{smpltext_DeleteCharacters}}

\example{void smpltext_DeleteCharacters(stxt, pos, len) struct smpltext *stxt; 
 long pos;  long len;} 


\leftindent{\bold{Method description.  }  \italic{smpltext_DeleteCharacters} 
deletes \italic{n} characters from \italic{stxt'}s buffer, beginning at 
position, \italic{pos}.  The position \italic{pos} should be an integer 
greater than or equal to zero.  If zero, the characters will be deleted from 
the beginning of the buffer; if \italic{pos} is greater than or equal to the 
length of \italic{stxt}'s buffer, then no deletion will occur.  If the number 
of characters to be deleted, \italic{len}, exceeds the distance from 
\italic{pos} to the end of the buffer, then some smaller number of characters, 
those from \italic{pos} to the end of the buffer, are deleted.  Calls 
AlwaysDeleteCharacters if there is no fenced text in the region; otherwise 
returns False. 


\bold{Side effects.}  Sets \italic{stxt}'s \italic{dataobject.modified} flag 
to \smaller{TRUE}, indicating that data in the buffer has been modified since 
last written to a file. 

}


\paragraph{Always deleting characters} 
\indexi{ \italic{smpltext_AlwaysDeleteCharacters}}

\example{void smpltext_AlwaysDeleteCharacters(stxt, pos, len) struct smpltext 
*stxt;  long pos;  long len;} 


\leftindent{\bold{Method Description.  }Called by DeleteCharacters.} 


\begindata{bp,538928328}
\enddata{bp,538928328}
\view{bpv,538928328,293,0,0}
\paragraph{Clearing the buffer} \indexi{ \italic{smpltext_Clear}}

\example{void\bold{ }smpltext_Clear(stxt) struct smpltext *stxt;} 


\leftindent{\bold{Method description.  }  Clears the buffer associated with 
simple text \italic{stxt }of all characters and marks. 


\bold{Side effects.}  Sets \italic{stxt}'s \italic{dataobject.modified} flag 
to \smaller{TRUE}, indicating that modified data exists. 


}
\paragraph{Finding out the length of the buffer} 
\indexi{ \italic{smpltext_GetLength}}

\example{long smpltext_GetLength(stxt) struct smpltext *stxt;} 


\leftindent{\bold{Method description.  }  Returns the length of the text 
associated with \italic{stxt}. 


}
\paragraph{Getting a character from the buffer at a given position} 
\indexi{ \italic{smpltext_GetChar}}

\example{long smpltext_GetChar(stxt, pos) struct smpltext *stxt;  long pos; }


\leftindent{\bold{Method description.  }  \italic{smpltext_GetChar} returns 
the character in \italic{stxt}'s text that is at position \italic{pos.}  The 
position, \italic{pos}, should be an integer greater than or equal to zero. 
 If zero, \italic{smpltext_GetChar}  will return the first character in the 
text; if \italic{pos} is greater than the length of the text, it returns 
\smaller{NULL;} if \italic{pos} is negative, the result is undefined. 

}


\begindata{bp,538928264}
\enddata{bp,538928264}
\view{bpv,538928264,294,0,0}
\subsection{Reading and writing files and buffers}



\paragraph{Reading text from a file} \indexi{ \italic{smpltext_Read}}

\example{void smpltext_Read(stxt, file, id) struct smpltext *stxt;  FILE 
*file;  long id;} 


\leftindent{\bold{Method description.  }  \italic{smpltext_Read} clears the 
buffer associated with the instance of simple text \italic{stxt} of all 
characters and reads from the file \italic{file }into the buffer, beginning at 
the first location in the buffer. The file should conform to the Andrew 
Toolkit \italic{data stream} standards;  if it does not, the method will 
generate error messages to \italic{stderr}. 


\bold{Side effects.}  The \italic{smpltext}'s inherited \italic{dataobject} 
\italic{id} will be set to the \italic{id} read from the file.  Its 
\italic{dataobject} \italic{modified} flag will be set to \smaller{FALSE}, 
indicating that the there have been no modifications to the data that would 
require it to be written to a file. 


\bold{Usage.}  Because it clears the buffer of any previous text, 
\italic{smpltext_Read} should be used if you want to read from a file 
initially or replace the previous contents of a buffer with a new file; 
 however, If you want to insert a file in a buffer or append to one, you 
should use \italic{smpltext_ReadSubString}. 


}
\paragraph{Inserting or appending a file to a buffer} 
\indexi{ \italic{smpltext_ReadSubString}}

\example{long smpltext_ReadSubString(stxt, pos, file, quoteCharacters) struct 
smpltext *stxt;  long pos;  FILE *file;  boolean quoteCharacters;} 


\leftindent{\bold{Method description.  }  \italic{smpltext_ReadSubString} 
reads the file, \italic{file}, into \italic{stxt'}s buffer, beginning at 
position \italic{pos}.  The position\italic{ pos} should be an integer greater 
than or equal to zero.  If zero, characters will be inserted at the beginning 
of the text; if \italic{pos} is negative or greater than the length of 
\italic{stxt}'s text, then the insertion is undefined. 


\italic{file} should be a file that conforms to the data stream protocol.  If 
\italic{smpltext_ReadSubString} encounters a data object, it calls that data 
object's read method.  \italic{quoteCharacters} should be \smaller{TRUE} or 
\smaller{FALSE}.  If \smaller{TRUE}, then if two backslashes are encountered 
in the data stream (\italic{e.g.}, \\\\etc\\\\passwd), the second backslash 
will be read but not interpreted as a data stream reserve symbol 
(\italic{e.g.}, \\\\etc\\\\passwd would get read as \\etc\\passwd); if 
\smaller{FALSE}, the two backslashes will both be read and interpreted. 

}
\begindata{bp,538928136}
\enddata{bp,538928136}
\view{bpv,538928136,295,0,0}
\paragraph{Writing text to a file} \indexi{ \italic{smpltext_Write}}

\example{long smpltext_Write(stxt, file, writeID, level) struct smpltext 
*stxt;  FILE *file;  long writeID;  int level;} 


\leftindent{\bold{Method description.  } If \italic{stxt}'s \italic{dataobject 
writeID} is not equal to \italic{writeID}, \italic{smpltext_Write }writes the 
buffer associated with \italic{stxt} to the file, \italic{file}.  If the 
\italic{leve}l is non-\smaller{NULL}, the  method will enclose the contents of 
the buffer with the necessary datastream protocol information. 


\bold{Side effects.}  Sets \italic{stxt}'s \italic{dataobject writeID} to 
\italic{writeID}.  Sets stxt's dataobject modified flag to FALSE, indicating 
that there is no modified data that would need to be written to a file. 


\bold{Return value.}  \italic{smpltext_Write} returns \italic{stxt}'s 
dataobject \italic{id}. 


\bold{Usage.}  Use \italic{smpltext_Write} if you want to write the entire 
contents of a buffer to a file.  If you want to write part of a buffer to a 
file, use \italic{smpltext_WriteSubString}. 


}
\paragraph{Writing part of a buffer to a file} 
\indexi{ \italic{smpltext_WriteSubString}}

\example{void smpltext_WriteSubString(stxt, pos, n, file, quoteCharacters) 
struct smpltext *stxt;  long pos;  long n;  FILE *file;  boolean 
quoteCharacters;} 


\leftindent{\bold{Method description.  }  \italic{smpltext_WriteSubString} 
writes \italic{n} characters beginning at position \italic{pos} from 
\italic{stxt}'s buffer to  the file, \italic{file}. 


\italic{quoteCharacters} should be \smaller{TRUE} or \smaller{FALSE}.  If 
\smaller{TRUE}, then the data stream reserve symbols, \\, \{, and \} will be 
quoted, i.e., they will be written so that a subsequent read will not 
interpret them; if \smaller{FALSE}, the symbols will be written so that a read 
will interpret them as data stream symbols. 

}
\begindata{bp,538928072}
\enddata{bp,538928072}
\view{bpv,538928072,296,0,0}
\paragraph{Replacing characters} \indexi{ \italic{smpltext_ReplaceCharacters}}

\example{boolean smpltext_ReplaceCharacters(stxt, pos, len, replacementString, 
replacementLen) struct smpltext *stxt;  long pos, len;  char 
*replacementString;  long replacementLen;} 


\leftindent{\bold{Method description.  }  Replaces, i.e., overwrites, the 
number of characters specified by \italic{len }at postiion \italic{pos}, by 
the a \italic{replacementString} of length \italic{replacementLen}.  Calls 
AlwaysReplaceCharacters if there is no fenced text in the replacement region, 
otherwise, the replacement fails. 


}
\paragraph{Always replacing characters} 
\indexi{ \italic{smpltext_AlwaysReplaceCharacters}}

\example{void smpltext_AlwaysReplaceCharacters(stxt, pos, len, 
replacementString, replacementLen) struct smpltext *stxt;  long pos, len; 
 char *replacementString;  long replacementLen;} 


\leftindent{\bold{Method description.  }  Called by 
\italic{ReplaceCharacters}. 


}
\paragraph{Adding in a character} \indexi{ \italic{smpltext_AddInCharacter}}

\example{void smpltext_AddInCharacter(stxt, pos, c) struct smpltext *stxt; 
 long pos;  char c;} 


\leftindent{\bold{Method description.  }  Adds in one character at position 
\italic{pos}.} 


\begindata{bp,538928008}
\enddata{bp,538928008}
\view{bpv,538928008,297,0,0}
\paragraph{Copying a substring} \indexi{ \italic{smpltext_CopySubString}}

\example{void smpltext_CopySubString(stxt, pos, len, buf, quoteCharacters) 
struct smpltext *stxt;  long pos;  long len;  char *buf;  boolean 
quoteCharacters; }


\leftindent{\bold{Method description.  }  Copies a substring of length 
\italic{len }at position \italic{pos} into a buffer \italic{buf}. 
 \italic{quoteCharacters }}quoting of special characters. 



\paragraph{Converting text from BE1 to the Andrew Toolkit} 
\indexi{ \italic{smpltext_ConvertFromBE1}}

\example{long smpltext_ConvertFromBE1(stxt, p, pos, firstCall) struct smpltext 
*stxt;  unsigned char *p;  long pos;  boolean firstCall;} 


\leftindent{\bold{Method description.  }  Converts a BE1 file into Andrew 
Toolkit format. 


\bold{Usage.}  Usually called from class \italic{text.} 


}
\paragraph{Setting attributes} \indexi{ \italic{smpltext_SetAttributes}}

\example{void smpltext_SetAttributes(stxt, attributes) struct smpltext *stxt; 
 struct attributes *attributes;} 


\leftindent{\bold{Method description.  }  \italic{SetAttributes} is a method 
for setting attributes associated with a simple text.} 


\begindata{bp,538927944}
\enddata{bp,538927944}
\view{bpv,538927944,298,0,0}
\paragraph{Setting read only mode} \indexi{ \italic{smpltext_SetReadOnly}}

\example{void smpltext_SetReadOnly(stxt, readOnly) struct smpltext *stxt; 
 boolean readOnly;} 


\leftindent{\bold{Method description.  }  Toggles a read-only mode on the 
smpltext. 


}
\paragraph{Getting a  read only mode} \indexi{ \italic{smpltext_GetReadOnly}}

\example{boolean smpltext_GetReadOnly(stxt) struct smpltext *stxt;} 


\leftindent{\bold{Method description.  }  Finds if a smpltext is read-only or 
not. 


}
\paragraph{Finding if the length has changed} 
\indexi{ \italic{smpltext_LengthChanged}}

\example{void smpltext_LengthChanged(stxt, pos, size) struct smpltext *stxt; 
 long pos;  long size; }


\leftindent{\bold{Method description.  }  Informs the caller if the length 
from position \italic{pos} has changed.} 

\begindata{bp,538927880}
\enddata{bp,538927880}
\view{bpv,538927880,299,0,0}
\subsection{Managing marks}


\paragraph{Creating a mark} \indexi{ \italic{smpltext_CreateMark}}

\example{struct mark *smpltext_CreateMark(stxt, pos, len) struct smpltext 
*stxt;  long pos;  long len;} 


\leftindent{\bold{Method description.  }  \italic{smpltext_CreateMark} creates 
a new mark at position \italic{pos} and length, \italic{len}, in 
\italic{stxt}'s text and inserts it into \italic{stxt}'s list of marks. 


\bold{Return value.}  Returns a pointer to the newly created mark. 


}
\paragraph{Deleting a mark} \indexi{ \italic{smpltext_RemoveMark}}

\example{void smpltext_RemoveMark(stxt, mark) struct smpltext *stxt;  struct 
mark *mark;} 


\leftindent{\bold{Method description.  }  \italic{smpltext_RemoveMark} deletes 
a mark from \italic{stxt}'s list of marks. 

}

\paragraph{Updating the marks when a region is modified} 
\indexi{ \italic{smpltext_RegionModified}}

\example{void smpltext_RegionModified(stxt, position, length) struct smpltext 
*stxt;  long position;  long length;} 


\leftindent{\bold{Method description.  }  \italic{smpltext_RegionModified} 
searches all the marks in \italic{stxt}'s list of markers for those marks in 
the range position to position + length.  For each mark , \italic{mp}, found, 
\italic{smpltext_RegionModified }calls \italic{mark_SetModified (mp, 
\smaller{TRUE})}, resulting in the mark correctly updating. 

}
\begindata{bp,538927816}
\enddata{bp,538927816}
\view{bpv,538927816,300,0,0}
\subsection{Creating sub-classes of simple text}


\paragraph{Handling a data object} \indexi{ \italic{smpltext_HandleDataObject}}

\example{long smpltext_HandleDataObject(stxt, pos, dop, file) struct smpltext 
*stxt;  long pos;  struct dataobject *dop;  FILE *file;} 


\leftindent{\bold{Method description.  }  At the present date (03/87), this 
method is not yet implemented; returns \smaller{NULL}. 


}
\paragraph{Inserting a data stream keyword into the text} 
\indexi{ \italic{smpltext_HandleKeyWord}}

\example{long smpltext_HandleKeyWord(stxt, pos, keyword, file) struct smpltext 
*stxt;  long pos;  char *keyword;  FILE *file; }


\leftindent{\bold{Method description.  }  Inserts \bold{\\}\italic{keyword} 
\bold{\{} into the \italic{stxt}'s buffer at the position, \italic{pos}.  The 
position, \italic{pos}, should be an integer greater than or equal to zero. 
 If zero,  \bold{\\}\italic{keyword} \bold{\{ }will be inserted at the 
beginning of the text; if \italic{pos} is negative or greater than the length 
of \italic{stxt}'s text, then the insertion is undefined. 


\bold{Return value.}  Returns the number of characters inserted into 
\italic{stxt}'s text. 


\bold{Usage.}  \italic{keyword} should be one of \italic{begindata }, 
\italic{define, dversion, enddata }, \italic{view, template}. 
 \italic{smpltext_HandleKeyWord }is a helping function, useful in conjunction 
with \italic{smpltext_Read} and \italic{smpltext_Write}.  You could use 
\italic{smpltext_HandleKeyWord} to insert the text's external data 
representation into the buffer, then call \italic{smpltext_Write} to write it 
to a file. 


\bold{Example.}  \italic{smpltext_HandleKeyWord (stxt, 0, "dversion", 
\smaller{NULL})} inserts \italic{\\dversion \{} at the beginning of 
\italic{stxt}'s buffer. 

}

\begindata{bp,538927752}
\enddata{bp,538927752}
\view{bpv,538927752,301,0,0}
\paragraph{Inserting a data stream closing brace into the text} 
\indexi{ \italic{smpltext_HandleCloseBrace}}

\example{long smpltext_HandleCloseBrace(stxt, pos, file) struct smpltext 
*stxt;  long pos;  FILE *file;} 


\leftindent{\bold{Method description.  }  Inserts \bold{ \} }into the 
\italic{stxt}'s buffer at the position, \italic{pos}.  The position, 
\italic{pos}, should be an integer greater than or equal to zero.  If zero, 
 \bold{\italic{\}}}\bold{  }will be inserted at the beginning of the text; if 
\italic{pos} is negative or greater than the length of \italic{stxt}'s text, 
then the insertion is undefined. 


\bold{Return value.}  Returns 1, the number of characters inserted into 
\italic{stxt}'s text. 


\bold{Usage.}    \italic{smpltext_HandleCloseWord }is a helping function,

useful in conjunction with \italic{smpltext_HandleKeyWord.} 


\bold{Example.}  \italic{smpltext_HandleKeyWord (stxt, 
smpltext_GetLength(stxt), \smaller{NULL})} inserts \bold{\} }at the end of 
\italic{stxt}'s buffer. 

}



\subsection{Creating fences in simple texts}


\paragraph{Getting a fence}


\example{GetFence(fnce) struct fence *fnce;} 


\leftindent{\bold{Macro method description.  }  Gets a fence (a type of mark) 
that has been set. 


\bold{Return value.}  A pointer to a fence. 

}
\begindata{bp,538927688}
\enddata{bp,538927688}
\view{bpv,538927688,302,0,0}
\paragraph{Setting a fence}


\example{SetFence(fnce,pos) struct fence *fnce;  long pos;} 


\leftindent{\bold{Macro method description.  }  Sets a fence in a simple text 
as position \italic{pos}. 


\bold{Return value.}  A pointer to the fence. 


}
\paragraph{Clearing a fence}


\example{ClearFence(fnce) struct fence *fnce;} 


\leftindent{\bold{Macro method description.  }  Removes a fence. 


}
\paragraph{Getting a fence mark}


\example{GetFenceMark(fnce) struct fence *fnce;} 


\leftindent{\bold{Macro method description.  }  Gets the mark that identifies 
a fence. 


\bold{Return value.}  A pointer to the fence.} 




\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,304,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538395864}
