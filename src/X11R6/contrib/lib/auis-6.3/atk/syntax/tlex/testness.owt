Global initialization
(0,--):   reduce   0->1
		use rule 2,  attributes  :
(1,FUNCTION):   reduce   1->13
		use rule 9,  functype  :
(13,FUNCTION):   shift to state 28
(28,setID):   shift to state 34
(34,'('):   shift to state 58
(58,setID):   reduce   58->99
		use rule 9,  functype  :
(99,setID):   shift to state 127
(127,--):   reduce   58->101
		use rule 35,  nonEmptyParmList  :  functype  setID
(101,')'):   reduce   58->100
		use rule 34,  parmList  :  nonEmptyParmList
(100,')'):   shift to state 128
(128,--):   reduce   128->138
		use rule 38,  stmtList  :
(138,setID):   shift to state 38
(38,--):   reduce   138->90
		use rule 94,  var  :  setID
(90,":="):   shift to state 125
(125,setID):   shift to state 38
(38,--):   reduce   125->53
		use rule 94,  var  :  setID
(53,'('):   shift to state 78
(78,setID):   shift to state 38
(38,--):   reduce   78->53
		use rule 94,  var  :  setID
(53,')'):   reduce   78->51
		use rule 87,  prim  :  var
(51,')'):   reduce   78->50
		use rule 78,  lowexpr  :  prim
(50,')'):   reduce   78->49
		use rule 74,  mulexpr  :  lowexpr
(49,')'):   reduce   78->48
		use rule 71,  sumexpr  :  mulexpr
(48,')'):   reduce   78->47
		use rule 69,  midexpr  :  sumexpr
(47,')'):   reduce   78->112
		use rule 65,  expr  :  midexpr
(112,')'):   reduce   78->114
		use rule 92,  argList  :  expr
(114,')'):   reduce   78->113
		use rule 90,  args  :  argList
(113,')'):   shift to state 130
(130,--):   reduce   125->52
		use rule 89,  funcCall  :  var  '('  args  ')'
(52,--):   reduce   125->50
		use rule 81,  lowexpr  :  funcCall
(50,INTEGER):   reduce   125->49
		use rule 74,  mulexpr  :  lowexpr
(49,INTEGER):   reduce   125->48
		use rule 71,  sumexpr  :  mulexpr
(48,INTEGER):   reduce   125->47
		use rule 69,  midexpr  :  sumexpr
(47,INTEGER):   reduce   125->135
		use rule 65,  expr  :  midexpr
(135,INTEGER):   reduce   138->87
		use rule 41,  stmt  :  var  ":="  expr
(87,INTEGER):   reduce   128->138
		use rule 39,  stmtList  :  stmtList  stmt
(138,INTEGER):   shift to state 5
(5,--):   reduce   138->86
		use rule 6,  type  :  INTEGER
(86,setID):   shift to state 27
(27,--):   reduce   138->88
		use rule 53,  declHead  :  type  setID
(88,":="):   shift to state 123
(123,setINTCON):   shift to state 40
(40,--):   reduce   123->54
		use rule 96,  constant  :  setINTCON
(54,--):   reduce   123->51
		use rule 88,  prim  :  constant
(51,--):   reduce   123->50
		use rule 78,  lowexpr  :  prim
(50,setID):   reduce   123->49
		use rule 74,  mulexpr  :  lowexpr
(49,setID):   reduce   123->48
		use rule 71,  sumexpr  :  mulexpr
(48,setID):   reduce   123->47
		use rule 69,  midexpr  :  sumexpr
(47,setID):   reduce   123->134
		use rule 65,  expr  :  midexpr
(134,setID):   reduce   138->87
		use rule 44,  stmt  :  declHead  ":="  expr
(87,setID):   reduce   128->138
		use rule 39,  stmtList  :  stmtList  stmt
(138,setID):   shift to state 38
(38,--):   reduce   138->90
		use rule 94,  var  :  setID
(90,WHILE)*** Syntax error: Syntax error
		pop state 90
		pop state 138
		pop state 128
		pop state 100
		pop state 58
		pop state 34
		pop state 28
		pop state 13
(2,WHILE) {err:3}
(2,setID) {err:3}
(2,"/=") {err:3}
(2,setSTRINGCON) {err:3}
(2,DO) {err:3}
(2,setID) {err:3}
(2,":=") {err:3}
(2,setID) {err:3}
(2,'+') {err:3}
(2,setINTCON) {err:3}
(2,setID) {err:3}
(2,":=") {err:3}
(2,setID) {err:3}
(2,'(') {err:3}
(2,setID) {err:3}
(2,'(') {err:3}
(2,setID) {err:3}
(2,')') {err:3}
(2,',') {err:3}
(2,setSTRINGCON) {err:3}
(2,')') {err:3}
(2,END) {err:3}
(2,WHILE) {err:3}
(2,END) {err:3}
(2,FUNCTION) {err:3}:   shift to state 17
(17,--) {err:2}:   reduce   1->14
		use rule 22,  attrDecl  :  error  FUNCTION
(14,--) {err:2}:   reduce   0->1
		use rule 3,  attributes  :  attributes  attrDecl
(1,FUNCTION) {err:2}:   reduce   1->13
		use rule 9,  functype  :
(13,FUNCTION) {err:2}:   shift to state 28
(28,setID) {err:1}:   shift to state 34
(34,'('):   shift to state 58
(58,setID):   reduce   58->99
		use rule 9,  functype  :
(99,setID):   shift to state 127
(127,--):   reduce   58->101
		use rule 35,  nonEmptyParmList  :  functype  setID
(101,')'):   reduce   58->100
		use rule 34,  parmList  :  nonEmptyParmList
(100,')'):   shift to state 128
(128,--):   reduce   128->138
		use rule 38,  stmtList  :
(138,MARKER):   shift to state 3
(3,--):   reduce   138->86
		use rule 4,  type  :  MARKER
(86,setID):   shift to state 27
(27,--):   reduce   138->88
		use rule 53,  declHead  :  type  setID
(88,setID):   reduce   88->124
		use rule 54,  declIdList  :
(124,setID):   reduce   138->87
		use rule 43,  stmt  :  declHead  declIdList
(87,setID):   reduce   128->138
		use rule 39,  stmtList  :  stmtList  stmt
(138,setID):   shift to state 38
(38,--):   reduce   138->90
		use rule 94,  var  :  setID
(90,":="):   shift to state 125
(125,setID):   shift to state 38
(38,--):   reduce   125->53
		use rule 94,  var  :  setID
(53,'('):   shift to state 78
(78,setID):   shift to state 38
(38,--):   reduce   78->53
		use rule 94,  var  :  setID
(53,'('):   shift to state 78
(78,setID):   shift to state 38
(38,--):   reduce   78->53
		use rule 94,  var  :  setID
(53,','):   reduce   78->51
		use rule 87,  prim  :  var
(51,','):   reduce   78->50
		use rule 78,  lowexpr  :  prim
(50,','):   reduce   78->49
		use rule 74,  mulexpr  :  lowexpr
(49,','):   reduce   78->48
		use rule 71,  sumexpr  :  mulexpr
(48,','):   reduce   78->47
		use rule 69,  midexpr  :  sumexpr
(47,','):   reduce   78->112
		use rule 65,  expr  :  midexpr
(112,','):   reduce   78->114
		use rule 92,  argList  :  expr
(114,','):   shift to state 131
(131,setSTRINGCON):   shift to state 39
(39,--):   reduce   131->54
		use rule 95,  constant  :  setSTRINGCON
(54,--):   reduce   131->51
		use rule 88,  prim  :  constant
(51,--):   reduce   131->50
		use rule 78,  lowexpr  :  prim
(50,')'):   reduce   131->49
		use rule 74,  mulexpr  :  lowexpr
(49,')'):   reduce   131->48
		use rule 71,  sumexpr  :  mulexpr
(48,')'):   reduce   131->47
		use rule 69,  midexpr  :  sumexpr
(47,')'):   reduce   131->140
		use rule 65,  expr  :  midexpr
(140,')'):   reduce   78->114
		use rule 93,  argList  :  argList  ','  expr
(114,')'):   reduce   78->113
		use rule 90,  args  :  argList
(113,')'):   shift to state 130
(130,--):   reduce   78->52
		use rule 89,  funcCall  :  var  '('  args  ')'
(52,--):   reduce   78->50
		use rule 81,  lowexpr  :  funcCall
(50,')'):   reduce   78->49
		use rule 74,  mulexpr  :  lowexpr
(49,')'):   reduce   78->48
		use rule 71,  sumexpr  :  mulexpr
(48,')'):   reduce   78->47
		use rule 69,  midexpr  :  sumexpr
(47,')'):   reduce   78->112
		use rule 65,  expr  :  midexpr
(112,')'):   reduce   78->114
		use rule 92,  argList  :  expr
(114,')'):   reduce   78->113
		use rule 90,  args  :  argList
(113,')'):   shift to state 130
(130,--):   reduce   125->52
		use rule 89,  funcCall  :  var  '('  args  ')'
(52,--):   reduce   125->50
		use rule 81,  lowexpr  :  funcCall
(50,setID):   reduce   125->49
		use rule 74,  mulexpr  :  lowexpr
(49,setID):   reduce   125->48
		use rule 71,  sumexpr  :  mulexpr
(48,setID):   reduce   125->47
		use rule 69,  midexpr  :  sumexpr
(47,setID):   reduce   125->135
		use rule 65,  expr  :  midexpr
(135,setID):   reduce   138->87
		use rule 41,  stmt  :  var  ":="  expr
(87,setID):   reduce   128->138
		use rule 39,  stmtList  :  stmtList  stmt
(138,setID):   shift to state 38
(38,--):   reduce   138->90
		use rule 94,  var  :  setID
(90,'('):   shift to state 78
(78,setSTRINGCON):   shift to state 39
(39,--):   reduce   78->54
		use rule 95,  constant  :  setSTRINGCON
(54,--):   reduce   78->51
		use rule 88,  prim  :  constant
(51,--):   reduce   78->50
		use rule 78,  lowexpr  :  prim
(50,'~'):   shift to state 77
(77,setID):   shift to state 38
(38,--):   reduce   77->53
		use rule 94,  var  :  setID
(53,'('):   shift to state 78
(78,setID):   shift to state 38
(38,--):   reduce   78->53
		use rule 94,  var  :  setID
(53,')'):   reduce   78->51
		use rule 87,  prim  :  var
(51,')'):   reduce   78->50
		use rule 78,  lowexpr  :  prim
(50,')'):   reduce   78->49
		use rule 74,  mulexpr  :  lowexpr
(49,')'):   reduce   78->48
		use rule 71,  sumexpr  :  mulexpr
(48,')'):   reduce   78->47
		use rule 69,  midexpr  :  sumexpr
(47,')'):   reduce   78->112
		use rule 65,  expr  :  midexpr
(112,')'):   reduce   78->114
		use rule 92,  argList  :  expr
(114,')'):   reduce   78->113
		use rule 90,  args  :  argList
(113,')'):   shift to state 130
(130,--):   reduce   77->52
		use rule 89,  funcCall  :  var  '('  args  ')'
(52,--):   reduce   77->111
		use rule 81,  lowexpr  :  funcCall
(111,--):   reduce   78->50
		use rule 85,  lowexpr  :  lowexpr  '~'  lowexpr
(50,')'):   reduce   78->49
		use rule 74,  mulexpr  :  lowexpr
(49,')'):   reduce   78->48
		use rule 71,  sumexpr  :  mulexpr
(48,')'):   reduce   78->47
		use rule 69,  midexpr  :  sumexpr
(47,')'):   reduce   78->112
		use rule 65,  expr  :  midexpr
(112,')'):   reduce   78->114
		use rule 92,  argList  :  expr
(114,')'):   reduce   78->113
		use rule 90,  args  :  argList
(113,')'):   shift to state 130
(130,--):   reduce   138->89
		use rule 89,  funcCall  :  var  '('  args  ')'
(89,--):   reduce   138->87
		use rule 45,  stmt  :  funcCall
(87,--):   reduce   128->138
		use rule 39,  stmtList  :  stmtList  stmt
(138,END):   shift to state 143
(143,FUNCTION):   shift to state 91
(91,--):   reduce   143->149
		use rule 16,  endtag  :  FUNCTION
(149,--):   reduce   128->137
		use rule 37,  funcend  :  stmtList  END  endtag
(137,--):   reduce   1->14
		use rule 30,  attrDecl  :  functype  FUNCTION  setID  '('  parmList  ')'  funcend
(14,--):   reduce   0->1
		use rule 3,  attributes  :  attributes  attrDecl
(1,$):   reduce   0->158
		use rule 1,  script  :  attributes
(158,$):   shift to state 159
(159,$):   shift to state 160
parse_Run returns 256
