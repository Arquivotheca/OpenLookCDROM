\begindata{text,538945640}
\textdsversion{12}
\template{default}
\define{global
}
\define{itemize
}
\formatnote{\chapter{Example 3:  Responding to mouse dragging}} \indexi{Mouse 
drags}


Example 2 described the basic class procedures and methods needed to create a 
very simple object that responds to mouse hits.  This example introduces the 
 additional Andrew Toolkit methods and control structure needed to create an 
object that responds to mouse dragging. 


This section will show how to take the \italic{helloworldapp} program from 
Example 2 and modify it to respond to the user dragging the mouse as well as 
hitting the mouse button.  Like Example 2, this program draws \italic{hello 
world} initially at the center of the window and if the user clicks on the 
left mouse button, the program draws \italic{hello world} centered at the 
location of the mouse cursor when the user lets up on the button. 
 Additionally, if the user clicks down with the right button and, while 
holding it down, moves the mouse (i.e. drags), the \italic{hello world} string 
follows the movement of the mouse. 


The discussion that follows describes how to modify the \italic{helloworldview} 
object in Example 2 to produce Example 3.  The resulting program, 
\italic{helloworldapp}, is defined in five files: 


\itemize{
a hellov.ch file -- will contain the class definition for the helloworldview 
class.  Additional data declarations will help keep track of the distance that 
the mouse has moved. 


a hellov.c file -- will contain statements that import Andrew Toolkit classes 
and define the object's methods and class procedures.  We will modify Example 
2's Hit method so that it also responds to mouse dragging. 


a helloa.ch file -- will contain the class definition for the application 
program that will display an instance of the class in a window.  This will be 
exactly the same as in Example 2. 


a helloa.c -- will contain declarations needed by the Andrew Toolkit linking 
and loading facilities as well the definition of the \italic{helloworldview} 
application method.  This will be exactly the same as in Example 2. 


Makefile -- will contain the directions for compiling, linking and loading. 
 This will be exactly the same as Example 2. 

}

For a complete listing of these files, see \italic{Program listing for Example 
3 } at the end of this section on p. 
\begindata{textref,539236104}
\textdsversion{12}
# ExThreeListing\
\enddata{textref,539236104}
\view{textrefv,539236104,925,0,0}.  The source code is available in the 
directory /usr/andrew/examples/ex3, together with the compiled program. 


Although the discussion refers directly to this example, the information 
generally applies to the creation of any class that will respond to mouse 
dragging. 



\section{Running the example program}


\formatnote{\bold{Action 1.}\formatnote{  } \formatnote{To run the program, at 
the \bold{command }prompt type


runapp /usr/andrew/examples/ex3/helloa


and press the Enter key.

}
\bold{Response.}\formatnote{   }The program will produce a window with 
\italic{hello world}

centered in the body.



\bold{Action 2.}\formatnote{   }Click with the left mouse button.


\bold{Response.}\formatnote{   }The program will respond to the mouse hit by 
redrawing

\italic{hello world} at the position of the mouse cursor when you let up

the mouse button.



\bold{Action 3.}\formatnote{   }Click down with the right mouse button and, 
while continuing to hold it down, drag the mouse.


\bold{Response.}\formatnote{   }The program will respond to the mouse dragging 
by redrawing \italic{hello world} to track the movement of the mouse.



\bold{Action 4.}\formatnote{   }Re-shape the program's window. 


\bold{Response.} \formatnote{   }The program will respond to an full update 
request and

redraw \italic{hello world }at its current coordinates.



\bold{Action 5.}\formatnote{   }To quit the program, pop-up the menus by 
pressing down on both mouse buttons simultaneously, and choose the \bold{Quit} 
option

from menu card.


\bold{Response.} \formatnote{   }The program will disappear from the screen.

}
\begindata{bp,538928712}
\enddata{bp,538928712}
\view{bpv,538928712,926,0,0}
\section{Modifying the class definition}


\subsection{Defining the class} \indexi{Class++Defining}


The class declaration for the class will still be in the file 
\italic{hellov.ch}. 


\formatnote{
class helloworldview[hellov]: view \{

  overrides:

    FullUpdate(enum view_UpdateType type, long left, long top, long width, 
long right);

    Update();

    Hit (enum view_MouseAction action, long x, long y, long numberOfClicks) 
returns struct view *;

  data:

       long x;

       long y;

       long newX;

       long newY;

       \bold{long distX;

              long distY;}

       boolean HaveDownTransition;

\};

}

Note that the code is exactly the same as in the previous example's hellov.ch 
file, except two new data elements are defined:  \italic{distX} and 
\italic{distY} will be used to find the distance between the mouse click and 
\italic{hello world} string. 


\subsection{Handling mouse dragging} \indexi{Mouse drag}

\indexi{View++\italic{Hit}}  

\indexi{ \italic{Hit}} 

\indexi{ \italic{view_Hit}}


The \italic{FullUpdate} and\italic{ Update} procedures for this program 
remains the same as in the previous example.  The only change that needs to be 
made to create an object that responds to mouse drags as opposed to mouse hits 
only is in the\italic{ Hit } method itself: 


\formatnote{
struct view *helloworldview__Hit(hwv,action,x,y,numberOfClicks)

struct helloworldview *hwv;

enum view_MouseAction action;

long x;

long y;

long numberOfClicks;

\{

   \bold{ if(hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightUp:

		hwv->HaveDownTransition=FALSE;

		/* fall through */

	    case view_RightMovement:

		hwv->newX=x-hwv->distX;

		hwv->newY=y-hwv->distY;

		break;

	    case view_LeftUp:

		hwv->HaveDownTransition=FALSE;

		hwv->newX=x;

		hwv->newY=y;

		break;

	    case view_LeftMovement:

		/* do nothing */

		break;

	    default:

		/* re-synchronize mouse */

		hwv->HaveDownTransition=FALSE;

	\}


    if(!hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightDown:

		hwv->distX=x-hwv->x;

		hwv->distY=y-hwv->y;

		/* fall through */

	    case view_LeftDown:

		hwv->HaveDownTransition=TRUE;

		helloworldview_WantInputFocus(hwv,hwv);

		break;

	\}


    helloworldview_WantUpdate(hwv,hwv);}


    return (struct view *)hwv;

\}


}

The first condition statement takes care of all the possible up transitions of 
the mouse buttons and the second condition statement takes care of all the 
down transitions.  In this sense, this Hit method definition is similar to the 
if-else format of the Hit method in the previous example.  After all the tests 
are completed and the corresponding actions taken, the method requests an 
Update, also as in the previous example. 


Unlike Example 2, however, this example must account for movements not only of 
the left mouse button moving up and down, but also the cases in which the 
right mouse button is moving up and down, as well as cases in which either the 
left or the right button is being held down and dragged.  Thus, the first 
condition statement of the Hit method first tests to see if the right button 
has been released or moved.  If there has been a right button hit (the RightUp 
test), the HaveDownTransition variable is switched back to FALSE.  If, 
additionally, the mouse has been dragged with the right button down, new X and 
Y coordinates are recorded, which in turn are used by the Update procedure to 
redraw the text string on the screen in the proper position. 


If no right button movement has been noticed, then the left mouse button 
movement is tested.  In this example, the left mouse button is programmed to 
respond to mouse hits, not drags, therefore the LeftUp test yields new X and Y 
coordinates, but the LeftMovement test does nothing.  There is a default case 
that will make sure the HaveDownTransition variable is switched back to FALSE. 




\paragraph{The Hit method and the input focus} \indexi{Input focus}


The second part of the Hit definition takes care of the down transitions of 
the mouse buttons.  First the right button is tested; if TRUE, the new 
distance vector is recorded)   Then, the left button is tested; if TRUE, the 
method requests an \italic{input focus}.  When a view or window has the input 
focus, it means that all keyboard and menu input is directed towards that view 
or window until the input focus is lost.  The notion of the input focus will 
be discussed further in Examples 4 and 5, which describe key commands and 
menus; the request is included here more as an ATK programming convention 
(\italic{someone} should always have the input focus).  


In this example, however, there is a side effect associated with requesting 
the input focus, which is the "Quit" menu card. 

\indexi{Menus++Quit option} When helloworldview requests the input focus, that 
request is passed up to the Interaction Manager which, by default, provides 
the view with the input focus a menu card with the "Quit" option.  Menus will 
be discussed in Example 5. 


\paragraph{Control structure of the mouse drag} \indexi{Mouse drag++Control 
structure}


If you ran the example program, you may have noticed that the text string is 
always dragged at a specific distance from the mouse cursor.  This distance is 
represented by (distX, distY).  When a mouse button is depressed, distX and 
distY are computed from the (x,y) coordinates of the mouse hit and the 
"current"  (x, y) coordinates of the text string.  An update request is sent 
to save the distX and distY values. 


When the movement of the mouse cursor stops, the newX and newY for the redraw 
is calculated from the current position of the mouse cursor and the distance 
the text string is located from the mouse cursor.  Then an update is 
requested.  This time, new  x and y coordinates are sent to the Update 
procedure, so the string is redrawn at the new position. 


In execution, the updates occur fast enough that the string seems to be moving 
continuously. \indexi{Updates}


No changes need to be made to either the Makefile or the app modules, and the 
compilation procedures are the same as in the previous example. 

\begindata{bp,538929032}
\enddata{bp,538929032}
\view{bpv,538929032,927,0,0}
\begindata{texttag,539315976}
\textdsversion{12}
ExThreeListing\
\enddata{texttag,539315976}
\view{texttagv,539315976,928,0,0}
\section{Program listing for Example 3}


\formatnote{
\bold{hellov.ch}

class helloworldview[hellov]: view \{

  overrides:

    FullUpdate(enum view_UpdateType type, long left, long top, long width, 
long height);

    Update();

    Hit (enum view_MouseAction action, long x, long y, long numberOfClicks) 
returns struct view *;

  data:

    long x;

    long y;

    long newX;

    long newY;

    long distX;

    long distY;

    boolean HaveDownTransition;

\};



\bold{hellov.c}


#include <class.h>

#include "hellov.eh"

#include "graphic.ih"


#define POSUNDEF -1


boolean helloworldview__InitializeObject(classID, hwv)

    struct classheader *classID;

    struct helloworldview *hwv;

\{

    hwv->x = POSUNDEF;

    hwv->y = POSUNDEF;

    hwv->HaveDownTransition = FALSE;

    return TRUE;

\}



void helloworldview__FullUpdate(hwv, type, left, top, width, height)

    struct helloworldview *hwv;

    enum view_UpdateType type;

    long left;

    long top;

    long width;

    long height;

\{

    struct rectangle myVisualRect; 


    if (hwv->x == POSUNDEF)  \{

	helloworldview_GetVisualBounds(hwv,&myVisualRect);

	hwv->x = rectangle_Left(&myVisualRect) + rectangle_Width(&myVisualRect)/2;

	hwv->y = rectangle_Top(&myVisualRect) + rectangle_Height(&myVisualRect)/2;

    \}


    helloworldview_MoveTo(hwv,hwv->x,hwv->y);

    helloworldview_DrawString(hwv,"hello world",

	graphic_BETWEENTOPANDBASELINE | graphic_BETWEENLEFTANDRIGHT);    

\}


    

void helloworldview__Update(hwv)

    struct helloworldview *hwv;

\{

  

    if (hwv->newX != hwv->x ||  hwv->newY != hwv->y) \{

        helloworldview_SetTransferMode(hwv,graphic_INVERT);


        helloworldview_MoveTo(hwv, hwv->x , hwv->y);

        helloworldview_DrawString(hwv, "hello world", 
graphic_BETWEENTOPANDBASELINE | graphic_BETWEENLEFTANDRIGHT);


        hwv->x = hwv->newX;

        hwv->y = hwv->newY;


        helloworldview_MoveTo(hwv, hwv->x , hwv->y);

        helloworldview_DrawString(hwv, "hello world", 
graphic_BETWEENTOPANDBASELINE | graphic_BETWEENLEFTANDRIGHT);

    

    \}

\}



struct view *helloworldview__Hit(hwv,action,x,y,numberOfClicks)

struct helloworldview *hwv;

enum view_MouseAction action;

long x;

long y;

long numberOfClicks;

\{

    if(hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightUp:

		hwv->HaveDownTransition=FALSE;

		/* fall through */

	    case view_RightMovement:

		hwv->newX=x-hwv->distX;

		hwv->newY=y-hwv->distY;

		break;

	    case view_LeftUp:

		hwv->HaveDownTransition=FALSE;

		hwv->newX=x;

		hwv->newY=y;

		break;

	    case view_LeftMovement:

		/* do nothing */

		break;

	    default:

		/* re-synchronize mouse */

		hwv->HaveDownTransition=FALSE;

	\}


    if(!hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightDown:

		hwv->distX=x-hwv->x;

		hwv->distY=y-hwv->y;

		/* fall through */

	    case view_LeftDown:

		hwv->HaveDownTransition=TRUE;

		helloworldview_WantInputFocus(hwv,hwv);

		break;

	\}


    helloworldview_WantUpdate(hwv,hwv);


    return (struct view *)hwv;

\}



\bold{helloa.ch}


class helloworldapp[helloa] : application[app]\{

    overrides:

	Start() returns boolean;

\};



\bold{helloa.c}


#include <class.h>


#include "helloa.eh"


#include "im.ih"

#include "hellov.ih"


boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct helloworldview *hwv;

    struct im *im;


    if(!super_Start(hwapp))

	return FALSE;


    hwv=helloworldview_New();

    if(hwv==NULL)

	return FALSE;


    im=im_Create(NULL);

    if(im==NULL)\{

	helloworldview_Destroy(hwv);

	return FALSE;

    \}


    im_SetView(im,hwv);


    return TRUE;

\}


\bold{Makefile}


SRCDIR=/usr/andrew/

INCLUDES= -I. -I$\{SRCDIR\}include/atk -I$\{SRCDIR\}include

INCLUDESRC = $\{SRCDIR\}include/atk

CC=cc

DEBUG = -g

TOOLS = $\{SRCDIR\}bin/

CFLAGS= $\{DEBUG\} $\{INCLUDES\} 

CLASSFLAGS=$\{INCLUDES\}


MAKEDO = $\{TOOLS\}makedo $\{DEBUG\} -b $\{TOOLS\} -d $\{SRCDIR\}lib 

CLASS = $\{TOOLS\}class


.SUFFIXES: .ih .eh .ch .do


.ch.ih:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch

.ch.eh:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch


.o.do:

	$\{MAKEDO\} $<



all:  helloa.do hellov.do


helloa.do: helloa.o helloa.eh

hellov.do: hellov.o hellov.eh


helloa.o: helloa.c

helloa.o: $\{INCLUDESRC\}/app.ih

helloa.o: $\{INCLUDESRC\}/graphic.ih

helloa.o: $\{INCLUDESRC\}/im.ih

helloa.o: $\{INCLUDESRC\}/observe.ih

helloa.o: $\{INCLUDESRC\}/point.h

helloa.o: $\{INCLUDESRC\}/rect.h

helloa.o: $\{INCLUDESRC\}/view.ih

helloa.o: $\{SRCDIR\}include/class.h

helloa.o: hellov.ih

helloa.o: helloa.eh

helloa.eh helloa.ih: helloa.ch

helloa.eh helloa.ih: $\{INCLUDESRC\}/app.ih

hellov.o: hellov.c

hellov.o: $\{INCLUDESRC\}/graphic.ih

hellov.o: $\{INCLUDESRC\}/observe.ih

hellov.o: $\{INCLUDESRC\}/point.h

hellov.o: $\{INCLUDESRC\}/rect.h

hellov.o: $\{INCLUDESRC\}/view.ih

hellov.o: $\{SRCDIR\}include/class.h

hellov.o: hellov.eh

hellov.eh hellov.ih: hellov.ch

hellov.eh hellov.ih: $\{INCLUDESRC\}/graphic.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/observe.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/point.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/rect.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/view.ih

hellov.eh hellov.ih: $\{SRCDIR\}include/class.h


}

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,930,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538945640}
