\begindata{text,539047692}
\textdsversion{12}
\template{default}
\define{global
}
\define{itemize
}
\formatnote{\chapter{Example 9:  Posting Questions}}  

\indexi{Messages++Questions} \indexi{User input} 

\indexi{Message} \indexi{Class++Message}


Example 8 showed how to post a message in a view.  This example will 
illustrate how to post messages that ask a question, then waits for user input 
and responds.  Asking a question through the message package is very similar 
to displaying a string.  Because there are several different commonly used 
methods of accepting user input however, there is more than one method to do 
so.  Currently, methods exist to simply input a string, to input a string and 
allow help/completion at the user's request, and to ask a multiple choice 
question. 


Example 8 displayed the coordinate corresponding to the position of the 
\italic{hello world} text string.  Example 9 adds a new menu item, 
\italic{Relocate.}  If the user chooses Relocate, the program will post a 
message in the message line asking for a new coordinate and wait for user 
input.  When the user types in a coordinate, the program will redraw the text 
string at the location that the user specified. 


The discussion that follows presents a step-by-step description of how to 
modify the \italic{helloworldview} class in Example 8 to produce Example 9. 
 If you were to follow the steps, you would produce a program, called 
\italic{helloworldapp}, in five files: 


\itemize{
a hellov.ch file -- will contain the class definition for 
\italic{helloworldview}.  It will be exactly the same as Example 8. 


a hellov.c file -- will contain statements that import Andrew Toolkit classes 
and define the object's methods and class procedures.  We will add a 
definition of the \italic{Relocate} function with its menu and key bindings 
that will ask the user for a coordinate pair, then call \italic{WantUpdate} to 
redraw \italic{hello world} at that coordinate. 


a helloa.ch file -- will contain the class definition for the application 
program that will display an instance of the class in a window.  This will be 
exactly the same as in Example 8. 


a helloa.c -- will contain declarations needed by the Andrew Toolkit linking 
and loading facilities as well the definition of the \italic{helloworldview} 
application method. This will be exactly the same as in Example 8. 


Makefile -- will contain the directions for compiling, linking and loading. 
 This will be exactly the same as Example 8. 

}

For a complete listing of these files, see \italic{Program Listing for Example 
9} at the end of this section on p. 
\begindata{textref,539315976}
\textdsversion{12}
# ExNineListing\
\enddata{textref,539315976}
\view{textrefv,539315976,875,0,0}.  The source code is available in the 
directory /usr/andrew/examples/ex9, together with the compiled program. 


Although the discussion of the steps refers directly to this example, the 
information generally applies to the creation of a class that will create 
messages that ask questions. 

\begindata{bp,538929416}
\enddata{bp,538929416}
\view{bpv,538929416,876,0,0}
\section{Running the example program}


\formatnote{
\bold{Action 1.} \formatnote{  }\formatnote{To run the program, at the 
\bold{command }prompt type


runapp /usr/andrew/examples/ex9/helloa


and press the Enter key.

}

\bold{Response.}\formatnote{   }The program will produce a window with 
\italic{hello world}

centered in the body of the window, vertical and horizontal scroll bars, and a 
message line strip.



\bold{Action 2.} \formatnote{   }Move \italic{hello world} in the window,  by 
dragging it with

the right mouse button, or moving it with left mouse button hits.


\bold{Response. } \formatnote{  } \italic{hello world} will be redrawn and the 
message line

will display the message "Hello world at" followed by the coordinates

of the text string.



\bold{Action 3.}\formatnote{   }Choose \bold{Relocate} from the menus.


\bold{Response. }\formatnote{   }A new message will be displayed in the 
message line that

asks for "New location (x,y)."


\bold{Action 4.}\formatnote{   }Bring up the menus again.


\bold{Response.} \formatnote{   }This time, only one menu card with 
\bold{Paste} will show

up.  Paste can be used to cut-and-paste into the message line response.


\bold{Action 5.}\formatnote{   }Type in or paste in a coordinate pair--the 
first number

in the pair should be separated from the second by a comma--and press

the Enter key. (No parentheses are necessary)


\bold{Response.} \formatnote{  } \italic{ hello world} will be redrawn at the 
new coordinates

which will be displayed in the message line.  If no comma is given, of if the 
format of the answer is not an expected one,

the error message "Bad format; must be: number,number" will be displayed

in the message line.


\bold{Action 6.}\formatnote{   }To quit the program, pop-up the menus and 
choose \bold{Quit}

from the top card.


\bold{Response.} \formatnote{   }The program will disappear from the screen.

}
\begindata{bp,538929160}
\enddata{bp,538929160}
\view{bpv,538929160,877,0,0}
\section{Overview of message questions}


The simplest question routine is \italic{message_AskForString (view, 
 priority, prompt, default,  buffer,  buflen)}. 
 \indexi{ \italic{message_AskForString}}

\italic{View} and \italic{priority} are the same as in 
\italic{message_DisplayString}.  \italic{Prompt} is the string displayed to 
the user that prompts for an answer.  \italic{Default} is the default input 
string--this is the initial value of the string which the user edits to give 
an answer.  If the user presses return immediately, this value is returned as 
the value; the user must explicitly delete it to return something else. 
 \italic{Buffer} should point to a character array, of which \italic{buflen} 
is the length.  The answer that the user gives will be returned in this 
buffer. 


\section{Modifying the class definition}


\subsection{Asking a question}


In this example, we will create a new procedure, \bold{relocate}. 


\formatnote{
static void relocate(hwv,key)

struct helloworldview *hwv;

long key;

\{

    char buf[100];

    int x,y;


    message_AskForString(hwv,0,"New location (x,y): ",NULL,buf,sizeof(buf));


    if(sscanf(buf,"%d,%d",&x,&y)!=2)

	message_DisplayString(hwv,1,"Bad format; must be: number,number");

    else\{

	hwv->distX+=(hwv->newX-x);

	hwv->distY+=(hwv->newY-y);

	hwv->newX=x;

	hwv->newY=y;

	helloworldview_WantUpdate(hwv,hwv);

    \}

\}

}

The procedure \bold{relocate} takes as arguments the helloworldview and a key. 
 The variable \italic{buf}, which will hold the user response (the answer to 
the question) is initialized at size 100.  Then, the message_AskForString 
method is called on the view helloworldview, with the prompt "New location 
(x,y):" which will appear in the message line of the view.  There will be no 
default answer for this procedure, so we pass NULL.  Finally, buf is specified 
as the buffer to contain the answer, and sizeof(buf) will be the length of 
that answer. 


When the user types in the response, \bold{relocate} scans the answer to check 
for the correct format, and if correct, stores the information in &x and &y; 
if the format is not correct, then message_DisplayString is called to display 
the error message.  If all is well, the user response will be used to compute 
new X and Y coordinates for the helloworld string, and WantUpdate is called to 
redraw the string at those coordinates. 


If you ran the program, you will have noticed that while the program is asking 
a question, the only menu card/option available is \bold{Paste}.  The reason 
for the menu change is that the text in the message line is a \italic{text} 
object.  We will discuss text in more detail in a later chapter, but text 
itself has its own set of menus and menu options, one of which is Paste.  The 
frame is defined such that it tells the text object to suppress all the text 
menu options except for Paste.  While the program is asking a question and 
waiting for a response, the text object in the message line has the input 
focus, therefore the Paste menu card is displayed. 

  

\subsection{Binding the relocate function}


\formatnote{
static struct bind_Description helloworldviewBindings[]=\{

    \{"helloworld-center", "\\003",0, "Hello World,Center",0,0, Center,

"Center the helloworld string."\},

    \{"helloworld-invert", "\\011",0, "Hello World,Invert",0,0, Invert,

"Invert the helloworld string."\},

    \bold{\{"helloworld-relocate", "\\022",0, "Hello World,Relocate",0,0,

relocate, "Relocate the helloworld string."\}},

    NULL

\};

}

The portion in bold face type is added to the bindings list to bind the 
relocate function in the procedure table.  (See Examples 4 and 5 for a 
complete description of bindings.) The function is assigned the key binding of 
\italic{Ctrl-r} and the menu card name \bold{Relocate}.  Since it is posted 
last, it appears positioned as the first choice on the \italic{Hello World} 
menu card. 

\begindata{bp,538928968}
\enddata{bp,538928968}
\view{bpv,538928968,878,0,0}
\section{Program listing for Example 
9}\
\begindata{texttag,539314952}
\textdsversion{12}
ExNineListing\
\enddata{texttag,539314952}
\view{texttagv,539314952,879,0,0}


\formatnote{
\bold{hellov.ch}


class helloworldview[app]: view \{

overrides:

    FullUpdate(enum view_UpdateType type, long left, long top, long width, 
long height);

    Update();

    Hit(enum view_MouseAction action, long x, long y, long numberOfClicks) 
returns struct view *;

    ReceiveInputFocus();

    LoseInputFocus();

    GetInterface(int type) returns char *;

    GetApplicationLayer() returns struct view *;

    DeleteApplicationLayer(struct view *);

classprocedures:

    InitializeClass() returns boolean;

data:

    struct keystate *keystate;

    struct menulist *menulist;

    boolean HaveDownTransition;

    boolean haveInputFocus;

    long x,y;

    long distX,distY;

    long frameX, frameY;

    boolean blackOnWhite;

    long newX,newY;

    boolean newBlackOnWhite;

    long newFrameX, newFrameY;

    int vrWidth,vrHeight;

\};


\bold{hellov.c}


#include <class.h>


#include "hellov.eh"


#include "graphic.ih"

#include "rect.h"

#include "keymap.ih"

#include "keystate.ih"

#include "menulist.ih"

#include "scroll.ih"

#include "bind.ih"

#include "message.ih"


#define POSUNDEF -1

#define TOTALSIZE 1500


static void xgetinfo(), xsetframe(), ygetinfo(), ysetframe();

static long xwhat(), ywhat();


static struct scrollfns horizInterface = \{

    xgetinfo, xsetframe, NULL, xwhat

\};


static struct scrollfns vertInterface = \{

    ygetinfo, ysetframe, NULL, ywhat

\};


static struct keymap *helloworldviewKeymap;

static struct menulist *helloworldviewMenulist;


boolean helloworldview__InitializeObject(classID, hwv)

    struct classheader *classID;

    struct helloworldview *hwv;   

\{

    hwv->x = POSUNDEF;

    hwv->y = POSUNDEF;

    hwv->HaveDownTransition = FALSE;

    hwv->haveInputFocus = FALSE;

    hwv->keystate = keystate_Create(hwv, helloworldviewKeymap);

    hwv->blackOnWhite = TRUE;

    hwv->newBlackOnWhite = TRUE;

    hwv->menulist = menulist_DuplicateML(helloworldviewMenulist, hwv);

    hwv->newFrameX = hwv->newFrameY = 0;

    return TRUE;

\}


struct view *helloworldview__GetApplicationLayer(hwv)

struct textview *hwv;

\{

    return (struct view *)scroll_Create(hwv,scroll_LEFT+scroll_BOTTOM);

\}


void helloworldview__DeleteApplicationLayer(hwv,scrollbar)

struct textview *hwv;

struct scroll *scrollbar;

\{

    scroll_Destroy(scrollbar);

\}


void helloworldview__FullUpdate(hwv, type, left, top, width, height)

struct helloworldview *hwv;

enum view_UpdateType type;

long left;

long top;

long width;

long height; 

\{

    struct rectangle myVisualRect;


    helloworldview_GetVisualBounds(hwv,&myVisualRect);

    hwv->vrWidth=rectangle_Width(&myVisualRect);

    hwv->vrHeight=rectangle_Height(&myVisualRect);


    if (hwv->newFrameX + hwv->vrWidth > TOTALSIZE)

	hwv->newFrameX = TOTALSIZE - hwv->vrWidth;

    if (hwv->newFrameY + hwv->vrHeight > TOTALSIZE)

	hwv->newFrameY = TOTALSIZE - hwv->vrHeight;


    hwv->frameX = hwv->newFrameX;

    hwv->frameY = hwv->newFrameY;


    if (hwv->x == POSUNDEF)  \{

	hwv->x = hwv->frameX + hwv->vrWidth / 2;

	hwv->y = hwv->frameY + hwv->vrHeight / 2;

	hwv->newX = hwv->x;

	hwv->newY = hwv->y;

    \}

    else \{

	hwv->x = hwv->newX;

	hwv->y = hwv->newY;

    \}


    helloworldview_SetTransferMode(hwv, graphic_COPY);


    if (hwv->blackOnWhite)  \{

	helloworldview_FillRect(hwv, &myVisualRect, 
helloworldview_WhitePattern(hwv));

    \}

    else  \{

	helloworldview_FillRect(hwv, &myVisualRect, 
helloworldview_BlackPattern(hwv));

    \}


    helloworldview_SetTransferMode(hwv, graphic_INVERT);


    helloworldview_MoveTo(hwv, hwv->x - hwv->frameX, hwv->y - hwv->frameY);

    helloworldview_DrawString(hwv,"hello world",

			   graphic_BETWEENTOPANDBASELINE | graphic_BETWEENLEFTANDRIGHT);    

\}



void helloworldview__Update(hwv)

struct helloworldview *hwv;

\{    

    /* TransferMode is graphic_INVERT from the last FullUpdate */


    if (hwv->newBlackOnWhite != hwv->blackOnWhite)  \{

	struct rectangle vr;

	helloworldview_GetVisualBounds(hwv,&vr);

	helloworldview_FillRect(hwv, &vr, helloworldview_BlackPattern(hwv));

	hwv->blackOnWhite = hwv->newBlackOnWhite;

    \}


    if (hwv->newX != hwv->x || hwv->frameX != hwv->newFrameX || hwv->newY != 
hwv->y || hwv->frameY != hwv->newFrameY) \{

	if(hwv->x!=hwv->newX || hwv->y!=hwv->newY)\{

	    static char buf[100];

	    sprintf(buf,"Hello world at (%d,%d)",hwv->newX,hwv->newY);

	    message_DisplayString(hwv,0,buf);

	\}	    


	helloworldview_MoveTo(hwv, hwv->x - hwv->frameX, hwv->y - hwv->frameY);

	helloworldview_DrawString(hwv, "hello world", graphic_BETWEENTOPANDBASELINE | 
graphic_BETWEENLEFTANDRIGHT);


	hwv->x = hwv->newX;

	hwv->y = hwv->newY;

	hwv->frameX = hwv->newFrameX;

	hwv->frameY = hwv->newFrameY;


	helloworldview_MoveTo(hwv, hwv->x - hwv->frameX, hwv->y - hwv->frameY);

	helloworldview_DrawString(hwv, "hello world", graphic_BETWEENTOPANDBASELINE | 
graphic_BETWEENLEFTANDRIGHT);

    \}

\}



struct view *helloworldview__Hit(hwv, action, x, y, numberOfClicks)

struct helloworldview *hwv;

enum view_MouseAction action;

long x;

long y;

long numberOfClicks;

\{

    if(hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightUp:

		hwv->HaveDownTransition=FALSE;

		/* fall through */

	    case view_RightMovement:

		hwv->newX=x-hwv->distX;

		hwv->newY=y-hwv->distY;

		break;

	    case view_LeftUp:

		hwv->HaveDownTransition=FALSE;

		hwv->newX=x;

		hwv->newY=y;

		break;

	    case view_LeftMovement:

		/* do nothing */

		break;

	    default:

		/* re-synchronize mouse */

		hwv->HaveDownTransition=FALSE;

	\}


    if(!hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightDown:

		hwv->distX=x-hwv->x;

		hwv->distY=y-hwv->y;

		/* fall through */

	    case view_LeftDown:

		hwv->HaveDownTransition=TRUE;

		helloworldview_WantInputFocus(hwv,hwv);

		break;

	\}


    helloworldview_WantUpdate(hwv,hwv);


    return (struct view *)hwv;

\}



void helloworldview__ReceiveInputFocus(hwv)

struct helloworldview *hwv;

\{

    hwv->haveInputFocus = TRUE;

    hwv->keystate->next = NULL;

    helloworldview_PostKeyState(hwv, hwv->keystate);

    helloworldview_PostMenus(hwv, hwv->menulist);

\}



void helloworldview__LoseInputFocus(hwv)

struct helloworldview *hwv;

\{

    hwv->haveInputFocus = FALSE;

\}



static void Center(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    hwv->newX = hwv->newFrameX + hwv->vrWidth / 2;

    hwv->newY = hwv->newFrameY + hwv->vrHeight / 2;

    helloworldview_WantUpdate(hwv, hwv);

\}



static void Invert(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    hwv->newBlackOnWhite = ! hwv->newBlackOnWhite;

    helloworldview_WantUpdate(hwv, hwv);

\}



static void relocate(hwv,rock)

struct helloworldview *hwv;

long rock;

\{

    char buf[100];

    int x,y;


    message_AskForString(hwv,0,"New location (x,y): ",NULL,buf,sizeof(buf));


    if(sscanf(buf,"%d,%d",&x,&y)!=2)

	message_DisplayString(hwv,1,"Bad format; must be: number,number");

    else\{

	hwv->distX+=(hwv->newX-x);

	hwv->distY+=(hwv->newY-y);

	hwv->newX=x;

	hwv->newY=y;

	helloworldview_WantUpdate(hwv,hwv);

    \}

\}



static void xgetinfo(hwv, total, seen, dot)

struct helloworldview *hwv;

struct range *total, *seen, *dot;

\{

    total->beg = 0;

    total->end = TOTALSIZE;

    seen->beg = hwv->frameX;

    seen->end = hwv->frameX + hwv->vrWidth;

    dot->beg = dot->end = hwv->x;

\}


static void ygetinfo(hwv, total, seen, dot)

struct helloworldview *hwv;

struct range *total, *seen, *dot;

\{

    total->beg = 0;

    total->end = TOTALSIZE;

    seen->beg = hwv->frameY;

    seen->end = hwv->frameY + hwv->vrHeight;

    dot->beg = dot->end = hwv->y;

\}


static void xsetframe(hwv, posn, cord, outof)

struct helloworldview *hwv;

int posn;

long cord, outof;

\{

    hwv->newFrameX = posn - hwv->vrWidth * cord / outof;

    if (hwv->newFrameX + hwv->vrWidth > TOTALSIZE)

	hwv->newFrameX = TOTALSIZE - hwv->vrWidth;

    else if (hwv->newFrameX < 0)

	hwv->newFrameX = 0;

    helloworldview_WantUpdate(hwv, hwv);

\}


static void ysetframe(hwv, posn, cord, outof)

struct helloworldview *hwv;

int posn;

long cord, outof;

\{

    hwv->newFrameY = posn - hwv->vrHeight * cord / outof;

    if (hwv->newFrameY + hwv->vrHeight > TOTALSIZE)

	hwv->newFrameY = TOTALSIZE - hwv->vrHeight;

    else if (hwv->newFrameY < 0)

	hwv->newFrameY = 0;

    helloworldview_WantUpdate(hwv, hwv);

\}


static long xwhat(hwv, cord, outof)

struct helloworldview *hwv;

long cord, outof;

\{

    return hwv->frameX + hwv->vrWidth * cord / outof;

\}


static long ywhat(hwv, cord, outof)

struct helloworldview *hwv;

long cord, outof;

\{

    return hwv->frameY + hwv->vrHeight * cord / outof;

\}



char *helloworldview__GetInterface(hwv, type)

struct helloworldview *hwv;

char *type;

\{

    if (strcmp(type, "scroll,vertical") == 0)

	return (char *) &vertInterface;

    else if (strcmp(type, "scroll,horizontal") == 0)

	return (char *) &horizInterface;

    else

	return NULL;

\}



static struct bind_Description helloworldviewBindings[]=\{

    \{"helloworld-center", "\\003",0, "Hello World,Center",0,0, Center, 
"Center the helloworld string."\},

    \{"helloworld-invert", "\\011",0, "Hello World,Invert",0,0, Invert, 
"Invert the helloworld string."\},

    \{"helloworldview-relocate", "\\022",0, "Hello World,Relocate",0,0, 
relocate, "Relocate the helloworldview string."\},

    NULL

\};


boolean helloworldview__InitializeClass(classID)

    struct classheader *classID;

\{

    helloworldviewMenulist=menulist_New();

    helloworldviewKeymap=keymap_New();

    bind_BindList(helloworldviewBindings, 
helloworldviewKeymap,helloworldviewMenulist,&helloworldview_classinfo);

    return TRUE;

\}


\bold{helloa.ch}


class helloworldapp[helloa] : application[app]\{

    overrides:

	Start() returns boolean;

\};


\bold{helloa.c}


#include <class.h>


#include "helloa.eh"


#include "im.ih"

#include "frame.ih"

#include "hellov.ih"


boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct helloworldview *hwv;

    struct view *applayer;

    struct frame *frame;

    struct im *im;


    if(!super_Start(hwapp))

	return FALSE;


    hwv=helloworldview_New();

    if(hwv==NULL)

	return FALSE;


    applayer=helloworldview_GetApplicationLayer(hwv);

    if(applayer==NULL) \{

	helloworldview_Destroy(hwv);

	return FALSE;

    \}


    frame=frame_New();

    if(frame==NULL) \{

	helloworldview_DeleteApplicationLayer(hwv,applayer);

	return FALSE;

    \}


    im=im_Create(NULL);

    if(im==NULL) \{

	frame_Destroy(frame);

	return FALSE;

    \}


    frame_SetView(frame,applayer);

    im_SetView(im,frame);


    helloworldview_WantInputFocus(hwv,hwv);


    return TRUE;


\}



\bold{Makefile}


SRCDIR=/usr/andrew/

INCLUDES= -I. -I$\{SRCDIR\}include/atk -I$\{SRCDIR\}include

INCLUDESRC = $\{SRCDIR\}include/atk

CC=cc

DEBUG = -g

TOOLS = $\{SRCDIR\}bin/

CFLAGS= $\{DEBUG\} $\{INCLUDES\} 

CLASSFLAGS=$\{INCLUDES\}


MAKEDO = $\{TOOLS\}makedo $\{DEBUG\} -b $\{TOOLS\} -d $\{SRCDIR\}lib 

CLASS = $\{TOOLS\}class


.SUFFIXES: .ih .eh .ch .do


.ch.ih:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch

.ch.eh:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch


.o.do:

	$\{MAKEDO\} $<



all:  helloa.do hellov.do


helloa.do: helloa.o helloa.eh

hellov.do: hellov.o hellov.eh


helloa.o: helloa.c

helloa.o: $\{INCLUDESRC\}/app.ih

helloa.o: $\{INCLUDESRC\}/graphic.ih

helloa.o: $\{INCLUDESRC\}/im.ih

helloa.o: $\{INCLUDESRC\}/observe.ih

helloa.o: $\{INCLUDESRC\}/point.h

helloa.o: $\{INCLUDESRC\}/rect.h

helloa.o: $\{INCLUDESRC\}/view.ih

helloa.o: $\{SRCDIR\}include/class.h

helloa.o: hellov.ih

helloa.o: helloa.eh

helloa.eh helloa.ih: helloa.ch

helloa.eh helloa.ih: $\{INCLUDESRC\}/app.ih

hellov.o: hellov.c

hellov.o: $\{INCLUDESRC\}/graphic.ih

hellov.o: $\{INCLUDESRC\}/observe.ih

hellov.o: $\{INCLUDESRC\}/point.h

hellov.o: $\{INCLUDESRC\}/rect.h

hellov.o: $\{INCLUDESRC\}/view.ih

hellov.o: $\{SRCDIR\}include/class.h

hellov.o: hellov.eh

hellov.eh hellov.ih: hellov.ch

hellov.eh hellov.ih: $\{INCLUDESRC\}/graphic.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/observe.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/point.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/rect.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/view.ih

hellov.eh hellov.ih: $\{SRCDIR\}include/class.h


}

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,881,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,539047692}
