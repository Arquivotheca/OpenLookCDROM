\begindata{text,538945396}
\textdsversion{12}
\template{default}
\define{global
}
\define{itemize
}
\formatnote{\chapter{Example 8:  Posting Messages}}

\indexi{Messages++Posting}


Example 8 illustrates how to create an object that posts messages in a message 
line.  The Andrew Toolkit provides two classes -- \italic{Message}

\indexi{Message} 

\indexi{Class++Message} and \italic{Msghandler}

\indexi{Msghandler} 

\indexi{Class++Msghandler} 

-- that allow objects to display message lines. The message line is displayed 
in a strip at the bottom of a window, beneath the scroll bar, if any.  The 
class \italic{frame}  \indexi{Frame++Class}

\indexi{Class++Frame} 

handles the creation of the message line strip. 

\indexi{Messages++Frame}  

\indexi{Message line}


There are two types of messages:  messages that display text or data, and 
messages that ask and wait for user input.   In this example, we will show you 
how create a message that displays text or data.  Example 9 illustrates 
messages that ask the user questions and wait for input. 


This example will build on the previous example, and in addition to all the 
key, menu, and scroll bar functions, it will display a message line that shows 
the coordinate location of the hello world text string in the window.  Thus, 
if the user moves the hello world string by mouse hit, mouse drag, key, menu 
command, or scroll bar, the coordinates displayed in the message line will 
change to reflect the move. 


The discussion that follows presents a step-by-step description of how to 
modify the \italic{helloworld} class in Example 7 to produce Example 8.  If 
you were to follow the steps, you would produce a program, called 
\italic{helloworldapp}, in five files: 


\itemize{
a hellov.ch file -- will contain the class definition for helloworldview.  It 
will be exactly the same as Example 7. 


a hellov.c file -- will contain statements that import Andrew Toolkit classes 
and define the object's methods and class procedures.  We will add to Example 
7's Update method the statements necessary for displaying the coordinate 
message and for updating the coordinates when the text string moves. 


a helloa.ch file -- will contain the class definition for the application 
program that will display an instance of the class in a window.  This will be 
exactly the same as in Example 7. 


a helloa.c -- will contain declarations needed by the Andrew Toolkit linking 
and loading facilities as well the definition of the \italic{helloworldview} 
application method.  We will include procedures to create a message line 
(frame) and link it into the view tree. 


Makefile -- will contain the directions for compiling, linking and loading. 
 This will be exactly the same as Example 7. 

}

For a complete listing of these files, see \italic{Program listing for Example 
8} at the end of this section on p. 
\begindata{textref,539314952}
\textdsversion{12}
# ExEightListing\
\enddata{textref,539314952}
\view{textrefv,539314952,882,0,0}. The source code is available in the 
directory /usr/andrew/examples/ex8, together with the compiled program. 


Although the discussion of the steps refers directly to this example, the 
 information generally applies to the creation of any class that will create 
messages. 

\begindata{bp,538929160}
\enddata{bp,538929160}
\view{bpv,538929160,883,0,0}
\section{Running the example program}


\formatnote{\bold{Action 1.}\formatnote{  }\formatnote{To run the program, at 
the \bold{command }prompt type


\example{runapp /usr/andrew/examples/ex8/helloa}


and press the Enter key.

}

\bold{Response.}\formatnote{   }The program will produce a window with 
\italic{hello world}

centered in the body of the window, vertical and horizontal scroll bars, and a 
message line strip.


\bold{Action 2.} \formatnote{   }Move \italic{hello world} in the window, by 
dragging it with

the right mouse button, or moving it with left mouse button hits.


\bold{Response. }\formatnote{  } \italic{hello world} will be redrawn and the 
message line

will display the message "Hello world at" followed by the coordinates

of the text string.


\bold{Action 3.}\formatnote{   }To re-center \italic{hello world}, choose 
\bold{Center} from

the menu cards, or type \bold{Ctrl-c}.


\bold{Response. }\formatnote{  } \italic{hello world} will be redrawn in the 
center, and the

message line coordinates will change to the coordinates of the center

of the window.


\bold{Action 4.}\formatnote{   }Move the text string by moving either the 
horizontal

or vertical scroll bars.


\bold{Response.} \formatnote{   }The view onto the text string will change, so 
the window display will be different, however, the coordinates in the message 
line will not change, since the actual position of the text string has not 
changed.


\bold{Action 5.}\formatnote{   }To quit the program, pop-up the menus and 
choose \bold{Quit}

from the top card.


\bold{Response.} \formatnote{   }The program will disappear from the screen.

}
\begindata{bp,538929416}
\enddata{bp,538929416}
\view{bpv,538929416,884,0,0}
\section{Overview of message and frame}


The \italic{message} \indexi{Message}

\indexi{Class++Message} 

package is the mechanism intended to provide short text message input/output 
with the user.  It contains methods for displaying strings and inputting 
strings (possibly with completion/help) and multiple choice answers.  Where a 
stand-alone C program might use get/put for user interaction, a Andrew Toolkit 
program would probably use \italic{message_AskForString}or\italic{ 
message_DisplayString}. 


The message methods search up the view tree from the view they are given, 
looking for a ``message handler'' to deal with the request. 

\indexi{Message handler}  

\indexi{Msghandler}  

\indexi{Class++Msghandler}  (The class \italic{msghandler} provides methods 
for manipulating these message handlers.  Message handlers are predefined; the 
application programmer should not need to create message handlers or to call 
\italic{msghandler} methods directly.)  If a message handler is not found, the 
call returns -1.  Otherwise it calls one of the handler's methods to deal with 
the particular action being performed, and returns the error code, if any, 
from the handler method. 


All of the message class procedures include, as their second parameter, a 
\italic{priority}, which the handler that deals with the request can use to 
decide how to deal with it.  For instance, the current handler in the frame 
object uses the priority to decide between using the message line or a dialog 
box.  \indexi{Messages++Priority}


\italic{Frame} is a subclass of the class \italic{lpair}. 

\indexi{Frame} 

\indexi{Class++Frame}  

\indexi{Messages++Frame} 

A frame is essentially a view that provides a \italic{message} interface. 
 Frames divide their rectangles into two areas, \italic{subviews} and 
\italic{message lines}.  The message interface gives the programmer the 
ability to post messages to the user using either the message line or a dialog 
box.  A frame view is normally used in building an Andrew Toolkit application, 
and are closely associated with the \italic{buffer} class.  Frames can either 
be associated with buffers or directly with views.  In this example, the frame 
is used to display the message line.  (See \italic{Frame} in Vol. II for more 
information on frames). 


\section{Modifying the class definition}


To add messages to the previous example, only the \italic{Update} method and 
the imports in\italic{ helloworld.c} needs to be changed.  The class 
definition for helloworld in \italic{helloworld.ch} is the same as in Example 
7. 


\subsection{Importing message procedures} \indexi{Imports}


\formatnote{#include <class.h>


#include "hellov.eh"


#include "graphic.ih"

#include "rect.h"

#include "keymap.ih"

#include "keystate.ih"

#include "menulist.ih"

#include "scroll.ih"

#include "bind.ih"

\bold{#include "message.ih"}

}
In addition to all the imports from the previous example, the procedures from 
message must be imported. 


\subsection{Displaying a message}

\indexi{Messages++Displaying} 


To display a message, one simply calls \italic{message_DisplayString (view, 
priority, string)}. 


In the following helloworldview example, if \italic{x} or \italic{y} has 
changed, we build a string describing the new position and store it in 
\italic{buf,} then call \italic{message_DisplayString} to display 
\italic{buf}. 

\indexi{ \italic{message_DisplayString}} 

This level of indirection is necessary because \italic{message_DisplayString} 
only takes a single string to be displayed.  If there is a \italic{frame} in 
the view tree above the view \italic{hw}, or another view that knows how to 
display messages, it will be displayed appropriately. 


\formatnote{
void helloworld__Update(hw)

struct helloworld *hw;

\{    


    if (hw->newBlackOnWhite != hw->blackOnWhite)  \{

	struct rectangle vr;

	helloworld_GetVisualBounds(hw,&vr);

	helloworld_FillRect(hw, &vr, helloworld_BlackPattern(hw));

	hw->blackOnWhite = hw->newBlackOnWhite;

    \}

   if (hw->newX != hw->x || hw->frameX != hw->newFrameX || hw->newY

!= hw->y || hw->frameY != hw->newFrameY) \{


	\bold{if(hw->x!=hw->newX || hw->y!=hw->newY)\{

	          static char buf[100};

	          sprintf(buf,"Hello world at (%d,%d)",hw->newX,hw->newY);

	          message_DisplayString(hw,0,buf);]

	\}

	helloworld_MoveTo(hw, hw->x - hw->frameX, hw->y - hw->frameY);

	helloworld_DrawString(hw, "hello world", graphic_BETWEENTOPANDBASELINE

| graphic_BETWEENLEFTANDRIGHT);

	hw->x = hw->newX;

	hw->y = hw->newY;

	hw->frameX = hw->newFrameX;

	hw->frameY = hw->newFrameY;


	helloworld_MoveTo(hw, hw->x - hw->frameX, hw->y - hw->frameY);

	helloworld_DrawString(hw, "hello world", graphic_BETWEENTOPANDBASELINE

| graphic_BETWEENLEFTANDRIGHT);

 \}

\}

}

The portion in boldface is the modification added to the code from Example 7. 
 The remainder of the \italic{hellov.c} file is the same as in Example 7. 

\begindata{bp,538929736}
\enddata{bp,538929736}
\view{bpv,538929736,885,0,0}
\subsection{Creating a frame} \indexi{Frame++Creating}


The following is the new helloa.c for this example.  Along with the view, the 
application layer, and the interaction manager, it also creates and links a 
frame. 


\formatnote{
#include <class.h>


#include "helloa.eh"


#include "im.ih"

#include "frame.ih"

#include "hellov.ih"


boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct helloworldview *hwv;

    struct view *applayer;

    struct frame *frame;

    struct im *im;


    if(!super_Start(hwapp))

	return FALSE;


    hwv=helloworldview_New();

    if(hwv==NULL)

	return FALSE;


          applayer=helloworldview_GetApplicationLayer(hwv);

          if(applayer==NULL) \{

	helloworldview_Destroy(hwv);

	return FALSE;

    \}

	

          frame=frame_New();

          if(frame==NULL) \{

	helloworldview_DeleteApplicationLayer(hwv,applayer);

	return FALSE;

    \} 


         im=im_Create(NULL);

         if(im==NULL) \{

	frame_Destroy(frame);

	return FALSE;

    \}


         frame_SetView(frame,applayer);

         im_SetView(im,frame);


    helloworldview_WantInputFocus(hwv,hwv);


    return TRUE;


}
As in the previous example, we create first the helloworldview object and its 
application layer.  Next, we create a new instance of a \italic{frame}.  The 
frame view that contains the message line, not \italic{im}, now becomes the 
parent of the \italic{helloworld} view; \italic{im} becomes the parent of the 
\italic{frame} view. 

\begindata{bp,538271624}
\enddata{bp,538271624}
\view{bpv,538271624,886,0,0}
\section{Program listing for Example 
8}\
\begindata{texttag,539315976}
\textdsversion{12}
ExEightListing\
\enddata{texttag,539315976}
\view{texttagv,539315976,887,0,0}


\formatnote{
\bold{hellov.ch}


class helloworldview[hellov]: view \{

overrides:

    FullUpdate(enum view_UpdateType type, long left, long top, long width, 
long height);

    Update();

    Hit(enum view_MouseAction action, long x, long y, long numberOfClicks) 
returns struct view *;

    ReceiveInputFocus();

    LoseInputFocus();

    GetInterface(int type) returns char *;

    GetApplicationLayer() returns struct view *;

    DeleteApplicationLayer(struct view *);

classprocedures:

    InitializeClass() returns boolean;

data:

    struct keystate *keystate;

    struct menulist *menulist;

    boolean HaveDownTransition;

    boolean haveInputFocus;

    long x,y;

    long distX,distY;

    long frameX, frameY;

    boolean blackOnWhite;

    long newX,newY;

    boolean newBlackOnWhite;

    long newFrameX, newFrameY;

    int vrWidth,vrHeight;

\};



\bold{hellov.c}


#include <class.h>


#include "hellov.eh"


#include "graphic.ih"

#include "rect.h"

#include "keymap.ih"

#include "keystate.ih"

#include "menulist.ih"

#include "scroll.ih"

#include "bind.ih"

#include "message.ih"


#define POSUNDEF -1

#define TOTALSIZE 1500


static void xgetinfo(), xsetframe(), ygetinfo(), ysetframe();

static long xwhat(), ywhat();


static struct scrollfns horizInterface = \{

    xgetinfo, xsetframe, NULL, xwhat

\};


static struct scrollfns vertInterface = \{

    ygetinfo, ysetframe, NULL, ywhat

\};


static struct keymap *helloworldviewKeymap;

static struct menulist *helloworldviewMenulist;


boolean helloworldview__InitializeObject(classID, hwv)

    struct classheader *classID;

    struct helloworldview *hwv;   

\{

    hwv->x = POSUNDEF;

    hwv->y = POSUNDEF;

    hwv->HaveDownTransition = FALSE;

    hwv->haveInputFocus = FALSE;

    hwv->keystate = keystate_Create(hwv, helloworldviewKeymap);

    hwv->blackOnWhite = TRUE;

    hwv->newBlackOnWhite = TRUE;

    hwv->menulist = menulist_DuplicateML(helloworldviewMenulist, hwv);

    hwv->newFrameX = hwv->newFrameY = 0;

    return TRUE;

\}


struct view *helloworldview__GetApplicationLayer(hwv)

struct textview *hwv;

\{

    return (struct view *)scroll_Create(hwv,scroll_LEFT+scroll_BOTTOM);

\}


void helloworldview__DeleteApplicationLayer(hwv,scrollbar)

struct textview *hwv;

struct scroll *scrollbar;

\{

    scroll_Destroy(scrollbar);

\}


void helloworldview__FullUpdate(hwv, type, left, top, width, height)

struct helloworldview *hwv;

enum view_UpdateType type;

long left;

long top;

long width;

long height; 

\{

    struct rectangle myVisualRect;


    helloworldview_GetVisualBounds(hwv,&myVisualRect);

    hwv->vrWidth=rectangle_Width(&myVisualRect);

    hwv->vrHeight=rectangle_Height(&myVisualRect);


    if (hwv->newFrameX + hwv->vrWidth > TOTALSIZE)

	hwv->newFrameX = TOTALSIZE - hwv->vrWidth;

    if (hwv->newFrameY + hwv->vrHeight > TOTALSIZE)

	hwv->newFrameY = TOTALSIZE - hwv->vrHeight;


    hwv->frameX = hwv->newFrameX;

    hwv->frameY = hwv->newFrameY;


    if (hwv->x == POSUNDEF)  \{

	hwv->x = hwv->frameX + hwv->vrWidth / 2;

	hwv->y = hwv->frameY + hwv->vrHeight / 2;

	hwv->newX = hwv->x;

	hwv->newY = hwv->y;

    \}

    else \{

	hwv->x = hwv->newX;

	hwv->y = hwv->newY;

    \}


    helloworldview_SetTransferMode(hwv, graphic_COPY);


    if (hwv->blackOnWhite)  \{

	helloworldview_FillRect(hwv, &myVisualRect, 
helloworldview_WhitePattern(hwv));

    \}

    else  \{

	helloworldview_FillRect(hwv, &myVisualRect, 
helloworldview_BlackPattern(hwv));

    \}


    helloworldview_SetTransferMode(hwv, graphic_INVERT);


    helloworldview_MoveTo(hwv, hwv->x - hwv->frameX, hwv->y - hwv->frameY);

    helloworldview_DrawString(hwv,"hello world",

			   graphic_BETWEENTOPANDBASELINE | graphic_BETWEENLEFTANDRIGHT);    

\}



void helloworldview__Update(hwv)

struct helloworldview *hwv;

\{    

    /* TransferMode is graphic_INVERT from the last FullUpdate */


    if (hwv->newBlackOnWhite != hwv->blackOnWhite)  \{

	struct rectangle vr;

	helloworldview_GetVisualBounds(hwv,&vr);

	helloworldview_FillRect(hwv, &vr, helloworldview_BlackPattern(hwv));

	hwv->blackOnWhite = hwv->newBlackOnWhite;

    \}


    if (hwv->newX != hwv->x || hwv->frameX != hwv->newFrameX || hwv->newY != 
hwv->y || hwv->frameY != hwv->newFrameY) \{

	if(hwv->x!=hwv->newX || hwv->y!=hwv->newY)\{

	    static char buf[100];

	    sprintf(buf,"Hello world at (%d,%d)",hwv->newX,hwv->newY);

	    message_DisplayString(hwv,0,buf);

	\}	    


	helloworldview_MoveTo(hwv, hwv->x - hwv->frameX, hwv->y - hwv->frameY);

	helloworldview_DrawString(hwv, "hello world", graphic_BETWEENTOPANDBASELINE | 
graphic_BETWEENLEFTANDRIGHT);


	hwv->x = hwv->newX;

	hwv->y = hwv->newY;

	hwv->frameX = hwv->newFrameX;

	hwv->frameY = hwv->newFrameY;


	helloworldview_MoveTo(hwv, hwv->x - hwv->frameX, hwv->y - hwv->frameY);

	helloworldview_DrawString(hwv, "hello world", graphic_BETWEENTOPANDBASELINE | 
graphic_BETWEENLEFTANDRIGHT);

    \}

\}



struct view *helloworldview__Hit(hwv, action, x, y, numberOfClicks)

struct helloworldview *hwv;

enum view_MouseAction action;

long x;

long y;

long numberOfClicks;

\{

    if(hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightUp:

		hwv->HaveDownTransition=FALSE;

		/* fall through */

	    case view_RightMovement:

		hwv->newX=x-hwv->distX;

		hwv->newY=y-hwv->distY;

		break;

	    case view_LeftUp:

		hwv->HaveDownTransition=FALSE;

		hwv->newX=x;

		hwv->newY=y;

		break;

	    case view_LeftMovement:

		/* do nothing */

		break;

	    default:

		/* re-synchronize mouse */

		hwv->HaveDownTransition=FALSE;

	\}


    if(!hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightDown:

		hwv->distX=x-hwv->x;

		hwv->distY=y-hwv->y;

		/* fall through */

	    case view_LeftDown:

		hwv->HaveDownTransition=TRUE;

		helloworldview_WantInputFocus(hwv,hwv);

		break;

	\}


    helloworldview_WantUpdate(hwv,hwv);


    return (struct view *)hwv;

\}



void helloworldview__ReceiveInputFocus(hwv)

struct helloworldview *hwv;

\{

    hwv->haveInputFocus = TRUE;

    hwv->keystate->next = NULL;

    helloworldview_PostKeyState(hwv, hwv->keystate);

    helloworldview_PostMenus(hwv, hwv->menulist);

\}



void helloworldview__LoseInputFocus(hwv)

struct helloworldview *hwv;

\{

    hwv->haveInputFocus = FALSE;

\}



static void Center(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    hwv->newX = hwv->newFrameX + hwv->vrWidth / 2;

    hwv->newY = hwv->newFrameY + hwv->vrHeight / 2;

    helloworldview_WantUpdate(hwv, hwv);

\}



static void Invert(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    hwv->newBlackOnWhite = ! hwv->newBlackOnWhite;

    helloworldview_WantUpdate(hwv, hwv);

\}



static void xgetinfo(hwv, total, seen, dot)

struct helloworldview *hwv;

struct range *total, *seen, *dot;

\{

    total->beg = 0;

    total->end = TOTALSIZE;

    seen->beg = hwv->frameX;

    seen->end = hwv->frameX + hwv->vrWidth;

    dot->beg = dot->end = hwv->x;

\}


static void ygetinfo(hwv, total, seen, dot)

struct helloworldview *hwv;

struct range *total, *seen, *dot;

\{

    total->beg = 0;

    total->end = TOTALSIZE;

    seen->beg = hwv->frameY;

    seen->end = hwv->frameY + hwv->vrHeight;

    dot->beg = dot->end = hwv->y;

\}


static void xsetframe(hwv, posn, cord, outof)

struct helloworldview *hwv;

int posn;

long cord, outof;

\{

    hwv->newFrameX = posn - hwv->vrWidth * cord / outof;

    if (hwv->newFrameX + hwv->vrWidth > TOTALSIZE)

	hwv->newFrameX = TOTALSIZE - hwv->vrWidth;

    else if (hwv->newFrameX < 0)

	hwv->newFrameX = 0;

    helloworldview_WantUpdate(hwv, hwv);

\}


static void ysetframe(hwv, posn, cord, outof)

struct helloworldview *hwv;

int posn;

long cord, outof;

\{

    hwv->newFrameY = posn - hwv->vrHeight * cord / outof;

    if (hwv->newFrameY + hwv->vrHeight > TOTALSIZE)

	hwv->newFrameY = TOTALSIZE - hwv->vrHeight;

    else if (hwv->newFrameY < 0)

	hwv->newFrameY = 0;

    helloworldview_WantUpdate(hwv, hwv);

\}


static long xwhat(hwv, cord, outof)

struct helloworldview *hwv;

long cord, outof;

\{

    return hwv->frameX + hwv->vrWidth * cord / outof;

\}


static long ywhat(hwv, cord, outof)

struct helloworldview *hwv;

long cord, outof;

\{

    return hwv->frameY + hwv->vrHeight * cord / outof;

\}



char *helloworldview__GetInterface(hwv, type)

struct helloworldview *hwv;

char *type;

\{

    if (strcmp(type, "scroll,vertical") == 0)

	return (char *) &vertInterface;

    else if (strcmp(type, "scroll,horizontal") == 0)

	return (char *) &horizInterface;

    else

	return NULL;

\}



static struct bind_Description helloworldviewBindings[]=\{

    \{"helloworld-center", "\\003",0, "Hello World,Center",0,0, Center, 
"Center the helloworld string."\},

    \{"helloworld-invert", "\\011",0, "Hello World,Invert",0,0, Invert, 
"Invert the helloworld string."\},

    NULL

\};


boolean helloworldview__InitializeClass(classID)

    struct classheader *classID;

\{

    helloworldviewMenulist=menulist_New();

    helloworldviewKeymap=keymap_New();

    bind_BindList(helloworldviewBindings, 

    helloworldviewKeymap,helloworldviewMenulist,

           &helloworldview_classinfo);

    return TRUE;

\}



\bold{helloa.ch}


class helloworldapp[helloa] : application[app]\{

    overrides:

	Start() returns boolean;

\};



\bold{helloa.c}


#include <class.h>


#include "helloa.eh"


#include "im.ih"

#include "frame.ih"

#include "hellov.ih"


boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct helloworldview *hwv;

    struct view *applayer;

    struct frame *frame;

    struct im *im;


    if(!super_Start(hwapp))

	return FALSE;


    hwv=helloworldview_New();

    if(hwv==NULL)

	return FALSE;


    applayer=helloworldview_GetApplicationLayer(hwv);

    if(applayer==NULL) \{

	helloworldview_Destroy(hwv);

	return FALSE;

    \}


    frame=frame_New();

    if(frame==NULL) \{

	helloworldview_DeleteApplicationLayer(hwv,applayer);

	return FALSE;

    \}


    im=im_Create(NULL);

    if(im==NULL) \{

	frame_Destroy(frame);

	return FALSE;

    \}


    frame_SetView(frame,applayer);

    im_SetView(im,frame);


    helloworldview_WantInputFocus(hwv,hwv);


    return TRUE;

\}



\bold{Makefile}


SRCDIR=/usr/andrew/

INCLUDES= -I. -I$\{SRCDIR\}include/atk -I$\{SRCDIR\}include

INCLUDESRC = $\{SRCDIR\}include/atk

CC=cc

DEBUG = -g

TOOLS = $\{SRCDIR\}bin/

CFLAGS= $\{DEBUG\} $\{INCLUDES\} 

CLASSFLAGS=$\{INCLUDES\}


MAKEDO = $\{TOOLS\}makedo $\{DEBUG\} -b $\{TOOLS\} -d $\{SRCDIR\}lib 

CLASS = $\{TOOLS\}class


.SUFFIXES: .ih .eh .ch .do


.ch.ih:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch

.ch.eh:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch


.o.do:

	$\{MAKEDO\} $<



all:  helloa.do hellov.do


helloa.do: helloa.o helloa.eh

hellov.do: hellov.o hellov.eh


helloa.o: helloa.c

helloa.o: $\{INCLUDESRC\}/app.ih

helloa.o: $\{INCLUDESRC\}/graphic.ih

helloa.o: $\{INCLUDESRC\}/im.ih

helloa.o: $\{INCLUDESRC\}/observe.ih

helloa.o: $\{INCLUDESRC\}/point.h

helloa.o: $\{INCLUDESRC\}/rect.h

helloa.o: $\{INCLUDESRC\}/view.ih

helloa.o: $\{SRCDIR\}include/class.h

helloa.o: hellov.ih

helloa.o: helloa.eh

helloa.eh helloa.ih: helloa.ch

helloa.eh helloa.ih: $\{INCLUDESRC\}/app.ih

hellov.o: hellov.c

hellov.o: $\{INCLUDESRC\}/graphic.ih

hellov.o: $\{INCLUDESRC\}/observe.ih

hellov.o: $\{INCLUDESRC\}/point.h

hellov.o: $\{INCLUDESRC\}/rect.h

hellov.o: $\{INCLUDESRC\}/view.ih

hellov.o: $\{SRCDIR\}include/class.h

hellov.o: hellov.eh

hellov.eh hellov.ih: hellov.ch

hellov.eh hellov.ih: $\{INCLUDESRC\}/graphic.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/observe.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/point.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/rect.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/view.ih

hellov.eh hellov.ih: $\{SRCDIR\}include/class.h




}

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,889,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538945396}
