\begindata{text,538947568}
\textdsversion{12}
\template{default}
\define{global
}
\define{itemize
}
\define{programexample
}
\define{footnote

attr:[Flags OverBar Int Set]
attr:[FontSize PreviousFontSize Point -2]}
\formatnote{\chapter{Example 2:  Responding to mouse hits}}


Example 1 described how to write an application program that defined and used 
a very simple class.  This example introduces the additional Andrew Toolkit 
methods and control structure needed to create an application that can respond 
to mouse hits.  \indexi{Mouse hits}


Like Example 1, this program draws \italic{hello world} initially at the 
center of the window.  Then, when the user clicks on the left mouse button, 
the program draws \italic{hello world} centered at the location of the mouse 
cursor when the user lets up on the button.  The program does not redraw the 
entire window to accomplish this, but rather does a partial update.  If the 
user re-sizes the window, however, the program does redraw the entire window. 


This example program illustrates the following activities: 


\itemize{
defining a class that has data associated with it


initializing the data associated with a class


responding to mouse hits


doing a partial updates as well as full updates

}

After reading Example 2, you will know the basic control structures involved 
in a mouse hit response.   Example 3 will extend this knowledge by describing 
the control structures involved when the mouse is dragged. 


The following presents a step-by-step description of how to modify the 
\italic{helloworldapp} program in Example 1 to produce Example 2. 
 \italic{helloworldapp} will consist of five files: 


\itemize{
a hellov.ch file -- will contain the class definition for the helloworldview 
object, which will be a subclass of the Andrew Toolkit class \italic{view}. 
 We will modify the class definition from Example 1 to override View's methods 
for responding to mouse hits and for partially updating the screen, and add 
some data to the class for keeping track of where \italic{hello world} is 
currently drawn and where the user wants it to be drawn. 


a hellov.c file -- will contain statements that import Andrew Toolkit classes 
and define the object's methods and class procedures.  We will define two new 
methods; the first for responding to mouse hits and the second for partially 
updating the screen. 


a helloa.ch file -- will contain the class definition for the application 
program that will display an instance of the helloworldview class in a window 
on the workstation.  This will be exactly the same as in Example 1. 


helloa.c -- will contain declarations needed by the Andrew Toolkit linking and 
loading facilities as well the definition of the \italic{helloworldview} 
application method.  This will be exactly the same as in Example 1. 


Makefile -- will contain the directions for compiling, linking and loading. 
 This will be exactly the same as in Example 1. 

}

For a complete listing of these files, see \italic{Program listing for Example 
2 } at the end of this section on p. 
\begindata{textref,539315976}
\textdsversion{12}
# ExTwoListing\
\enddata{textref,539315976}
\view{textrefv,539315976,931,0,0}. The source code is available in the 
directory /usr/andrew/examples/ex2, together with the compiled program. 


Although the discussion refers directly to this example, the information 
generally applies to the creation of any stand-alone application that will 
respond to mouse hits. 



\section{Running the example program}


\formatnote{
\bold{Action 1.}\formatnote{  } \formatnote{To run the program, at the 
\bold{command }prompt type


runapp /usr/andrew/examples/ex2/helloa


and press the Enter key.

}
\bold{Response.}\formatnote{   }The program will produce a window with 
\italic{hello world}

centered in the body.


\bold{Action 2.}\formatnote{   }Re-shape the program's window.


\bold{Response.}\formatnote{   }The object will respond to an update request 
and redraw

\italic{hello world }in the center.


\bold{Action 3.}\formatnote{   }Click with the left mouse button.


\bold{Response.}\formatnote{   }The program will respond to the mouse hit by 
redrawing

\italic{hello world} at the position of the mouse cursor when you let up

the mouse button.  The program will do the redrawing with an update

rather than a full update, i.e., the program will redraw only part of

the window.


\bold{Action 4.}\formatnote{   }Re-shape the program's window. 


\bold{Response.}\formatnote{   }The program will respond to an full update 
request and

redraw \italic{hello world }at its current coordinates.


\bold{Action 5.}\formatnote{   }To quit the program, move the cursor to the 
window title

bar, pop-up the menus and choose \bold{Zap} from the \italic{This Window} 
card.


\bold{Response.}\formatnote{   }The program will disappear from the screen.

}
\begindata{bp,538928712}
\enddata{bp,538928712}
\view{bpv,538928712,932,0,0}
\section{Modifying the class definition}


The following is the modified class declaration for the class 
\italic{helloworld}: 


\programexample{
class helloworldview [hellov]: view \{ overrides: 

    FullUpdate(enum view_UpdateType type, long left, long top, long width, 
long height); 

    \bold{Update(); 

          Hit (enum view_MouseAction action, long x, long y, long 
numberOfClicks) returns struct helloworld *;}  data: 

    \bold{long x; 

          long y; 

          long newX; 

          long newY; 

          boolean HaveDownTransition;}  \}; 

}

Example 1 overrode the class \italic{View}'s \italic{FullUpdate} method. 
 Example 2 will override \italic{View}'s \italic{Update} and \italic{Hit 
} methods as well. 

\indexi{Overrides} 

\indexi{Method++Overriding} 

\indexi{ \italic{Update}} 

\indexi{View++\italic{Update}}  

\indexi{ \italic{Hit}} 

\indexi{View++\italic{Hit}} 

\indexi{ \italic{view_Hit}} 

\indexi{ \italic{view_Update}} The \italic{Update} method provides a way to 
communicate about partial updates to the screen.  In this example, we will use 
it to erase the string \italic{hello world} at its old position and draw the 
string \italic{hello world} at the new location that the user indicates by 
clicking with the mouse. \indexi{Update}


The \italic{Hit} method provides a way for the \italic{Interaction Manager} to 
inform a view that a mouse event has occurred.  Since we want the example to 
respond to requests for full updates, updates, and mouse hits,  we must 
override \italic{View}'s methods for these events.  Note that the name of the 
methods and the methods' parameters remain consistent with \italic{View}'s 
definition, even though the program code for the method will be different. 


Example 1 did not declare any data.  Data is optional, but if a class has 
data, you must declare it and its declaration should be the last item in the 
class declaration.  \indexi{Class++Declaring}

\indexi{Class++Data} Example 2 declares data that will track the state 
information we need for the \italic{hello world} string.  We will use the 
variables \italic{x} and \italic{y} to keep track of the current (x,y) 
position of the \italic{hello world} string.  We will use the variables 
\italic{newX} and \italic{newY} to keep track of the new location (newX,newY) 
where the user wants the \italic{hello world} string to be drawn.  We will use 
the boolean, \italic{HaveDownTransition},  to keep track of whether the user 
has begun an action (i.e., a down click on the left or right mouse button) 
that will lead to the \italic{hello world} string being moved.  The need for 
these state variables will be elaborated in the sections describing the 
\italic{Update} and \italic{Hit} methods. 


\subsection{Initializing the object} \indexi{Objects++Initializing} 
\indexi{Initializing}

\indexi{ \italic{InitializeObject}} \indexi{Class++Data}


If you are creating a class that has data, you must declare an 
\italic{InitializeObject} class procedure in the \italic{.c} file.  The 
declaration requires two parameters, a pointer to a \italic{struct 
classheader}, and a pointer to the instance of the class. 
 \italic{InitializeObject} provides a class procedure for requesting a newly 
created object to initialize its class data. 


In general, after a new object in class \italic{x} is created, the 
\italic{x_New} procedure will call \italic{x_InitializeObject} with one 
parameter, the newly created object.  For example, after the 
\italic{helloworldview} object is created, the \italic{helloworldview_New} 
procedure will call \italic{helloworldview_InitializeObject} with the newly 
created \italic{helloworldview} object, \italic{hwv}.  Any 
\italic{InitializeObject} procedure you write should simply initialize the 
object's class data. 


Incidentally, you may have noticed an apparent discrepancy: 
 \italic{InitializeObject} is \italic{declared} with two parameters, but 
\italic{called} with just one parameter.  In fact, the discrepancy is only 
apparent.  The first parameter, \italic{classID},  is a dummy parameter, and 
is added to the call automatically by the \italic{Class} preprocessor.) 
\indexi{ClassID}  \indexi{Parameters++ClassID}

\indexi{Class} 

\indexi{Class preprocessor}


If you omit \italic{x__InitializeObject} and the class \italic{x} has class 
data, then the class preprocessor will generate an error message; if the class 
\italic{x} does not have data, \italic{x__InitializeObject} is not required. 
 Example 1 did not define a \italic{helloworld__InitializeObject} only because 
it did not have any data. 


The following is the complete \italic{InitializeObject} class procedure 
definition for \italic{helloworldview}: 


\programexample{
#define POSUNDEF -1


boolean helloworldview__InitializeObject(classID, hwv)

    struct classheader *classID; 

    struct helloworldview *hwv;  \{

    hwv->x = POSUNDEF; 

    hwv->y = POSUNDEF; 

    hwv->HaveDownTransition = FALSE; 

    return TRUE;  \}; 

}

In this example, \italic{hwv->x =\smaller{ POSUNDEF}} and \italic{hwv->y= 
\smaller{POSUNDEF}} initialize \italic{x} and \italic{y} to 
\smaller{POSUNDEF}, indicating that the position of the \italic{hello world} 
string (\italic{x,y}) is undefined.  Likewise, we initialize \italic{newX} and 
\italic{newY} to \smaller{POSUNDEF} to indicate that the new position of the 
string is undefined.  Since all drawing is normally done in a positive 
coordinate space, \smaller{POSUNDEF} is usefully defined to be -1.  The 
boolean  \italic{HaveDownTransition} will be used to record whether the user 
has initiated a request to move the string by clicking down with the mouse, so 
we initialize it to \smaller{FALSE}. 



\subsection{Modifying the full update method} \indexi{Full update}


The following is the modified FullUpdate method for \italic{helloworldview}. 
 The portion in bold face indicates where the method definition has been 
changed. 


\formatnote{void helloworldview__FullUpdate(hwv, type, left, top, width, 
height)

    struct helloworldview *hwv;

    enum view_UpdateType type;

    long left;

    long top;

    long width;

    long height;

\{

\begindata{bp,538928968}
\enddata{bp,538928968}
\view{bpv,538928968,933,0,0}
    struct rectangle myVisualRect; 


    \bold{if (hwv->x == POSUNDEF)  \{

	    helloworldview_GetVisualBounds(hwv,&myVisualRect);

	    hwv->x = rectangle_Left(&myVisualRect) + 
rectangle_Width(&myVisualRect)/2;

	    hwv->y = rectangle_Top(&myVisualRect) + 
rectangle_Height(&myVisualRect)/2;

    \}


            helloworldview_MoveTo(hwv,hwv->x,hwv->y);

            helloworldview_DrawString(hwv,"hello world",

	    graphic_BETWEENTOPANDBASELINE | graphic_BETWEENLEFTANDRIGHT); }   

\}}



The first time \italic{FullUpdate} is called, \italic{hwv->x }will be equal to 
\smaller{POSUNDEF}, and \italic{hello world} will be drawn in the center of 
the window.  After that, \italic{hello world} will be drawn at the coordinates 
specified by (\italic{x,y}), which will change when the window size is 
changed, for example.  Note that if the window changes size sufficiently, the 
(\italic{x,y}) coordinates will fall outside \italic{hwv}'s visual rectangle, 
and the \italic{hello world} string will be clipped. 

\indexi{Rectangles++Clipping} (Refer back to Example 1 for a discussion on 
visual and clipping rectangles). 


\subsection{Responding to mouse hits} \indexi{Mouse hits++Responding}


The following is the complete definition of the \italic{Hit} method for the 
helloworldview class. 


\formatnote{
struct view *helloworldview__Hit(hwv, action, x, y, numberOfClicks)

    struct helloworldview *hwv;

    enum view_MouseAction action;

    long x;

    long y;

    long numberOfClicks;

\{

    if (action == view_LeftDown)  \{  

        hwv->movingString = TRUE;

    \}

    else if (hwv ->HaveDownTransition) \{

	if (action == view_LeftUp)  \{

	    hwv->newX = x;

	    hwv->newY = y;

	    hwv->HaveDownTransition = FALSE;

	    helloworldview_WantUpdate(hwv, hwv);

	\}

    \}

    return (struct view *) hwv;

\}

}

In general, whenever the user clicks down with the left or right mouse button 
in a rectangle of the screen allocated to some view \italic{v}, the 
\italic{Interaction Manager} will call \italic{v}'s \italic{Hit} method with 
parameters \italic{action}, the type of mouse action (e.g., the left button 
down, left button up, left button down and mouse moved, etc.); \italic{(x,y)}, 
the rectangle coordinate of the hit; and \italic{numberOfClicks}, the number 
of times a down transition followed by an up transition has occurred without a 
mouse movement. 


In this example, we have the method 1) guard against spurious up transitions 
of the mouse button, 2) able to signal an interest in the up transition, and 
3) request an update upon receiving the up transition. 


\paragraph{Guarding against spurious up transitions}


If the mouse hit is a down transition with the left button, we set 
\italic{hwv->HaveDownTransition = TRUE}, then return \italic{hwv} cast as a 
pointer to a \italic{view}.  The \italic{if} statement is a piece of defensive 
programming against possibly spurious up transitions.  For example, suppose 
the user clicks down in another window, then while holding the mouse button 
down, moves to \italic{helloworldview}'s window and clicked up.  A faulty 
window manager might randomly or falsely transmit the up transition to 
\italic{helloworldview}.  By keeping the state variable 
\italic{HaveDownTransition} and checking its value to see whether a down 
transition has occurred in our rectangle, we can defend against such 
transmissions.  If the hit is a down transition with the right button, we 
simply return \italic{hwv} cast as a pointer to a view. 


\paragraph{Signalling interest in the up transition}


Returning the pointer to \italic{hwv} signals the \italic{Interaction Manager} 
that we are interested in the hit.  By signalling the interest, the 
\italic{Interaction Manager} will call our \italic{Hit} method with an up 
transition when the user releases the mouse button within the window.  Even if 
the user releases it in another window, the up transition will go to us (Both 
the Andrew window manager, \italic{WM}, and the X window manager for the 
Andrew Toolkit actually send the up transition.  If the underlying window 
manager does not send it, the \italic{Interaction Manager} will send a 
simulated up transition). 


Besides signalling interest, a view has one other option:  The view can pass 
the hit down to a child view.  If the view does so, the \italic{Interaction 
Manager} will not call the parent view's \italic{Hit} method again until the 
next down-transition in its rectangle.  Since this example has no children, it 
signals interest in down transitions with both the left and right mouse 
buttons by returning \italic{(struct view *) hwv} in both cases, even though 
it does not respond to right button hits.  In general, if your view is the 
only view that could be interested in a hit, then it should signal interest, 
even though it is not going to process the hit in any other way. 


If there there are parent views intervening between your view and the 
\italic{Interaction Manager}, the parent should pass its child requests up the 
tree.  Departures from this protocol are possible, but not recommended.  All 
Andrew Toolkit objects adhere to the protocol of passing child's interest 
requests up the view tree. 



\paragraph{Receiving an up transition and requesting an update}


If we have had a down transition and the current hit is an up transition from 
either the left or right mouse button, we assign \italic{hwv->newX} to 
\italic{x}, the horizontal position of the mouse cursor when the user released 
the button, and assign \italic{hwv->newY} to \italic{y}, the vertical 
position.  Next we set \italic{HaveDownTransition} to \smaller{FALSE}, since 
we have seen a down-up pair.  Then we call \italic{helloworldview_WantUpdate}, 
a method inherited from the class \italic{View}, to request the 
\italic{Interaction Manager} to call \italic{hwv}'s  \italic{Update} method. 
 Since the screen updates to be accomplished will not affect the view's 
rectangle and window, it is more appropriate to do the update through a call 
to \italic{Update}, which will partially redraw,  rather than 
\italic{FullUpdate} which will redraw the entire window, especially since 
\italic{Updates} are faster and more efficient than \italic{Fullupdate}. 
 Finally, we return \italic{hwv} cast as a pointer to a \italic{view}. 



\paragraph{Control structure for any Hit method} \indexi{ \italic{Hit}} 
\indexi{View++\italic{Hit}} \indexi{ \italic{view_Hit}}


In general, any \italic{Hit} method you write should check for the occurrence 
of a down transition from both the right and left mouse buttons.  In response, 
your \italic{Hit} method may do one of three things.  First, it may ignore the 
hit by returning a \smaller{NULL} pointer.  Second, it may pass the mouse hit 
down to a child view by invoking the child's \italic{Hit} method; it should 
return the value returned by the child's \italic{Hit} method.  Finally, your 
view may claim the hit by returning a pointer to your own view.  If you claim 
the hit, you are guaranteed that you will receive another call to your 
\italic{Hit} method with an up transition when the user releases the mouse 
button.  Otherwise, the \italic{Interaction Manager} will not call your view's 
\italic{Hit} method again until the next down transition occurs within the 
screen space allocated to your rectangle. 

   

Note that we did not update \italic{hwv's} screen in the \italic{Hit} method 
itself;  instead,  we notified \italic{hwv}'s parent view that \italic{hwv} 
needs to be redrawn by calling \italic{hwv}'s \italic{WantUpdate}

\indexi{ \italic{WantUpdate}} \indexi{Methods++\italic{WantUpdate}}  

\indexi{ \italic{view_WantUpdate}} 

\indexi{View++\italic{WantUpdate}} 

\indexi{Updates++Requesting} method, a method inherited from the class 
\italic{View}.  The request for an update will eventually reach the 
\italic{Interaction Manager}, \indexi{Interaction manager} which will in turn 
call \italic{hwv}'s \italic{Update} method.  Your view must request an update 
of its parent in order to give the parent the opportunity to make any 
necessary adjustments before you are allowed to draw.  For example, imagine 
that your parent view is maintaining a set of views that are partially 
overlapping each other and that your view, \italic{v}, is partially obscured 
by another view, \italic{v}\bold{'}.  Before your view can update its 
rectangle, your parent may have to set a clipping region 
\indexi{Rectangles++Clipping} to prevent your screen update from interfering 
with screen region occupied by \italic{v}\bold{'}. 


In order to work properly, your view must contain enough information to 
compute what the screen currently looks like, as well as enough information to 
know what pending changes have been queued to be drawn by the next 
\italic{Update} call.  In this example, it is the reason for keeping both 
(\italic{x,y}), the current position of the hello world string, and 
\italic{newX}, \italic{newY}, the requested position. 


\subsection{Updating the screen partially} \indexi{Updates}

\indexi{ \italic{Update}} 

\indexi{ \italic{view_Update}}  

\indexi{Methods++\italic{Update}}


The following is the definition of \italic{helloworldview}'s \italic{Update} 
method, which is defined to redraw the screen partially. 


\programexample{
void helloworldview__Update(hwv)

    struct helloworldview *hwv;  \{

    if (hwv->newX != hwv->x ||  hwv->newY != hwv->y) \{

        helloworldview_SetTransferMode(hwv,graphic_INVERT); 


        helloworldview_MoveTo(hwv, hwv->x , hwv->y); 

        helloworldview_DrawString(hwv, "hello world", 
graphic_BETWEENTOPANDBASELINE | graphic_BETWEENLEFTANDRIGHT); 


        hwv->x = hwv->newX; 

        hwv->y = hwv->newY; 


        helloworldview_MoveTo(hwv, hwv->x , hwv->y); 

        helloworldview_DrawString(hwv, "hello world", 
graphic_BETWEENTOPANDBASELINE | graphic_BETWEENLEFTANDRIGHT); 

   \} \}

}

In this example, we want to erase the \italic{hello world} string at its 
current position and redraw it at the new position that we recorded in the 
\italic{Hit} method.   The statement 
\italic{helloworldview_SetTransferMode(hwv, graphic_\smaller{INVERT})} 
\indexi{Graphic++Transfer mode}

\indexi{ \italic{SetTransferMode}} 

\indexi{Graphic++\italic{SetTransferMode}} 
\indexi{ \italic{graphic_SetTransferMode}} 

sets the graphic transfer mode to \smaller{INVERT}, a mode that causes the 
window \indexi{Screen inverting}  \indexi{Drawing} manager to draw black 
wherever the screen is white and to draw white wherever the screen is black 
(see Graphic, Vol. II).   We move the current drawing position to (x,y), the 
current position of the\italic{hello world} string and draw \italic{hello 
world} there--inverted.  This "erases"  the old \italic{hello world} string 
because it causes white letters to be drawn on top of the black letters.  Note 
that the method assumes that \italic{hwv->x} and \italic{hwv->y} have not 
changed values, i.e., that they still accurately represent the current 
position of the \italic{hello world} string.  Next, we assign \italic{hwv->x} 
to \italic{hwv->newX} and \italic{hwv->y} to \italic{newY}, that is, we update 
the current position.  Finally, we move the current drawing position to 
\italic{hwv->x} and \italic{hwv->y} and redraw the string \italic{hello world} 
at the new position \italic{(x,y)}; since the screen area for the redraw is 
white (i.e. blank), the letters are black. 


Note that as mouse hits occur, the view's screen representation does not 
change immediately, but that its internal state representation does change. 
 When the view's \italic{Update} method is called, the view can update its 
screen representation so that it corresponds to its internal state 
representation. 


\paragraph{Updates vs. FullUpdates} \indexi{Full update} \indexi{Redraw}


\indexi{Updates++Control structure}

In general, any  \italic{Update} method you write should update the screen 
based on what it drew the last time and the changes in the internal state that 
have occurred since the last update.  \italic{Update} methods have other 
responsibilities when a view has children (see Example 17 in this volume). 


In this example, the Update method is used to redraw the screen partially, and 
the FullUpdate continues to redraw the entire screen.  Update methods, 
however, could be defined to accomplish any kind of redraw, including full 
redraws.  Thus, when the program does an Update, the kind of redraw the Update 
does is up to the applications programmer. 


FullUpdates, on the other hand, are usually invoked by asynchronous events, 
such as window manager events, over which the programmer has no explicit 
control.   For example, when the window size is changed, the Interaction 
Manager of the program automatically calls FullUpdate, though there has been 
no "WantFullUpdate" call.  The applications programmer should never need to 
request a FullUpdate, thus, there is no "WantFullUpdate" method.  All redraws 
should be defined in, and managed by, the program's Update method.  The Update 
method may, of course, call a FullUpdate method.  Calls to FullUpdate may 
legally occur only from within an Update method or another FullUpdate method. 
 In cases in which a child object has been changed, all objects looking at 
that child view should be placed in the observer list of the object managing 
the observers (e.g. \italic{x}), then the child may call 
\italic{x_NotifyObservers} which in turn would call WantUpdate on all the 
child's observers.  Concepts relating to children will be covered in more 
detail in the discussion of Example 17. 


\section{Creating a stand-alone application program}


The procedures for creating the \italic{helloworldapp} program, and the files 
\italic{helloa.ch} and \italic{helloa.c}, are exactly the same as in Example 
1.  The Makefile and compilation procedure are also the same. 

\begindata{bp,538929288}
\enddata{bp,538929288}
\view{bpv,538929288,934,0,0}
\footnote{\
\begindata{texttag,539236104}
\textdsversion{12}
ExTwoListing\
\enddata{texttag,539236104}
\view{texttagv,539236104,935,0,0}}
\section{Program listing for Example 2}


\formatnote{
\bold{hellov.ch}


class helloworldview[hellov]: view \{

overrides:

    FullUpdate(enum view_UpdateType type, long left, long top, long width, 
long height);

    Update();

    Hit (enum view_MouseAction action, long x, long y, long numberOfClicks) 
returns struct view *;

  data:

    long x;

    long y;

    long newX;

    long newY;

    boolean HaveDownTransition;

\};


\bold{hellov.c}


#include <class.h>


#include "graphic.ih"

#include "hellov.eh"


#define POSUNDEF -1


boolean helloworldview__InitializeObject(classID, hwv)

    struct classheader *classID;

    struct helloworldview *hwv;

\{

    hwv->x = POSUNDEF;

    hwv->y = POSUNDEF;

    hwv->HaveDownTransition = FALSE;

    return TRUE;

\}



void helloworldview__FullUpdate(hwv, type, left, top, width, height)

    struct helloworldview *hwv;

    enum view_UpdateType type;

    long left;

    long top;

    long width;

    long height;

\{

    struct rectangle myVisualRect; 


    if (hwv->x == POSUNDEF)  \{

	helloworldview_GetVisualBounds(hwv,&myVisualRect);

	hwv->x = rectangle_Left(&myVisualRect) + rectangle_Width(&myVisualRect)/2;

	hwv->y = rectangle_Top(&myVisualRect) + rectangle_Height(&myVisualRect)/2;

    \}


    helloworldview_MoveTo(hwv,hwv->x,hwv->y);

    helloworldview_DrawString(hwv,"hello world",

	graphic_BETWEENTOPANDBASELINE | graphic_BETWEENLEFTANDRIGHT);    

\}


    

void helloworldview__Update(hwv)

    struct helloworldview *hwv;

\{

    if (hwv->newX != hwv->x ||  hwv->newY != hwv->y) \{

        helloworldview_SetTransferMode(hwv,graphic_INVERT);


        helloworldview_MoveTo(hwv, hwv->x , hwv->y);

        helloworldview_DrawString(hwv, "hello world", 
graphic_BETWEENTOPANDBASELINE | graphic_BETWEENLEFTANDRIGHT);


        hwv->x = hwv->newX;

        hwv->y = hwv->newY;


        helloworldview_MoveTo(hwv, hwv->x , hwv->y);

        helloworldview_DrawString(hwv, "hello world", 
graphic_BETWEENTOPANDBASELINE | graphic_BETWEENLEFTANDRIGHT);

   \}

\}



struct view *helloworldview__Hit(hwv, action, x, y, numberOfClicks)

    struct helloworldview *hwv;

    enum view_MouseAction action;

    long x;

    long y;

    long numberOfClicks;

\{

    if (action == view_LeftDown)  \{  

        hwv->HaveDownTransition = TRUE;

    \}

    else if (hwv ->HaveDownTransition) \{

	if (action == view_LeftUp)  \{

	    hwv->newX = x;

	    hwv->newY = y;

	    hwv->HaveDownTransition = FALSE;

	    helloworldview_WantUpdate(hwv, hwv);

	\}

    \}

    return (struct view *) hwv;

\}

    


\bold{helloa.ch}


class helloworldapp[helloa] : application[app]\{

    overrides:

	Start() returns boolean;

\};


\bold{helloa.c}


#include <class.h>


#include "helloa.eh"


#include "im.ih"

#include "hellov.ih"


boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct helloworldview *hwv;

    struct im *im;


    if(!super_Start(hwapp))

	return FALSE;


    hwv=helloworldview_New();

    if(hwv==NULL)

	return FALSE;


    im=im_Create(NULL);

    if(im==NULL)\{

	helloworldview_Destroy(hwv);

	return FALSE;

    \}


    im_SetView(im,hwv);


    return TRUE;

\}


\bold{Makefile}


SRCDIR=/usr/andrew/

INCLUDES= -I. -I$\{SRCDIR\}include/atk -I$\{SRCDIR\}include

INCLUDESRC = $\{SRCDIR\}include/atk

CC=cc

DEBUG = -g

TOOLS = $\{SRCDIR\}bin/

CFLAGS= $\{DEBUG\} $\{INCLUDES\} 

CLASSFLAGS=$\{INCLUDES\}


MAKEDO = $\{TOOLS\}makedo $\{DEBUG\} -b $\{TOOLS\} -d $\{SRCDIR\}lib 

CLASS = $\{TOOLS\}class


.SUFFIXES: .ih .eh .ch .do


.ch.ih:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch

.ch.eh:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch


.o.do:

	$\{MAKEDO\} $<



all:  helloa.do hellov.do


helloa.do: helloa.o helloa.eh

hellov.do: hellov.o hellov.eh


helloa.o: helloa.c

helloa.o: $\{INCLUDESRC\}/app.ih

helloa.o: $\{INCLUDESRC\}/graphic.ih

helloa.o: $\{INCLUDESRC\}/im.ih

helloa.o: $\{INCLUDESRC\}/observe.ih

helloa.o: $\{INCLUDESRC\}/point.h

helloa.o: $\{INCLUDESRC\}/rect.h

helloa.o: $\{INCLUDESRC\}/view.ih

helloa.o: $\{SRCDIR\}include/class.h

helloa.o: hellov.ih

helloa.o: helloa.eh

helloa.eh helloa.ih: helloa.ch

helloa.eh helloa.ih: $\{INCLUDESRC\}/app.ih

hellov.o: hellov.c

hellov.o: $\{INCLUDESRC\}/graphic.ih

hellov.o: $\{INCLUDESRC\}/observe.ih

hellov.o: $\{INCLUDESRC\}/point.h

hellov.o: $\{INCLUDESRC\}/rect.h

hellov.o: $\{INCLUDESRC\}/view.ih

hellov.o: $\{SRCDIR\}include/class.h

hellov.o: hellov.eh

hellov.eh hellov.ih: hellov.ch

hellov.eh hellov.ih: $\{INCLUDESRC\}/graphic.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/observe.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/point.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/rect.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/view.ih

hellov.eh hellov.ih: $\{SRCDIR\}include/class.h


}

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,937,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538947568}
