\begindata{text,538471384}
\textdsversion{12}
\template{default}
\define{global
}
\define{itemize
}
\formatnote{\chapter{Example 10:  Data objects}} \indexi{Data objects} 
 \indexi{Class++Data object}


Example 10 will illustrate how to create a view with an associated data 
object.  Data objects are used to maintain, store, and manipulate information. 
 The information in a data object is displayed through views onto that data 
object, and any one data object may have more than one view onto it at any 
given time.  If the data object is changed, then all the views are updated 
automatically. 


Data objects are most important in two particular situations:  first, if you 
want to be able to write data to a file, and second, if you want to have 
several different views on a single piece of data, for example, if you want 
both a table and a graph to display the same data.  Previous helloworld 
examples, although they stored data, did not use a data object.  As a result, 
they did not have the ability to read data from a file or write data to a 
file. 


Every view can have an associated data object that will take care of the data 
used by the view.  In this example, we will use the helloworldview class from 
Example 9, and simply divide it into separate view and data object classes, 
called \italic{helloworldview} and \italic{helloworld}, respectively.  The 
functionality of the program will remain the same.  Example 11 will show how 
data is read from and written to permanent storage. 


The discussion that follows presents a step-by-step description of how to 
modify the \italic{helloworldview} class in Example 9 to produce Example 10, 
which will have separate helloworld view and data object class definitions. 
 If you were to follow the steps, you would produce a program, called 
\italic{helloworldapp}, in seven files: 


\itemize{
a hello.ch file -- will contain the class definition for the 
\italic{helloworld }data object. 


a hello.c file -- will contain statements that import Andrew Toolkit classes 
used by the data object and initialize the class. 


a hellov.ch file -- will contain the class definition for the 
\italic{helloworld} view.  We will add an additional data declaration for 
storing mouse hit information. 


hellov.c file -- will contain statements that import Andrew Toolkit classes 
used by the view and definitions of the methods.  This will be similar to 
previous \italic{hellov.c} files, except the data portion is now excluded. 


a helloa.ch file -- will contain the class definition for the application 
program that will display an instance of the class in a window.  This will be 
exactly the same as in Example 9. 


a helloa.c -- will contain declarations needed by the Andrew Toolkit linking 
and loading facilities.  We will add procedures for linking the view to the 
data object. 


Makefile -- will contain the directions for compiling, linking and loading. 
 It will be modified slightly so that the extra modules are compiled, linked 
and loaded appropriately. 

}

For a complete listing of these files, see \italic{Program Listing for Example 
10 } at the end of this section on p. 
\begindata{textref,539315976}
\textdsversion{12}
# ExTenListing\
\enddata{textref,539315976}
\view{textrefv,539315976,1000,0,0}.  The source code is available in the 
directory /usr/andrew/examples/ex10. 


Although the discussion of the steps refers directly to this example, the 
information generally applies to the creation of any application with a view 
and a data object. 

\begindata{bp,538928968}
\enddata{bp,538928968}
\view{bpv,538928968,1001,0,0}
\section{Running the example program}


\formatnote{
\bold{Action 1.}   \formatnote{To run the program, at the \bold{command 
}prompt type


runapp /usr/andrew/examples/ex10/helloa


and press the Enter key.

}

\bold{Response.}\formatnote{   }The program will produce a window with 
\italic{hello world}

centered in the body of the window, vertical and horizontal scroll bars, and a 
message line strip.

}

The program will have the same functionality as Example 9.  Please refer to 
the previous chapter for a detailed description. 



\section{Overview of data object}


By dividing the functionality between a data object and a view for viewing a 
particular object, there can be multiple views on a single data object-- for 
instance, when you have two windows open on a document.  The data object also 
provides an abstraction for saving/restoring state to/from files (this is 
covered in Example 11). 


\subsection{Insets} \indexi{Insets}


A view-data object pair is called an \italic{inset}. 


All of the previous helloworld programs were instances of a view subclass 
(helloworldview) which were run from an application module.  Insets may also 
be run from an application module, as this example will show.  All insets can 
also be run as a stand-alone inset (e.g. \italic{runapp hello.do}) because 
they have a data object. 


In general, when creating an ATK application program, you should create the 
program as an inset and run it from an application module.  The advantages  of 
making every program an inset is that the program itself can be used by other 
programs, for example, it could be dynamically loaded into an \bold{EZ} or 
another ATK program.  An application cannot be dynamically loaded 
\indexi{Dynamic loading} as an object/inset. 


On the other hand, there are some things that are much easier to do from an 
application module -- starting up a program with two windows, for example. 
 Thus, creating an inset allows more portability and shared code; creating an 
application allows more flexibility during start-up.  In this series of 
examples, we have chosen to use the standard method of creating an inset then 
running from an application module.  But it is also possible to run each of 
the example as an inset from within another program, or just by \italic{runapp 
hello.do}.  Of course, the interactions built into the application modules 
will not show in this case. \formatnote{<If you had wanted to run Examples 1-9 
without the application module, you could do it through EZ:  Run EZ; do Ctrl-U 
then ESC-TAB.  At the data object prompt, type in any data object (e.g. 
simpletext) and at the view prompt, type in helloworldview. (This must be done 
from a directory that the hellov.do file resides in, or you can set CLASSPATH 
to include that directory.)>}


\section{Modifying the class definition}


\subsection{Defining a data object class} \indexi{Data objects++Defining}


\formatnote{
#define POSUNDEF -1


class helloworld: dataobject \{

data:

    long x,y;

    boolean blackOnWhite;

\};

}

There are three pieces of state associated with the abstract 
\italic{helloworld} object: two coordinates in the x-y plane, and whether it 
is black on white or vice-versa.  It is exactly these things that are stored 
in the \italic{helloworld} data object.  All the other fields from the 
\italic{helloworld} object used in the previous examples (which was a combined 
view/dataobject) are related to the redisplay of the string, or temporary 
state, such as the section of the \italic{helloworld} plane being currently 
viewed.  These are all stored in \italic{helloworldview} as before. 


\subsection{Defining the associated view class }

\indexi{View++Defining} 

\indexi{Data objects++Associated view} 


The view will be called \italic{helloworldview} as before.  The data is mostly 
the same, but the \italic{newX}, \italic{newY} and \italic{newBlackOnWhite} 
fields have been deleted-- any changes to the \italic{helloworld} string 
position should now be made to the \italic{dataobject} associated with the 
\italic{view}, in this case, \italic{helloworld}.  The changes will be 
reflected in the view at the next \italic{Update}. 


\formatnote{
class helloworldview[hellov]: view \{

overrides:

    FullUpdate(enum view_UpdateType type, long left, long top, long

width, long height);

    Update();

    Hit (enum view_MouseAction action, long x, long y, long numberOfClicks)

returns struct view *;

    ReceiveInputFocus();

    LoseInputFocus();

    GetApplicationLayer() returns struct view *;

    DeleteApplicationLayer(struct view *v);

    GetInterface(int type) returns char *;

classprocedures:

    InitializeClass() returns boolean;

data:

    struct keystate *keystate;

    struct menulist *menulist;

    boolean haveInputFocus;

    boolean HaveDownTransition;

    long hitX,hitY;

    long x,y;

    boolean blackOnWhite;

    long frameX, frameY;

    long newFrameX, newFrameY;

    int vrWidth,vrHeight;

\};

}

The data structures hitX and hitY are equivalent to the distX and distY data 
from the previous example, and will be used by the Hit method. 


\paragraph{Initializing the helloworld view}

\indexi{View++Initializing} 

\indexi{ \italic{InitializeObject}}


\formatnote{
boolean helloworldview__InitializeObject(classID,hwv)

struct classheader *classID;

struct helloworldview *hwv;   

\{

    hwv->haveInputFocus = FALSE;

    hwv->HaveDownTransition=FALSE;

    hwv->keystate = keystate_Create(hwv, helloworldviewKeymap);

    hwv->menulist = menulist_DuplicateML(helloworldviewMenulist, hwv);

    hwv->newFrameX = hwv->newFrameY = 0;

    return TRUE;

\}

}

The InitializeObject method is the same as in previous examples, minus those 
things now managed by the \italic{dataobject} (i.e. x, y, blackOnWhite). 



\paragraph{Recording the mouse hit location in the data object}  \indexi{Mouse 
hits++In inset}


\formatnote{
struct view *helloworldview__Hit(hwv, action, x, y, numberOfClicks)

struct helloworldview *hwv;

enum view_MouseAction action;

long x;

long y;

long numberOfClicks;

\{

  struct helloworld *hw = (struct helloworld*) hwv->header.view.dataobject;


    if(hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightUp:

		hwv->HaveDownTransition=FALSE;

		/* fall through */

	    case view_RightMovement:

		hw->x+=x-hwv->hitX;

		hw->y+=y-hwv->hitY;

		hwv->hitX=x;

		hwv->hitY=y;

		break;

	    case view_LeftUp:

		hwv->HaveDownTransition=FALSE;

		hw->x=x+hwv->frameX;

		hw->y=y+hwv->frameY;

		break;

	    case view_LeftMovement:

		/* do nothing */

		break;

	    default:

		/* re-synchronize mouse */

		hwv->HaveDownTransition=FALSE;

	\}

    if(!hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightDown:

		hwv->hitX=x;

		hwv->hitY=y;

		/* fall through */

	    case view_LeftDown:

		hwv->HaveDownTransition=TRUE;

		helloworldview_WantInputFocus(hwv,hwv);

		break;

	\}

      helloworld_NotifyObservers(hw,0);


    return (struct view *)hwv;

\}

}
The Hit \indexi{ \italic{Hit}}  method for helloworldview is modified so that 
it can communicate with the helloworld data object.  The first statement in 
the method definition actually gets the helloworld data object.  The 
\italic{hw} structure is a pointer to our dataobject, which can be found in 
the fields of our view superclass as dataobject (thus 
\italic{header.view.dataobject}). It has to be cast to \italic{struct 
helloworld *}, since the view stores it as a \italic{struct dataobject *}. 
 \indexi{Data objects++Pointers to}


In general, if the type of object you are dealing with is a \italic{struct 
view *}, you would do the following: 


\formatnote{
struct view *foo;

struct dataobject *bar;


bar = foo->dataobject;

}

However, if the view you are dealing with is a subclass of the class view, as 
in this example, you would do the following: 


\formatnote{
struct viewsubclass *viewsubclass;

struct dataobjectsubclass *dataobjectsubclass;


dataobjectsubclass = (struct dataobjectsubclass *) 

	viewsubclass->header.view.dataobject;

}

Next, in the Hit method, instead of recording the distance from the 
button-down event to the \italic{hello world} string (distX, distY) and using 
this offset to position the string during mouse drags as in previous examples, 
we now record the coordinates of the last hit, and bump the 
\italic{dataobject}'s position by the difference between a hit and the last 
hit.  This solves the (unlikely) occurrence of another viewer of our 
helloworld dataobject changing the location of the string, which should be 
reflected in the dragging behavior (using the old method, the string would 
have snapped back to where we last dragged it as soon as we move the mouse a 
bit). 


In more concrete terms, during a mouse drag (RightMovement), we take the 
difference between the previous (x,y) and the new mouse coordinates (hitX, 
hitY) recorded by the view, hwv, and add that difference to the (x,y) stored 
by the data object hw.  Then we reset the (hitX, hitY) to be (x,y). 
 Similarly, for left mouse button up transitions, except that instead of 
(hitX, hitY) we use (frameX, frameY). 


Lastly, instead of doing a \italic{WantUpdate} on ourselves, we do a 
\italic{NotifyObservers} \indexi{Observable++\italic{NotifyObservers}}

on our dataobject-- which in turn does a \italic{WantUpdate} on all the views 
viewing it.  This just makes sure every view sees the changes we make, instead 
of just the view that makes it.  It is necessary because data objects can have 
multiple observers.  The second parameter should usually be zero (the other 
possible value is \smaller{observerable_OBJECTDESTROYED}). 



\paragraph{Rewriting the menu procedures}


The menu procedures (center, invert, and relocate) are essentially the same as 
in previous examples, but each must first access the helloworld data object as 
did the Hit method.  Also,  the \italic{WantUpdates} are replaced by 
\italic{NotifyObservers}, and references to \italic{hwv->} are replaced by 
\italic{hw->} and the fields are replaced by corresponding fields from the 
dataobject.  For example, references to hwv->newX now becomes hw->x. 


\formatnote{
static void Center(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    hw->x = hwv->newFrameX + hwv->vrWidth / 2;

    hw->y = hwv->newFrameY + hwv->vrHeight / 2;


    helloworld_NotifyObservers(hw,0);

\}



static void Invert(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    hw->blackOnWhite = !hw->blackOnWhite;

    helloworld_NotifyObservers(hw,0);

\}



static void relocate(hwv,rock)

struct helloworldview *hwv;

long rock;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;

    char buf[100];

    int x,y;


    message_AskForString(hwv,0,"New location (x,y): ",NULL,buf,sizeof(buf));


    if(sscanf(buf,"%d,%d",&x,&y)!=2)

	message_DisplayString(hwv,1,"Bad format; must be: number,number");

    else\{

	hw->x=x;

	hw->y=y;


	helloworld_NotifyObservers(hw,0);

    \}

\}


}
\subsection{Importing and exporting procedures} \indexi{Importing} 
\indexi{Exporting}


\italic{hello.c} should import \italic{class.h} and \italic{hello.eh} only. 
 The imports for \italic{helloworldview} are the same as in the\italic{ 
hellov.c} for previous examples but we also include \italic{hello.ih} to 
access the helloworld methods and procedures, as well as \italic{hellov.eh}. 


\subsection{Creating the application program}

\indexi{Application program++Creating} 

\indexi{Linking++Insets}


The file helloa.ch remains the same, but additional procedures must be added 
to helloa.c in order to link the view and the data object together. 


\formatnote{
#include <class.h>


#include "helloa.eh"


#include "im.ih"

#include "frame.ih"

#include "hello.ih"

#include "hellov.ih"


boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct helloworld *hw;

    struct helloworldview *hwv;

    struct view *applayer;

    struct frame *frame;

    struct im *im;


    if(!super_Start(hwapp))

	return FALSE;


    hw=helloworld_New();

    if(hw==NULL)

	return FALSE;


    hwv=helloworldview_New();

    if(hwv==NULL) \{

	helloworld_Destroy(hw);

	return FALSE;

    \}


    applayer=helloworldview_GetApplicationLayer(hwv);

    if(applayer==NULL) \{

	helloworldview_Destroy(hwv);

	return FALSE;

    \}


    frame=frame_New();

    if(frame==NULL) \{

	helloworldview_DeleteApplicationLayer(hwv,applayer);

	return FALSE;

    \}


    im=im_Create(NULL);

    if(im==NULL) \{

	frame_Destroy(frame);

	return FALSE;

    \}


    helloworldview_SetDataObject(hwv,hw);

    frame_SetView(frame,applayer);

    im_SetView(im,frame);


    helloworldview_WantInputFocus(hwv,hwv);


    return TRUE;


\}

}

The statement \italic{helloworldview_SetDataObject (hwv, hw)} associates the 
view \italic{hwv} with the dataobject \italic{hw}.  As a side effect, it adds 
the view \italic{hwv} to the \italic{hw'}s list of observers (see Observable, 
Vol. 2).  Before drawing a data object in a newly created instance of a 
\italic{view}, you should call \italic{view_SetDataObject} in order to 
associate the data object with the view and to add the view to the data 
object's list of observers.  A \italic{view} may have only one data object at 
a time, but you can reassign a view to another data object.  When defining a 
sub-class of \italic{view}, you should not need to override \italic{view}'s 
definition of \italic{view_SetDataObject}. 

\begindata{bp,538929224}
\enddata{bp,538929224}
\view{bpv,538929224,1002,0,0}
\subsection{Compiling the program} \indexi{Compiling++Insets}


\formatnote{
SRCDIR=/usr/andrew/

INCLUDES= -I. -I$\{SRCDIR\}include/atk -I$\{SRCDIR\}include

INCLUDESRC = $\{SRCDIR\}include/atk

CC=cc

DEBUG = -g

TOOLS = $\{SRCDIR\}bin/

CFLAGS= $\{DEBUG\} $\{INCLUDES\} 

CLASSFLAGS=$\{INCLUDES\}


MAKEDO = $\{TOOLS\}makedo $\{DEBUG\} -b $\{TOOLS\} -d $\{SRCDIR\}lib 

CLASS = $\{TOOLS\}class


.SUFFIXES: .ih .eh .ch .do


.ch.ih:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch

.ch.eh:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch


.o.do:

	$\{MAKEDO\} $<



\bold{all:  helloa.do hello.do hellov.do


helloa.do: helloa.o helloa.eh

hello.do:  hello.o hello.eh

hellov.do: hellov.o hellov.eh}


helloa.o: helloa.c

helloa.o: $\{INCLUDESRC\}/app.ih

helloa.o: $\{INCLUDESRC\}/atom.ih

helloa.o: $\{INCLUDESRC\}/dataobj.ih

helloa.o: $\{INCLUDESRC\}/frame.ih

helloa.o: $\{INCLUDESRC\}/graphic.ih

helloa.o: $\{INCLUDESRC\}/im.ih

helloa.o: $\{INCLUDESRC\}/lpair.ih

helloa.o: $\{INCLUDESRC\}/message.ih

helloa.o: $\{INCLUDESRC\}/namespc.ih

helloa.o: $\{INCLUDESRC\}/observe.ih

helloa.o: $\{INCLUDESRC\}/point.h

helloa.o: $\{INCLUDESRC\}/rect.h

helloa.o: $\{INCLUDESRC\}/view.ih

helloa.o: $\{SRCDIR\}include/class.h

helloa.o: hello.ih

helloa.o: hellov.ih

helloa.o: helloa.eh

helloa.eh helloa.ih: helloa.ch

helloa.eh helloa.ih: $\{INCLUDESRC\}/app.ih}\formatnote{

\bold{hello.o: hello.c

hello.o: $\{INCLUDESRC\}/atom.ih

hello.o: $\{INCLUDESRC\}/dataobj.ih

hello.o: $\{INCLUDESRC\}/namespc.ih

hello.o: $\{INCLUDESRC\}/observe.ih

hello.o: $\{SRCDIR\}include/class.h

hello.o: hello.eh

hello.eh hello.ih: hello.ch

hello.eh hello.ih: $\{INCLUDESRC\}/atom.ih

hello.eh hello.ih: $\{INCLUDESRC\}/dataobj.ih

hello.eh hello.ih: $\{INCLUDESRC\}/namespc.ih

hello.eh hello.ih: $\{INCLUDESRC\}/observe.ih}

hellov.o: hellov.c

hellov.o: $\{INCLUDESRC\}/atom.ih

hellov.o: $\{INCLUDESRC\}/bind.ih

hellov.o: $\{INCLUDESRC\}/dataobj.ih

hellov.o: $\{INCLUDESRC\}/graphic.ih

hellov.o: $\{INCLUDESRC\}/keymap.ih

hellov.o: $\{INCLUDESRC\}/keystate.ih

hellov.o: $\{INCLUDESRC\}/menulist.ih

hellov.o: $\{INCLUDESRC\}/message.ih

hellov.o: $\{INCLUDESRC\}/namespc.ih

hellov.o: $\{INCLUDESRC\}/observe.ih

hellov.o: $\{INCLUDESRC\}/point.h

hellov.o: $\{INCLUDESRC\}/rect.h

hellov.o: $\{INCLUDESRC\}/scroll.ih

hellov.o: $\{INCLUDESRC\}/view.ih

hellov.o: $\{SRCDIR\}include/class.h

hellov.o: hello.ih

hellov.o: hellov.eh

hellov.eh hellov.ih: hellov.ch

hellov.eh hellov.ih: $\{INCLUDESRC\}/graphic.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/observe.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/point.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/rect.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/view.ih

hellov.eh hellov.ih: $\{SRCDIR\}include/class.h


}
The Makefile \indexi{Makefiles} is modified to reflect the two-class nature of 
this example.  Note that provisions are made for the creation of a helloworld 
dynamic object, and all the dependencies necessary for helloworld are added to 
the list of dependencies. 

\begindata{bp,538929032}
\enddata{bp,538929032}
\view{bpv,538929032,1003,0,0}
\begindata{texttag,539236104}
\textdsversion{12}
ExTenListing\
\enddata{texttag,539236104}
\view{texttagv,539236104,1004,0,0}
\section{Program listing for Example 10}


\formatnote{

\bold{hello.ch}


#define POSUNDEF -1


class helloworld[hello]: dataobject[dataobj] \{

data:

    long x,y;

    boolean blackOnWhite;

\};


\bold{hello.c}


#include <class.h>


#include "hello.eh"


boolean helloworld__InitializeObject(classID,hw)

struct classheader *classID;

struct helloworld *hw;   

\{

    hw->x = POSUNDEF;

    hw->y = POSUNDEF;

    hw->blackOnWhite = TRUE;

    return TRUE;

\}



\bold{hellov.ch}


class helloworldview[hellov]: view \{

overrides:

    FullUpdate(enum view_UpdateType type, long left, long top, long width, 
long height);

    Update();

    Hit (enum view_MouseAction action, long x, long y, long numberOfClicks) 
returns struct view *;

    ReceiveInputFocus();

    LoseInputFocus();

    GetApplicationLayer() returns struct view *;

    DeleteApplicationLayer(struct view *v);

    GetInterface(int type) returns char *;

classprocedures:

    InitializeClass() returns boolean;

data:

    struct keystate *keystate;

    struct menulist *menulist;

    boolean haveInputFocus;

    boolean HaveDownTransition;

    long hitX,hitY;

    long x,y;

    boolean blackOnWhite;

    long frameX, frameY;

    long newFrameX, newFrameY;

    int vrWidth,vrHeight;

\};



\bold{hellov.c}


#include <class.h>


#include "hellov.eh"


#include "graphic.ih"

#include "rect.h"

#include "keymap.ih"

#include "keystate.ih"

#include "menulist.ih"

#include "scroll.ih"

#include "bind.ih"

#include "message.ih"


#include "hello.ih"


#define TOTALSIZE 1500


static void xgetinfo(), xsetframe(), ygetinfo(), ysetframe();

static long xwhat(), ywhat();


static struct scrollfns horizInterface = \{

    xgetinfo, xsetframe, NULL, xwhat

\};


static struct scrollfns vertInterface = \{

    ygetinfo, ysetframe, NULL, ywhat

\};


static struct keymap *helloworldviewKeymap;

static struct menulist *helloworldviewMenulist;


boolean helloworldview__InitializeObject(classID,hwv)

struct classheader *classID;

struct helloworldview *hwv;   

\{

    hwv->haveInputFocus = FALSE;

    hwv->HaveDownTransition=FALSE;

    hwv->keystate = keystate_Create(hwv, helloworldviewKeymap);

    hwv->menulist = menulist_DuplicateML(helloworldviewMenulist, hwv);

    hwv->newFrameX = hwv->newFrameY = 0;

    return TRUE;

\}


struct view *helloworldview__GetApplicationLayer(hwv)

struct helloworldview *hwv;

\{

    return (struct view *)scroll_Create(hwv,scroll_LEFT+scroll_BOTTOM);

\}


void helloworldview__DeleteApplicationLayer(hwv,scrollbar)

struct textview *hwv;

struct scroll *scrollbar;

\{

    scroll_Destroy(scrollbar);

\}


void helloworldview__FullUpdate(hwv, type, left, top, width, height)

struct helloworldview *hwv;

enum view_UpdateType type;

long left;

long top;

long width;

long height; 

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;

    struct rectangle myVisualRect;


    helloworldview_GetVisualBounds(hwv,&myVisualRect);

    hwv->vrWidth=rectangle_Width(&myVisualRect);

    hwv->vrHeight=rectangle_Height(&myVisualRect);


    if (hwv->newFrameX + hwv->vrWidth > TOTALSIZE)

	hwv->newFrameX = TOTALSIZE - hwv->vrWidth;

    if (hwv->newFrameY + hwv->vrHeight > TOTALSIZE)

	hwv->newFrameY = TOTALSIZE - hwv->vrHeight;


    hwv->frameX = hwv->newFrameX;

    hwv->frameY = hwv->newFrameY;


    if (hw->x == POSUNDEF) \{

	hw->x = hwv->frameX + hwv->vrWidth / 2;

	hw->y = hwv->frameY + hwv->vrHeight / 2;

    \}


    hwv->x=hw->x;

    hwv->y=hw->y;

    hwv->blackOnWhite=hw->blackOnWhite;


    helloworldview_SetTransferMode(hwv, graphic_COPY);


    if (hw->blackOnWhite)

	helloworldview_FillRect(hwv, 

		&myVisualRect, helloworldview_WhitePattern(hwv));

    else 

	helloworldview_FillRect(hwv, 

		&myVisualRect, helloworldview_BlackPattern(hwv));


    helloworldview_SetTransferMode(hwv,graphic_INVERT);


    helloworldview_MoveTo(hwv, hw->x - hwv->frameX, hw->y - hwv->frameY);

    helloworldview_DrawString(hwv,"hello world",

			   graphic_BETWEENTOPANDBASELINE | graphic_BETWEENLEFTANDRIGHT);    

\}



void helloworldview__Update(hwv)

struct helloworldview *hwv;

\{    

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    helloworldview_SetTransferMode(hwv, graphic_INVERT);


    if (hw->blackOnWhite!=hwv->blackOnWhite) \{

	struct rectangle vr;

	helloworldview_GetVisualBounds(hwv,&vr);

	helloworldview_FillRect(hwv,

		&vr,helloworldview_BlackPattern(hwv));

	hwv->blackOnWhite=hw->blackOnWhite;

    \}


    if (hwv->x!=hw->x || hwv->y!=hw->y || hwv->frameX!=hwv->newFrameX || 
hwv->frameY!=hwv->newFrameY) \{

	if(hwv->x!=hw->x || hwv->y!=hw->y)\{

	    static char buf[100];

	    sprintf(buf,"Hello world at (%d,%d)",hw->x,hw->y);

	    message_DisplayString(hwv,0,buf);

	\}	    


	helloworldview_MoveTo(hwv,

			      hwv->x-hwv->frameX,

				hwv->y-hwv->frameY);

	helloworldview_DrawString(hwv, "hello world",

				  graphic_BETWEENTOPANDBASELINE |

				  graphic_BETWEENLEFTANDRIGHT);

  

	hwv->x=hw->x;

	hwv->y=hw->y;

  	hwv->frameX = hwv->newFrameX;

  	hwv->frameY = hwv->newFrameY;

  

	helloworldview_MoveTo(hwv,

			      hwv->x-hwv->frameX,

				hwv->y-hwv->frameY);

	helloworldview_DrawString(hwv, "hello world",

				  graphic_BETWEENTOPANDBASELINE |

				  graphic_BETWEENLEFTANDRIGHT);

    \}

\}



struct view *helloworldview__Hit(hwv, action, x, y, numberOfClicks)

struct helloworldview *hwv;

enum view_MouseAction action;

long x;

long y;

long numberOfClicks;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    if(hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightUp:

		hwv->HaveDownTransition=FALSE;

		/* fall through */

	    case view_RightMovement:

		hw->x+=x-hwv->hitX;

		hw->y+=y-hwv->hitY;

		hwv->hitX=x;

		hwv->hitY=y;

		break;

	    case view_LeftUp:

		hwv->HaveDownTransition=FALSE;

		hw->x=x+hwv->frameX;

		hw->y=y+hwv->frameY;

		break;

	    case view_LeftMovement:

		/* do nothing */

		break;

	    default:

		/* re-synchronize mouse */

		hwv->HaveDownTransition=FALSE;

	\}


    if(!hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightDown:

		hwv->hitX=x;

		hwv->hitY=y;

		/* fall through */

	    case view_LeftDown:

		hwv->HaveDownTransition=TRUE;

		helloworldview_WantInputFocus(hwv,hwv);

		break;

	\}


    helloworld_NotifyObservers(hw,0);


    return (struct view *)hwv;

\}



void helloworldview__ReceiveInputFocus(hwv)

struct helloworldview *hwv;

\{

    hwv->haveInputFocus = TRUE;

    hwv->keystate->next = NULL;

    helloworldview_PostKeyState(hwv, hwv->keystate);

    helloworldview_PostMenus(hwv, hwv->menulist);

\}



void helloworldview__LoseInputFocus(hwv)

struct helloworldview *hwv;

\{

    hwv->haveInputFocus = FALSE;

\}


static void Center(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    hw->x = hwv->newFrameX + hwv->vrWidth / 2;

    hw->y = hwv->newFrameY + hwv->vrHeight / 2;


    helloworld_NotifyObservers(hw,0);

\}



static void Invert(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    hw->blackOnWhite = !hw->blackOnWhite;

    helloworld_NotifyObservers(hw,0);

\}



static void relocate(hwv,rock)

struct helloworldview *hwv;

long rock;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;

    char buf[100];

    int x,y;


    message_AskForString(hwv,0,"New location (x,y): ",NULL,buf,sizeof(buf));


    if(sscanf(buf,"%d,%d",&x,&y)!=2)

	message_DisplayString(hwv,1,"Bad format; must be: number,number");

    else\{

	hw->x=x;

	hw->y=y;


	helloworld_NotifyObservers(hw,0);

    \}

\}



static void xgetinfo(hwv, total, seen, dot)

struct helloworldview *hwv;

struct range *total, *seen, *dot;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    total->beg = 0;

    total->end = TOTALSIZE;

    seen->beg = hwv->frameX;

    seen->end = hwv->frameX + hwv->vrWidth;

    dot->beg = dot->end = hw->x;

\}


static void ygetinfo(hwv, total, seen, dot)

struct helloworldview *hwv;

struct range *total, *seen, *dot;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    total->beg = 0;

    total->end = TOTALSIZE;

    seen->beg = hwv->frameY;

    seen->end = hwv->frameY + hwv->vrHeight;

    dot->beg = dot->end = hw->y;

\}


static void xsetframe(hwv, posn, cord, outof)

struct helloworldview *hwv;

int posn;

long cord, outof;

\{

    hwv->newFrameX = posn - hwv->vrWidth * cord / outof;

    if (hwv->newFrameX + hwv->vrWidth > TOTALSIZE)

	hwv->newFrameX = TOTALSIZE - hwv->vrWidth;

    else if (hwv->newFrameX < 0)

	hwv->newFrameX = 0;

    helloworldview_WantUpdate(hwv, hwv);

\}


static void ysetframe(hwv, posn, cord, outof)

struct helloworldview *hwv;

int posn;

long cord, outof;

\{

    hwv->newFrameY = posn - hwv->vrHeight * cord / outof;

    if (hwv->newFrameY + hwv->vrHeight > TOTALSIZE)

	hwv->newFrameY = TOTALSIZE - hwv->vrHeight;

    else if (hwv->newFrameY < 0)

	hwv->newFrameY = 0;

    helloworldview_WantUpdate(hwv, hwv);

\}


static long xwhat(hwv, cord, outof)

struct helloworldview *hwv;

long cord, outof;

\{

    return hwv->frameX + hwv->vrWidth * cord / outof;

\}


static long ywhat(hwv, cord, outof)

struct helloworldview *hwv;

long cord, outof;

\{

    return hwv->frameY + hwv->vrHeight * cord / outof;

\}



char *helloworldview__GetInterface(hwv, type)

struct helloworldview *hwv;

char *type;

\{

    if (strcmp(type, "scroll,vertical") == 0)

	return (char *) &vertInterface;

    else if (strcmp(type, "scroll,horizontal") == 0)

	return (char *) &horizInterface;

    else

	return NULL;

\}



static struct bind_Description helloworldviewBindings[]=\{

    \{"helloworld-center", "\\003",0, "Hello World,Center",0,0, Center, 
"Center the helloworld string."\},

    \{"helloworld-invert", "\\011",0, "Hello World,Invert",0,0, Invert, 
"Invert the helloworld string."\},

    \{"helloworld-relocate", "\\022",0, "Hello World,Relocate",0,0, relocate, 
"Relocate the helloworld string."\},

    NULL

\};


boolean helloworldview__InitializeClass(classID)

struct classheader *classID;

\{

    helloworldviewMenulist=menulist_New();

    helloworldviewKeymap=keymap_New();

    bind_BindList(helloworldviewBindings, 
helloworldviewKeymap,helloworldviewMenulist, &helloworldview_classinfo);

    return TRUE;

\}



\bold{helloa.ch}


class helloworldapp[helloa] : application[app]\{

    overrides:

	Start() returns boolean;

\};



\bold{helloa.c}


#include <class.h>


#include "helloa.eh"


#include "im.ih"

#include "frame.ih"

#include "hello.ih"

#include "hellov.ih"


boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct helloworld *hw;

    struct helloworldview *hwv;

    struct view *applayer;

    struct frame *frame;

    struct im *im;


    if(!super_Start(hwapp))

	return FALSE;


    hw=helloworld_New();

    if(hw==NULL)

	return FALSE;


    hwv=helloworldview_New();

    if(hwv==NULL) \{

	helloworld_Destroy(hw);

	return FALSE;

    \}


    applayer=helloworldview_GetApplicationLayer(hwv);

    if(applayer==NULL) \{

	helloworldview_Destroy(hwv);

	return FALSE;

    \}


    frame=frame_New();

    if(frame==NULL) \{

	helloworldview_DeleteApplicationLayer(hwv,applayer);

	return FALSE;

    \}


    im=im_Create(NULL);

    if(im==NULL) \{

	frame_Destroy(frame);

	return FALSE;

    \}


    helloworldview_SetDataObject(hwv,hw);

    frame_SetView(frame,applayer);

    im_SetView(im,frame);


    helloworldview_WantInputFocus(hwv,hwv);


    return TRUE;


\}



\bold{Makefile}


SRCDIR=/usr/andrew/

INCLUDES= -I. -I$\{SRCDIR\}include/atk -I$\{SRCDIR\}include

INCLUDESRC = $\{SRCDIR\}include/atk

CC=cc

DEBUG = -g

TOOLS = $\{SRCDIR\}bin/

CFLAGS= $\{DEBUG\} $\{INCLUDES\} 

CLASSFLAGS=$\{INCLUDES\}


MAKEDO = $\{TOOLS\}makedo $\{DEBUG\} -b $\{TOOLS\} -d $\{SRCDIR\}lib 

CLASS = $\{TOOLS\}class


.SUFFIXES: .ih .eh .ch .do


.ch.ih:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch

.ch.eh:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch


.o.do:

	$\{MAKEDO\} $<



all:  helloa.do hello.do hellov.do


helloa.do: helloa.o helloa.eh

hello.do:  hello.o hello.eh

hellov.do: hellov.o hellov.eh


helloa.o: helloa.c

helloa.o: $\{INCLUDESRC\}/app.ih

helloa.o: $\{INCLUDESRC\}/atom.ih

helloa.o: $\{INCLUDESRC\}/dataobj.ih

helloa.o: $\{INCLUDESRC\}/frame.ih

helloa.o: $\{INCLUDESRC\}/graphic.ih

helloa.o: $\{INCLUDESRC\}/im.ih

helloa.o: $\{INCLUDESRC\}/lpair.ih

helloa.o: $\{INCLUDESRC\}/message.ih

helloa.o: $\{INCLUDESRC\}/namespc.ih

helloa.o: $\{INCLUDESRC\}/observe.ih

helloa.o: $\{INCLUDESRC\}/point.h

helloa.o: $\{INCLUDESRC\}/rect.h

helloa.o: $\{INCLUDESRC\}/view.ih

helloa.o: $\{SRCDIR\}include/class.h

helloa.o: hello.ih

helloa.o: hellov.ih

helloa.o: helloa.eh

helloa.eh helloa.ih: helloa.ch

helloa.eh helloa.ih: $\{INCLUDESRC\}/app.ih

hello.o: hello.c

hello.o: $\{INCLUDESRC\}/atom.ih

hello.o: $\{INCLUDESRC\}/dataobj.ih

hello.o: $\{INCLUDESRC\}/namespc.ih

hello.o: $\{INCLUDESRC\}/observe.ih

hello.o: $\{SRCDIR\}include/class.h

hello.o: hello.eh

hello.eh hello.ih: hello.ch

hello.eh hello.ih: $\{INCLUDESRC\}/atom.ih

hello.eh hello.ih: $\{INCLUDESRC\}/dataobj.ih

hello.eh hello.ih: $\{INCLUDESRC\}/namespc.ih

hello.eh hello.ih: $\{INCLUDESRC\}/observe.ih

hellov.o: hellov.c

hellov.o: $\{INCLUDESRC\}/atom.ih

hellov.o: $\{INCLUDESRC\}/bind.ih

hellov.o: $\{INCLUDESRC\}/dataobj.ih

hellov.o: $\{INCLUDESRC\}/graphic.ih

hellov.o: $\{INCLUDESRC\}/keymap.ih

hellov.o: $\{INCLUDESRC\}/keystate.ih

hellov.o: $\{INCLUDESRC\}/menulist.ih

hellov.o: $\{INCLUDESRC\}/message.ih

hellov.o: $\{INCLUDESRC\}/namespc.ih

hellov.o: $\{INCLUDESRC\}/observe.ih

hellov.o: $\{INCLUDESRC\}/point.h

hellov.o: $\{INCLUDESRC\}/rect.h

hellov.o: $\{INCLUDESRC\}/scroll.ih

hellov.o: $\{INCLUDESRC\}/view.ih

hellov.o: $\{SRCDIR\}include/class.h

hellov.o: hello.ih

hellov.o: hellov.eh

hellov.eh hellov.ih: hellov.ch

hellov.eh hellov.ih: $\{INCLUDESRC\}/graphic.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/observe.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/point.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/rect.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/view.ih

hellov.eh hellov.ih: $\{SRCDIR\}include/class.h


}

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,1006,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538471384}
