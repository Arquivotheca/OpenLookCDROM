\begindata{text,538925048}
\textdsversion{12}
\template{default}
\define{global
}
\define{itemize
}
\formatnote{\chapter{Example 16 -- Splitting Windows }}

\indexi{Windows++Splitting} \indexi{Lpair} \indexi{Splitting windows} 
\indexi{Class++Lpair} \indexi{Panels in windows} \indexi{Multiple views} 
\indexi{Views++Multiple}


Example 16 illustrates how to create split windows.  If an application needs 
to have several views visible simultaneously, but needs more control over 
their placement than is available by the use of multiple windows, it may be 
feasible to create split windows instead.  The Andrew Toolkit provides the 
class\italic{ lpair} that creates window splits at specified locations.  An 
lpair is simply a view that displays two sub-views next to one another with a 
line in-between, imposing constraints on their size. 


In this example, we take the two kinds of views created thus far, 
\italic{helloworldview} and \italic{textview}, and have each window in the 
program create an lpair containing one of each type, side by side.  The 
program is a combination of Example 13 and Example 15, plus the lpair code to 
tie the two kinds of views together. 


The discussion that follows presents a step-by-step description of how to 
modify the \italic{helloworld} class in Example 13  to produce Example 16.  If 
you were to follow the steps, you would produce a program, called 
\italic{helloworldapp}, in seven files: 


\itemize{
a hello.ch file -- will contain the class definition for the 
\italic{helloworld }data object.  This will be exactly the same as in Example 
13. 


a hello.c file -- will contain statements that import Andrew Toolkit classes 
used by the data object, initialize the class, and define the Read and Write 
methods.  This will be exactly the same as in Example13. 


a hellov.ch file -- will contain the class definition for the 
\italic{helloworld} view, and is exactly the same as in Example 13. 


a hellov.c file -- will contain statements that import Andrew Toolkit classes 
used by the view and definitions of the methods and will be exactly the same 
as in Example 13. 

 

a helloa.ch file -- will contain the class definition for the application 
program that will display an instance of the class in a window.  This will be 
exactly the same as in Example 15. 


a helloa.c -- will contain declarations needed by the Andrew Toolkit linking 
and loading facilities as well the definition of the \italic{helloworldview} 
application method.  We will add procedures for splitting the windows and 
linking the two types of views to their respective windows. 


Makefile -- will contain the directions for compiling, linking and loading. 
 This will be exactly the same as Example 13. 

}

For a complete listing of these files, see \italic{Program Listing for Example 
16 } at the end of this section on p. 
\begindata{textref,539315976}
\textdsversion{12}
# ExSixteenListing\
\enddata{textref,539315976}
\view{textrefv,539315976,957,0,0}. The source code is available in the 
directory /usr/andrew/examples/ex16, together with the compiled program. 


Although the discussion of the steps refers directly to this example, the 
information generally applies to the creation of any application that splits 
its windows. 

\begindata{bp,538928712}
\enddata{bp,538928712}
\view{bpv,538928712,958,0,0}
\section{Running the example program}


\formatnote{\bold{Action 1.}   \formatnote{To run the program, at the 
\bold{command }prompt type


runapp /usr/andrew/examples/atk/ex16/helloa


and press the Enter key.

}

\bold{Response.}\formatnote{   }The program will produce two windows, each 
split into

two views as in the figure on the following page.


\bold{Action 2.} \formatnote{   }Place the cursor in the left-side view and 
bring up the

menus.


\bold{Response. } \formatnote{   }The menus will be the \italic{helloworld} 
menus.



\bold{Action 3.}\formatnote{   }Move the cursor into the right-side view and 
bring up

the menus.


\bold{Response. }\formatnote{   }You should still see the \italic{helloworld} 
menus.


\bold{Action 4.}\formatnote{   }Click with the right mouse button in the 
right-side view

and bring up the menus.


\bold{Response.} \formatnote{   }Now the input focus has changed, and you will 
see the

default text document menus instead of the \italic{helloworld }menus.


\bold{Action 5.}\formatnote{   }To quit the program, pop-up the menus and 
choose \bold{Quit}

from the top card.


\bold{Response.} \formatnote{   }The windows will disappear from the screen.

}
\begindata{bp,538928968}
\enddata{bp,538928968}
\view{bpv,538928968,959,0,0}
\section{Overview of Lpairs}


An applications program may need to display more than one view in a window at 
one time.  Lpairs can be used to split a rectangle into two sub-rectangles, 
each with a different view.    The class \italic{lpair} provides methods and 
class procedures for placing one view above another in a rectangle (vertical 
split) or placing two views side by side in a rectangle (horizontal split). 
  The division may be by a fixed distance, or by a percentage of the rectangle 
size.  Further, since each lpair can be divided into lpairs, it is possible to 
create a fairly complex panel of views. 


Note that having an lpair split does not increase the actual number of windows 
being displayed by the application program, therefore, the number of 
interaction managers running also remains the same.  If you do not need the 
additional independence that comes from having separate view trees per display 
(separate windows) you should probably use lpairs (separate panels in one 
window) instead. 

\indexi{Windows++Multiple} \indexi{Multiple windows} 

\indexi{Splitting windows}


As mentioned previously, in this example, we will display two windows, each 
with a textview and a helloworldview in two separate panels. 



\section{Modifying the class definition}


\subsection{Getting an Application Layer} \indexi{Application layer}


\formatnote{static struct view *appLayerOrDestroy(v)

struct view *v;

\{

    if(v==NULL)

	return NULL;

    else\{

	struct view *al=view_GetApplicationLayer(v);


	if(al==NULL)\{

	    view_Destroy(v);

	    return NULL;

	\}


	return al;

    \}

\}


}To facilitate the discussion, we create a function \italic{appLayerOrDestroy} 
which takes a view and attempts to get an application layer for that view (See 
Example7 for more information on application layers).  If an application layer 
cannot be found, the function cleans up by destroying the view.  This function 
will be called on each view to be displayed in the lpairs as well as the lpair 
itself. 


\subsection{Splitting the window} \indexi{Windows++Splitting}


\formatnote{static boolean makeSplitWindow(dobj1,dobj2)

struct dataobject *dobj1,*dobj2;

\{

    struct view *v1,*v2;

    struct view *al1,*al2,*lpAl;

    struct frame *frame;

    struct im *im;

    struct lpair *lp;


    al1=appLayerOrDestroy(v1=(struct view 
*)class_NewObject(dataobject_ViewName(dobj1)));

    if(al1==NULL)

	return FALSE;


    al2=appLayerOrDestroy(v2=(struct view 
*)class_NewObject(dataobject_ViewName(dobj2)));

    if(al2==NULL) \{

	view_DeleteApplicationLayer(v1,al1);

    	view_Destroy(v1);

	return FALSE;

    \}


    lpAl=appLayerOrDestroy((struct view *)(lp=lpair_New()));

    if(lpAl==NULL) \{

	view_DeleteApplicationLayer(v2,al2);

    	view_Destroy(v2);

	return FALSE;

    \}


    /* this call makes a left/right split, with the given

     * percentage allocated to the left view

     */

    lpair_HSplit(lp,al1,al2,40 /* percent */,TRUE /* movable boundary */);


    frame=frame_New();

    if(frame==NULL) \{

	lpair_DeleteApplicationLayer(lp,lpAl);

    	lpair_Destroy(lp);

	return FALSE;

    \}


    im=im_Create(NULL);

    if(im==NULL) \{

	frame_Destroy(frame);

	return FALSE;

    \}


    view_SetDataObject(v1,dobj1);

    view_SetDataObject(v2,dobj2);

    frame_SetView(frame,lpAl);

    im_SetView(im,frame);


    view_WantInputFocus(v1,v1);


    return TRUE;


\}


}
To create the panels, we modify the \italic{makeWindow} function from the 
previous example to take two parameters -- one data object for each of the two 
views it will put in the window.  The function creates a view for each data 
object, creates an lpair, and tells the lpair to display the two views side by 
side. 


The call\italic{ lpair_HSplit} tells the lpair that the two views passed as 
the first two parameters should be displayed side by side in the lpair (the 
first parameter on the left).  The third parameter is the percentage of the 
width of the lpair to allocated to the right view, with the remaining width 
used by the left view.  The last parameter tells whether the user is allowed 
to move the boundary between the subviews (which can be done with the mouse). 


The \italic{lpair_HFixed} call is similar to the \italic{lpair_HSplit }call, 
but the third parameter is the number of pixels wide to make the right view, 
not a percentage.  The \italic{lpair_HTFixed} call uses the 3rd parameter to 
specify the width of the right view.  The \italic{lpair_VSplit}, 
\italic{lpair_VFixed}, and \italic{lpair_VTFixed} are the analogous calls for 
splitting between a top/bottom pair of views instead of left/right pair. 
 Documentation of these methods can be found in the section \bold{Lpair} in 
Volume II of this guide. 


\subsection{Writing the Start method} \indexi{ \italic{Start}}


\formatnote{
boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct helloworld *hw;

    struct text *t;

    struct style *bold,*italic;

 

    if(!super_Start(hwapp))

	return FALSE;


    hw=helloworld_New();

    if(hw==NULL)

	return FALSE;


    t=text_New();

    if(t==NULL) \{

	helloworld_Destroy(hw);

	return FALSE;

    \}


    bold=style_New();

    if(bold==NULL)\{

	text_Destroy(t);

	return FALSE;

    \}

    style_AddNewFontFace(bold,fontdesc_Bold);


    italic=style_New();

    if(italic==NULL) \{

	style_Destroy(bold);

	return FALSE;

   \}

    style_AddNewFontFace(italic,fontdesc_Italic);


    text_InsertCharacters(t,0,"Hello world!",sizeof("Hello world!")-1);

    text_AddStyle(t,0,5,bold);

    text_AddStyle(t,6,5,italic);


    if(!makeSplitWindow((struct dataobject *)hw,(struct dataobject *)t) ||

       !makeSplitWindow((struct dataobject *)hw,(struct dataobject *)t))  \{

	style_Destroy(italic);

	return FALSE;

    \}


    return TRUE;


\}


}
The Start method for this example merely combines the code from Examples 13 
and 15, so that both the textviews and the helloworldviews will be created and 
linked. 


\subsection{Importing Toolkit procedures} \indexi{Importing}


\formatnote{
#include <class.h>


#include "helloa.eh"


#include "dataobj.ih"

#include "view.ih"

#include "im.ih"

#include "frame.ih"

#include "lpair.ih"

#include "text.ih"

#include "textv.ih"

#include "style.ih"

#include "hello.ih"


}
The imports for helloa.c include imports from both Examples 13 and 15.  The 
remainder of the compilation and running procedures are the same as in 
previous examples. 

\begindata{bp,538929288}
\enddata{bp,538929288}
\view{bpv,538929288,960,0,0}
\begindata{texttag,539236104}
\textdsversion{12}
ExSixteenListing\
\enddata{texttag,539236104}
\view{texttagv,539236104,961,0,0}
\section{Program listing for Example 16}


\formatnote{
\bold{hello.ch}


#define POSUNDEF (-1)


class helloworld[hello]: dataobject [dataobj]\{

overrides:

    Read(FILE *file,long id) returns long;

    Write(FILE *file,long writeId,int level) returns long;

data:

    long x,y;

    boolean blackOnWhite;

\};



\bold{hello.c}


#include <stdio.h>

#include <class.h>


#include "hello.eh"


boolean helloworld__InitializeObject(classID,hw)

struct classheader *classID;

struct helloworld *hw;   

\{

    hw->x=POSUNDEF;

    hw->y=POSUNDEF;

    hw->blackOnWhite=TRUE;

    return TRUE;

\}


long helloworld__Read(hw,file,id)

struct helloworld *hw;

FILE *file;

long id;

\{

    char buf[100];


    helloworld_SetID(hw,helloworld_UniqueID(hw));


    if(fgets(buf,sizeof(buf),file)==NULL)

	return dataobject_PREMATUREEOF;

    /* the %hd tells scanf that blackOnWhite is a short, not an int */

    if(sscanf(buf,"%d %d %hd\\n",&hw->x,&hw->y,&hw->blackOnWhite)<3)

	return dataobject_PREMATUREEOF;


    if(fgets(buf,sizeof(buf),file)==NULL) /* read in the \\enddata\{...\} */

	return dataobject_MISSINGENDDATAMARKER;


    return dataobject_NOREADERROR;

\}


long helloworld__Write(hw,file,writeId,level)

struct helloworld *hw;

FILE *file;

long writeId;

int level;

\{

    if(writeId!=helloworld_GetWriteID(hw))\{ /* only write a given version 
once */

	helloworld_SetWriteID(hw,writeId);

	fprintf(file,"\\\\begindata\{%s,%d\}\\n",

		class_GetTypeName(hw), helloworld_UniqueID(hw));

	fprintf(file,"%d %d %d\\n",hw->x,hw->y,hw->blackOnWhite);

	fprintf(file,"\\\\enddata\{%s,%d\}\\n",

		class_GetTypeName(hw), helloworld_UniqueID(hw));

    \}


    return helloworld_UniqueID(hw);

\}



\bold{hellov.ch}


class helloworldview[hellov]: view \{

overrides:

    FullUpdate(enum view_UpdateType type, long left, long top, long width, 
long height);

    Update();

    Hit (enum view_MouseAction action, long x, long y, long numberOfClicks) 
returns struct view *;

    ReceiveInputFocus();

    LoseInputFocus();

    GetInterface(int type) returns char *;

    GetApplicationLayer() returns struct view *;

    DeleteApplicationLayer(struct view *);

classprocedures:

    InitializeClass() returns boolean;

data:

    struct keystate *keystate;

    struct menulist *menulist;

    boolean HaveDownTransition;

    boolean haveInputFocus;

    long hitX,hitY;

    long x,y;

    boolean blackOnWhite;

    long frameX, frameY;

    long newFrameX, newFrameY;

    int vrWidth,vrHeight;

    boolean didMove;

\};



\bold{hellov.c}


#include <stdio.h>

#include <class.h>


#include "hellov.eh"


#include "graphic.ih"

#include "fontdesc.ih"

#include "rect.h"

#include "keymap.ih"

#include "keystate.ih"

#include "menulist.ih"

#include "scroll.ih"

#include "bind.ih"

#include "message.ih"

#include "im.ih"


#include "hello.ih"


#define TOTALSIZE 1500


static void xgetinfo(), xsetframe(), ygetinfo(), ysetframe();

static long xwhat(), ywhat();


static struct scrollfns horizInterface = \{

    xgetinfo, xsetframe, NULL, xwhat

\};


static struct scrollfns vertInterface = \{

    ygetinfo, ysetframe, NULL, ywhat

\};


static struct keymap *helloworldviewKeymap;

static struct menulist *helloworldviewMenulist;


static struct fontdesc *bold, *italic;


boolean helloworldview__InitializeObject(classID,hwv)

struct classheader *classID;

struct helloworldview *hwv;   

\{

    hwv->haveInputFocus = FALSE;

    hwv->HaveDownTransition=FALSE;

    hwv->keystate = keystate_Create(hwv, helloworldviewKeymap);

    hwv->menulist = menulist_DuplicateML(helloworldviewMenulist, hwv);

    hwv->newFrameX = hwv->newFrameY = 0;

    return TRUE;

\}


struct view *helloworldview__GetApplicationLayer(hwv)

struct textview *hwv;

\{

    return (struct view *)scroll_Create(hwv,scroll_LEFT+scroll_BOTTOM);

\}


void helloworldview__DeleteApplicationLayer(hwv,scrollbar)

struct textview *hwv;

struct scroll *scrollbar;

\{

    scroll_Destroy(scrollbar);

\}


void drawHW(hwv)

struct helloworldview *hwv;

\{

    helloworldview_MoveTo(hwv,

			   hwv->x-hwv->frameX,hwv->y-hwv->frameY);

    helloworldview_SetFont(hwv,italic);

    helloworldview_DrawString(hwv, "hello ",

			       graphic_BETWEENTOPANDBASELINE |

			       graphic_ATRIGHT);

    helloworldview_MoveTo(hwv,

			   hwv->x-hwv->frameX,hwv->y-hwv->frameY);

    helloworldview_SetFont(hwv,bold);

    helloworldview_DrawString(hwv, "world",

			       graphic_BETWEENTOPANDBASELINE |

			       graphic_ATLEFT);

\}


void helloworldview__FullUpdate(hwv, type, left, top, width, height)

struct helloworldview *hwv;

enum view_UpdateType type;

long left;

long top;

long width;

long height; 

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;

    struct rectangle myVisualRect;


    helloworldview_GetVisualBounds(hwv,&myVisualRect);

    hwv->vrWidth=rectangle_Width(&myVisualRect);

    hwv->vrHeight=rectangle_Height(&myVisualRect);


    if (hwv->newFrameX + hwv->vrWidth > TOTALSIZE)

	hwv->newFrameX = TOTALSIZE - hwv->vrWidth;

    if (hwv->newFrameY + hwv->vrHeight > TOTALSIZE)

	hwv->newFrameY = TOTALSIZE - hwv->vrHeight;


    hwv->frameX = hwv->newFrameX;

    hwv->frameY = hwv->newFrameY;


    if (hw->x == POSUNDEF) \{

	hw->x = hwv->frameX + hwv->vrWidth / 2;

	hw->y = hwv->frameY + hwv->vrHeight / 2;

    \}


    hwv->x=hw->x;

    hwv->y=hw->y;

    hwv->blackOnWhite=hw->blackOnWhite;


    helloworldview_SetTransferMode(hwv, graphic_COPY);


    if (hw->blackOnWhite)

	helloworldview_FillRect(hwv, 

		&myVisualRect, helloworldview_WhitePattern(hwv));

    else

	helloworldview_FillRect(hwv, 

		&myVisualRect, helloworldview_BlackPattern(hwv));


    helloworldview_SetTransferMode(hwv,graphic_INVERT);


    drawHW(hwv);

\}



void helloworldview__Update(hwv)

struct helloworldview *hwv;

\{    

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    helloworldview_SetTransferMode(hwv, graphic_INVERT);


    if (hw->blackOnWhite!=hwv->blackOnWhite) \{

	struct rectangle vr;

	helloworldview_GetVisualBounds(hwv,&vr);

	helloworldview_FillRect(hwv,

		&vr,helloworldview_BlackPattern(hwv));

	hwv->blackOnWhite=hw->blackOnWhite;

    \}


    if (hwv->x!=hw->x || hwv->y!=hw->y || hwv->frameX!=hwv->newFrameX || 
hwv->frameY!=hwv->newFrameY) \{

	if(hwv->x!=hw->x || hwv->y!=hw->y)\{

	    static char buf[100];

	    sprintf(buf,"Hello world at (%d,%d)",hw->x,hw->y);

	    message_DisplayString(hwv,0,buf);

	\}	    


	drawHW(hwv);

  

	hwv->x=hw->x;

	hwv->y=hw->y;

  	hwv->frameX = hwv->newFrameX;

  	hwv->frameY = hwv->newFrameY;

  

	drawHW(hwv);

    \}

\}



struct view *helloworldview__Hit(hwv, action, x, y, numberOfClicks)

struct helloworldview *hwv;

enum view_MouseAction action;

long x;

long y;

long numberOfClicks;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    if(hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightUp:

		hwv->HaveDownTransition=FALSE;

		/* fall through */

	    case view_RightMovement:

		hw->x+=x-hwv->hitX;

		hw->y+=y-hwv->hitY;

		hwv->hitX=x;

		hwv->hitY=y;

		break;

	    case view_LeftUp:

		hwv->HaveDownTransition=FALSE;

		hw->x=x+hwv->frameX;

		hw->y=y+hwv->frameY;

		break;

	    case view_LeftMovement:

		/* do nothing */

		break;

	    default:

		/* re-synchronize mouse */

		hwv->HaveDownTransition=FALSE;

	\}


    if(!hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightDown:

		hwv->hitX=x;

		hwv->hitY=y;

		/* fall through */

	    case view_LeftDown:

		hwv->HaveDownTransition=TRUE;

		helloworldview_WantInputFocus(hwv,hwv);

		break;

	\}


    helloworld_NotifyObservers(hw,0);


    return (struct view *)hwv;

\}



void helloworldview__ReceiveInputFocus(hwv)

struct helloworldview *hwv;

\{

    hwv->haveInputFocus = TRUE;

    hwv->keystate->next = NULL;

    helloworldview_PostKeyState(hwv, hwv->keystate);

    helloworldview_PostMenus(hwv, hwv->menulist);

\}



void helloworldview__LoseInputFocus(hwv)

struct helloworldview *hwv;

\{

    hwv->haveInputFocus = FALSE;

\}


static void Center(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    hw->x = hwv->newFrameX + hwv->vrWidth / 2;

    hw->y = hwv->newFrameY + hwv->vrHeight / 2;


    helloworld_NotifyObservers(hw,0);

\}



static void Invert(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    hw->blackOnWhite = !hw->blackOnWhite;

    helloworld_NotifyObservers(hw,0);

\}



static void relocate(hwv,rock)

struct helloworldview *hwv;

long rock;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;

    char buf[100];

    int x,y;


    message_AskForString(hwv,0,"New location (x,y): ",NULL,buf,sizeof(buf));


    if(sscanf(buf,"%d,%d",&x,&y)!=2)

	message_DisplayString(hwv,1,"Bad format; must be: number,number");

    else\{

	hw->x=x;

	hw->y=y;


	helloworld_NotifyObservers(hw,0);

    \}

\}



static void readHW(hwv,rock)

struct helloworldview *hwv;

long rock;

\{

    char file[100], msgBuf[100];

    FILE *fp;


    message_AskForString(hwv,0,"Read file: ",NULL,file,sizeof(file));

    fp=fopen(file,"r");

    if(fp==NULL)\{

	sprintf(msgBuf,"Couldn't open %s for reading.", file);

	message_DisplayString(hwv,1,msgBuf);

    \}else\{

	char header[100];


	if(fgets(header,sizeof(header),fp)==NULL)\{

	    sprintf(msgBuf,"Premature end-of-file in %s.",file);

	    message_DisplayString(hwv,1,msgBuf);

	\}else\{

	    char name[20];

	    int id;


	    if(sscanf(header,"\\\\begindata\{%[^,],%d\}\\n",

		name,&id)!=2)\{

		sprintf(msgBuf,

			"%s doesn't contain a valid datastream header.",

			file);

		message_DisplayString(hwv,1,msgBuf);

	    \}else\{

		struct helloworld *hw=

		  (struct helloworld *)hwv->header.view.dataobject;


		if(strcmp(name,class_GetTypeName(hw))!=0)\{

		    sprintf(msgBuf,

			    "%s doesn't contain a helloworld dataobject.",

			    file);

		    message_DisplayString(hwv,1,msgBuf);

		\}else\{

		    /* FINALLY, read the object in... */

		    helloworld_Read(hw,fp,id);

		    fclose(fp);

		    helloworld_NotifyObservers(hw,0);

		\}

	    \}

	\}

    \}

\}



static void writeHW(hwv,rock)

struct helloworldview *hwv;

long rock;

\{

    char file[100], msgBuf[100];

    FILE *fp;


    message_AskForString(hwv,0,"Write file: ",NULL,file,sizeof(file));

    fp=fopen(file,"w");

    if(fp==NULL)\{

	sprintf(msgBuf,"Couldn't open %s for writing.",file);

	message_DisplayString(hwv,1,msgBuf);

    \}else\{

	struct helloworld *hw=

	  (struct helloworld *)hwv->header.view.dataobject;

	

	helloworld_Write(hw,fp,im_GetWriteID(),0);

	fclose(fp);

    \}

\}



static void xgetinfo(hwv, total, seen, dot)

struct helloworldview *hwv;

struct range *total, *seen, *dot;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    total->beg = 0;

    total->end = TOTALSIZE;

    seen->beg = hwv->frameX;

    seen->end = hwv->frameX + hwv->vrWidth;

    dot->beg = dot->end = hw->x;

\}


static void ygetinfo(hwv, total, seen, dot)

struct helloworldview *hwv;

struct range *total, *seen, *dot;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    total->beg = 0;

    total->end = TOTALSIZE;

    seen->beg = hwv->frameY;

    seen->end = hwv->frameY + hwv->vrHeight;

    dot->beg = dot->end = hw->y;

\}


static void xsetframe(hwv, posn, cord, outof)

struct helloworldview *hwv;

int posn;

long cord, outof;

\{

    hwv->newFrameX = posn - hwv->vrWidth * cord / outof;

    if (hwv->newFrameX + hwv->vrWidth > TOTALSIZE)

	hwv->newFrameX = TOTALSIZE - hwv->vrWidth;

    else if (hwv->newFrameX < 0)

	hwv->newFrameX = 0;

    helloworldview_WantUpdate(hwv, hwv);

\}


static void ysetframe(hwv, posn, cord, outof)

struct helloworldview *hwv;

int posn;

long cord, outof;

\{

    hwv->newFrameY = posn - hwv->vrHeight * cord / outof;

    if (hwv->newFrameY + hwv->vrHeight > TOTALSIZE)

	hwv->newFrameY = TOTALSIZE - hwv->vrHeight;

    else if (hwv->newFrameY < 0)

	hwv->newFrameY = 0;

    helloworldview_WantUpdate(hwv, hwv);

\}


static long xwhat(hwv, cord, outof)

struct helloworldview *hwv;

long cord, outof;

\{

    return hwv->frameX + hwv->vrWidth * cord / outof;

\}


static long ywhat(hwv, cord, outof)

struct helloworldview *hwv;

long cord, outof;

\{

    return hwv->frameY + hwv->vrHeight * cord / outof;

\}



char *helloworldview__GetInterface(hwv, type)

struct helloworldview *hwv;

char *type;

\{

    if (strcmp(type, "scroll,vertical") == 0)

	return (char *) &vertInterface;

    else if (strcmp(type, "scroll,horizontal") == 0)

	return (char *) &horizInterface;

    else

	return NULL;

\}



static struct bind_Description helloworldviewBindings[]=\{

    \{"helloworld-center", "\\003",0, "Hello World,Center",0,0, Center, 
"Center the helloworld string."\},

    \{"helloworld-invert", "\\011",0, "Hello World,Invert",0,0, Invert, 
"Invert the helloworld string."\},

    \{"helloworld-relocate", "\\022",0, "Hello World,Relocate",0,0, relocate, 
"Relocate the helloworld string."\},

    \{"helloworld-read", NULL,0, "Hello World,Read",0,0, readHW, "Read in a 
new hello world."\},

    \{"helloworld-write", NULL,0, "Hello World,Write",0,0, writeHW, "Write out 
the current hello world to a file."\},

    NULL

\};


boolean helloworldview__InitializeClass(classID)

struct classheader *classID;

\{

    bold=fontdesc_Create("andysans",fontdesc_Bold,12);

    italic=fontdesc_Create("andysans",fontdesc_Italic,12);


    helloworldviewMenulist=menulist_New();

    helloworldviewKeymap=keymap_New();

    bind_BindList(helloworldviewBindings,

		   helloworldviewKeymap,

		   helloworldviewMenulist,

		   &helloworldview_classinfo);


    return TRUE;

\}



\bold{helloa.ch}


class helloworldapp[helloa] : application[app]\{

    overrides:

	Start() returns boolean;

\};



\bold{helloa.c}


#include <class.h>


#include "helloa.eh"


#include "dataobj.ih"

#include "view.ih"

#include "im.ih"

#include "frame.ih"

#include "lpair.ih"

#include "text.ih"

#include "textv.ih"

#include "style.ih"

#include "hello.ih"


static struct view *appLayerOrDestroy(v)

struct view *v;

\{

    if(v==NULL)

	return NULL;

    else\{

	struct view *al=view_GetApplicationLayer(v);


	if(al==NULL)\{

	    view_Destroy(v);

	    return NULL;

	\}


	return al;

    \}

\}


static boolean makeSplitWindow(dobj1,dobj2)

struct dataobject *dobj1,*dobj2;

\{

    struct view *v1,*v2;

    struct view *al1,*al2,*lpAl;

    struct frame *frame;

    struct im *im;

    struct lpair *lp;


    al1=appLayerOrDestroy(v1=(struct view 
*)class_NewObject(dataobject_ViewName(dobj1)));

    if(al1==NULL)

	return FALSE;


    al2=appLayerOrDestroy(v2=(struct view 
*)class_NewObject(dataobject_ViewName(dobj2)));

    if(al2==NULL) \{

	view_DeleteApplicationLayer(v1,al1);

    	view_Destroy(v1);

	return FALSE;

    \}


    lpAl=appLayerOrDestroy((struct view *)(lp=lpair_New()));

    if(lpAl==NULL) \{

	view_DeleteApplicationLayer(v2,al2);

    	view_Destroy(v2);

	return FALSE;

    \}

	

    /* this call makes a left/right split, with the given

     * percentage allocated to the left view

     */

    lpair_HSplit(lp,al1,al2,40 /* percent */,TRUE /* movable boundary */);


    frame=frame_New();

    if(frame==NULL)  \{

	lpair_DeleteApplicationLayer(lp,lpAl);

    	lpair_Destroy(lp);

	return FALSE;

    \}


    im=im_Create(NULL);

    if(im==NULL) \{

	frame_Destroy(frame);

	return FALSE;

    \}

	

    view_SetDataObject(v1,dobj1);

    view_SetDataObject(v2,dobj2);

    frame_SetView(frame,lpAl);

    im_SetView(im,frame);


    view_WantInputFocus(v1,v1);


    return TRUE;


\}


boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct helloworld *hw;

    struct text *t;

    struct style *bold,*italic;

 

    if(!super_Start(hwapp))

	return FALSE;


    hw=helloworld_New();

    if(hw==NULL)

	return FALSE;


    t=text_New();

    if(t==NULL) \{

	helloworld_Destroy(hw);

	return FALSE;

    \}


    bold=style_New();

    if(bold==NULL)\{

	text_Destroy(t);

	return FALSE;

    \}

    style_AddNewFontFace(bold,fontdesc_Bold);


    italic=style_New();

    if(italic==NULL) \{

	style_Destroy(bold);

	return FALSE;

   \}

    style_AddNewFontFace(italic,fontdesc_Italic);


    text_InsertCharacters(t,0,"Hello world!",sizeof("Hello world!")-1);

    text_AddStyle(t,0,5,bold);

    text_AddStyle(t,6,5,italic);


    if(!makeSplitWindow((struct dataobject *)hw,(struct dataobject *)t) ||

       !makeSplitWindow((struct dataobject *)hw,(struct dataobject *)t))  \{

	style_Destroy(italic);

	return FALSE;

    \}


    return TRUE;


\}




\bold{Makefile}


SRCDIR=/usr/andrew/

INCLUDES= -I. -I$\{SRCDIR\}include/atk -I$\{SRCDIR\}include

INCLUDESRC = $\{SRCDIR\}include/atk

CC=cc

DEBUG = -g

TOOLS = $\{SRCDIR\}bin/

CFLAGS= $\{DEBUG\} $\{INCLUDES\} 

CLASSFLAGS=$\{INCLUDES\}


MAKEDO = $\{TOOLS\}makedo $\{DEBUG\} -b $\{TOOLS\} -d $\{SRCDIR\}lib 

CLASS = $\{TOOLS\}class


.SUFFIXES: .ih .eh .ch .do


.ch.ih:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch

.ch.eh:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch


.o.do:

	$\{MAKEDO\} $<



all:  helloa.do hello.do hellov.do


helloa.do: helloa.o helloa.eh

hello.do:  hello.o hello.eh

hellov.do: hellov.o hellov.eh


helloa.o: helloa.c

helloa.o: $\{INCLUDESRC\}/app.ih

helloa.o: $\{INCLUDESRC\}/atom.ih

helloa.o: $\{INCLUDESRC\}/dataobj.ih

helloa.o: $\{INCLUDESRC\}/frame.ih

helloa.o: $\{INCLUDESRC\}/graphic.ih

helloa.o: $\{INCLUDESRC\}/im.ih

helloa.o: $\{INCLUDESRC\}/lpair.ih

helloa.o: $\{INCLUDESRC\}/message.ih

helloa.o: $\{INCLUDESRC\}/namespc.ih

helloa.o: $\{INCLUDESRC\}/observe.ih

helloa.o: $\{INCLUDESRC\}/point.h

helloa.o: $\{INCLUDESRC\}/rect.h

helloa.o: $\{INCLUDESRC\}/view.ih

helloa.o: $\{SRCDIR\}include/class.h

helloa.o: hello.ih

helloa.o: hellov.ih

helloa.o: helloa.eh

helloa.eh helloa.ih: helloa.ch

helloa.eh helloa.ih: $\{INCLUDESRC\}/app.ih

hello.o: hello.c

hello.o: $\{INCLUDESRC\}/atom.ih

hello.o: $\{INCLUDESRC\}/dataobj.ih

hello.o: $\{INCLUDESRC\}/namespc.ih

hello.o: $\{INCLUDESRC\}/observe.ih

hello.o: $\{SRCDIR\}include/class.h

hello.o: hello.eh

hello.eh hello.ih: hello.ch

hello.eh hello.ih: $\{INCLUDESRC\}/atom.ih

hello.eh hello.ih: $\{INCLUDESRC\}/dataobj.ih

hello.eh hello.ih: $\{INCLUDESRC\}/namespc.ih

hello.eh hello.ih: $\{INCLUDESRC\}/observe.ih

hellov.o: hellov.c

hellov.o: $\{INCLUDESRC\}/atom.ih

hellov.o: $\{INCLUDESRC\}/bind.ih

hellov.o: $\{INCLUDESRC\}/dataobj.ih

hellov.o: $\{INCLUDESRC\}/graphic.ih

hellov.o: $\{INCLUDESRC\}/keymap.ih

hellov.o: $\{INCLUDESRC\}/keystate.ih

hellov.o: $\{INCLUDESRC\}/menulist.ih

hellov.o: $\{INCLUDESRC\}/message.ih

hellov.o: $\{INCLUDESRC\}/namespc.ih

hellov.o: $\{INCLUDESRC\}/observe.ih

hellov.o: $\{INCLUDESRC\}/point.h

hellov.o: $\{INCLUDESRC\}/rect.h

hellov.o: $\{INCLUDESRC\}/scroll.ih

hellov.o: $\{INCLUDESRC\}/view.ih

hellov.o: $\{SRCDIR\}include/class.h

hellov.o: hello.ih

hellov.o: hellov.eh

hellov.eh hellov.ih: hellov.ch

hellov.eh hellov.ih: $\{INCLUDESRC\}/graphic.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/observe.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/point.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/rect.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/view.ih

hellov.eh hellov.ih: $\{SRCDIR\}include/class.h



}

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,963,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538925048}
