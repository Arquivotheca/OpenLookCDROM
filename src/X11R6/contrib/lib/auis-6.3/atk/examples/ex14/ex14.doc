\begindata{text,538511608}
\textdsversion{12}
\template{default}
\define{global
}
\define{itemize
}
\chapter{\formatnote{Example 14 -- Creating Text Documents} }\indexi{Text} 
\indexi{Documents}

\indexi{Class++Text} \indexi{Class++Textview} \indexi{Insets++Text} 


Example 14 illustrates how to create text documents.  The Andrew Toolkit 
provides a predefined text data object and text view for implementation of 
multiple-font, styled text, than can have embedded views.  This example 
replaces the helloworld dataobject/view inset used in previous examples with a 
text/textview inset. 


Since the textview, by default, provides keybindings and menus for editing its 
associated text, the result is a simple text editor. 

\indexi{Text++Editor} 

You will note that none of the menus or keybindings defined in the 
helloworldview are available in this example program (since we are using 
default text menus and keybindings instead). 


The discussion that follows presents a step-by-step description of how to 
modify the \italic{helloworld} class in Example 13 to produce Example 14.  If 
you were to follow the steps, you would produce a program, called 
\italic{helloworldapp}, in three files: 


\itemize{
a helloa.ch file -- will contain the class definition for the application 
program that will display an instance of the class in a window.  This will be 
exactly the same as in Example 13. 


a helloa.c -- will contain declarations needed by the Andrew Toolkit linking 
and loading facilities as well the definition of the \italic{helloworld} 
application method.  We will add procedures for creating and linking a text 
view and data object to the Start method. 


Makefile -- will contain the directions for compiling, linking and loading. 
 This will be slightly different from that of previous examples, since we will 
not be using the helloworld and helloworldview files. 

}

For a complete listing of these files, see \italic{Program Listing for Example 
14} at the end of this section on p. 
\begindata{textref,539315976}
\textdsversion{12}
# ExFourteenListing\
\enddata{textref,539315976}
\view{textrefv,539315976,971,0,0}.  The source code is available in the 
directory /usr/andrew/example/ex14, together with the compiled program. 


Although the discussion of the steps refers directly to this example, the 
information generally applies to the creation of any simple text document. 


\begindata{bp,538928712}
\enddata{bp,538928712}
\view{bpv,538928712,972,0,0}
\section{Running the example program}


\formatnote{\bold{Action 1.}   \formatnote{To run the program, at the 
\bold{command }prompt type


runapp /usr/andrew/examples/atk/ex14/helloa


and press the Enter key.

}

\bold{Response.}\formatnote{   }The program will produce  two windows, each 
with "Hello

world!" in the upper left corner of the window with horizontal and vertical

scroll bars, and a message line strip.



\bold{Action 2.} \formatnote{   }Bring up the menus.


\bold{Response. } \formatnote{   }Instead of the helloworld menus from 
previous programs,

the menus will be the default menus for text documents.  The top card

will have the choices \bold{Paste}, \bold{Plainer}, and \bold{Quit}.  The 
second

card titled \bold{Search/Spell} will have the choices \bold{Forward}, 
\bold{Backward}, \bold{Search Again}, \bold{Query Replace}, and \bold{Check 
Spelling}.  The last card titled \bold{File} will have the choices 
\bold{InsertFile} and \bold{AddTemplate}.



\bold{Action 3.}\formatnote{   }Type some characters on the keyboard.


\bold{Response. }\formatnote{   }The characters will appear inserted at the 
text cursor

position in both windows, since the two windows share the same data object.



\bold{Action 4.}\formatnote{   }Delete some characters by hitting the 
Backspace key.


\bold{Response.} \formatnote{   }The characters will be deleted in both 
windows.



\bold{Action 5.}\formatnote{   }To quit the program, pop-up the menus and 
choose \bold{Quit}

from the top card.


\bold{Response.} \formatnote{   }The window will disappear from the screen.


\bold{Action 6.}\formatnote{   }Try running the program a second time.


\bold{Response.} \formatnote{   }The program will start with "Hello world!" in 
the upper

left corners of the  windows, even if you had changed the text before.  

The characters inserted or deleted are not stored in permanent memory.

}
\begindata{bp,538928968}
\enddata{bp,538928968}
\view{bpv,538928968,973,0,0}
\section{Overview of text}


Text documents are made possible by the Andrew Toolkit classes text and 
textview.  The menus, key commands, and windows are predefined by these 
classes. 


The menu commands provided by text/textview are: 

\indexi{Text++Menus} 

\indexi{Menus++Text} 


\description{
\bold{Cut}\formatnote{   }for cutting a region out of the text and storing it 
in a cut buffer.  Only visible if a region has been selected. 


\bold{Paste }\formatnote{   }for pasting a region stored in a cut buffer. 


\bold{Plainer } and \bold{Plainest}\formatnote{   }for removing the styles in 
a document.  See Example 15 for a discussion on styles.  The latter menu 
option is only available when a region has been selected. 


\bold{Quit}\formatnote{   }for quitting the program. 



\bold{Search/Spell }related menu items: 


\bold{Forward }\formatnote{   }search forward for a string. 


\bold{Backward }\formatnote{   }search backward for a string. 


\bold{Search Again }\formatnote{   }search for the same string again. 


\bold{Query Replace}\formatnote{   }replace a string with a new string in 
response to user input; space to replace, "no" to skip to next occurrence. 


\bold{Check Spelling}\formatnote{   }runs a spelling checker. 



\bold{File} related menu items: 


\bold{Insert File }\formatnote{   }insert a named file. 


\bold{Add Template}\formatnote{   }insert a template of styles. 

}

Text documents also have one caret for a text cursor per window.  Characters 
can be added by typing; deleted by hitting the Backspace key. 



\section{Creating a text class} \indexi{Text++Creating a class}


Text and textview together are a pre-made inset.  You may create subclasses of 
these to create your own text insets, or you can use them "as is."  In this 
example, we modify the app file to create the text inset and insert the "hello 
world" string into it upon start-up. 


Since we will not use helloworld or helloworldview in this example, only the 
\italic{helloworldapp} files are required.  The helloa.ch file remains the 
same.  The file helloworld.c must include statements to import 
 \indexi{Importing} procedures from text as well as im, frame, view, and 
dataobject. 


\formatnote{
#include <class.h>


#include "helloa.eh"


#include "im.ih"

#include "frame.ih"

\bold{#include "text.ih"}

#include "dataobj.ih"

#include "view.ih"


}
The only other modification is in the Start 

\indexi{ \italic{Start}} 

method for the program.  We must create a text object, then add procedures to 
start up the program with the hello world string in the windows, using the 
\italic{text_InsertCharacters} \indexi{ \italic{text_InsertCharacters}}

method. 


\formatnote{

boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct text *t;


    if(!super_Start(hwapp))

	return FALSE;


    t=text_New();

    if(t==NULL)

	return FALSE;


    text_InsertCharacters(t,0,"Hello world!",sizeof("Hello world!")-1);


    if(!makeWindow((struct dataobject *)t) ||

       !makeWindow((struct dataobject *)t))\{

	text_Destroy(t);

	return FALSE;

    \}


    return TRUE;

\}


}

The \italic{text_InsertCharacters} method takes a position (an integer from 0 
to the length of the text minus one), a string and the length of the string 
(so the string can contain '\\0's and need not be null terminated), and 
inserts that string at the position. 


\subsection{Compiling the program} \indexi{Compiling++Text inset}


Previous Makefiles \indexi{Makefiles} identified the dependencies between the 
various helloworld and helloworldview files.  Since these files are not used 
in this example, the Makefile dependencies are much simpler.  The following is 
the complete Makefile for this example. 


\formatnote{
SRCDIR=/usr/andrew/

INCLUDES= -I. -I$\{SRCDIR\}include/atk -I$\{SRCDIR\}include

INCLUDESRC = $\{SRCDIR\}include/atk

CC=cc

DEBUG = -g

TOOLS = $\{SRCDIR\}bin/

CFLAGS= $\{DEBUG\} $\{INCLUDES\} 

CLASSFLAGS=$\{INCLUDES\}


MAKEDO = $\{TOOLS\}makedo $\{DEBUG\} -b $\{TOOLS\} -d $\{SRCDIR\}lib 

CLASS = $\{TOOLS\}class


.SUFFIXES: .ih .eh .ch .do


.ch.ih:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch

.ch.eh:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch


.o.do:

	$\{MAKEDO\} $<



all:  helloa.do 


helloa.do: helloa.o helloa.eh


helloa.o: helloa.c

helloa.o: $\{INCLUDESRC\}/app.ih

helloa.o: $\{INCLUDESRC\}/atom.ih

helloa.o: $\{INCLUDESRC\}/dataobj.ih

helloa.o: $\{INCLUDESRC\}/frame.ih

helloa.o: $\{INCLUDESRC\}/graphic.ih

helloa.o: $\{INCLUDESRC\}/im.ih

helloa.o: $\{INCLUDESRC\}/lpair.ih

helloa.o: $\{INCLUDESRC\}/mark.ih

helloa.o: $\{INCLUDESRC\}/message.ih

helloa.o: $\{INCLUDESRC\}/namespc.ih

helloa.o: $\{INCLUDESRC\}/observe.ih

helloa.o: $\{INCLUDESRC\}/point.h

helloa.o: $\{INCLUDESRC\}/rect.h

helloa.o: $\{INCLUDESRC\}/smpltext.ih

helloa.o: $\{INCLUDESRC\}/text.ih

helloa.o: $\{INCLUDESRC\}/view.ih

helloa.o: $\{SRCDIR\}include/class.h

helloa.o: helloa.eh

helloa.eh helloa.ih: helloa.ch

helloa.eh helloa.ih: $\{INCLUDESRC\}/app.ih



}
\begindata{bp,538929288}
\enddata{bp,538929288}
\view{bpv,538929288,974,0,0}
\begindata{texttag,539236104}
\textdsversion{12}
ExFourteenListing\
\enddata{texttag,539236104}
\view{texttagv,539236104,975,0,0}
\section{Program listing for Example 14}


\formatnote{
\bold{helloa.ch}


class helloworldapp[helloa] : application[app]\{

    overrides:

	Start() returns boolean;

\};



\bold{helloa.c}


#include <class.h>


#include "helloa.eh"


#include "im.ih"

#include "frame.ih"

#include "text.ih"

#include "dataobj.ih"

#include "view.ih"


static boolean makeWindow(dobj)

struct dataobject *dobj;

\{

    struct view *v;

    struct view *applayer;

    struct frame *frame;

    struct im *im;


    v=(struct view *)class_NewObject(dataobject_ViewName(dobj));

    if(v==NULL)

	return FALSE;


    applayer=view_GetApplicationLayer(v);

    if(applayer==NULL) \{

	view_Destroy(v);

	return FALSE;

    \}


    frame=frame_New();

    if(frame==NULL) \{

	view_DeleteApplicationLayer(v,applayer);

	return FALSE;

    \}


    im=im_Create(NULL);

    if(im==NULL) \{

	frame_Destroy(frame);

	return FALSE;

    \}


    view_SetDataObject(v,dobj);

    frame_SetView(frame,applayer);

    im_SetView(im,frame);


    view_WantInputFocus(v,v);


    return TRUE;


\}


boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct text *t;


    if(!super_Start(hwapp))

	return FALSE;


    t=text_New();

    if(t==NULL)

	return FALSE;


    text_InsertCharacters(t,0,"Hello world!",sizeof("Hello world!")-1);


    if(!makeWindow((struct dataobject *)t) ||

       !makeWindow((struct dataobject *)t))\{

	text_Destroy(t);

	return FALSE;

    \}


    return TRUE;

\}



\bold{Makefile}


SRCDIR=/usr/andrew/

INCLUDES= -I. -I$\{SRCDIR\}include/atk -I$\{SRCDIR\}include

INCLUDESRC = $\{SRCDIR\}include/atk

CC=cc

DEBUG = -g

TOOLS = $\{SRCDIR\}bin/

CFLAGS= $\{DEBUG\} $\{INCLUDES\} 

CLASSFLAGS=$\{INCLUDES\}


MAKEDO = $\{TOOLS\}makedo $\{DEBUG\} -b $\{TOOLS\} -d $\{SRCDIR\}lib 

CLASS = $\{TOOLS\}class


.SUFFIXES: .ih .eh .ch .do


.ch.ih:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch

.ch.eh:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch


.o.do:

	$\{MAKEDO\} $<



all:  helloa.do 


helloa.do: helloa.o helloa.eh


helloa.o: helloa.c

helloa.o: $\{INCLUDESRC\}/app.ih

helloa.o: $\{INCLUDESRC\}/atom.ih

helloa.o: $\{INCLUDESRC\}/dataobj.ih

helloa.o: $\{INCLUDESRC\}/frame.ih

helloa.o: $\{INCLUDESRC\}/graphic.ih

helloa.o: $\{INCLUDESRC\}/im.ih

helloa.o: $\{INCLUDESRC\}/lpair.ih

helloa.o: $\{INCLUDESRC\}/mark.ih

helloa.o: $\{INCLUDESRC\}/message.ih

helloa.o: $\{INCLUDESRC\}/namespc.ih

helloa.o: $\{INCLUDESRC\}/observe.ih

helloa.o: $\{INCLUDESRC\}/point.h

helloa.o: $\{INCLUDESRC\}/rect.h

helloa.o: $\{INCLUDESRC\}/smpltext.ih

helloa.o: $\{INCLUDESRC\}/text.ih

helloa.o: $\{INCLUDESRC\}/view.ih

helloa.o: $\{SRCDIR\}include/class.h

helloa.o: helloa.eh

helloa.eh helloa.ih: helloa.ch

helloa.eh helloa.ih: $\{INCLUDESRC\}/app.ih



}



\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,977,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538511608}
