\begindata{text,538945396}
\textdsversion{12}
\template{default}
\define{global
}
\define{itemize
}
\formatnote{\chapter{Example 13 -- Using multiple fonts}} \indexi{Multiple 
fonts}\indexi{Fonts} \indexi{Fontdesc} \indexi{Class++Fontdesc} \indexi{Font 
descriptors}


In this chapter, we will illustrate how to produce text strings in multiple 
fonts using font descriptors.  The Andrew Toolkit provides the class 
\italic{fontdesc} which allows the creation of text in different font styles. 
 Font descriptors are typically used for simple font applications on strings; 
Examples 14 and 15 will describe how text documents can be created and show 
how different styles may be incorporated into a text document. 


This example will build on the previous example, and produce a program that 
displays the \italic{helloworld} string in two different fonts.  "hello" will 
be shown in italic, and "world" will be shown in bold-face type.  The 
functionality of the program, however, will remain exactly the same as in the 
previous example, with the same menu, key, and mouse functions, scroll bars, 
and message lines. 


The discussion that follows presents a step-by-step description of how to 
modify the \italic{helloworld} class in Example 12 to produce Example 13.  If 
you were to follow the steps, you would produce a program, called 
\italic{helloworldapp}, in seven files: 


\itemize{
a hello.ch file -- will contain the class definition for the 
\italic{helloworld }data object. This will be exactly the same as in Example 
12. 


a hello.c file -- will contain statements that import Andrew Toolkit classes 
used by the data object, initialize the class, and define the Read and Write 
methods.  This will be exactly the same as in Example12. 


a hellov.ch file -- will contain the class definition for the 
\italic{helloworld} view, and is exactly the same as in the previous example. 


a hellov.c file -- will contain statements that import Andrew Toolkit classes 
used by the view and definitions of the methods.  We will add a function that 
handles drawing in multiple fonts, and modify the \italic{InitializeClass} 
method accordingly. 


a helloa.ch file -- will contain the class definition for the application 
program that will display an instance of the class in a window.  This will be 
exactly the same as in Example 12. 


a helloa.c -- will contain declarations needed by the Andrew Toolkit linking 
and loading facilities as well the definition of the \italic{helloworld} 
application method.  This will be exactly the same as in Example 12. 


Makefile -- will contain the directions for compiling, linking and loading. 
 This will be exactly the same as Example 12. 

}

For a complete listing of these files, see \italic{Program Listing for Example 
13 } at the end of this section on p. 
\begindata{textref,539236104}
\textdsversion{12}
# ExThirteenListing\
\enddata{textref,539236104}
\view{textrefv,539236104,978,0,0}. The source code is available in the 
directory /usr/andrew/examples/ex13, together with the compiled program. 


Although the discussion of the steps refers directly to this example, the 
information generally applies to the creation of any application that uses 
multiple fonts in text strings. 

\begindata{bp,538928968}
\enddata{bp,538928968}
\view{bpv,538928968,979,0,0}
\section{Running the example program}


\formatnote{\bold{Action 1.}   \formatnote{To run the program, at the 
\bold{command }prompt type


runapp /usr/andrew/examples/ex13/helloa


and press the Enter key.

}

\bold{Response.}\formatnote{   }The program will produce two windows, each 
with \italic{hello}\bold{world} centered in the body of the window with 
horizontal and vertical scroll bars, and a message line strip.



\bold{Action 2.} \formatnote{   }To quit the program, pop-up the menus and 
choose \bold{Quit}

from the top card.


\bold{Response. } \formatnote{   }The window will disappear from the screen.


}\
\begindata{bp,538928712}
\enddata{bp,538928712}
\view{bpv,538928712,980,0,0}
\section{Overview of font descriptors}


A displayable font in the Andrew Toolkit is represented by a \italic{fontdesc} 
object; a fontdesc is simply a machine-independent way to describe a font. 
 All fontdescs have a specific name, size, and font style. The style

\indexi{Fonts++Style} 

(not to be confused with the \italic{style} class, which is used for text 
documents -- See Example 15 --  is simply a set of attributes which describe 
modifications to the basic font.  The Andrew Toolkit currently provides for 
the following set of styles: \indexi{Styles}


\indent{All Plain Bold Italic Shadow Fixed Outline Thin Black Medium Heavy 
Condense NumIcons}


The set of font names and sizes actually available is site dependent. 


\section{Modifying the class description} \indexi{Font descriptors++Creating}


\subsection{Creating font descriptors}


\formatnote{
#include "fontdesc.ih"


static struct fontdesc *bold, *italic;


boolean helloworldview__InitializeClass(classID)

struct classheader *classID;

\{

    bold=fontdesc_Create("andysans",fontdesc_Bold,12);

    italic=fontdesc_Create("andysans",fontdesc_Italic,12);


    helloworldviewMenulist=menulist_New();

    helloworldviewKeymap=keymap_New();

    bind_BindList(helloworldviewBindings,

		   helloworldviewKeymap,

		   helloworldviewMenulist,

		   &helloworldview_classinfo);


    return TRUE;

\}

}
First, we import the procedures from the class fontdesc. \indexi{Importing}


Next, since helloworldview uses the same set of fonts for every view, we 
create two fontdescriptors in the InitializeClass,

\indexi{ \italic{InitializeClass}} 

\indexi{Class++Initializing}

and assign them to global static variables that any helloworldview can use. 
 The three parameters to the \italic{fontdesc_Create}

\indexi{ \italic{fontdesc_Create}} 

method are the font name, the font style, and the font size. 


The remainder of the InitializeClass definition is the same as in previous 
examples. 


\begindata{bp,538929032}
\enddata{bp,538929032}
\view{bpv,538929032,981,0,0}
\subsection{Drawing text in different fonts}

\indexi{Drawing++Text fonts} 

\indexi{Fonts++Drawing}


Part of the state of every view's graphic is the current fontdescriptor being 
used for drawing text.  In order to draw text in different fonts, you must set 
the current fontdescriptor before drawing the text. 


In this example,  a simple draw on the string "hello world" is repeated in 
several different places in the helloworld program code.  Therefore,  we 
define a \italic{drawHW} routine that draws the string at the current location 
in a specified font instead of repeating the font-related code in each method 
that performs a simple redraw. 


\formatnote{
void drawHW(hwv)

struct helloworldview *hwv;

\{

    helloworldview_MoveTo(hwv,

			   hwv->x-hwv->frameX,hwv->y-hwv->frameY);

    helloworldview_SetFont(hwv,italic);

    helloworldview_DrawString(hwv, "hello ",

			       graphic_BETWEENTOPANDBASELINE |

			       graphic_ATRIGHT);

    helloworldview_MoveTo(hwv,

			   hwv->x-hwv->frameX,hwv->y-hwv->frameY);

    helloworldview_SetFont(hwv,bold);

    helloworldview_DrawString(hwv, "world",

			       graphic_BETWEENTOPANDBASELINE |

			       graphic_ATLEFT);

\}

}
\indexi{ \italic{SetFont}} 

\indexi{Fonts++Setting} 

\indexi{ \italic{DrawString}} 

\indexi{ \italic{MoveTo}}  \indexi{Graphic}

The text must be drawn in its two component parts, and the font must be 
changed before each \italic{DrawString} call.  Since we want the whole string 
"hello world" still to be centered around the current location in the X 
dimension, we move to the current location before each \italic{DrawString} 
call and use \italic{graphic_ATRIGHT }and \italic{graphic_ATLEFT} to 
respectively right and left justify the text about the current location. 


The remainder of \italic{hellov.c}  is the same as in the previous example, 
with each \italic{MoveTo}/\italic{DrawString} sequence in the 
\italic{Fullupdate} and \italic{Update} methods replaced by a call to 
\italic{drawHW}. 


\begindata{bp,538929224}
\enddata{bp,538929224}
\view{bpv,538929224,982,0,0}
\begindata{texttag,539315976}
\textdsversion{12}
ExThirteenListing\
\enddata{texttag,539315976}
\view{texttagv,539315976,983,0,0}
\section{Program listing for Example 13}

\formatnote{
\bold{hello.ch}


#define POSUNDEF (-1)


class helloworld[hello]: dataobject [dataobj]\{

overrides:

    Read(FILE *file,long id) returns long;

    Write(FILE *file,long writeId,int level) returns long;

data:

    long x,y;

    boolean blackOnWhite;

\};


\bold{hello.c}


#include <stdio.h>

#include <class.h>


#include "hello.eh"


boolean helloworld__InitializeObject(classID,hw)

struct classheader *classID;

struct helloworld *hw;   

\{

    hw->x=POSUNDEF;

    hw->y=POSUNDEF;

    hw->blackOnWhite=TRUE;

    return TRUE;

\}


long helloworld__Read(hw,file,id)

struct helloworld *hw;

FILE *file;

long id;

\{

    char buf[100];


    helloworld_SetID(hw,helloworld_UniqueID(hw));


    if(fgets(buf,sizeof(buf),file)==NULL)

	return dataobject_PREMATUREEOF;

    /* the %hd tells scanf that blackOnWhite is a short, not an int */

    if(sscanf(buf,"%d %d %hd\\n",&hw->x,&hw->y,&hw->blackOnWhite)<3)

	return dataobject_BADFORMAT;


    if(fgets(buf,sizeof(buf),file)==NULL) /* read in the \\enddata\{...\} */

	return dataobject_MISSINGENDDATAMARKER;


    return dataobject_NOREADERROR;

\}


long helloworld__Write(hw,file,writeId,level)

struct helloworld *hw;

FILE *file;

long writeId;

int level;

\{

    if(writeId!=helloworld_GetWriteID(hw))\{ /* only write a given version 
once */

	helloworld_SetWriteID(hw,writeId);

	fprintf(file,"\\\\begindata\{%s,%d\}\\n",

		class_GetTypeName(hw), helloworld_UniqueID(hw));

	fprintf(file,"%d %d %d\\n",hw->x,hw->y,hw->blackOnWhite);

	fprintf(file,"\\\\enddata\{%s,%d\}\\n",

		class_GetTypeName(hw), helloworld_UniqueID(hw));

    \}


    return helloworld_UniqueID(hw);

\}



\bold{hellov.ch}


class helloworldview[hellov]: view \{

overrides:

    FullUpdate(enum view_UpdateType type, long left, long top, long width, 
long height);

    Update();

    Hit (enum view_MouseAction action, long x, long y, long numberOfClicks) 
returns struct view *;

    ReceiveInputFocus();

    LoseInputFocus();

    GetInterface(int type) returns char *;

    GetApplicationLayer() returns struct view *;

    DeleteApplicationLayer(struct view *);

classprocedures:

    InitializeClass() returns boolean;

data:

    struct keystate *keystate;

    struct menulist *menulist;

    boolean HaveDownTransition;

    boolean haveInputFocus;

    long hitX,hitY;

    long x,y;

    boolean blackOnWhite;

    long frameX, frameY;

    long newFrameX, newFrameY;

    int vrWidth,vrHeight;

    boolean didMove;

\};



\bold{hellov.c}


#include <stdio.h>

#include <class.h>


#include "hellov.eh"


#include "graphic.ih"

#include "fontdesc.ih"

#include "rect.h"

#include "keymap.ih"

#include "keystate.ih"

#include "menulist.ih"

#include "scroll.ih"

#include "bind.ih"

#include "message.ih"

#include "im.ih"


#include "hello.ih"


#define TOTALSIZE 1500


static void xgetinfo(), xsetframe(), ygetinfo(), ysetframe();

static long xwhat(), ywhat();


static struct scrollfns horizInterface = \{

    xgetinfo, xsetframe, NULL, xwhat

\};


static struct scrollfns vertInterface = \{

    ygetinfo, ysetframe, NULL, ywhat

\};


static struct keymap *helloworldviewKeymap;

static struct menulist *helloworldviewMenulist;


static struct fontdesc *bold, *italic;


boolean helloworldview__InitializeObject(classID,hwv)

struct classheader *classID;

struct helloworldview *hwv;   

\{

    hwv->haveInputFocus = FALSE;

    hwv->HaveDownTransition=FALSE;

    hwv->keystate = keystate_Create(hwv, helloworldviewKeymap);

    hwv->menulist = menulist_DuplicateML(helloworldviewMenulist, hwv);

    hwv->newFrameX = hwv->newFrameY = 0;

    return TRUE;

\}


struct view *helloworldview__GetApplicationLayer(hwv)

struct textview *hwv;

\{

    return (struct view *)scroll_Create(hwv,scroll_LEFT+scroll_BOTTOM);

\}


void helloworldview__DeleteApplicationLayer(hwv,scrollbar)

struct textview *hwv;

struct scroll *scrollbar;

\{

    scroll_Destroy(scrollbar);

\}


void drawHW(hwv)

struct helloworldview *hwv;

\{

    helloworldview_MoveTo(hwv,

			   hwv->x-hwv->frameX,hwv->y-hwv->frameY);

    helloworldview_SetFont(hwv,italic);

    helloworldview_DrawString(hwv, "hello ",

			       graphic_BETWEENTOPANDBASELINE |

			       graphic_ATRIGHT);

    helloworldview_MoveTo(hwv,

			   hwv->x-hwv->frameX,hwv->y-hwv->frameY);

    helloworldview_SetFont(hwv,bold);

    helloworldview_DrawString(hwv, "world",

			       graphic_BETWEENTOPANDBASELINE |

			       graphic_ATLEFT);

\}


void helloworldview__FullUpdate(hwv, type, left, top, width, height)

struct helloworldview *hwv;

enum view_UpdateType type;

long left;

long top;

long width;

long height; 

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;

    struct rectangle myVisualRect;


    helloworldview_GetVisualBounds(hwv,&myVisualRect);

    hwv->vrWidth=rectangle_Width(&myVisualRect);

    hwv->vrHeight=rectangle_Height(&myVisualRect);


    if (hwv->newFrameX + hwv->vrWidth > TOTALSIZE)

	hwv->newFrameX = TOTALSIZE - hwv->vrWidth;

    if (hwv->newFrameY + hwv->vrHeight > TOTALSIZE)

	hwv->newFrameY = TOTALSIZE - hwv->vrHeight;


    hwv->frameX = hwv->newFrameX;

    hwv->frameY = hwv->newFrameY;


    if (hw->x == POSUNDEF) \{

	hw->x = hwv->frameX + hwv->vrWidth / 2;

	hw->y = hwv->frameY + hwv->vrHeight / 2;

    \}


    hwv->x=hw->x;

    hwv->y=hw->y;

    hwv->blackOnWhite=hw->blackOnWhite;


    helloworldview_SetTransferMode(hwv, graphic_COPY);


    if (hw->blackOnWhite)

	helloworldview_FillRect(hwv, &myVisualRect, 
helloworldview_WhitePattern(hwv));

    else

	helloworldview_FillRect(hwv, &myVisualRect, 
helloworldview_BlackPattern(hwv));


    helloworldview_SetTransferMode(hwv,graphic_INVERT);


    drawHW(hwv);

\}



void helloworldview__Update(hwv)

struct helloworldview *hwv;

\{    

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    helloworldview_SetTransferMode(hwv, graphic_INVERT);


    if (hw->blackOnWhite!=hwv->blackOnWhite) \{

	struct rectangle vr;

	helloworldview_GetVisualBounds(hwv,&vr);

	helloworldview_FillRect(hwv,

		&vr,helloworldview_BlackPattern(hwv));

	hwv->blackOnWhite=hw->blackOnWhite;

    \}


    if (hwv->x!=hw->x || hwv->y!=hw->y || hwv->frameX!=hwv->newFrameX || 
hwv->frameY!=hwv->newFrameY) \{

	if(hwv->x!=hw->x || hwv->y!=hw->y)\{

	    static char buf[100];

	    sprintf(buf,"Hello world at (%d,%d)",hw->x,hw->y);

	    message_DisplayString(hwv,0,buf);

	\}	    


	drawHW(hwv);

  

	hwv->x=hw->x;

	hwv->y=hw->y;

  	hwv->frameX = hwv->newFrameX;

  	hwv->frameY = hwv->newFrameY;

  

	drawHW(hwv);

    \}

\}



struct view *helloworldview__Hit(hwv, action, x, y, numberOfClicks)

struct helloworldview *hwv;

enum view_MouseAction action;

long x;

long y;

long numberOfClicks;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    if(hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightUp:

		hwv->HaveDownTransition=FALSE;

		/* fall through */

	    case view_RightMovement:

		hw->x+=x-hwv->hitX;

		hw->y+=y-hwv->hitY;

		hwv->hitX=x;

		hwv->hitY=y;

		break;

	    case view_LeftUp:

		hwv->HaveDownTransition=FALSE;

		hw->x=x+hwv->frameX;

		hw->y=y+hwv->frameY;

		break;

	    case view_LeftMovement:

		/* do nothing */

		break;

	    default:

		/* re-synchronize mouse */

		hwv->HaveDownTransition=FALSE;

	\}


    if(!hwv->HaveDownTransition)

	switch(action)\{

	    case view_RightDown:

		hwv->hitX=x;

		hwv->hitY=y;

		/* fall through */

	    case view_LeftDown:

		hwv->HaveDownTransition=TRUE;

		helloworldview_WantInputFocus(hwv,hwv);

		break;

	\}


    helloworld_NotifyObservers(hw,0);


    return (struct view *)hwv;

\}



void helloworldview__ReceiveInputFocus(hwv)

struct helloworldview *hwv;

\{

    hwv->haveInputFocus = TRUE;

    hwv->keystate->next = NULL;

    helloworldview_PostKeyState(hwv, hwv->keystate);

    helloworldview_PostMenus(hwv, hwv->menulist);

\}



void helloworldview__LoseInputFocus(hwv)

struct helloworldview *hwv;

\{

    hwv->haveInputFocus = FALSE;

\}


static void Center(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    hw->x = hwv->newFrameX + hwv->vrWidth / 2;

    hw->y = hwv->newFrameY + hwv->vrHeight / 2;


    helloworld_NotifyObservers(hw,0);

\}



static void Invert(hwv, rock)

struct helloworldview *hwv;

long rock;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    hw->blackOnWhite = !hw->blackOnWhite;

    helloworld_NotifyObservers(hw,0);

\}



static void relocate(hwv,rock)

struct helloworldview *hwv;

long rock;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;

    char buf[100];

    int x,y;


    message_AskForString(hwv,0,"New location (x,y): ",NULL,buf,sizeof(buf));


    if(sscanf(buf,"%d,%d",&x,&y)!=2)

	message_DisplayString(hwv,1,"Bad format; must be: number,number");

    else\{

	hw->x=x;

	hw->y=y;


	helloworld_NotifyObservers(hw,0);

    \}

\}



static void readHW(hwv,rock)

struct helloworldview *hwv;

long rock;

\{

    char file[100], msgBuf[100];

    FILE *fp;


    message_AskForString(hwv,0,"Read file: ",NULL,file,sizeof(file));

    fp=fopen(file,"r");

    if(fp==NULL)\{

	sprintf(msgBuf,"Couldn't open %s for reading.", file);

	message_DisplayString(hwv,1,msgBuf);

    \}else\{

	char header[100];


	if(fgets(header,sizeof(header),fp)==NULL)\{

	    sprintf(msgBuf,"Premature end-of-file in %s.",file);

	    message_DisplayString(hwv,1,msgBuf);

	\}else\{

	    char name[20];

	    int id;


	    if(sscanf(header,"\\\\begindata\{%[^,],%d\}\\n",

		name,&id)!=2)\{

		sprintf(msgBuf,

			"%s doesn't contain a valid datastream header.",

			file);

		message_DisplayString(hwv,1,msgBuf);

	    \}else\{

		struct helloworld *hw=

		  (struct helloworld *)hwv->header.view.dataobject;


		if(strcmp(name,class_GetTypeName(hw))!=0)\{

		    sprintf(msgBuf,

			    "%s doesn't contain a helloworld dataobject.",

			    file);

		    message_DisplayString(hwv,1,msgBuf);

		\}else\{

		    /* FINALLY, read the object in... */

		    helloworld_Read(hw,fp,id);

		    fclose(fp);

		    helloworld_NotifyObservers(hw,0);

		\}

	    \}

	\}

    \}

\}



static void writeHW(hwv,rock)

struct helloworldview *hwv;

long rock;

\{

    char file[100], msgBuf[100];

    FILE *fp;


    message_AskForString(hwv,0,"Write file: ",NULL,file,sizeof(file));

    fp=fopen(file,"w");

    if(fp==NULL)\{

	sprintf(msgBuf,"Couldn't open %s for writing.",file);

	message_DisplayString(hwv,1,msgBuf);

    \}else\{

	struct helloworld *hw=

	  (struct helloworld *)hwv->header.view.dataobject;

	

	helloworld_Write(hw,fp,im_GetWriteID(),0);

	fclose(fp);

    \}

\}



static void xgetinfo(hwv, total, seen, dot)

struct helloworldview *hwv;

struct range *total, *seen, *dot;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    total->beg = 0;

    total->end = TOTALSIZE;

    seen->beg = hwv->frameX;

    seen->end = hwv->frameX + hwv->vrWidth;

    dot->beg = dot->end = hw->x;

\}


static void ygetinfo(hwv, total, seen, dot)

struct helloworldview *hwv;

struct range *total, *seen, *dot;

\{

    struct helloworld *hw=(struct helloworld *)hwv->header.view.dataobject;


    total->beg = 0;

    total->end = TOTALSIZE;

    seen->beg = hwv->frameY;

    seen->end = hwv->frameY + hwv->vrHeight;

    dot->beg = dot->end = hw->y;

\}


static void xsetframe(hwv, posn, cord, outof)

struct helloworldview *hwv;

int posn;

long cord, outof;

\{

    hwv->newFrameX = posn - hwv->vrWidth * cord / outof;

    if (hwv->newFrameX + hwv->vrWidth > TOTALSIZE)

	hwv->newFrameX = TOTALSIZE - hwv->vrWidth;

    else if (hwv->newFrameX < 0)

	hwv->newFrameX = 0;

    helloworldview_WantUpdate(hwv, hwv);

\}


static void ysetframe(hwv, posn, cord, outof)

struct helloworldview *hwv;

int posn;

long cord, outof;

\{

    hwv->newFrameY = posn - hwv->vrHeight * cord / outof;

    if (hwv->newFrameY + hwv->vrHeight > TOTALSIZE)

	hwv->newFrameY = TOTALSIZE - hwv->vrHeight;

    else if (hwv->newFrameY < 0)

	hwv->newFrameY = 0;

    helloworldview_WantUpdate(hwv, hwv);

\}


static long xwhat(hwv, cord, outof)

struct helloworldview *hwv;

long cord, outof;

\{

    return hwv->frameX + hwv->vrWidth * cord / outof;

\}


static long ywhat(hwv, cord, outof)

struct helloworldview *hwv;

long cord, outof;

\{

    return hwv->frameY + hwv->vrHeight * cord / outof;

\}



char *helloworldview__GetInterface(hwv, type)

struct helloworldview *hwv;

char *type;

\{

    if (strcmp(type, "scroll,vertical") == 0)

	return (char *) &vertInterface;

    else if (strcmp(type, "scroll,horizontal") == 0)

	return (char *) &horizInterface;

    else

	return NULL;

\}



static struct bind_Description helloworldviewBindings[]=\{

    \{"helloworld-center", "\\003",0, "Hello World,Center",0,0, Center, 
"Center the helloworldview string."\},

    \{"helloworld-invert", "\\011",0, "Hello World,Invert",0,0, Invert, 
"Invert the helloworld string."\},

    \{"helloworld-relocate", "\\022",0, "Hello World,Relocate",0,0, relocate, 
"Relocate the helloworld string."\},

    \{"helloworld-read", NULL,0, "Hello World,Read",0,0, readHW, "Read in a 
new hello world."\},

    \{"helloworld-write", NULL,0, "Hello World,Write",0,0, writeHW, "Write out 
the current hello world to a file."\},

    NULL

\};


boolean helloworldview__InitializeClass(classID)

struct classheader *classID;

\{

    bold=fontdesc_Create("andysans",fontdesc_Bold,12);

    italic=fontdesc_Create("andysans",fontdesc_Italic,12);


    helloworldviewMenulist=menulist_New();

    helloworldviewKeymap=keymap_New();

    bind_BindList(helloworldviewBindings,

		   helloworldviewKeymap,

		   helloworldviewMenulist,

		   &helloworldview_classinfo);


    return TRUE;

\}



\bold{helloa.ch}


class helloworldapp [helloa]: application[app]\{

    overrides:

	Start() returns boolean;

\};



\bold{helloa.c}


#include <class.h>


#include "helloa.eh"


#include "dataobj.ih"

#include "view.ih"

#include "frame.ih"

#include "im.ih"

#include "hello.ih"


static boolean makeWindow(dobj)

struct dataobject *dobj;

\{

    struct view *v;

    struct view *applayer;

    struct frame *frame;

    struct im *im;


    v=(struct view *)class_NewObject(dataobject_ViewName(dobj));

    if(v==NULL)

	return FALSE;


    applayer=view_GetApplicationLayer(v);

    if(applayer==NULL) \{

	view_Destroy(v);

	return FALSE;

    \}


    frame=frame_New();

    if(frame==NULL) \{

	view_DeleteApplicationLayer(v,applayer);

	return FALSE;

    \}


    im=im_Create(NULL);

    if(im==NULL) \{

	frame_Destroy(frame);

	return FALSE;

    \}


    view_SetDataObject(v,dobj);

    frame_SetView(frame,applayer);

    im_SetView(im,frame);


    view_WantInputFocus(v,v);


    return TRUE;


\}


boolean helloworldapp__Start(hwapp)

struct helloworldapp *hwapp;

\{

    struct helloworld *hw;


    if(!super_Start(hwapp))

	return FALSE;


    hw=helloworld_New();

    if(hw==NULL)

	return FALSE;


    if(!makeWindow((struct dataobject *)hw) ||

       !makeWindow((struct dataobject *)hw))\{

	helloworld_Destroy(hw);

	return FALSE;

    \}


    return TRUE;

\}



\bold{Makefile}


SRCDIR=/usr/andrew/

INCLUDES= -I. -I$\{SRCDIR\}include/atk -I$\{SRCDIR\}include

INCLUDESRC = $\{SRCDIR\}include/atk

CC=cc

DEBUG = -g

TOOLS = $\{SRCDIR\}bin/

CFLAGS= $\{DEBUG\} $\{INCLUDES\} 

CLASSFLAGS=$\{INCLUDES\}


MAKEDO = $\{TOOLS\}makedo $\{DEBUG\} -b $\{TOOLS\} -d $\{SRCDIR\}lib 

CLASS = $\{TOOLS\}class


.SUFFIXES: .ih .eh .ch .do


.ch.ih:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch

.ch.eh:

	$\{CLASS\} $\{CLASSFLAGS\} $*.ch


.o.do:

	$\{MAKEDO\} $<



all:  helloa.do hello.do hellov.do


helloa.do: helloa.o helloa.eh

hello.do:  hello.o hello.eh

hellov.do: hellov.o hellov.eh


helloa.o: helloa.c

helloa.o: $\{INCLUDESRC\}/app.ih

helloa.o: $\{INCLUDESRC\}/atom.ih

helloa.o: $\{INCLUDESRC\}/dataobj.ih

helloa.o: $\{INCLUDESRC\}/frame.ih

helloa.o: $\{INCLUDESRC\}/graphic.ih

helloa.o: $\{INCLUDESRC\}/im.ih

helloa.o: $\{INCLUDESRC\}/lpair.ih

helloa.o: $\{INCLUDESRC\}/message.ih

helloa.o: $\{INCLUDESRC\}/namespc.ih

helloa.o: $\{INCLUDESRC\}/observe.ih

helloa.o: $\{INCLUDESRC\}/point.h

helloa.o: $\{INCLUDESRC\}/rect.h

helloa.o: $\{INCLUDESRC\}/view.ih

helloa.o: $\{SRCDIR\}include/class.h

helloa.o: hello.ih

helloa.o: hellov.ih

helloa.o: helloa.eh

helloa.eh helloa.ih: helloa.ch

helloa.eh helloa.ih: $\{INCLUDESRC\}/app.ih

hello.o: hello.c

hello.o: $\{INCLUDESRC\}/atom.ih

hello.o: $\{INCLUDESRC\}/dataobj.ih

hello.o: $\{INCLUDESRC\}/namespc.ih

hello.o: $\{INCLUDESRC\}/observe.ih

hello.o: $\{SRCDIR\}include/class.h

hello.o: hello.eh

hello.eh hello.ih: hello.ch

hello.eh hello.ih: $\{INCLUDESRC\}/atom.ih

hello.eh hello.ih: $\{INCLUDESRC\}/dataobj.ih

hello.eh hello.ih: $\{INCLUDESRC\}/namespc.ih

hello.eh hello.ih: $\{INCLUDESRC\}/observe.ih

hellov.o: hellov.c

hellov.o: $\{INCLUDESRC\}/atom.ih

hellov.o: $\{INCLUDESRC\}/bind.ih

hellov.o: $\{INCLUDESRC\}/dataobj.ih

hellov.o: $\{INCLUDESRC\}/graphic.ih

hellov.o: $\{INCLUDESRC\}/keymap.ih

hellov.o: $\{INCLUDESRC\}/keystate.ih

hellov.o: $\{INCLUDESRC\}/menulist.ih

hellov.o: $\{INCLUDESRC\}/message.ih

hellov.o: $\{INCLUDESRC\}/namespc.ih

hellov.o: $\{INCLUDESRC\}/observe.ih

hellov.o: $\{INCLUDESRC\}/point.h

hellov.o: $\{INCLUDESRC\}/rect.h

hellov.o: $\{INCLUDESRC\}/scroll.ih

hellov.o: $\{INCLUDESRC\}/view.ih

hellov.o: $\{SRCDIR\}include/class.h

hellov.o: hello.ih

hellov.o: hellov.eh

hellov.eh hellov.ih: hellov.ch

hellov.eh hellov.ih: $\{INCLUDESRC\}/graphic.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/observe.ih

hellov.eh hellov.ih: $\{INCLUDESRC\}/point.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/rect.h

hellov.eh hellov.ih: $\{INCLUDESRC\}/view.ih

hellov.eh hellov.ih: $\{SRCDIR\}include/class.h

}

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,985,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538945396}
