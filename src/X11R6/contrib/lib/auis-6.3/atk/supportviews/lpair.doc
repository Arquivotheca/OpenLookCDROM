\begindata{text,538492872}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Lpair}}\indexi{Lpair} \indexi{Screen layout}


An applications program may need to display more than one view in a window at 
one time.  Lpairs can be used to split a rectangle into two

sub-rectangles, each with a different view.    The class \italic{lpair} 
provides

methods and class procedures for placing one view above another in a rectangle 
(vertical split) or placing two views side by side in a rectangle (horizontal 
split).   The division may be by a fixed distance, or by a percentage of the 
rectangle size.  Further, since each lpair can be divided into lpairs, it is 
possible to create a fairly complex panel of views. 



\section{Quick reference list for Lpair}



\fixedtext{struct lpair *\bold{lpair_}Create }\fixedindent{(struct view 
*\paramname{l1}, struct view *\paramname{l2}, long \paramname{x});} 

\fixedtext{enum view_DSattributes \bold{lpair_}DesiredSize 
}\fixedindent{(struct lpair *\paramname{lpair}, long \paramname{width}, long 
\paramname{height}, enum view_DSpass \paramname{pass}, long 
*\paramname{dWidth}, long *\paramname{dheight});} 

\fixedtext{void \bold{lpair_}FinalizeObject }\fixedindent{(struct lpair 
*\paramname{self});} 

\fixedtext{void \bold{lpair_}FullUpdate }\fixedindent{(struct lpair 
*\paramname{lpair}, enum view_UpdateType \paramname{type}, long 
\paramname{left}, long \paramname{top}, long \paramname{width}, long 
\paramname{right});} 

\fixedtext{void \bold{lpair_}GetLPState }\fixedindent{(struct lpair 
*\paramname{lpair}, int *\paramname{porf}, int *\paramname{vorh}, int 
*\paramname{movable});} 

\fixedtext{struct view *\bold{lpair_}GetNth }\fixedindent{(struct lpair 
*\paramname{lpair}, int \paramname{ai});} 

\fixedtext{\bold{lpair_}GetObjSize }\fixedindent{(struct lpair 
*\paramname{lpair}, \paramname{i});} 

\fixedtext{struct lpair *\bold{lpair_}HFixed }\fixedindent{(struct lpair 
*\paramname{lpair}, struct view *\paramname{l1}, struct view *\paramname{l2}, 
int \paramname{bsize}, int \paramname{moveable});} 

\fixedtext{struct view *\bold{lpair_}Hit }\fixedindent{(struct lpair 
*\paramname{lpair}, enum view_MouseAction \paramname{action}, long 
\paramname{x}, long \paramname{y}, long \paramname{numberOfClicks});} 

\fixedtext{struct lpair *\bold{lpair_}HSplit }\fixedindent{(struct lpair 
*\paramname{lpair}, struct view *\paramname{l1}, struct view *\paramname{l2}, 
int \paramname{pct}, int \paramname{moveable});} 

\fixedtext{struct lpair *\bold{lpair_}HTFixed }\fixedindent{(struct lpair 
*\paramname{lpair}, struct view *\paramname{l1}, struct view *\paramname{l2}, 
int \paramname{bsize}, int \paramname{moveable});} 

\fixedtext{void \bold{lpair_}InitChildren }\fixedindent{(struct lpair 
*\paramname{lpair});} 

\fixedtext{boolean \bold{lpair_}InitializeObject }\fixedindent{(struct lpair 
*\paramname{self});} 

\fixedtext{void \bold{lpair_}Init }\fixedindent{(struct lpair 
*\paramname{lpair}, struct view *\paramname{l1}, struct view *\paramname{l2}, 
long \paramname{x});} 

\fixedtext{void \bold{lpair_}LinkTree }\fixedindent{(struct lpair 
*\paramname{lpair}, struct view *\paramname{parent});} 

\fixedtext{void \bold{lpair_}SetLPState }\fixedindent{(struct lpair 
*\paramname{lpair}, int \paramname{porf}, int \paramname{vorh}, int 
\paramname{movable});} 

\fixedtext{void \bold{lpair_}SetMovable }\fixedindent{(struct lpair 
*\paramname{lpair}, int \paramname{i});} 

\fixedtext{void \bold{lpair_}SetNth }\fixedindent{(struct lpair 
*\paramname{lpair}, int \paramname{ai}, register struct view *\paramname{x});} 



\fixedtext{struct lpair *\bold{lpair_}SetUp }\fixedindent{(struct lpair 
*\paramname{lpair}, struct view *\paramname{l1}, struct viewlpair 
*\paramname{l2}, int \paramname{bsize}, int \paramname{porf}, int 
\paramname{vorh}, boolean \paramname{moveable});} 

\fixedtext{void \bold{lpair_}Update }\fixedindent{(struct lpair 
*\paramname{lpair});} 

\fixedtext{struct lpair *\bold{lpair_}VFixed }\fixedindent{(struct lpair 
*\paramname{lpair}, struct view *\paramname{l1}, struct view *\paramname{l2}, 
int \paramname{bsize}, int \paramname{moveable});} 

\fixedtext{struct lpair *\bold{lpair_}VSplit }\fixedindent{(struct lpair 
*\paramname{lpair}, struct view *\paramname{l1}, struct view *\paramname{l2}, 
int \paramname{pct}, int \paramname{moveable});} 

\fixedtext{struct lpair *\bold{lpair_}VTFixed }\fixedindent{(struct lpair 
*\paramname{lpair}, struct view *\paramname{l1}, struct view *\paramname{l2}, 
int \paramname{bsize}, int \paramname{moveable});} 

\fixedtext{void \bold{lpair_}WantUpdate }\fixedindent{(struct lpair 
*\paramname{lpair}, struct view *\paramname{requestor});} 



\section{Working with lpairs}


\subsection{Creating lpairs}


\paragraph{Creating an lpair} \indexi{Lpair++Creating}


\indexi{ \italic{lpair_Create}}

\example{struct lpair *lpair_Create (l1, l2, x)

struct view *l1, *l2;

long x;} 


\leftindent{\bold{Class procedure description.}\italic{lpair_Create } creates 
an instance of an lpair.  The \\italic\{x \} parameter determines the type of 
lpair created.  If \\italic\{x\} is negative, then the lpair is created as a 
split (proportional) pair, with the absolute value of \\italic\{x\} setting 
the percentage of the rectangle allocated to the lower view.  If \\italic\{x\} 
is positive it will be a fixed pair, with the lower view being allocated 
\\italic\{x\} pixels in the rectangle. The lpair is always a vertical pair 
with a movable boundary. 


\bold{Return value.}  A pointer to the newly created instance. 

 

\bold{Usage.}  You would use this procedure to create the lpair the first 
time; if you merely need to re-initialize the lpair, you should use the method 
\italic{lpair_Init} below. 


}

\paragraph{Initializing an lpair}\indexi{Lpair++Initializing}


\indexi{ \italic{lpair_Init}}


\example{void lpair_Init(newl, l1, l2, x)

struct lpair *newl;

struct view *l1, *l2;

long x;} 


\leftindent{\bold{Method description.  }   \italic{lpair_Init} initializes

a lpair. 


\bold{Usage.}  This method is used to re-initialize lpairs. 



}\
\begindata{bp,538927688}
\enddata{bp,538927688}
\view{bpv,538927688,396,0,0}

\subsection{Placing one view above another}


\paragraph{Vertical split by a fixed distance}\indexi{Lpair++Vertical split by 
fixed distance}


\indexi{ \italic{lpair_VFixed}}


\example{struct lpair *lpair_VFixed (lp, l1, l2, bsize,movable)

struct view *l1, *l2;

struct lpair *lp;

int bsize;

int movable;} 


\leftindent{\bold{Method description.  }   \italic{lpair_VFixed} places the 

views \italic{ l1} and\italic{ l2} into the lpair pointed to by\italic{ lp} 
and places\italic{ l1} above \italic{l2}.  The \italic{bsize} parameter gives 
the number of pixels to allocate to the lower view (\italic{l2}). 

\italic{ movable} tells if the lpair boundary can be dragged or not. 


\bold{Usage.}  You would use this method if you want one view above another, 
and you want the views to have a specific amount of space. 

}


\paragraph{Vertical split, by upper view size}\indexi{Lpair++Vertical split by 
view size} \indexi{ \italic{lpair_VTFixed}}


\example{struct lpair *lpair_VTFixed (lp, l1, l2, bsize,movable)

struct view *l1, *l2;

struct lpair *lp;

int bsize;} 


\leftindent{\bold{Method description.  }  Same as \italic{lpair_VFixed} above 
except the \italic{bsize} parameter gives the number of pixels to allocate to 
the \bold{upper} view (\italic{l1}). 


}

\paragraph{Vertical split by percentage of rectangle}\indexi{Lpair++Vertical 
split by rectangle percentage} \indexi{ \italic{lpair_VSplit}}


\example{lpair_VSplit (lp, l1, l2, pct, movable)

register struct lpair *lp;

struct view *l1, *l2;

int pct;

int movable;} 


\leftindent{\bold{Method description.  }   \italic{lpair_VSplit} places the 

views \italic{l1} and \italic{l2} into the lpair pointed to by\italic{ lp} and 
places\italic{ l1} above\italic{ l2}.  The\italic{ pct} parameter gives the 
percentage of the rectangle to allocate to the lower view (\italic{l2}). 



\bold{Usage.}  You would use this method if you want one view above another, 
and you want the views to occupy a certain percentage of the rectangle, as 
opposed to a specific amount of space.  This is useful for multiple-line 
layouts and views that need to modify proportionately when the rectangle sizes 
are changed. 


}
\begindata{bp,538927816}
\enddata{bp,538927816}
\view{bpv,538927816,397,0,0}
\subsection{Putting one view to the left of another}


\paragraph{Horizontal split by fixed distance}\indexi{Lpair++Horizontal split 
by fixed distance}


\indexi{ \italic{lpair_HFixed}}


\example{lpair_HFixed(lp, l1, l2, bsize, movable)

struct view *l1, *l2;

struct lpair *lp;

int bsize;} 


\leftindent{\bold{Method description.  }  \italic{lpair_HFixed} places the 
views\italic{ l1} and \italic{l2}into the lpair pointed to by\italic{ lp }and 
places\italic{ l1 }to the left of\italic{ l2}.  The \italic{bsize} parameter 
gives the number of pixels to allocate to the right view (\italic{l1}). 


\bold{Usage.}  You would use this method if you want two views side-by-side, 
and you want the views to have a specific amount of space. 


}


\paragraph{Horizontal split, by right view size}\indexi{Lpair++Horizontal 
split by view size}


\indexi{ \italic{lpair_HTFixed}}


\example{struct lpair *lpair_HTFixed (lp, l1, l2, bsize,movable)

struct view *l1, *l2;

struct lpair *lp;

int bsize;

}

\leftindent{\bold{Method description.  }  Same as \italic{lpair_HFixed }above, 
except the \italic{bsize} parameter gives the number of pixels to allocate to 
the right view (\italic{l1}). 


}


\paragraph{Horizontal split by percentage}\indexi{Lpair++Horizontal split by 
rectangle percentage}


\indexi{ \italic{lpair_HSplit}}


\example{lpair_HSplit (lp, l1, l2, pct, movable)

struct view *l1, *l2;

int pct;

register struct lpair *lp;

int movable;} 


\leftindent{\bold{Method description.  }   \italic{lpair_HSplit}  places the 

views \italic{l1}and \italic{l2}into the lpair pointed to by\italic{ lp }and 
places \italic{l1} to the left of \italic{l2}.  The \italic{pct} parameter 
gives the percentage of the rectangle to allocate to the right view 
(\italic{l2}). 


\bold{Usage.}  You would use this method if you want one view to the left of 
another, and you want the views to occupy a certain percentage of the 
rectangle. 


}
\begindata{bp,538927880}
\enddata{bp,538927880}
\view{bpv,538927880,398,0,0}
\subsection{Making draggable boundaries}


\paragraph{Setting a movable lpair}\indexi{Lpair++Draggable boundaries}


\indexi{ \italic{lpair_SetMovable}}

\example{void lpair_SetMovable(lp, i)

struct lpair *lp;

int i;} 


\leftindent{\bold{Method description.  }  Resets the \italic{movable} flag of 
an existing lpair. As above,  \italic{movable} tells if the lpair boundary can 
be dragged or not. 


}

\subsection{Finding and replacing views}


\paragraph{Finding the views in an lpair}\indexi{Lpair++Finding views}


\indexi{ \italic{lpair_GetNth}}


\example{lpair_GetNth (l, ai)

register struct lpair *l;

int ai;} 


\leftindent{\bold{Method description.  } \italic{lpair_GetNth}  returns a 
pointer to the view in the \italic{ l }  lpair position  \italic{ai}. 


\bold{Return value.} Pointer to an view, struct view *


\bold{Usage.} The parameter \italic{ai }is either 0 (top or left) or 1 (bottom 
or right). 



}

\paragraph{Replacing the views in an lpair}\indexi{Lpair++Replacing views}


\indexi{ \italic{lpair_SetNth}}


\example{lpair_SetNth (l, ai, x)

register struct lpair *l;

register struct view *x;

int ai;} 


\leftindent{\bold{Method description.  } \italic{lpair_SetNth} places the view 
pointed to by \italic{x }into either the first or second position (depending 
on the value of \italic{ai}) of the lpair, \italic{l}. 


\bold{Usage.} The parameter \italic{ai }is either 0 (top or left) or 1 (bottom 
or right). 


}\
\begindata{bp,538927944}
\enddata{bp,538927944}
\view{bpv,538927944,399,0,0}

\subsection{Setting lpair states}


\paragraph{Setting a lpair state}\indexi{Lpair++Setting lpair states}


\indexi{ \italic{lpair_SetlpState}}


\example{void lpair_SetlpState(lp, porf, vorh, movable)

struct lpair *lp;

int porf, vorh, movable;} 


\leftindent{\bold{Method description.  } \italic{lpair_SetlpState}  allows you 
to set or modify the states for the lpair pointed to by\italic{ lp}. 
 The\italic{ porf} parameter specifies whether the division should be by pixel 
(fixed) or percentage; the \italic{vorh} parameter specifies whether the 
division should be vertical or horizontal, and the parameter \italic{movable} 
tells whether the lpair is movable or not. 


\bold{Usage.} \italic{porf} can be either lpair_PERCENTAGE (percentage split), 
lpair_BOTTOMFIXED (split with bottom rectangle fixed -- equivalent to 
lpair_FIXED), or lpair_TOPFIXED  (split with top rectangle fixed). 
 \italic{vorh }can be either lpair_VERTICAL or lpair_HORIZONTAL.  If you do 
not want the state changed, you should use lpair_NOCHANGE.  Finally, 
if\italic{ movable }is 1 then the lpair boundary can be dragged. 



}
\paragraph{Getting a lpair state}\indexi{Lpair++Getting lpair states}


\indexi{ \italic{lpair_GetlpState}}


\example{void lpair_GetlpState(lp, porf, vorh, movable)

struct lpair *lp;

int *porf, *vorh, *movable;} 


\leftindent{\bold{Method description.  }   \italic{lpair_GetlpState}

gets the lpair state. 


\bold{Usage.}  This method would be used to get the lpair states, as described 
above.} 



\paragraph{Setting the top lpair}\indexi{Lpair++Setting top lpair}


\indexi{ \italic{lpair_SetUp}}


\example{struct lpair *lpair_SetUp(lp, l1, l2, bsize, porf, vorh, movable)

struct lpair *lp;

struct view *l1, *l2;

int bsize, porf, vorh, movable;} 


\leftindent{\bold{Method description.  }  This is the lower level routine used 
by the methods above to set all of the lpair values.\italic{ l1} and\italic{ 
l2} are the views. bsize is the size or percentage value. \italic{porf} may be 
lpair_TOPFIXED, lpair_BOTTOMFIXED, or lpair_PERCENTAGE . \italic{vorh} may be 
lpair_VERTICAL or lpair_HORIZONTAL.  \italic{movable} may be TRUE or FALSE. 


}



\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,401,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538492872}
