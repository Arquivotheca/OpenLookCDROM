\begindata{text,538444388}
\textdsversion{12}
\template{be2guide}
\define{global
}
\define{underline
menu:[Font~1,Underline~41]
attr:[Flags Underline Int Set]}
\define{index
menu:[Title,Index~91]
attr:[FontFace Italic Int Set]}
\define{indexi
menu:[Title,InvisibleIndex~92]
attr:[Script PreviousScriptMovement Point -2]
attr:[Flags Hidden Int Set]
attr:[FontFace Italic Int Set]}
\define{itemize
}
\define{fixedtext
menu:[Region~4,Fixedtext]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{fixedindent
menu:[Region~4,Fixedindent]
attr:[LeftMargin LeftMargin Cm 83230]
attr:[Justification LeftJustified Point 0]
attr:[FontFace FixedFace Int Set]
attr:[FontFamily AndyType Int 0]
attr:[FontSize ConstantFontSize Point 10]}
\define{paramname
menu:[Font~1,Paramname]
attr:[FontFace Italic Int Set]}
\formatnote{\chapter{Scroll Bar}}\indexi{Scroll bar}


Scroll bars can be used to scroll through a view.  The class \italic{scroll} 
provides methods and class procedures for creating scroll bars in a view; the 
response of the scroll bar to various mouse inputs can be written separately. 
 The Andrew Toolkit scroll bar manages a screen area consisting of the scroll 
bar itself and the area containing the view that the scroll bar is managing. 
 There are  two types of scroll bars that can be created.  There is a vertical 
scroll bar that appears on the left or right side of a rectangle, and a 
horizontal scroll bar that appears on the top or bottom edge of a rectangle. 
 Scroll bars have one child, the view directly under the scroll bar, and one 
"scrollee" which is the view being scrolled. 



\section{Quick reference list for Scroll}



\fixedtext{struct scroll *\bold{scroll_}Create }\fixedindent{(struct view 
*\paramname{view}, int \paramname{location});} 

\fixedtext{void \bold{scroll_}FinalizeObject }\fixedindent{(struct scroll 
*\paramname{self});} 

\fixedtext{void \bold{scroll_}FullUpdate }\fixedindent{(struct scroll 
*\paramname{scroll}, enum view_UpdateType \paramname{type}, long 
\paramname{left}, long \paramname{top}, long \paramname{width}, long 
\paramname{right});} 

\fixedtext{struct view *\bold{scroll_}GetChild }\fixedindent{(struct scroll 
*\paramname{scroll});} 

\fixedtext{int \bold{scroll_}GetCurrentLocation }\fixedindent{(struct scroll 
*\paramname{scroll});} 

\fixedtext{int \bold{scroll_}GetLocation }\fixedindent{(struct scroll 
*\paramname{scroll});} 

\fixedtext{void \bold{scroll_}GetParameters }\fixedindent{(struct scroll 
*\paramname{scroll}, long *\paramname{endzone}, long *\paramname{bar}, int 
*\paramname{without}, int *\paramname{with});} 

\fixedtext{struct view *\bold{scroll_}GetScrollee }\fixedindent{(struct scroll 
*\paramname{scroll});} 

\fixedtext{struct view *\bold{scroll_}Hit }\fixedindent{(struct scroll 
*\paramname{scroll}, enum view_MouseAction \paramname{action}, long 
\paramname{x}, long \paramname{y}, long \paramname{numberOfClicks});} 

\fixedtext{boolean \bold{scroll_}InitializeClass }\fixedindent{();} 

\fixedtext{boolean \bold{scroll_}InitializeObject }\fixedindent{(struct scroll 
*\paramname{self});} 

\fixedtext{void \bold{scroll_}LinkTree }\fixedindent{(struct scroll 
*\paramname{scroll}, struct view *\paramname{parent});} 

\fixedtext{void \bold{scroll_}SetChild }\fixedindent{(struct scroll 
*\paramname{scroll}, struct view *\paramname{child});} 

\fixedtext{void \bold{scroll_}SetLocation }\fixedindent{(struct scroll 
*\paramname{scroll}, int \paramname{location});} 

\fixedtext{void \bold{scroll_}SetParameters }\fixedindent{(struct scroll 
*\paramname{scroll}, long \paramname{endzone}, long \paramname{bar}, int 
\paramname{without}, int \paramname{with});} 

\fixedtext{void \bold{scroll_}SetScrollee }\fixedindent{(struct scroll 
*\paramname{scroll}, struct view *\paramname{scrollee});} 

\fixedtext{void \bold{scroll_}SetView }\fixedindent{(struct scroll 
*\paramname{scroll}, struct view *\paramname{view});} 

\fixedtext{void \bold{scroll_}UnlinkNotification }\fixedindent{(struct scroll 
*\paramname{scroll}, struct view *\paramname{unlinkedTree});} 

\fixedtext{void \bold{scroll_}Update }\fixedindent{(struct scroll 
*\paramname{scroll});} 

\fixedtext{void \bold{scroll_}WantUpdate }\fixedindent{(struct scroll 
*\paramname{scroll}, struct view *\paramname{requestor});} 



\subsection{Overview of the scroll bar}


The scroll bar represents the entire view.  The striped area at the top of the 
scroll bar column represents the beginning of the view; the striped area at 
the bottom, the end of the view.  (If a window is very short, the striped 
areas will not appear in the scroll bar.)  The white bar represents that 
portion of the view currently visible in the window and its location in the 
view.  If the view is very long, the white bar will be small, because only a 
small portion of the view will be displayed in the window.  If the view is 
very short, the white bar will run the length of the scroll bar, indicating 
that the entire view is visible.  If a user adds or removes information in a 
window, the white bar will change size to reflect the changes.  The black box 
inside the scroll bar indicates the location of some object of interest, for 
example, the text caret. 


More technically, the scroll bar allows the user to change the mapping between 
the coordinate system that the view uses internally and the visible portion on 
the screen.  This mapping can be done in two dimensions--vertical and 
horizontal, as in the \italic{helloworld} example. 


The scroll bar package queries the view for information it needs in order to 
represent the view.  The scroll bar will get the following information from 
the view: 

\itemize{
the view's range--the range that the entire scroll bar will represent, i.e., 
the vertical or horizontal dimensions of the view. 


the view's visible range--the range that the elevator will represent, i.e., 
the range of the view that is visible in the area allocated to its display. 


the view's dot--the range that the scroll bar's black rectangle should 
represent. 

}

In addition, the scroll bar controls the view by calling a procedure that set 
the view's frame, i.e., gives directions to the view to move its display in 
response to the user's manipulation of the scroll bar. 


The view must provide the procedures for allowing the scroll bar to get 
information from the view and to set the view's frame. 


In the view tree hierarchy, the scroll bar is the parent of the view it is 
scrolling.  In this example, the \italic{im} view is the parent of the 
\italic{scroll} which is the parent of the \italic{helloworld} object. 


\subsection{The class definition}


If you are creating a subclass of view that will be scrollable, you must 
override view's \italic{GetInterface} method.  This method provides a way for 
the scroll bar to communicate with the view about user's scrolling requests. 


In addition, you will want to add two new elements to the data structure.  The 
first must hold the (x,y) offset from the top left of the view's displayed 
image to the top left of the view's visual rectangle.  A second must hold new 
(x,y) offset pending an update. 


\subsection{The scroll bar interface}


The scroll bar interface consists of a set of four function pointers that the 
scroll bar will call in order to get information about the view that it is 
scrolling !and to control the view.  The  interface is defined by a structure 
\italic{scrollfns} (scroll functions) that contains four "function" pointers: 


\leftindent{\description{
\italic{GetInfo --  }a pointer to a routine that returns state information 
about the view


\italic{SetFrame  --  }a pointer to a routine that positions the view 
according to parameters specified by the scrollbar


\italic{EndZone  --  }a pointer to a routine that positions the view when the 
user clicks in the end zones of the scrollbar


\italic{WhatIsAt  --  }a pointer to a routine that returns information about 
position

}
}

For each axis (vertical or horizontal) that you want to be scrollable, you 
must declare a scroll bar interface structure and define a set of four 
interface routines. The names of the routines are arbitrary, but the 
parameters and actions that they perform are not. 



\paragraph{The interface routine for getting state information} 
\indexi{ \italic{getinfo}}

\indexi{Scroll bar++The view's state information}

\example{
static void getinfo(v, total, seen, dot)

struct view *v;

struct range *total, *seen, *dot;} 

\leftindent{
\bold{Description.}  The scroll bar will call a view \italic{v}'s getinfo 
routine when it needs to know about the state of the view.  Your 
\italic{getinfo} routine should set the state information for the ranges 
\italic{total}, \italic{seen}, and \italic{dot.}  A \italic{range} consists of 
two fields:  \italic{beg}, the beginning of the range, and \italic{end}, its 
end: 

\example{
struct range \{

    long beg, end;

\};

}

The parameter \italic{total} is the the range that the entire scrollbar 
represents.  You should set the beginning of the range to 0 and end of the 
range to the width or height of the entire view. 


The parameter \italic{seen} is the range that the elevator represents.  You 
should set the beginning of the range to the view's top-left visual 
coordinates;  the end to the bottom-right visual coordinates. 


The parameter \italic{dot} is the range that the black rectangle represents, 
usually something that is selected, or the point of current interest. 


}

\begindata{bp,538927944}
\enddata{bp,538927944}
\view{bpv,538927944,381,0,0}
\paragraph{Setting the view's frame upon user's scrolling requests} 
\indexi{ \italic{setframe}}

\indexi{Scroll bar++Setting the view in its frame}

\example{
static void setframe(v, position, coordinate, outof)

struct view *v;

int posn;

long coordinate, outof;} 

\leftindent{
\bold{Description.}  The \italic{scrollbar} will call its view's 
\italic{setframe} routine whenever scrolling occurs.  It should set the view 
in its frame so that its position reflects the new position of the scrollbar. 
 It tells \italic{view} to move its display (and remember, this should all 
happen only in the particular axis which is being scrolled by this routine) so 
that \italic{position}, in its own coordinate system (its \italic{total} 
range, as given to the \italic{getinfo} call), is located at a pixel offset of 
\italic{coordinate}; \italic{outof} is the total number of pixels in this axis 
of the view, so \italic{coordinate}/\italic{outof} is the fraction from the 
edge of \italic{view} where the \italic{position}'s coordinate should be moved 
to. 


\bold{Usage.}  See Example 6, Vol. I. 

}


\paragraph{A routine to manage endzone hits} \indexi{ \italic{endzone}}

\indexi{Scroll bar++Endzone hits}

\example{
static void endzone(v, zone, action)

struct view *v;

int side;

int end;

enum view_MouseAction action;} 


\leftindent{
The endzone routine gets called when the user clicks in the scrollbar endzone; 
\italic{zone} is either \smaller{scroll_TOPENDZONE} or 
\smaller{scroll_BOTTOMENDZONE}, for the top or bottom zone, and \italic{action} 
is how the user clicked (enum view_MouseAction, see View, Vol. 2).  If the 
pointer to this procedure in the \italic{scrollfns} structure is 
\smaller{NULL}, this procedure defaults to scrolling the view to the 
beginning/end. 


}
\paragraph{Finding the coordinates of the string} \indexi{ \italic{whatisat}}

\indexi{Scroll bar++Giving coordinates}

\example{
static long whatisat(v, coord, outof)

struct view *v;

long coord;

long outof;} 

\leftindent{
\bold{Description.}  This routine should return the coordinate (in the total 
range of this axis of \italic{view}), of what is located at the 
\italic{coordinate}'s pixel (out of \italic{outof} total pixels). 


}
\begindata{bp,538927880}
\enddata{bp,538927880}
\view{bpv,538927880,382,0,0}
\subsection{Creating scroll bars}


\paragraph{Initializing a class} \indexi{ \italic{scroll_InitializeClass}}

\indexi{Scroll bar++Initializing}

\example{boolean scroll_InitializeClass()

}
\leftindent{\bold{Class procedure description. } Initializes the class. 


\bold{Return value.}  TRUE if the initialization is successful


\bold{Usage.}  You must initialize a scroll bar if you are creating a 
subclass. 

}


\paragraph{Creating a scroll bar} \indexi{ \italic{scroll_Create}}

\indexi{Scroll bar++Creating}

\example{scroll_Create (scrollee, location)

struct view *scrollee;

int location;} 


\leftindent{
\bold{Class procedure description.}  \italic{scroll_Create } creates a scroll 
bar for a view at the specified location.  A "location" is an \smaller{OR}-ed 
combination of the following bitmask codes: 

\description{
\italic{scroll_SIDES}\formatnote{  --  }Scroll bars on the sides. 


\italic{scroll__LEFT}\formatnote{  --  }The scroll bar will appear on the 
left. 


\italic{scroll__RIGHT}\formatnote{  --  }The scroll bar will appear on the 
right. 




\italic{scroll__TOP}\formatnote{  --  }The scroll bar will appear on the top. 


\italic{scroll__BOTTOM}\formatnote{  --  }The scroll bar will appear on the 
bottom. 

}
 

\bold{Usage.}  If you want to create a scroll bar or scroll bars for a view, 
then you should call this procedure. 

}


\paragraph{Setting the view for a scroll bar} \indexi{ \italic{scroll_SetView}}

\indexi{Scroll bar++The view tree}

\example{void scroll_SetView(scrollbar, view)

struct scroll *scrollbar;

struct view *view;} 


\leftindent{\bold{Method description.}  \italic{scroll_SetView} is used to set 
the view for a scroll bar. 


\bold{Usage.}   This method assumes that the child (the view directly under 
the scroll bar) and scrollee (the view being scrolled) are one and the same. 
 If they are not, \italic{SetChild} and \italic{SetScrollee} can be used to 
change them individually. 

}

\begindata{bp,538927816}
\enddata{bp,538927816}
\view{bpv,538927816,383,0,0}
\subsection{Children}


\paragraph{Setting the child for a scroll bar} 
\indexi{ \italic{scroll_SetChild}}

\indexi{Scroll bar++Child}

\example{void scroll_SetChild(scrollbar, child)

struct scroll *scrollbar;

struct view *child;} 


\leftindent{\bold{Method description. }   \italic{scroll_SetChild}

sets the child for a scroll bar. 


\bold{Usage.} See the usage of\italic{ scroll_SetView} above. 


}\paragraph{Getting the child} \indexi{ \italic{scroll_GetChild}}

\indexi{Scroll bar++Child}

\example{struct view *scroll_GetChild(scrollbar)

struct scroll *scrollbar;} 


\leftindent{\bold{Method description. }   \italic{scroll_GetChild}

gets the child for a scroll bar. 


\bold{Usage.}  This method is provided to get a child set by 
\italic{scroll_SetChild}. 


}


\paragraph{Setting the scrollee for a scroll bar} 
\indexi{ \italic{scroll_SetScrollee}}

\indexi{Scroll bar++Scrollee}

\example{void scroll_SetScrollee(scrollbar, scrollee)

struct scroll *scrollbar;

struct view *scrollee;} 


\leftindent{\bold{Method description. }   \italic{scroll_SetScrollee}

sets the scrollee for a scroll bar. 


\bold{Usage.}  See the usage of\italic{ scroll_SetView} above. 


}

\paragraph{Getting the scrollee} \indexi{ \italic{scroll_GetScrollee}}

\indexi{Scroll bar++Scrollee}

\example{struct view *scroll_GetScrollee(scrollbar)

struct scroll *scrollbar;} 


\leftindent{\bold{Method description. }   \italic{scroll_GetScrollee}

gets the scrollee for a scroll bar. 


\bold{Usage.}  This method is provided to get a scrollee set by

 \italic{scroll_SetScrollee}.} 

\begindata{bp,538927688}
\enddata{bp,538927688}
\view{bpv,538927688,384,0,0}
\subsection{Positioning scroll bars}


\paragraph{Setting the location for a scroll bar} 
\indexi{ \italic{scroll_SetLocation}}

\indexi{Scroll bar++Location}

\example{void scroll_SetLocation(scrollbar, location)

struct scroll *scrollbar;

int location;} 


\leftindent{\bold{Method description.}  \italic{scroll_SetLocation} sets the 
location of the scroll bar. 


\bold{Usage.}  This method is used to specify if a scroll bar should appear at 
the top, bottom, left, or right. 

}

\paragraph{Getting the location of a scroll bar} 
\indexi{ \italic{scroll_GetLocation}}

\indexi{Scroll bar++Location}

\example{int scroll_GetLocation(scrollbar)

struct scroll *scrollbar;} 


\leftindent{\bold{Method description. }   \italic{scroll_GetLocation}

gets the desired location for the scroll bar. 


\bold{Usage.}  This method gets the location of a scroll bar set by 
\italic{scroll_SetLocation}. 


}


\paragraph{Getting the current location of a scroll bar} 
\indexi{ \italic{scroll_GetCurrentLocation}}

\indexi{Scroll bar++Location}

\example{int scroll_GetCurrentLocation(scrollbar)

struct scroll *scrollbar;} 


\leftindent{\bold{Method description.} \italic{scroll_GetCurrentLocation} gets 
the "real" location of a scroll bar, since the desired location of the scroll 
bar may not fit the size of the region being viewed. 


\bold{Usage.}  This method can be used to find where the scroll bar is at any 
given  time. 


}\
\begindata{bp,538927752}
\enddata{bp,538927752}
\view{bpv,538927752,385,0,0}
\subsection{Setting scroll bar parameters}


\paragraph{Setting the parameters of a scroll bar} 
\indexi{ \italic{scroll_SetParameters}}

\indexi{Scroll bar++Parameters}

\example{void scroll_SetParameters(scrollbar, endzone, bar, without,

with)

struct scroll *scrollbar;

long endzone, bar;

int without, with;} 


\leftindent{\bold{Method description.} \italic{scroll_SetParameters} sets the 
parameters for a scroll bar.  The parameters consist of: 


\description{
\italic{endzone}\formatnote{  --  }The minimum number of pixels the scroll bar 
must have to display the endzones. 

         

\italic{bar}\formatnote{  --  }The minimum number of pixels to try to put a 
scroll bar in. 

         

\italic{without}\formatnote{  --  }The minimum size for the elevator given 
that the scroll bar is currently without endzones.  The elevator is the white 
portion of the scroll bar that indicates the portion of the view on the 
screen. 

         

\italic{with}\formatnote{  --  }The minimum size of the elevator when the 
scroll bar is displayed with endzones. 

}

\bold{Usage.}  This method is used to customize the display of the scroll bar. 





}
\paragraph{Getting the parameters} \indexi{ \italic{scroll_GetParameters}}

\indexi{Scroll bar++Parameters}

\example{void scroll_GetParameters(scrollbar, endzone, bar, without,

with)

struct scroll *scrollbar;

long *endzone, *bar;

int *without, *with;} 


\leftindent{\bold{Method description. }   \italic{scroll_GetParameters}

gets the parameters for a scroll bar. 


\bold{Usage.}  This method is used to get the parameters set by 
\italic{scroll_SetParameters }or to find the default parameters. 

}


\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,387,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538444388}
