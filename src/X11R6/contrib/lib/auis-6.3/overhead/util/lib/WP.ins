\begindata{text,538373940}
\textdsversion{12}
\template{default}
\define{global
}
\define{t
}
\define{itemize
}
\chapter{Installing the White Pages}


\section{About the White Pages}


The White Pages is a database of information about people.  It is designed to 
replace linear lookups in /etc/passwd with a faster binary lookup for sites 
with large numbers of users.  White Pages lookups can do "fuzzy" matching 
(i.e. they can look up nicknames, abbreviations and phonetic matches).   In 
addition to providing faster lookups for large sites, the White Pages can also 
associate users with information about them (i.e. their forwarding address, or 
demographics).  It also provides support for non-user global aliases that can 
be used by the Andrew Message Delivery System so that users on and off site 
can send mail to an address that may explode into a distribution list, for 
example.


As described in the Introduction to the White Pages (WP.ovr), the White Pages 
are designed to be read by multiple users, but only written or updated by one 
user.


Many Andrew installations may choose to use the White Pages software to 
provide for the Andrew applications mentioned above, but the software is also 
suited for other tasks that require a name-oriented, fast database.  A given 
application can choose to use the site White Pages database, another Andrew 
site's White Pages (if running AFS), or some other non-site White Pages that 
has been built in another directory to contain different information.  Note 
that there is at most one site White Pages per Andrew installation, which 
always resides in a designated directory, but programmers can create and use 
other non-site White Pages databases as they wish as long as they tell their 
application programs where to find them.   Programming information can be 
found in WP.pgr.


\section{About this document}


This document describes how to build and install a White Pages database; both 
a "site" White Pages for an Andrew File Sytem (AFS) cell, and a "non-site" 
White Pages that does not depend on AFS.  It assumes that you are fimiliar 
with the material presented in the overview of the White Pages (WP.ovr).


Instructions for performing White Pages administration tasks, such as adding 
new users or modifying information in the database, can be found in WP.adm.


If you are using EZ to read this document, you can open an interactive Table 
of Contents window by choosing \bold{Table of Contents} from the \italic{Page} 
menu card.  Clicking on a heading in the Table of Contents window scrolls this 
document to bring the heading into view.


Throughout this document, the term "system White Pages" is used to refer to 
the White Pages database that is consulted when it is accessed by programs 
acting on behalf of users.  "Source White Pages" refers to the source code 
from which the system White Pages are built and updated.  There are also 
numerous "source files" from which the information that is contained in the 
White Pages comes.

\begindata{bp,539691976}
\enddata{bp,539691976}
\view{bpv,539691976,1698,0,0}
\section{Instructions }


This section is intended as a overview of the the tasks you will perform in 
the installation procedure.  There is a more detailed discussion of the steps 
following this overview, but all the tasks may not be performed in the order 
presented here.  This is because several tasks need to be done by different 
users; all tasks performed by a given user are grouped together in the 
detailed discussion.


Installing the White Pages is not an ordinary building and installing process. 
  The White Pages are constructed in such a way that they are built and 
re-built (for incremental updating) from a set of source files and source 
code.  Thus, instead of simply building and installing a file or files from 
the installation tape, you need to create a new location for the source code 
and source files (that you may want to modify at some future date), copy the 
initial source code and files into there, and then build your system White 
Pages using the sources.  Changes to the system White Pages are then made by 
making changes in the sources which you copied into the new directory, and 
then rebuilding.  So, the process of installation can be broken down into the 
following tasks:


\leftindent{Meet prerequisites for White Page installation.

\itemize{
If you are going to be doing updating the White Pages database often, it is 
recommended that you create a separate user to do the updating.


Create the directories to hold the White Pages sources. 


Copy the initial White Pages sources from their distribution directories to 
the source directories you have created. 


Create the directory in which your system White Pages database will reside. 


Create an empty White Pages database in the system directory you created.


Write a short shell script that sets up the site-specific environment for the 
\t{wpbuild} White Pages building script.   This task is subsumed by the 
"pobbconf" configuration mechanism for automatic rebuilding.  If you are using 
pobbconf, you do not need to do this by hand.


Use the shell script to build your system White Pages from the sources.   This 
task is subsumed by the "pobbconf" configuration mechanism for automatic 
rebuilding.  If you are using pobbconf (explained later in the document), you 
do not need to do this by hand.


Modify and rebuild existing applications, or write new applications, to use 
the White Pages you have created.}}  \leftindent{This task is subsumed by the 
"pobbconf" configuration mechanism for automatic rebuilding.  If you are using 
pobbconf  (explained later in the document), you do not need to do this by 
hand.\itemize{

}}\itemize{
The entire building process can take anywhere from a few hours to a few days 
(but the bulk of it can be left unattended), depending on how many users you 
are supporting. 

\begindata{bp,539692040}
\enddata{bp,539692040}
\view{bpv,539692040,1699,0,0}}
\section{Prerequisites}


In order to install a White Pages database you need the following software and 
hardware.


\subsection{Source Files}


The source files contain information that is incorporated into the White 
Pages.  Some of them, like /etc/passwd, probably already exist in your system 
and some of them, like wpadd, are installed along with the source code.  The 
source files installed along with the source code are discussed in WP.adm and 
are not listed here.


\paragraph{/etc/passwd}


Much of the information in the White Pages comes from /etc/passwd.  If your 
passwd file is not in /etc/passwd, you can specify where it is by setting 
environment variables in a script that starts the White Pages building.  This 
is desribed later in the document.


\paragraph{AffilSrc and AffilMap}


These two files are optional; they are not needed for the initial building of 
the White Pages.  They specify user's departmental or organizational 
affiliation.   Instructions about how to create these files and where they 
should be are in WP.adm.


\subsection{Andrew Software}


If your Andrew software was built with the \italic{WHITEPAGES_ENV} variable 
defined, the following programs should have been built and installed.  If 
\italic{WHITEPAGES_ENV} was not defined, you need to rebuild the system with 
it defined.


Note that if \italic{WHITEPAGES_ENV} was defined when you built Andrew, not 
only will the following programs and files exist, but Andrew White Pages 
client applications expect a site White Pages to exist as well.  \bold{White 
Pages clients may appear ``broken'' until you create a site White Pages 
database}. 


\paragraph{newbt}


newbt is a program installed ANDREWDIR/etc from overhead/util/cmd.  newbt is 
used to initialize the White Pages when making it from scratch.


\paragraph{makeboth}


makeboth is a program installed in ANDREWDIR/etc from overhead/wputil. 
 makeboth is the master rebuilder of the White Pages. 


\paragraph{nickgen}


nickgen is a program installed in ANDREWDIR/etc from overhead/wputil.  


\paragraph{wpbuild}


wpbuild is a script installed in ANDREWDIR/etc from overhead/wputil.  wpbuild 
is the script that calls makeboth and does error reporting.


\subsection{Hardware}


Hardware resources taken up by the White Pages vary depending upon how many 
users your White Pages supports.  A system White Pages database will use 
approximately five times the disk space of the source \t{passwd} file.  The 
White Pages sources and backups use approximately the same amount of disk 
space as the system database, depending on how many backups you keep.  

\begindata{bp,539692104}
\enddata{bp,539692104}
\view{bpv,539692104,1700,0,0}
\section{Create a White Pages user account}


\leftindent{If your site is running AFS, you will probably need to complete 
this step as a system administrator--a user that belongs to the 
s\t{ystem:administrators} group.  If you are not running AFS, you will 
probably need to be a system administrator user, such as \t{root},  that has 
``superuser'' privileges to complete this step.


}If you are going to be performing incremental updates to your White Pages, it 
is a good idea to create a user that will perform the updating.  That user 
will be the owner of the White Pages system database and the White Pages 
sources.  It should have a home directory, like any other user.


Throughout the rest of this document, the name of the White Pages user will be 
"wpuser".

\begindata{bp,539692168}
\enddata{bp,539692168}
\view{bpv,539692168,1701,0,0}
\section{Create a White Pages system directory }


\leftindent{If your site is running AFS, you will probably need to complete 
this step as a system administrator-- a user that belongs to the 
s\t{ystem:administrators} group.  If you are not running AFS, you will 
probably need to be a system administrator user, such as \t{root},  that has 
``superuser'' privileges to complete this step.}


Where your system White Pages directory resides depends on whether you are 
creating a White Pages for an Andrew site, or you are creating a stand-alone 
White Pages application that applications in other Andrew cells will not want 
to access.  The White Pages system database for an Andrew site resides in a 
distinguished directory so that applications (particularily Andrew Message 
System applications) know where to look for it, but this restriction is not 
necessary if you do not care if Andrew applications find your White Pages.  


\subsection{System directory for an Andrew site White Pages

}
The distinguished directory for the White Pages at an Andrew site is 


\t{/afs/\italic{CELLNAME}/service/wp


}where CELLNAME is the domain name of the Andrew installation.  If your Andrew 
site is running AFS, the directories \t{/afs/CELLNAME} and \t{/afs/.CELLNAME 
(note the dot in front of CELLNAME)} should already exist.  The dotted 
directory is a Read/Write mount point for a volume, while the un-dotted 
directory should be a ReadOnly-preferred mount point for either the same 
volume or a read-only clone.  (See the AFS documentation for information about 
volumes and the different kinds of volume mount points.)  If the directory 
\t{/afs/.CELLNAME/service} doesn't yet exist, create it under 
\t{/afs/.CELLNAME}. 


If your Andrew site is not running AFS, Andrew applications will still look in 
that directory to find the White Pages, unless you define the AndrewSetup 
option ``ThisDomainWPDirectory'' to be the name of the directory in which to 
find the White Pages for ThisDomain.  If you need to create the path to the 
directory, CELLNAME should be the site's Internet name or some other 
descriptive phrase, e.g., "\t{eiger.cc.podunk.edu}" defined in 
andrew/overhead/util/hdrs/svcconf.h.  The CELLNAME should be the sole contents 
(with no newline) of the file


\t{/usr/vice/etc/ThisCell


so you should create this file and put your CELLNAME in it.  }You must create 
both \t{/afs/CELLNAME} and \t{/afs/.CELLNAME} (note the dot in the second 
name).  The 'dotted' directory emulates an AFS Read/Write mount point on a 
non-AFS system; simply link \t{/afs/.CELLNAME} to \t{/afs/CELLNAME}. 


Make your White Pages user (wpuser) the owner of /afs/CELLNAME/service/wp. 
 Set protections on the directory so that it is readable and writable by the 
White Pages user, but just readable by everyone else.


\subsection{System directory for a non-site White Pages}


A non-site White Pages database can be placed in any directory you wish; 
choose a place that is convenient.  Programs written to use your non-site 
database will have to be told where to find this database.


The White Pages updating script called \t{wpbuild} assumes that it will update 
the site White Pages unless told otherwise.  You tell wp\t{build} where to 
place a non-site White Pages by supplying the path to the system White Pages 
in the environment-setting rebuild script, SAMPLE.driver, using the 
\italic{WPDestDir} environment variable.  


\begindata{bp,539692232}
\enddata{bp,539692232}
\view{bpv,539692232,1702,0,0}
\section{Create a White Pages source and backups directory}


\leftindent{If you have created a White Pages user, wpuser, you should 
complete this step logged in as that user.

}
The White Pages source directory is where into which you will copy the initial 
sources into and then from which build the system White Pages.  The backups 
are created automatically in the process of building the system White Pages 
from the sources.


\subsection{Source directory

}
If you have created a White Pages user, storing the sources in a subdirectory 
of the home directory of that user is a good idea.  For example, you might 
create a directory called "wpsrc" in ~wpuser.  If you are not going to be 
updating your White Pages frequently, you can store the sources anywhere. 


The White Pages source directory, whether in ~wpuser/wpsrc or somewhere else, 
should be protected from writing by everyone but the user who will be doing 
the building of the system White Pages.


\subsection{Backup directory}


The wpbuild script automatically creates tar(1) backup files in the process of 
building the system White Pages.  It places them by default in 
/usr/adm/wp/backup, but can be told in the environment-setting script to place 
them in a different directory by the \italic{WPBackupDir} variable. Create an 
empty directory in an appropriate place for backups. 


If you are running AFS, a good place to put the backup directory is on another 
volume on a different server from the source directory.

\begindata{bp,539692296}
\enddata{bp,539692296}
\view{bpv,539692296,1703,0,0}
\section{Copy initial sources into newly-created source directory}


\leftindent{If you have created a White Pages user, wpuser, you should 
complete this step logged in as that user.}


Initial White Pages source files were installed into the following 
directories:


\typewriter{\t{\italic{ANDREWDIR}/etc/initial_wp}

\t{\italic{ANDREWDIR}/etc/initial_wp/hist

}\t{\italic{ANDREWDIR}/etc/initial_wp/names}}\t{


}via the Imakefile in \t{overhead/wputil}.  


Copy this initial White Pages source structure from 
\t{\italic{ANDREWDIR}/etc/initial_wp} to your chosen source directory, like 
~wpuser/wpsrc.  For example,\typewriter{


% cp -r \italic{ANDREWDIR}/etc/initial_wp/*  ~wpuser/wpsrc

% cd ~wpuser/wpsrc

% ls -lR

Total: 9 kbytes

-r-x        1 wpuser        3420 Aug 16 14:51 SAMPLE.driver

d           2 wpuser        2048 Sep 25 07:58 hist

d           2 wpuser        2048 Sep 25 07:58 names

-r--        1 wpuser         208 Aug 16 14:49 wp.cfg


hist:

Total: 2 kbytes

-r--        1 wpuser           0 Sep 25 07:58 lastpass

-r--        1 wpuser           0 Sep 25 07:58 oldpass

-r--        1 wpuser           0 Sep 25 07:58 passwd.add

-r--        1 wpuser         269 Aug 16 14:51 passwd.chg

-r--        1 wpuser         164 Aug 16 14:50 wpadd

-r--        1 wpuser           0 Sep 25 07:58 wpadd.old


names:

Total: 27 kbytes

-r--        1 wpuser       18721 Aug 16 14:48 givenmap

-r--        1 wpuser         720 Aug 16 14:49 nickanal.awk

-r--        1 wpuser         208 Aug 16 14:48 nickbun.awk

-r--        1 wpuser        4509 Aug 16 14:50 nickmap

-r--        1 wpuser           0 Sep 25 07:58 nickmap.old

-r--        1 wpuser          84 Aug 16 14:50 override

-r--        1 wpuser           0 Sep 25 07:58 override.old}


Since the files in \t{initial_wp} were installed read-only, once they are 
copied to your source directory you should make them writable to the owner of 
the files (wpuser), and only readable to everyone else.  Use the \t{chmod} 
command to do this.  For example,


\typewriter{% chmod -R 644 ~wpuser/wpsrc}


If you are running AFS, you should also use the "\t{fs setacl"} command to 
appropriately set AFS protections for the hist and names subdirectories so 
that no user but wpuser has write access.

\begindata{bp,539692360}
\enddata{bp,539692360}
\view{bpv,539692360,1704,0,0}
\section{Create an empty system White Pages}


\leftindent{If you have created a White Pages user, wpuser, you should 
complete this step logged in as that user.


}Create a new, empty system White Pages database--a B-tree--in the system 
directory you created a few steps earlier with the "newbt" program.  For 
example, to create a system White Pages for the Andrew site 
"eiger.cc.podunk.edu", you would use the following command (assuming your 
Andrew software runs out of "/usr/andrew"):


\t{\typewriter{% /usr/andrew/etc/newbt /afs/eiger.cc.podunk.edu/service/wp/wp 
40000}}


The general form of this command is:


\typewriter{% \italic{ANDREWDIR}/etc/newbt \italic{WP-base-dir}/wp 
\italic{max-node-size}}


\italic{WP-base-dir/}wp, the first parameter to the \t{newbt} program, is the 
path to the root file of the new White Pages database you are creating.  It is 
generally named "wp", although you can change the name by setting WPDestFile 
in the environment-setting script.  Note that the base \bold{directory} (in 
addition to the base file) for Andrew sites is also called "wp".  (If you use 
the ThisDomainWPDirectory AndrewSetup variable, you would use 
\typewriter{\italic{ThisDomainWPDirectory}/wp} as the first argument to the 
"newbt" program.


\italic{max-node-size} is the maximum B-tree node size in bytes.  If your site 
is running AFS, a good choice for \italic{max-node-size} is \t{40000}.  This 
size is smaller than AFS's 64K block transfer size (so the whole node/file 
gets fetched), but large enough that nodes are not split excessively.  If your 
site is not running AFS, any size between \t{30000} and \t{100000} bytes 
should work satisfactorily.

\begindata{bp,539692424}
\enddata{bp,539692424}
\view{bpv,539692424,1705,0,0}
\section{Modify the script that builds the White Pages}


\leftindent{If you have created a White Pages user, wpuser, you should 
complete this step logged in as that user.  Note that this task is subsumed by 
the "pobbconf" configuration mechanism for automatic rebuilding.  If you are 
using pobbconf, you do not need to do this by hand.}


The system White Pages is built by a program called "wpbuild" 
(\t{\italic{ANDREWDIR}/etc/wpbuild) }that is called from within a script that 
sets appropriate environment variables.  A sample script is provided in the 
file called \t{SAMPLE.driver in the initial_wp directory you copied into the 
White Pages source directory.  So, if you copied the sources into 
~wpuser/wpsrc, the file to edit is called:


~wpuser/wpsrc/SAMPLE.driver


A copy of the script appears on the following pages.  


}You need to modify the definitions of appropriate environment variables that 
appear in this \t{SAMPLE.driver script}.  See the table at the end of this 
document for descriptions of all the variables.


Once you have modified \t{SAMPLE.driver you can }rename it to something like 
"\t{wpdriver".} 

\begindata{bp,539692488}
\enddata{bp,539692488}
\view{bpv,539692488,1706,0,0}
\bold{\center{SAMPLE.driver: a sample script for building and updating White 
Pages

}}
#!/bin/csh -f

# **********************************************************************

#         Copyright IBM Corporation 1988,1989 - All Rights Reserved      *

#        For full copyright information see:'andrew/config/COPYRITE'     *

# **********************************************************************

#############################

# SAMPLE.driver

# a sample script that sets up the environment vars for and calls

# wpbuild; the script that performs White Pages (WP) updating.

#

# Edit a copy of this script to insert the values appropriate to the 
particular

# WP that is to be updated.  DO NOT EDIT wpbuild itself!

# See the ``Installing the White Pages'' chapter of the Andrew Message System

# manual for details on what environment variables you may need to set.

#

# This sample script rebuilds the site WP, that is, the WP residing

# in the directory ``/afs/CELLNAME/service/wp'', where CELLNAME is the domain

# name of the site.  If you wish to rebuild a WP that is in a non-standard 
location,

# you will need to define the \index{WPDestDir} var.  Again, see ``Installing 
the WP'' for

# details.

#############################

# \index{PWFile} is the name of the file containing the "passwd" information.

# \index{AffilSrc} is the file containing affiliations for each user.  If it 
exists,

#   it contains lines of the form userid:affilabbr, where affilabbr is a 
space-separated

#   list of affiliations.

# \index{AffilMap} is the file mapping those affiliation names to full names

#   (for example, the full names for departments).  If it exists, it contains

#   lines of the form ``affilabbr:full affiliation name''.


# \index{WPWorkDir} is the directory where the work will be done.

# This directory must contain the subdirectories "hist" and "names",

# in which state will be maintained between wpbuild runs.


# \index{wpbuildOpts} is -f if we want makeboth to find ~/.forward files;

# it is -F if we don't want to bother with ~/.forward files.


# \index{WPBackupDir} is a directory for keeping consistent snapshots

# (in the form of tar files) of the white pages database and the

# state files that describe its contents.


# \index{WPIChangesDir}, if defined, is a directory into which approved

# update requests from the interactive White Pages updater

# procedure are placed.  (This definition is not defaulted here.)


#

# set eiger.cc.podunk.edu's environment for a WP update and call wpbuild.

#

setenv ANDREWDIR /ext/Andrew

setenv ThisCellName 'eiger.cc.podunk.edu'

setenv WPWorkDir '/usr/wpd/wpbuild'

setenv WPBackupDir '/usr/etc/backup/wp'

# ...the rest of the environment vars will be defaulted by wpbuild.

# passwd info is assumed to be in /etc/passwd.

#


set and_dir=/usr/andrew

if ( $\{?ANDREWDIR\} ) then

	set and_dir=$ANDREWDIR

endif


# These two variables say where the "makeboth" and "nickgen"

# programs are to be found.

if ( ! $\{?MakeBothPgm\} ) set MakeBothPgm=$\{and_dir\}/etc/makeboth

if ( ! $\{?NickGenPgm\} ) set NickGenPgm=$\{and_dir\}/etc/nickgen


# Try to get to the FS command.

set FS=echo

if ( -x $\{and_dir\}/bin/fs ) set FS=$\{and_dir\}/bin/fs


# \index{WPDestFile} is the file in \index{WPDestDir} that will be the root of

# the White Pages b-tree.

if ( ! $\{?WPDestFile\} ) set WPDestFile=wp

#

# crank up wpbuild

echo "Environment set; entering wpbuild at `date`" > /dev/console

$\{ANDREWDIR\}/etc/wpbuild

set exitstat=$status

if ($exitstat != 0) then

    echo "wpbuild returned with failure status $exitstat at `date`" > 
/dev/console

endif

exit $exitstat

# end of script


\begindata{bp,539692552}
\enddata{bp,539692552}
\view{bpv,539692552,1707,0,0}
\section{Build the system White Pages}


\leftindent{If you have created a White Pages user, wpuser, you should 
complete this step logged in as that user.  Note that this task is subsumed by 
the "pobbconf" configuration mechanism for automatic rebuilding.  If you are 
using pobbconf, you do not need to do this by hand.


}Run the \t{wpdriver} shell script.  It will call the  main White Pages 
updating script, \t{wpbuild}, which will fill in the White Pages with the 
information contained in the source \t{passwd} file and the initial sources 
copied from \t{initial_wp}.   The initial build of the White Pages B-tree will 
take quite a while;  roughly thirty seconds per user.  If \t{wpbuild} fails 
partway through, especially while in the \t{makeboth} program, you may end up 
with an incomplete White Pages and should rebuild. 


The White Pages database updating script, \t{wpbuild,} can take between a few 
minutes and several days to complete, depending on the number of users 
supported, whether a standalone (fast) or networked (slow) disk is used, and 
the speed of the machine doing the updating.  There are several options you 
can pass to the \t{wpbuild} script that will speed up White Pages updating at 
the expense of B-tree consistency checking.  


Once the first run of \t{wpbuild} completes, your White Pages database will be 
usable by applications via the White Pages interface routines described in 
WP.pgr.  However, it will contain little more than the information in your 
site \t{passwd} file.  To add to or change the information in the White Pages, 
you need to modify the database sources and re-run \t{wpbuild}.  See WP.adm 
for instructions on how to modify the White Pages.

\begindata{bp,539692616}
\enddata{bp,539692616}
\view{bpv,539692616,1708,0,0}
\section{Write applications to use the White Pages }


Andrew White Pages client programs that were built with \italic{WHITEPAGES_ENV} 
defined, and remote AFS cells' clients, will automatically use your new site 
White Pages database that lives in \t{/afs/CELLNAME/service/wp}, if you have 
created one. 


If you have created a White Pages database for some other use, you will need 
to write new applications, or modify existing applications (login, for 
example), to use it.  See the White Pages Programmer's Guide (WP.pgr) for a 
description of the White Pages interface routines you will use.  In 
particular, note that the method used to open the White Pages database will be 
slightly different for databases that do not reside in the site database 
location.

\begindata{bp,539692680}
\enddata{bp,539692680}
\view{bpv,539692680,1709,0,0}
\section{Pobbconf:  Setting up daemon software}


The files in andrew/overhead/pobbconf provide an easy way to configure and 
maintain the scripts and files for the disk maintenance on the Post Office 
machines that AMDS relies heavily on to do its day-to-day operations. 
 Maintaining the disks of the Post Office machines also requires scripts.  For 
example, the package program determines what should be on the local disk by 
reading a package script.  


The large-grain decisions that define what types of services to be run are 
expressed by editing the pobbconf.h file and supporting decisions are made by 
editing pobbconf.c.  All options in pobbconf.h are set to a value of TRUE or 
FALSE.  Options whose value is TRUE will be defined during the installation 
process, while options whose value is FALSE will not be defined. 


What follows is a description of the various pobbconf variables relevant to 
the site White Pages.  \leftindent{

}
\subsection{pobbconf.h

}
\index{\italic{pobb_\index{WPUpdate}}}:  boolean

\leftindent{Default: TRUE

Prerequisites:  Installed White Pages.

Enables the White Pages updating.  This means that pobbconf configures nightly 
updates of the White Pages to be run as a distinguished/dedicated user on a 
dedicated Post Office machine, which is selected by the machine 
auto-configuration process.  This involves (1) writing the WP 
environment-setting script that calls wpbuild but also sends any error reports 
to the ?[WPErrorsAddress] variable, (2) writing a driver for *that* script 
that sends the detailed rebuild log to ?[LogBB].wp and the script log to 
?[DaemonBB].wp, (3) writing a cron file that runs script (2) authenticated as 
the distinguished WP-build user, and (4) adding a crontab entry to the crontab 
for one of the PO machines (as the output of load balancing).

}
\index{\italic{pobb_\index{WPInteractive}}}:  boolean

\leftindent{Default: TRUE

Prerequisites:  pobb_WPUpdate TRUE and pobb_AutoPost TRUE in pobbconf.h

Enable mail-based updates of the White Pages.  Enables the functionality of 
the wpi, forward, wpedit, and wpiupdat programs.


}\italic{\index{pobb_\index{PublishAccounts}}}: boolean

\leftindent{Prerequisites: }Installed White Pages.\leftindent{

When set in pobbconf.h, causes a list of all the passwd-type entries in the 
White Pages to be enumerated and listed into a file (by ?[genacctspgm]) which 
is then stored in ?[AndrewAcctDir].}


\subsection{pobbconf.c}


Site-dependent variables for scripts and other text files related to White 
Pages updating and services defined in pobbconf.h are set in 
andrew/overhead/pobbconf/pobbconf.c.  


Each variable in pobbconf.c has a value of type \bold{string} or 
\bold{list-of-strings}.  Strings are enclosed in quotation marks ("").  A 
list-of-strings is an array of strings.  Each element in a list-of-strings, 
except the NULL element, should be enclosed in quotation marks ("").


\paragraph{White Pages updating}


The following variables specify things about White Pages updating.  Several of 
these have analogs in the environment-setting script you can write by hand. 
 If there is an analog, it is listed in the "Rebuild Analog" field.


\italic{\index{wpbuildUser}}:  string

\leftindent{Default:  "wd00"

Prerequisites:  pobb_WPUpdate TRUE in pobbconf.h

The username of the user that's supposed to be permitted to read all 
~/.forward files.}


\italic{\index{wpbuildHome}}:  string

\leftindent{Default:  "/afs/andrew.cmu.edu/usr0/wd00"

Prerequisites:  pobb_WPUpdate TRUE in pobbconf.h

The home directory of wpbuildUser.}


\italic{\index{wpbuildDir}}:  string

\leftindent{Default:  "/afs/andrew.cmu.edu/usr0/wd00/wpbuild"

Prerequisites:  pobb_WPUpdate TRUE in pobbconf.h

Rebuild Analog: WPWorkDir

Directory in which the White Pages is built and the state of the previous 
build is preserved for next time.}


\italic{\index{WPBackupDir}}:  string

\leftindent{Default:  "/afs/andrew.cmu.edu/usr0/wd00/wpbackup"

Prerequisites:  pobb_WPUpdate TRUE in pobbconf.h

Rebuild Analog: WPBackupDir

Directory in which backups for the White Pages database and the previous-build 
state are kept. }


\italic{\index{WPPasswdFileName}}:  string

\leftindent{Default:  "/afs/.andrew.cmu.edu/common/etc/passwd"

Prerequisites:  pobb_WPUpdate TRUE in pobbconf.h

Rebuild Analog: PWFile

Directory out of which the workstation's /etc/passwd file is updated.}


\italic{\index{WPPasswordFile}}:  string

\leftindent{Default:  "/.WPassword"

Prerequisites:  pobb_WPUpdate TRUE in pobbconf.h

Where wpbuildUser's password is stored on the machine that does the 
rebuilding.}


\italic{\index{WPErrorsAddress}}:  string

\leftindent{Default:  "postman+wperrors"

Prerequisites:  pobb_WPUpdate TRUE in pobbconf.h

Address to which unanticipated White Pages build errors are mailed.}


\italic{\index{WPAffilSrc}}:  string

\leftindent{Default:  "/afs/andrew.cmu.edu/usr0/acm/user/dept.affils"

Prerequisites:  pobb_WPUpdate TRUE in pobbconf.h

Rebuild Analog: AffilSrc

Where administrators put per-user affiliation information.}


\italic{\index{WPAffilMap}}:  string

\leftindent{Default:  "/afs/andrew.cmu.edu/usr0/acm/user/affils.map"

Prerequisites:  pobb_WPUpdate TRUE in pobbconf.h

Rebuild Analog: AffilMap

Where administrators say what the abbreviations mean.

}
\italic{\index{makebothpgm}}:  string

\leftindent{Default:  "?[POBBAndrewDir]/etc/makeboth"

Prerequisites:  pobb_WPUpdate TRUE in pobbconf.h

Rebuild Analog: MakeBothPgm

Pathname of the makeboth program.}


\italic{\index{nickgenpgm}}:  string

\leftindent{Default:  "?[POBBAndrewDir]/etc/nickgen"

Prerequisites:  pobb_WPUpdate TRUE in pobbconf.h

Rebuild Analog: NickGenPgm

Pathname of the nickgen program.}


\italic{\index{wpbuildscript}}:  string

\leftindent{Default:  "?[POBBAndrewDir]/etc/wpbuild"

Prerequisites:  pobb_WPUpdate TRUE in pobbconf.h

Pathname of the wpbuild script.}\leftindent{

}
\paragraph{White Pages Interactive}


The following variables are only necessary when you choose to use the White 
Pages Interactive system to make changes to your user entries.  You will need 
to have the pobb_WPUpdate variable on in order to use WPI.


\italic{WPIInBox}:  string

Default:  "/afs/andrew.cmu.edu/usr0/wd00/Mailbox"

\leftindent{Prerequisites:  pobb_WPInteractive TRUE

Mailbox where requests arrive.}


\italic{\index{WPIWorkDir}}:  string

Default:  "/afs/andrew.cmu.edu/usr0/wd00/wpi"

\leftindent{Prerequisites:  pobb_WPInteractive TRUE

Where daemon does its work.}


\italic{\index{WPIAdministrators}}:  array of string

\leftindent{Default:  \{"mcinerny", "cfe", "pierette", "jetson", "grm", NULL\}

Prerequisites:  pobb_WPInteractive TRUE

Login-ids of WP admins in this cell.  Used by wpbuildUser/.AMS.flames to 
determine whether a sender of a WPI message is a WP administrator.}


\italic{\index{WPIAdministratorGroup}}:  string

\leftindent{Default:  "wd00:wpadmins"

Prerequisites:  pobb_WPInteractive TRUE, AFS30_ENV defined in pobbconf.h

The PRS groupname whose members are WP Administrators. Used by 
wpbuildUser/.AMS.flames to determine whether a sender of a WPI message is a WP 
administrator.}


\italic{\index{WPIAdminFolderRoot}}:  string

\leftindent{Default:  "?[LOCALSEARCHPATHTEMPLATE]/org/wp"

Prerequisites:  pobb_WPInteractive TRUE, pobb_AutoPost TRUE

The root of the folder tree to which WPI output will go.  Will create the 
audit, authreq, failures, and fodder sub-folders.

}
\italic{\index{wpiupdat}}:  string

\leftindent{Default:  "?[POBBAndrewDir]/etc/wpiupdat"

Prerequisites:  pobb_WPInteractive TRUE

Pathname of the wpiupdat program.}


\paragraph{Publish Accounts}


The following variables are needed for publishing a list of user accounts in a 
public place.


\italic{\index{genacctspgm}}:  string

\leftindent{Default:  "?[POBBAndrewDir]/etc/genaccts"

Prerequisites:  A White Pages database and pobb_PublishAccounts in pobbconf.h, 
and POBBAndrewDir in AndrewSetup or site.h

Pathname of the genacct program, which generates new user accounts.}


\italic{\index{AndrewAcctDir}}: string

\leftindent{Default:  "/afs/andrew.cmu.edu/usr0/wd00/accts"

Prerequisites: pobb_PublishAccounts TRUE in pobbconf.h

Specifies directory in which to publish a listing of accounts.}


\subsection{Installation}


\paragraph{pobbconf make install}


Once the appropriate variables have been set in pobbconf.h and pobbconf.c, the 
scripts and files in the pobbconf directory can be built and installed.  To do 
this, type:


\typewriter{make install}


in andrew/overhead/pobbconfig.  The "make install" command will build the 
pobbscpt macro processor, make all the target *.msh and *.csh files by running 
them through that processor, and then execute the generated pobb-install.msh 
script, which will check for the existence of target directories, and create 
any that do not already exist, and, finally, install the compiled scripts into 
the target directories.


\paragraph{PackageHome make install}


Performing a "make install" in andrew/overhead/pobbconf does not create 
complete package scripts for the machines.  Instead, it creates source files 
for these package scripts, which then need to be compiled to create the 
completed package scripts.  To compile and install the package scripts for the 
bulletin board servers, move to \italic{PackageHome}/src, and type:


\typewriter{make install}


This command builds the package scripts for the machines from the script 
sources, checks for the appropriate target directories and creates any that do 
not already exist, and installs the completed scripts in the appropriate 
directories.


\paragraph{Reboot}


You should make sure the machines reboot and re-package correctly.  This means 
that the file /.package must point to the appropriate package file for that 
machine.  The text of this file should be the line 
\italic{PackageHome}/etc/\italic{hostname}, where \italic{hostname} is the 
fully qualified domain name of the machine.


\paragraph{Files on the local machines}


To allow the deamon processes to authenticate, the following file must be 
written:

\leftindent{
The file \italic{WPPasswordFile} must contain the unencrypted password for 
\italic{wpbuildUser}.

}
\paragraph{Reboot}


When this file has been installed on the local disk of each machine, the 
machines should be rebooted.  

\begindata{bp,539692744}
\enddata{bp,539692744}
\view{bpv,539692744,1710,0,0}
\center{\bold{Environment Variables used by wpbuild}}


\begindata{table,540317960}
\rows 42 0 0 0 0 0 0 0 0 0 0 0 0
\cols 104 143 265
-	-	-
| ^Variable	| ^Default	| ^Description	| 
-	-	-
| PWFile	| '/etc/passwd	| \begindata{text,538476460}
\textdsversion{12}
passwd-format source file.  Overrides definition of PWHome variable.\
\enddata{text,538476460}
	| 
-	-	-
| AffilSrc	| no default	| \begindata{text,539023212}
\textdsversion{12}
File containing user affiliations, if defined.\
\enddata{text,539023212}
	| 
-	-	-
| AffilMap	| no defult	| \begindata{text,538478712}
\textdsversion{12}
File containing affiliation abbreviation to full affiliation name mappings, if 
defined.\
\enddata{text,538478712}
	| 
-	-	-
| WPWorkDir	| '/usr/adm/wp/build	| \begindata{text,539015808}
\textdsversion{12}
Directory where rebuild files will be created.  Must contain the 
subdirectories "hist" and "names," where certain source files reside.  For the 
example in this document, it woulc be ~wpuser/wpsrc.\
\enddata{text,539015808}
	| 
-	-	-
| wpbuildOpts	| '-f	| \begindata{text,539470604}
\textdsversion{12}
Options to pass to makeboth, the main WP rebuilding program.  The -f default 
tells makeboth to check for and use users' ~/.forward files.\
\enddata{text,539470604}
	| 
-	-	-
| WPBackupDir	| '/usr/adm/wp/backup	| \begindata{text,539003244}
\textdsversion{12}
Directory where tar(1) backups will be stored.

\enddata{text,539003244}
	| 
-	-	-
| ANDREWDIR	| no default	| \begindata{text,539031556}
\textdsversion{12}
The root of the site's Andrew software.\
\enddata{text,539031556}
	| 
-	-	-
| MakeBothPgm	| 'ANDREWDIR/etc/makeboth	| \begindata{text,538470096}
\textdsversion{12}
Command for executing the makeboth program.  Options from wpbuildOpts are 
tacked on when makeboth is run.\
\enddata{text,538470096}
	| 
-	-	-
| NickGenPgm	| ANDREWDIR/etc/nickgen	| \begindata{text,538905584}
\textdsversion{12}
Command for executing the nickgen program.\
\enddata{text,538905584}
	| 
-	-	-
| ThisCellName	| 'Contents of /usr/vice/etc/ThisCell.	| \begindata{text,539464132}
\textdsversion{12}
The domain name of the cell for which this WP is being rebuilt.\
\enddata{text,539464132}
	| 
-	-	-
| WPDestDir	| '/afs/CELLNAME/service/wp	| \begindata{text,539969892}
\textdsversion{12}
The directory where the WP system database resides.\
\enddata{text,539969892}
	| 
-	-	-
| 'WPDestFile	| wp	| \begindata{text,539483940}
\textdsversion{12}
File in WPDestDir that is the base file of the WP database.\
\enddata{text,539483940}
	| 
-	-	-
\enddata{table,540317960}
\view{spread,540317960,1711,0,0}




EOF

\begindata{bp,537558784}
\enddata{bp,537558784}
\view{bpv,537558784,1713,0,0}
Copyright 1992 Carnegie Mellon University and IBM.  All rights reserved.

\smaller{\smaller{$Disclaimer: 

Permission to use, copy, modify, and distribute this software and its 

documentation for any purpose is hereby granted without fee, 

provided that the above copyright notice appear in all copies and that 

both that copyright notice, this permission notice, and the following 

disclaimer appear in supporting documentation, and that the names of 

IBM, Carnegie Mellon University, and other copyright holders, not be 

used in advertising or publicity pertaining to distribution of the software 

without specific, written prior permission.



IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 

DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 

ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 

SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 

BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 

DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 

WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 

ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 

OF THIS SOFTWARE.

 $

}}\enddata{text,538373940}
