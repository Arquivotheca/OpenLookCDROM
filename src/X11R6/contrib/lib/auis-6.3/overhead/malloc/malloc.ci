/* ********************************************************************** *\
 *         Copyright IBM Corporation 1988,1991 - All Rights Reserved      *
 *        For full copyright information see:'andrew/config/COPYRITE'     *
\* ********************************************************************** */
/* $Disclaimer: 
 * Permission to use, copy, modify, and distribute this software and its 
 * documentation for any purpose is hereby granted without fee, 
 * provided that the above copyright notice appear in all copies and that 
 * both that copyright notice, this permission notice, and the following 
 * disclaimer appear in supporting documentation, and that the names of 
 * IBM, Carnegie Mellon University, and other copyright holders, not be 
 * used in advertising or publicity pertaining to distribution of the software 
 * without specific, written prior permission.
 * 
 * IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 
 * DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 
 * ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 
 * SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 
 * BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 
 * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
 * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 
 * OF THIS SOFTWARE.
 *  $ */

#ifndef NORCSID
static char rcsid[] = "$Header: /afs/cs.cmu.edu/project/atk-dist/auis-6.3/overhead/malloc/RCS/malloc.ci,v 2.35 1994/05/09 21:19:19 rr2b Exp $ ";
#endif 

/*
 *  malloc.c   memory allocator
 */

/*
	Adapted from Algorithms 6.6(b) and 6.7 in
		E. M. Reingold,  W. J. Hansen,
		Data Structures in Pascal, 
		Little, Brown, 1986

	Some details are also taken from the malloc
	distributed with 4.1 BSD.

	The algorithm features a disordered free list which is
	scanned with next-fit.  Allocation scans only the 
	free blocks.  Freeing a block coalesces 
	it with its free neighbors, if any, in time O(1).

	Every block has a one word header (4 bytes) with the
	Size of the block (in bytes, counting header).
	The low bits of size are Active and PreActive bits,
	which indicate whether the block and its predecessor,
	respectively, are free.  A free list block has Next and Prev
	pointers and the last word of a free block is a Front pointer 
	which points to the freehdr at the beginning of the block.
	The smallest allocatable block is three pointers long.

	The arena may be composed of disjoint segments.  Each
	segment ends with a free block having Active set true.
	These blocks deal with the end condition for the last 
	block of the arena segment.  They also serve to guarantee
	that the free list will never be empty.

June 1990
	move include of andrewos.h so bcopy is done right
	introduce GETCALLER because SPARC register conventions
		require an assembler routine
*/

#include <andrewos.h>
#include <stdio.h>
#include <amalloc.h>
#include <imalloc.h>
#include <getcallr.h>
#include <sys/resource.h>

static char msgbuf[200];
#define ferr4(fmt, a, b, c, d) {sprintf(msgbuf, fmt, a, b, c, d); \
				write(2, msgbuf, strlen(msgbuf));}
#define ferr3(fmt, a, b, c) {sprintf(msgbuf, fmt, a, b, c); \
				write(2, msgbuf, strlen(msgbuf));}
#define ferr2(fmt, a, b) {sprintf(msgbuf, fmt, a, b); \
				write(2, msgbuf, strlen(msgbuf));}
#define ferr1(fmt, a) {sprintf(msgbuf, fmt, a); \
				write(2, msgbuf, strlen(msgbuf));}
#define ferr0(fmt) {sprintf(msgbuf, fmt); \
				write(2, msgbuf, strlen(msgbuf));}


static CheckLevel;
/* at CheckLevel = 0, no checking is done
	at 1, local reasonability tests are made
	at 2, local tests are made and each free block is
		checked as it is scanned searching
		for a big enough one
	at 3, the full free list is checked on every
		malloc or free
	at 4, a message is printed to stdout 
		for every malloc, free, & realloc
	at 5, mstats will print a complete list 
		of all blocks in memory
*/

#define ASSERT(where,pr) if(!(pr))botch(where);else

static int DefaultM0Handler();   /* (below) */
static FlushFree();   /* (below) */
static int TestFree();   /* (below) */
static int TestActive();   /* (below) */
static CheckSegment(); 
static printarena();

static int (*M0Handler)() = DefaultM0Handler;
/* the procedure SetM0Handler may be called to set this value
	When malloc runs out of memory, it calls the M0Handler,
	passing it the amount of the malloc request.  (It may also be 
	called from within realloc.)
	If the M0Handler returns, its value is used as the new 
	amount to be allocated, but if zero, malloc just returns zero.
*/

/* A.InProgress is set on entry and cleared before exit.  It prevents a signal handler from 
initiating a malloc or free while one is in progress.  The switch is set and tested with
	if(A.InProgress++) {<error>}
This is foolproof only where ++ to a variable is implemented as a test-and-set instruction;
for instance, on an ibm032 there is a small chance of failure to detect recursive malloc 
if the signal handler is invoked in the middle of the instructions that perform the ++
*/

/* More kludgery:  Some programs assume that freed blocks can still be
accessed for a while.  This fails because the contents of some words of freed
blocks are overlaid with the chain pointers for the free list.  To simulate
the expected behavior, this package does not actually perform free until the
next operation to the package.  A pointer to the block to be freed is saved
in PendingFree.  The actual free routine is called FlushFree.  The routines
malloc, free, and realloc all begin with  
	if (A.PendingFree) FlushFree(A.PendingFree);
29 Sept 87
	It gets worse.  Sun has a new version of getwd() that does two frees 
	before going back to refer to the contents of one of them.
	A.PendingFree has now been replaced with A.QueuedToFree,
	which is an array of the MAXQUEUE most recently freed elements.
	The occupancy is given by A.NQueued.
	The queued elements are in 
		A.QueuedToFree[0] . . . A.QueuedToFree[A.NQueued - 1]
*/


#ifdef MSTATS
    static int Nscans, Nrequests, Nsbrk, Ncombines, Nfrees;
#endif /* MSTATS */

/*	avoid break bug */
#ifdef pdp11
#define GRANULE 64
#else /* pdp11 */
#define GRANULE 0
#endif /* pdp11 */

static struct arenastate A = {0, 0, 0, 0, 0, 0, 0, 0};

#if defined(hpux) && !defined( _CLASSIC_XOPEN_TYPES)
extern void *sbrk();
#else
extern char	*sbrk();
#endif
static struct freehdr *addarena ();


static
botch(s)
char *s;
{
/* don't want to use fprintf: it calls malloc! */
	char *msg;
	msg = "Malloc arena corruption discovered  at - "; 
	if (FILE_NEEDS_FLUSH(stdout)) fflush(stdout);
	if (FILE_NEEDS_FLUSH(stderr)) fflush(stderr);
	write(2, msg, strlen(msg));
	if (s) write(2, s, strlen(s));
	write(2, "\n", 1);
	abort();
}

	static long
AllocateInitialArena()
{
	long newsize;
	A.allocp = addarena(1<<15);    /* start with 32K */
	if (A.allocp == 0) {
		newsize = M0Handler(1<<15);
		if (newsize == 0)  return 0;
		A.allocp = addarena(newsize);
		return (A.allocp == 0) ? 0 : 1;
	}
	return 1;
}


/*
	malloc

	Pascal version from Data Structures in Pascal
type
    block = record
        Size: integer;           {size of this record}
        Active: boolean;        {true when this record is in use}
        PreActive: boolean;     {true when preceding record is in use}
        case blockType of
            freeBlock:(Next, Prev: ptr;    {link free list}
                    {" . . . "}
                    Front: ptr);  {last word points to start of record}
            activeBlock: ({"contents, as required"} )
    end;
    ptr = ^block;
var 
    free: ptr;

function malloc(n: integer): ptr;
var
    p: ptr;
begin
    p := free;
    {scan free list looking for a large enough record}
    while (p<>free^.Prev) and (p^.Size<n) do
        {Assert:  No record on list from (free) to (p)
                has size (n) or larger.}
        p := p^.Next;
    if p^.Size < n then
        sbrk(rounded up number of bytes);
    if p^.Size < n then
        malloc := null;
    else begin
        free := p^.Next;    {set (free) for Next allocation}
        if p^.Size - n < epsilon then begin
            {allocate entire record; remove it from free list}
            p^.Next^.Prev := p^.Prev;
            p^.Prev^.Next := p^.Next
        end
        else begin
            {split (p); allocate the right and free the left}
            p^.Size := p^.Size - n;
            {"(Front) pointer at end of (p)^"} := p;
            p := {"(p)+(p)^.(Size)"};
            p^.Size := n;
            p^.PreActive := false
        end;
        {(p)^.(Size)>=(n) and a record of length (p)^.(Size) 
        is allocated, beginning at (p)}
        p^.Active := true;
        {"((p)+(p)^.(Size))"}^.PreActive := true;
        malloc := p    {return a pointer to the new record}
    end
end;

*/

#ifndef _IBMR2
	char *
#else /* _IBMR2 */
	void *
#endif  /* _IBMR2 */
procdef(malloc)(nbytes)
unsigned nbytes;
{
	register siz;	/* # bytes to allocate */
	register struct freehdr *p, *t;
	register struct freehdr *prep = 0;   /* for debugging */

	char *return_address;
	GETCALLER(nbytes, return_address);

	if (A.allocp==0 && AllocateInitialArena() == 0)
		return 0;
	
	if (A.InProgress++) {
		botch("Program error.  Tried 'malloc' while in malloc package.");
		A.InProgress--;
		p = prep;		/* forestall hc complaint about non-use of prep */
		return 0;
	}
	while (A.NQueued) 
		FlushFree(A.QueuedToFree[--A.NQueued]);

#ifdef MSTATS
Nrequests++;
#endif /* MSTATS */

	if (CheckLevel > 0) {
		if (CheckLevel>=3) CheckAllocs("in Malloc");
		else ASSERT("m0", TestFree(A.allocp));
	}

	siz = (nbytes+sizeof(struct hdr)+(WORD-1))/WORD*WORD;
	if (siz<EPSILON) siz = EPSILON;
	t = A.allocp->Prev;

	/* scan free list looking for a large enough record */
	/* as an optimization we skip the clearbits() around p->Size,
		assuming that ACTIVE and PREACTIVE are in the
		low bits so they do not affect the size comparison */
	if (CheckLevel!=2)  for (p=A.allocp; 
#ifdef MSTATS
Nscans++,
#endif /* MSTATS */
			p!=t && p->Size<siz; 
			prep = p, p = p->Next) {

	}
	else    for (p=A.allocp;      /* CheckLevel == 2 */
#ifdef MSTATS
Nscans++,
#endif /* MSTATS */
			p!=t && p->Size<siz; 
			prep = p, p = p->Next) {
		if (clearbits(p->Size)) {
			ASSERT ("m1", ! testbit(p->Size,ACTIVE));
			ASSERT ("m2", p == PREVFRONT(NEXTBLOCK(p)));
		}
		else 
			ASSERT ("m3", testbit(p->Size, ACTIVE));
		ASSERT("m4", p->Next->Prev==p);
	}
	if (p->Size < siz) {
		p = addarena(siz);
		if (p == NULL) {
			if (A.RecurringM0) {
				A.InProgress = 0;
				DefaultM0Handler(nbytes);
				return 0;
			}
			else {
				char *v;
				int (*h)() = M0Handler;
				int newsize;
				A.InProgress--;
				newsize = M0Handler(nbytes);
				/* if newsize still too big and no new
					M0Handler is set, a failure
					to allocate newsize is an abort
				*/
				if (h == M0Handler)
					A.RecurringM0 ++;
				if(newsize > 0)
					v = malloc(newsize);
				else
					v = NULL;
				A.RecurringM0 = 0;
#ifdef IDENTIFY
				if (v) {
					struct hdr *t = ((struct hdr *)v)-1;
					t->caller = return_address;
					t->seqno = A.SeqNo++;
				}
#endif /* IDENTIFY */
				return v;
			}
		}
	}

	if (CheckLevel > 0)  
		ASSERT("m10", TestFree(p));

	if (clearbits(p->Size)-siz < EPSILON) {
		/*allocate entire record; remove it from free list*/
		A.allocp = p->Next;
		p->Next->Prev = p->Prev;
		p->Prev->Next = p->Next;
		p->Size |= ACTIVE;
	}
	else if (A.MallocStrategy & AllocFront) {
		/* like old malloc: allocate the left and free the right */
		register oldsize = p->Size;
		/* initialize the new active block */
		p->Size = setbits(siz, ACTIVE | testbit(p->Size, PREACTIVE));
		/* initialize the new free block */
		t = NEXTBLOCK(p);
		t->Size = oldsize - siz;	/* not ACTIVE.  set PREACTIVE below */
		t->Next = p->Next;
		t->Prev = p->Prev;
		PREVFRONT(NEXTBLOCK(t)) = t;
		/* link the new block into the freelist */
		t->Next->Prev = t;
		t->Prev->Next = t;
		if ((A.MallocStrategy & (DelayAdvance | AdvanceKludge)) == 0)
			A.allocp = t->Next;
		else if (A.MallocStrategy & AdvanceKludge) 
			A.allocp = (t->Size < t->Next->Size) ? t->Next : t;
		else  /* DelayAdvance: next time start with t */
			A.allocp = t;
	}
	else {
		/* faster */
		/* split (p); allocate the right and leave the left free */
		p->Size -= siz;   /* doesn't change bits */
		if ((A.MallocStrategy & (DelayAdvance | AdvanceKludge)) == 0)
			A.allocp = p->Next;
		else if (A.MallocStrategy & AdvanceKludge) 
			A.allocp = (p->Size < p->Next->Size) ? p->Next : p;
		else  /* DelayAdvance: next time start with p */
			A.allocp = p;
		t = NEXTBLOCK(p);
		PREVFRONT(t) = p;
		p = t;
		p->Size = siz | ACTIVE;
	}
	/* Some programs have code that assumes that newly 
		malloc'ed memory is zero (Heavy SIGH): */
	p->Next = 0;
	p->Prev = 0;
	t = NEXTBLOCK(p);
	PREVFRONT(t) = 0;

	t->Size |= PREACTIVE;

	A.InProgress --;

#ifdef IDENTIFY
	p->caller = return_address;
	p->seqno = A.SeqNo++;
#endif /* IDENTIFY */
	if (CheckLevel >=4) 
		ferr3("malloc @ 0x%lx for %d bytes returns 0x%lx\n",
			return_address, nbytes, ((char *)p) + sizeof(struct hdr));

	return ((char *)p) + sizeof(struct hdr);
}

/* addarena */
/* create a new or extended arena.  Two adjacent arenas will coallesce. */
/* In a new arena segment:
	The last EPSILON bytes are an arena control block.
	The first three words are a freehdr with
	Size indicating all of block except last EPSILON bytes;  its Active
	bit is false and its PreActive bit is true (so no coalesce off front
	will be tried);  Next and Prev both point to the arena control block.
	The arena control block is a freehdr with
	Active true (so preceding block will not coalesce with it) and
	PreActive set depending on the preceding block (initially false);
	the Size field is zero; Next and Prev both point to the free
	element at the beginning of the segment.  The Front field
	in the last word of the segment points not to the arena control block,
	 but to the beginning of the segment (so CheckAllocs can find it.)

	The argument min gives the space needed.
	Return value is NULL or a pointer to a big enough block.
*/
static
struct freehdr *
addarena (min) {
	register struct freehdr *new, *trlr;
	struct freehdr *t;
	int segbytes;
	int x;
	/* set min to the largest of min, 1<<14, arena size >>3 */
	if (min < 1<<14) min = 1<<14;
	x = (A.arenaend - A.arenastart)>>3;
	if (A.allocp != 0 && min < x) min = x;
	/* round request to a full page  (though not aligned on page boundary )*/
	segbytes = ((min+2*EPSILON+(SEGGRAIN-1)) 
			/ SEGGRAIN) * SEGGRAIN;
#ifdef pdp11
	new = (struct freehdr *)sbrk(0);
	if((INT)new+segbytes+GRANULE < (INT)new) {
		return(NULL);
	}
#endif /* pdp11 */
#ifdef MSTATS
Nsbrk++;
#endif /* MSTATS */
	new = (struct freehdr *)sbrk(segbytes);
	if((INT)new == -1) 
		return(NULL);
	if ((x=(INT)new % WORD)) {
		/* discard leading unaligned space and sbrk enough more to align */
		new = (struct freehdr *)((INT)new+WORD-x);
		sbrk(WORD-x);
	}
	trlr = (struct freehdr *)((INT)new+segbytes-EPSILON);
	new->Size = setbits(segbytes - EPSILON, PREACTIVE);
	new->Next = trlr;
	trlr->Size = setbits(0, ACTIVE);
	trlr->Prev = new;
	PREVFRONT(trlr) = new;
	/* trlr is the dummy block at the end of the arena
		make its Front field point to arenastart */
	PREVFRONT(((char *)trlr)+EPSILON) = new;
	
	if (A.arenaend) {
		/* attach new arena into old free list */
		new->Prev = A.arenaend;
		trlr->Next = A.arenaend->Next;
		A.arenaend->Next->Prev = trlr;
		A.arenaend->Next = new;
	}
	else {
		A.arenastart = new;
		trlr->Next = new;
		new->Prev = trlr;
	}
	if (new == (struct freehdr *)(((char *)A.arenaend)+EPSILON)) {
		/* coallesce adjacent arenas */
		PREVFRONT(((char *)trlr)+EPSILON) =
			PREVFRONT(((char *)A.arenaend)+EPSILON);
		t = A.arenaend;
		t->Size = setbits(EPSILON, 
				testbit(t->Size, PREACTIVE)
				| ACTIVE);
		t->Next->Prev = t->Prev;
		t->Prev->Next = t->Next;
		if (A.allocp==t)
			A.allocp = t->Next;
		A.arenaend = trlr;
		FlushFree((char *)t+sizeof (struct hdr));
	}
	else
		A.arenaend = trlr;
	if (CheckLevel>=5) 
		printarena("addarena");
	return (PREVFRONT(A.arenaend));
}


/*
	free

	Pascal version from Data Structures in Pascal

procedure free(p: ptr);
var
    t: ptr;
begin
    t := {"(p)+(p)^.(Size)"};   {(t)^ is the next record in (word) after (p)^}
    if not t^.Active then begin   {(t)^ is free}
        {merge (p)^ and (t)^, removing (t)^ from free list}
        t^.Next^.Prev := t^.Prev;
        t^.Prev^.Next := t^.Next;
        if t = free then
            free := t^.Prev;
        p^.Size := p^.Size + t^.Size;
    end
    else t^.PreActive := false;
    if not p^.PreActive then begin
        {merge (p)^ with physically preceding record, which is already
        on the free list}
        t := {"((p)-1)"}^.Front;
        t^.Size := t^.Size + p^.Size;
        {"(Front) pointer at end of (t)^"} := t;
    end
    else begin
        {put (p) on free list}
        p^.Active := false;
        {"(Front) pointer at end of (p)^"} := p;
        p^.Prev := free^.Prev;
        p^.Next := free;
        free^.Prev := p;
        p^.Prev^.Next := p
    end
end
*/

    void
procdef(free)(ap)
	struct hdr *ap;
{
	register struct freehdr *f = (struct freehdr *)(((char *)ap) - sizeof(struct hdr));
	register struct freehdr *t;

	char *return_address;
	GETCALLER(ap, return_address);


	/* Check that the address is witihin the arena.  
		This test allows free(NULL).
		Otherwise we really should abort, but fclose() frees things it shouldn't
		If the arena gets fragmented, these tests are inadequate 
		because they allow freeing things that are between
		segments of the arena.			
	*/
	if (A.allocp == 0 || ap == NULL || f < A.arenastart) {
		if (CheckLevel >= 4) 
			ferr1("free @ 0x%lx for NULL\n", return_address);
		return;
	}

	if (CheckLevel >= 4) 
		ferr3("free @ 0x%lx for block of %d bytes at 0x%lx enqueued\n",
			return_address, clearbits(f->Size), ap);
	t = NEXTBLOCK(f);
	if (t > A.arenaend) 	return;

	/* the block to be freed must be WORD aligned */
		ASSERT ("fa", (((long)f)&(WORD-1)) == 0);
	/* the block to be freed must be active */
		ASSERT ("fr", testbit(f->Size, ACTIVE));
	if (A.InProgress++) {
		botch ("Program error.  Tried 'free' while in malloc package.");
	}

	if (A.NQueued == MAXQUEUE) {
		/* queue is full, free the first and advance queue */
		FlushFree(A.QueuedToFree[0]);
#		if MAXQUEUE == 3
			A.QueuedToFree[0] = A.QueuedToFree[1];
			A.QueuedToFree[1] = A.QueuedToFree[2];
#		else
			{register i;
				for (i = 1; i < MAXQUEUE; i++)
					A.QueuedToFree[i-1] 
						= A.QueuedToFree[i];
			}
#		endif
		A.QueuedToFree[MAXQUEUE - 1] = ap;
	}
	else 
		A.QueuedToFree[A.NQueued++] = ap;

#ifdef IDENTIFY
	(ap-1)->caller = return_address;
	(ap-1)->seqno = A.SeqNo++;
#endif /* IDENTIFY */

	A.InProgress -- ;
}

static
FlushFree(ap)
struct hdr *ap;
{
	register struct freehdr *p = (struct freehdr *)(((char *)ap) - sizeof(struct hdr));
	register struct freehdr *t = NEXTBLOCK(p);
	register int siz = clearbits(p->Size);  /* retain p->Size */
	int preact = testbit(p->Size, PREACTIVE); /* retain p->PREACTIVE */

#ifdef MSTATS
Nfrees++;
#endif /* MSTATS */

	if (CheckLevel > 0) {
		ASSERT("F0", TestActive(p));
		if (CheckLevel >= 3) CheckAllocs("in free");
		else {
			register s = t->Size;
			ASSERT("F1", TestFree(A.allocp));
			if (/* free or a segment trailer */
					(!testbit(s, ACTIVE))
					 || clearbits(s) == 0) 
				ASSERT("F2", TestFree(t));
			else ASSERT("F3", TestActive(t));
			if (!preact) 
				ASSERT("F4", TestFree(PREVFRONT(p)));
		}
	}

	if (!testbit(t->Size, ACTIVE)) {  
		/* coalesce *p and *t */
#ifdef MSTATS
Ncombines++;
#endif /* MSTATS */
		t->Next->Prev = t->Prev;
		t->Prev->Next = t->Next;
		if (t==A.allocp) 
			A.allocp = t->Next;
		siz += clearbits(t->Size);
	}
	else 
		t->Size = clearbit(t->Size, PREACTIVE);

	if (!preact) {
		/* merge *p with preceding free block */
#ifdef MSTATS
Ncombines++;
#endif /* MSTATS */
		t = PREVFRONT(p);
		preact = testbit(t->Size, PREACTIVE);
		siz += clearbits(t->Size);
		p->Size = 0;  /* mark not active */
		p = t;
	}
	else {
		/* put *p on the free list */
		p->Prev = A.allocp->Prev;
		p->Next = A.allocp;
		p->Prev->Next = A.allocp->Prev = p;
	}

	p->Size = setbits(siz, preact);
	PREVFRONT((char *)p + siz) = p;
}

/*	realloc(p, nbytes) reallocates a block obtained from malloc()
 *	and (possibly) freed since last call of malloc()
 *	to have new size nbytes, and old content
 *	returns new location, or 0 on failure
 */

#ifndef _IBMR2
	char *
#else /* _IBMR2 */
	void *
#endif  /* _IBMR2 */
procdef(realloc)(ap, nbytes)
struct hdr *ap;			/* block to realloc */
unsigned nbytes;			/* desired size */
{
	register struct freehdr *h;
	struct freehdr *f;
	unsigned siz;		/* total size needed */
	unsigned newsz;		/* number of bytes in new area */
	unsigned oldsz;		/* number of bytes in old area */
	char *msg;		/* reason for failure */

	char *return_address;
	GETCALLER(ap, return_address);

	if (ap == NULL) {
		if (CheckLevel>=4) 
			ferr1 ("realloc @ 0x%lx for NULL block . . .\n", return_address);
		ap = (struct hdr *)malloc(nbytes);
		if (ap==NULL)
			{msg = "rx0"; goto nope;}
#ifdef IDENTIFY
		(ap-1)->caller = return_address;
		(ap-1)->seqno = A.SeqNo++;
#endif /* IDENTIFY */
		return((char *)ap);
	}

	h = (struct freehdr *)(((char *)ap) - sizeof(struct hdr));
	f = NEXTBLOCK(h);

	if (A.InProgress++) {
		botch ("Program error.  Tried 'realloc' while in malloc package.");
		A.InProgress--;
		return 0;
	}
	if (CheckLevel>=4) 
		ferr3 ("realloc @ 0x%lx changes size %d at 0x%lx . . .\n",
			return_address, clearbits(h->Size), ap);
	{register struct hdr **fp = &A.QueuedToFree[A.NQueued-1];
		for ( ; fp >= A.QueuedToFree;  fp--)
			if (*fp != ap)
				FlushFree(*fp);
	}
	A.NQueued = 0;

	if (! TestActive(h)) {
		msg = "rx1";   goto nope;
	}
	if (CheckLevel > 0) {
		if (CheckLevel>=3) CheckAllocs("in realloc");
		if (!testbit(f->Size, ACTIVE))
			ASSERT("r0", TestFree(f));
		ASSERT("r1", TestFree(A.allocp));
	}
	siz = (nbytes+sizeof(struct hdr)+(WORD-1))/WORD*WORD;
	if (siz<EPSILON) siz = EPSILON;
	if (!testbit(f->Size, ACTIVE) 
			&& clearbits(h->Size)+clearbits(f->Size) >= siz) {
		/* combine active block h with following free block f */
		f->Next->Prev = f->Prev;
		f->Prev->Next = f->Next;
		if (f==A.allocp) 
			A.allocp = f->Next;
		h->Size += clearbits(f->Size);   /* don't change bits in h->Size */
		f = NEXTBLOCK(h);
		f->Size = setbits(f->Size, PREACTIVE);
	}

	/* the remainder does not affect the free list or arena, 
		so InProgress protection is no longer needed 
		(though the assigns to PendingFree may cause
		a free operation to be skipped )      */
	A.InProgress --;

	newsz = (siz - sizeof(struct hdr));
	oldsz = (clearbits(h->Size)-sizeof(struct hdr));
	if (newsz <= oldsz) {
		/* is big enough;  can we release part? */
		if (oldsz-newsz>EPSILON) {
			h->Size = setbits(siz, 
				ACTIVE | testbit(h->Size, PREACTIVE));
			f = NEXTBLOCK(h);
			f->Size = setbits(oldsz-newsz, ACTIVE | PREACTIVE);
			A.QueuedToFree[A.NQueued++] = ((struct hdr *)f) + 1;
		}
	}
	else {
		/* malloc a new one and copy */
		struct hdr *oldap = ap;
		ap = (struct hdr *)malloc(nbytes);   /* ap pts to data, not hdr */
		if (ap==NULL)
			{msg = "rx5"; goto nope;}
		A.QueuedToFree[A.NQueued++] = oldap;
		bcopy((char *)oldap, (char *)ap, oldsz);
	}
	if (CheckLevel >= 4) 
		ferr2 (". . . to size %d at 0x%lx\n", nbytes, ap);
#ifdef IDENTIFY
	(ap-1)->caller = return_address;
	(ap-1)->seqno = A.SeqNo++;
#endif /* IDENTIFY */
	return((char *)ap);


nope:	if (CheckLevel>=4)
		ferr1(". . . fails at %s\n", msg);
	A.InProgress--;
	return NULL;
}



    static int
TestFree (f)
    register struct freehdr *f;
{
	if (testbit(f->Size,ACTIVE)) {
		/* had better be a segment trailer */
		register struct freehdr *t 
			= PREVFRONT((struct hdr *)(((char *)f)+EPSILON));
		return ((((long)f)&(WORD-1)) == 0
			&& f->Next->Prev == f
			&& f->Prev->Next == f
			&& testbit(t->Size, PREACTIVE)
			&& clearbits(f->Size) == 0
			&& t < f
			&& (A.arenahasbeenreset 
				|| (f <= A.arenaend && t >= A.arenastart)));
	}
	else {
		/* test as a regular free block */
		register struct freehdr *t = NEXTBLOCK(f);
		return ((((long)f)&(WORD-1)) == 0
			&& f->Next->Prev == f
			&& f->Prev->Next == f
			&& testbit(f->Size, PREACTIVE)
			&& f == PREVFRONT(t)
			&& ! testbit(t->Size, PREACTIVE)
			&& f->Size >= EPSILON
			&& (A.arenahasbeenreset 
				|| (t <= A.arenaend && f >= A.arenastart)));
	}
}

/* Test to see if a cell is active.
	The caller guarantees that the cell is not a segment trailer */
    static int
TestActive (f) 
    register struct freehdr *f;
{
	register struct freehdr *t = NEXTBLOCK(f);
	return    (((long)f)&(WORD-1)) == 0
		&& testbit(f->Size, ACTIVE)
		&& f->Size > EPSILON
		&& (A.arenahasbeenreset 
			|| (f >= A.arenastart
				&& t <= A.arenaend 
				&& testbit(t->Size, PREACTIVE)
		)	);
}


    static
printarena (m)
    char *m;
{
	int *x;
	int i;
	ferr4("%s:  arenastart %lx  arenaend %lx  allocp %lx\narena starts with", 
			m, A.arenastart, A.arenaend, A.allocp);
	for (x = (int *)A.arenastart, i=0; i < EPSILON/WORD; i++)
		ferr1("   %lx", *(x+i));
	ferr0 ("\nand ends with");
	for (x = (int *)A.arenaend-EPSILON, i = 0; i < EPSILON/WORD; i++)
		ferr1("   %lx", *(x+i));
	ferr0("\n");
}

#ifdef MSTATS
static int Nactive, Nfree, Nsegs;
static long int TotActive, TotFree;
static DumpBlocks = 0;
#endif /* MSTATS */

	long
CheckAllocs(m) char *m;
{
	int nfree=0;
	register struct freehdr *t;
	if (A.allocp==0 && AllocateInitialArena() == 0)
		return 0;

#ifdef MSTATS
	Nactive = Nfree = Nsegs = 0;
	TotActive = TotFree = 0;
	if (DumpBlocks) {
		register struct freehdr *a, *olda;
		printarena(m);
#ifndef IDENTIFY
		ferr0 ("\n     Front;        loc:       Size       Next      Prev\n");
#else /* IDENTIFY */
		ferr0 ("\n     Front;        loc:       Size     Caller      Seqno      Next       Prev\n");
#endif /* IDENTIFY */ 
		for (a = A.arenastart, olda = 0; 
				a>olda && a < A.arenaend; 
				a = (struct freehdr *)((char *)(olda=a) + clearbits(a->Size)) ) {
			ferr3("%10lx; %10lx: %10lx ", 
				(((struct freetrlr *)a)-1)->Front, a,a->Size);
#ifdef IDENTIFY
			ferr2("%10lx %10lx", a->caller, a->seqno);
#endif /* IDENTIFY */
			ferr2("%10lx %10lx\n", a->Next, a->Prev);
		}
		if (a<=olda) ferr1 ("Illegal pointer %lx\n", a);
	}
#endif /* MSTATS */
	t = A.allocp;
	do {
		nfree++;
		ASSERT("c1", t->Next->Prev==t);
		if (testbit(t->Size, ACTIVE)) {
			/* this is a segment trlr */
			struct hdr *nextblk
				= (struct hdr *)(((char *)t)+EPSILON);
			ASSERT("c2", clearbits(t->Size)==0);
			/* Segment must be a multiple
				of SEGGRAIN bytes: */
			ASSERT("c3", (((INT)(nextblk))-(INT)PREVFRONT(nextblk))
						 % SEGGRAIN == 0);
			nfree -= (CheckSegment(m, PREVFRONT(nextblk), t));
		}
		else 
			ASSERT("c4", t==PREVFRONT(NEXTBLOCK(t)));
		t = t->Next;
	} while (t!=A.allocp);
	ASSERT("c5", nfree==0);
#ifdef MSTATS
return(TotFree+1);   /* an application may want to know this */
#else /* MSTATS */
	return(1);
#endif /* MSTATS */
}
static CheckSegment(m, f, t) 
char *m;  
register struct freehdr *f, *t; 
{
	register int nfree = 1;  /* count the trailer now */
	register int wasactive = PREACTIVE;  /* value in first block */
	register struct freehdr *pref, *prepref=0;  /* for debugging */
#ifdef MSTATS
Nsegs++;
#endif /* MSTATS */
	pref = prepref;  /* init pref and forestall hc complaint by using prepref */
	for (; f<t; prepref = pref, pref = f, 
			f = (struct freehdr *)((char *)f 
				+ clearbits(f->Size))) {
		ASSERT("s1", clearbits(f->Size)>0);
		ASSERT("s2", wasactive==testbit(f->Size, PREACTIVE));
		if (!testbit(f->Size, ACTIVE)) 
			nfree++, wasactive=0;
		else 
			wasactive = PREACTIVE;
#ifdef MSTATS
		if (!testbit(f->Size, ACTIVE)) {
			Nfree++;
			TotFree += clearbits(f->Size);
		}
		else {
			Nactive++;
			TotActive += clearbits(f->Size);
		}
#endif /* MSTATS */
	}
	ASSERT("s3", f==t);
	return nfree;
}

#ifdef MSTATS
	void
mstats (m) char *m; 
{
    MallocStats(m, stderr);
}
	void
MallocStats(m, f) char *m; FILE *f;
{
	double TotSpace;
	long int TotHdrs;
	int ActHdrs;
	int fd = fileno(f);
#define fout4(fmt, a, b, c, d) {sprintf(msgbuf, fmt, a, b, c, d); \
				write(fd, msgbuf, strlen(msgbuf));}

	fflush(f);
	fout4("\nmstats - %s\n", m, 0, 0, 0);

	if (CheckLevel>=5) DumpBlocks=1;
	CheckAllocs("");  /* so Nsegs != 0 */
	DumpBlocks = 0;
	TotSpace = TotActive + TotFree + Nsegs*EPSILON;
	ActHdrs = Nactive*sizeof(struct hdr);
	TotActive -= ActHdrs;
	TotHdrs = ActHdrs + Nsegs*EPSILON;

	fout4 ("%-10s%10s%10s%10s\n", "", "Active", "Free", "Segments");
	fout4 ("%-10s%10d%10d%10d\n", "requests", Nrequests, Nfrees, Nsbrk);
	fout4 ("%-10s%10d%10d%10d\n", "current", Nactive, Nfree, Nsegs);
	fout4 ("%-10s%10d%10d%10d\n",
		"avg size", (Nactive ? TotActive/Nactive : 0), 
		(Nfree ? TotFree/Nfree : 0), 
		(int)(TotSpace/Nsegs) );
	fout4 ("%-10s%10.1f%10.3f\n",
		"avg ops", 
		(Nrequests ? ((float)Nscans)/Nrequests : 0),
		(Nfrees ? ((float)Ncombines)/Nfrees : 0), 0); 
	fout4 ("%-10s%9.1f%%%9.1f%%\n",
		"% space", 
		100.0*TotActive/TotSpace,
		100.0*TotFree/TotSpace, 0);
	fout4 ("%s %d   %s%5.1f%%\n\n",
		"total space", (int)TotSpace, 
		"headers", 100.0*TotHdrs/TotSpace);
#undef fout4
}
	void
resetmstats() {
    Nscans = Nrequests = Nsbrk = Ncombines = Nfrees = 0;
}
#else /* MSTATS */
	void  MallocStats() 	{}
	void  mstats() 		{}
	void  resetmstats() 	{}
#endif /* MSTATS */


int  (*
SetM0Handler (p))() int (*p)(); {
    int (*t)() = M0Handler;
    M0Handler = (p==0) ? DefaultM0Handler : p;
    return t;
}

static int DefaultM0Handler (size) {
	AbortFullMessage(size);
	return (0);
}


SetMallocCheckLevel (level) int level; {
	int old = CheckLevel;
	CheckLevel = level;
	return old;
}

	void
NewMallocArena() {
	A.arenastart = A.arenaend = A.allocp = 0;
	A.NQueued = 0;
	A.InProgress = A.RecurringM0 = 0;
	A.arenahasbeenreset++;
	/* at present, it does not reset seqno */
}

    struct arenastate *
GetMallocArena () 
{
	return (&A);
}

    int
MallocStrategy(new)
    int new;
{
	char ret = A.MallocStrategy;
	A.MallocStrategy = new;
	return ret;
}


static 	void
AbortFullMessage (nbytes) register unsigned int nbytes; {
	register siz, segbytes;
	char buf[200];

	siz = (nbytes+sizeof(struct hdr)+(WORD-1))/WORD*WORD;
	if (siz<EPSILON) siz = EPSILON;
	segbytes = ((siz+2*EPSILON+(SEGGRAIN-1)) 
			/ SEGGRAIN) * SEGGRAIN;

	sprintf(buf, "Malloc abort.  Attempt to allocate %d bytes would cause arena (now having %d bytes) to exceed the currently available swap space.\n",
			nbytes, (A.arenaend - A.arenastart + 1) * sizeof(*A.arenaend));
	if (FILE_NEEDS_FLUSH(stdout)) fflush(stdout);
	if (FILE_NEEDS_FLUSH(stderr)) fflush(stderr);
	write(2, buf, strlen(buf));
}



/* dummies for rt and some other systems */
#if defined(bsdi)
int __realloc_srchlen = 0;
#endif
int realloc_srchlen = 0;
void morecore() {}
/* end of dummies for rt */


/* dummy declarations for Sun4.3 v3.4  / SystemV */

#define INIT_MXFAST	0
#define INIT_NLBLKS	100
#define INIT_GRAIN	WORD
	struct mallinfo __mallinfo = {
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0,			/* basic info */
		INIT_MXFAST,  INIT_NLBLKS,  INIT_GRAIN,  /* mallopt options */
		0, 0, 0
	};
	char	*_root = NULL;		/* root of free space list */
	char	*_lbound = NULL;		/* lower bound of heap */
	char	*_ubound = NULL;	/* upper bound of heap */

/*  _malloc_at_addr
	Allocate an nbyte segment at addr, if possible.
	Returns NULL to indicate failure
*/
    char *
_malloc_at_addr(addr, nbytes)
	char *addr;
	unsigned nbytes;
{
	return(NULL);
}

#ifdef	DEBUG
 
/*  malloc_debug
	Controls the level of error diagnosis and consistency checking
	done by malloc() and free().  Returns the previous level of error reporting.  
	This version differs slightly from that of Sun:
	Sun: 
 		0:  malloc() and free() return 0 if error detected in arguments
		    (errno is set to EINVAL)
		1:  malloc() and free() abort if errors detected in arguments
		2:  same as 1, but scan entire heap for errors on every call
	  	     to malloc() or free()
	Now:	All abort for errors.
		0: Minimal testing of arguments. 
		1: Local validity checks in the free list for malloc() and free().
		2: Scan entire free list on every malloc() and free()
	*/
    int
malloc_debug(level)
	int level;
{
	int old_level;
	old_level = CheckLevel;
	CheckLevel = level;
	return old_level;
}

/*   malloc_verify()
	Checks all blocks in the arena.  Returns 1 if the heap contains no
	detectably bad blocks; otherwise it dumps core.
	(The real malloc_verify returns 0 for failure.)   */
    int
malloc_verify()
{
	CheckAllocs("malloc_verify");
	/* CheckAllocs will dump core on error, 
		so we always succeed if it returns */
	return(1);
}
#endif /* DEBUG */

/* end of dummies for Sun4.3 v3.4  / SystemV */
