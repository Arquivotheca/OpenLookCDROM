/* ********************************************************************** *\
 *         Copyright IBM Corporation 1988,1991 - All Rights Reserved      *
 *        For full copyright information see:'andrew/config/COPYRITE'     *
\* ********************************************************************** */
/* $Disclaimer: 
 * Permission to use, copy, modify, and distribute this software and its 
 * documentation for any purpose is hereby granted without fee, 
 * provided that the above copyright notice appear in all copies and that 
 * both that copyright notice, this permission notice, and the following 
 * disclaimer appear in supporting documentation, and that the names of 
 * IBM, Carnegie Mellon University, and other copyright holders, not be 
 * used in advertising or publicity pertaining to distribution of the software 
 * without specific, written prior permission.
 * 
 * IBM, CARNEGIE MELLON UNIVERSITY, AND THE OTHER COPYRIGHT HOLDERS 
 * DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE, INCLUDING 
 * ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS.  IN NO EVENT 
 * SHALL IBM, CARNEGIE MELLON UNIVERSITY, OR ANY OTHER COPYRIGHT HOLDER 
 * BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY 
 * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
 * WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS 
 * ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE 
 * OF THIS SOFTWARE.
 *  $ */

#ifndef NORCSID
static char rcsid[] = "$Header: /afs/cs.cmu.edu/project/atk-dist/auis-6.3/overhead/malloc/RCS/plumber.ci,v 2.18 1993/09/30 20:28:09 rr2b Exp $ ";
#endif 

/*
    plumber.c - check malloc arena for coreleaks

Uses the IDENTIFY version of malloc, which stores the return address in the 
header of each block.  

Produces a table showing a description of the set of blocks produced from each calling address.


	WARNING:  if an application does sbrk's of its own, the arena
	will be in multiple segments.  The code here only processes the last of these.

*/
#include <andrewos.h>
#include <stdio.h>
#include <amalloc.h>
#include <imalloc.h>
#include <getcallr.h>

#ifndef IDENTIFY
	void
plumber () {
}

#else /* IDENTIFY */

static struct callerdata {
	struct callerdata *left, *right;
	char *caller;
	int nblks;
	long totsize;
	int loseq, hiseq, losize, hisize;
} *data;

	void
plumber (outf) 
    FILE *outf;
{
	register struct arenastate *A = GetMallocArena();
	register int nextseq = A->SeqNo;
	register struct freehdr *t, *f;
	char *foo = malloc(1);	/* to Flush the Free list */

	CheckAllocs("plumber start");

	/* scan free list to find segment trailers and scan each segment */
	data = NULL;
	t = A->allocp;
	do {
		if (testbit(t->Size, ACTIVE)) {
			/* this is a segment trlr;  scan segment for active blocks */
			f = PREVFRONT((struct hdr *)(((char *)t)+EPSILON));
			for (; f<t; f = (struct freehdr *)((char *)f 
					+ clearbits(f->Size))) 
				if (testbit(f->Size, ACTIVE)
						&& f->seqno<nextseq) 
					storedata(f, &data);
		}
		t = t->Next;
	} while (t!=A->allocp);

	/* output data from tree */
	fprintf(outf, "%10s%10s%10s%20s%20s\n\n", 
		"caller", "#blocks", "tot size", "size range    ", "seq# range     ");
	printandfreedata(data, outf);
	free(foo);
}

    static
storedata (p, d)
    register struct hdr *p;
    struct callerdata **d;
{
    register struct callerdata *td = *d;
	if (td==NULL) {
		*d = td = (struct callerdata *)malloc(sizeof(struct callerdata));
		if (td == NULL) return;	/* no more room to store data */
		td->caller = p->caller;
		td->nblks = 1;
		td->loseq = td->hiseq = p->seqno;
		td->losize = td->hisize = td->totsize = clearbits(p->Size);
	}
	else if (p->caller < td->caller)
		storedata (p, &(td->left));
	else if (p->caller > td->caller)
		storedata (p, &(td->right)); 
	else {    /* == */
		int size = clearbits(p->Size);
		td->nblks++;
		if (p->seqno<td->loseq)  td->loseq = p->seqno;
		else if (p->seqno>td->hiseq)  td->hiseq = p->seqno;
		if (size<td->losize)  td->losize = size;
		else if (size>td->hisize)  td->hisize = size;
		td->totsize += size;
	}
}

    static
printandfreedata(d, outf)
    register struct callerdata *d;
    FILE *outf;
{
	if (d) {
		printandfreedata(d->left, outf);
		fprintf (outf, "0x%-8lx%10d%10d%9d-%-10d%9d-%-10d\n",
			d->caller, d->nblks, d->totsize, 
			d->losize, d->hisize, d->loseq, d->hiseq);
		printandfreedata(d->right, outf);
		free(d);
	}
}

/*
 * calloc - allocate and clear memory block
 */

#define CHARPERINT (sizeof(int)/sizeof(char))
#define NULL 0

#ifndef _IBMR2
	char *
#else /* _IBMR2 */
	void *
#endif /* _IBMR2 */
calloc(num, size)
	unsigned num, size;
{
#define FIRSTARG	num
	register char *mp;
#if ( defined(vax) | defined(mips) )
	register char **mpp;
#endif /* vax | mips */
	register int *q;
	register m;

	num *= size;
	mp = malloc(num);
	if (mp == NULL)
		return(NULL);

	/* Stamp pc of caller of calloc in malloc header */
	GETCALLER(num, (((struct hdr *)mp)-1)->caller);

	q = (int *) mp;
	m = (num+CHARPERINT-1)/CHARPERINT;
	while (--m>=0)
		*q++ = 0;
	return (mp);
}

	void
cfree(p, num, size)
	char *p;
	unsigned num, size;
{

	free(p);
}
#endif /* IDENTIFY */
