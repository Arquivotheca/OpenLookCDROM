#include <Library.tmpl>



# Material from original Makefile

#
# Copyright 1992 by Jutta Degener and Carsten Bormann, Technische
# Universitaet Berlin.  See the accompanying file "COPYRIGHT" for
# details.  THERE IS ABSOLUTELY NO WARRANTY FOR THIS SOFTWARE.
#


# Machine dependent flags you must configure to port

SASR	= -DSASR
######### Define SASR if >> is a signed arithmetic shift (-1 >> 1 == -1)

MULHACK = -DUSE_FLOAT_MUL
######### Define this if your host multiplies floats faster than integers,
######### e.g. on a SPARCstation.

FAST	= -DFAST
######### Define together with USE_FLOAT_MUL to enable the GSM library's
######### approximation option for incorrect, but good-enough results.


# Choose a compiler.  The code works both with ANSI and K&R-C.
# Use -DNeedFunctionPrototypes to compile with, -UNeedFunctionPrototypes to
# compile without, function prototypes in the header files.
#
# You can use the -DSTUPID_COMPILER to circumvent some compilers'
# static limits regarding the number of subexpressions in a statement.

#CC		= cc

# Flags

DEBUG	= -DNDEBUG
######### Remove -DNDEBUG to enable assertions.

#CFLAGS	= $(CCFLAGS) $(SASR) $(DEBUG) $(MULHACK) $(FAST) $(CCINC) -I.
######### It's $(CC) $(CFLAGS)

# now resume Imakefile

        DEFINES = $(SASR) $(DEBUG) $(MULHACK) $(FAST)
       INCLUDES = -I. 
   INSTALLFLAGS = $(INSTINCFLAGS)
        HEADERS = config.h gsm.h private.h proto.h unproto.h
        LINTLIBS =
           SRCS = add.c	\
		code.c		\
		debug.c		\
		decode.c	\
		long_term.c	\
		lpc.c		\
		preprocess.c	\
		rpe.c		\
		gsm_destroy.c	\
		gsm_decode.c	\
		gsm_encode.c	\
		gsm_explode.c	\
		gsm_implode.c	\
		gsm_create.c	\
		gsm_print.c	\
		gsm_option.c	\
		short_term.c	\
		table.c



OBJS1 = 	add.o		\
		code.o		\
		debug.o		\
		decode.o	\
		long_term.o	\
		lpc.o		\
		preprocess.o	\
		rpe.o		\
		gsm_destroy.o	\
		gsm_decode.o	\
		gsm_encode.o	\
		gsm_explode.o	\
		gsm_implode.o	\
		gsm_create.o	\
		gsm_print.o	\
		gsm_option.o	\
		short_term.o	\
		table.o

OBJS = $(OBJS1) $(OBJS2)

all::

NormalLibraryTarget2(gsm,$(OBJS1),$(OBJS2))
InstallLibrary(gsm,$(USRLIBDIR))

LintLibraryTarget(gsm,*.c)

BuildIncludes($(HEADERS),.,.)
InstallMultiple($(HEADERS),$(INCDIR))

InstallLintLibrary(gsm,$(LINTLIBDIR))


#if ProfileLibAudio && ProfileLibAudioArchive
ProfiledLibraryTarget(gsm,$(OBJS))
AliasedLibraryTarget(gsm_p,AFConvert_p)
InstallLibrary(gsm_p,$(USRLIBDIR))
#endif

#if DebugLibAudio && DebugLibAudioArchive
DebuggedLibraryTarget(gsm,$(OBJS))
#endif

#if HasSaberC
saber_src:
	/**/#load $(CFLAGS) $(CONN_DEFINES) $(EXT_DEFINES) \
		$(SRCS)
#endif

clean::

depend::

DependTarget()


/**/# structure alignment errors can safely be ignored.
/**/# complaints about qevent can be ignored too.

NormalLintTarget(*.c)

# stuff related to gsm







