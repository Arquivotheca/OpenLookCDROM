.ds xL AFlib \- C Language AF Interface
.na
.de Ds
.nf
.\\$1D \\$2 \\$1
.ft 1
.\".ps \\n(PS
.\".if \\n(VS>=40 .vs \\n(VSu
.\".if \\n(VS<=39 .vs \\n(VSp
..
.de De
.ce 0
.if \\n(BD .DF
.nr BD 0
.in \\n(OIu
.if \\n(TM .ls 2
.sp \\n(DDu
.fi
..
.de FD
.LP
.KS
.TA .5i 3i
.ta .5i 3i
.nf
..
.de FN
.fi
.KE
.LP
..
.de IN		\" send an index entry to the stderr
.tm \\n%:\\$1:\\$2:\\$3
..
.de C{
.KS
.nf
.D
.\"
.\"	choose appropriate monospace font
.\"	the imagen conditional, 480,
.\"	may be changed to L if LB is too
.\"	heavy for your eyes...
.\"
.ie "\\*(.T"480" .ft L
.el .ie "\\*(.T"300" .ft L
.el .ie "\\*(.T"202" .ft PO
.el .ie "\\*(.T"aps" .ft CW
.el .ft R
.ps \\n(PS
.ie \\n(VS>40 .vs \\n(VSu
.el .vs \\n(VSp
..
.de C}
.DE
.R
..
.de Pn
.ie t \\$1\fB\^\\$2\^\fR\\$3
.el \\$1\fI\^\\$2\^\fP\\$3
..
.de PN
.ie t \fB\^\\$1\^\fR\\$2
.el \fI\^\\$1\^\fP\\$2
..
.de NT
.ne 7
.ds NO Note
.if \\n(.$>$1 .if !'\\$2'C' .ds NO \\$2
.if \\n(.$ .if !'\\$1'C' .ds NO \\$1
.ie n .sp
.el .sp 10p
.TB
.ce
\\*(NO
.ie n .sp
.el .sp 5p
.if '\\$1'C' .ce 99
.if '\\$2'C' .ce 99
.in +5n
.ll -5n
.R
..
.		\" Note End -- doug kraft 3/85
.de NE
.ce 0
.in -5n
.ll +5n
.ie n .sp
.el .sp 10p
..
.ny0
.TH AFIfEvent 3 "Release 1" "AF Version 3" 
.SH NAME
\fBAFIfEvent, AFCheckIfEvent, AFPeekIfEvent\fP \
\- check the event queue with a predicate procedure
.SH SYNTAX
\fB#include <AF/AFlib.h>\fP
.LP
void \fBAFIfEvent\fP (AFAudioConn \fI*aud\fP, AFEvent \fI*event_return\fP, 
.br
                                        ABool (*\fIpredicate\fP)(), char \fI*arg\fP)
.LP
ABool \fBAFCheckIfEvent\fP (AFAudioConn \fI*aud\fP, AFEvent \fI*event_return\fP,
.br
                                        ABool (*\fIpredicate\fP)(), char \fI*arg\fP)
.LP
void \fBAFPeekIfEvent\fP (AFAudioConn \fI*aud,\fP AFEvent \fI*event_return\fP,
.br
                                        ABool \fI(*predicate)\fP(), char \fI*arg)\fP
.SH ARGUMENTS
.IP \fIarg\fP 1i
Specifies the user-supplied argument that will be passed to the predicate procedure.
.IP \fIaud\fP 1i
Specifies the connection to the AF server.
.IP \fIevent_return\fP 1i
Returns either a copy of or the matched event's associated structure.
.IP \fIpredicate\fP 1i
Specifies the procedure that is to be called to determine
if the next event in the queue matches what you want.
.SH DESCRIPTION
The
.PN AFIfEvent
function completes only when the specified predicate
procedure returns 
.PN ATrue 
for an event, 
which indicates an event in the queue matches.
.PN AFIfEvent
flushes the output buffer if it blocks waiting for additional events.
.PN AFIfEvent
removes the matching event from the queue 
and copies the structure into the client-supplied
.PN AFEvent
structure.
.LP
When the predicate procedure finds a match,
.PN AFCheckIfEvent
copies the matched event into the client-supplied
.PN AFEvent
structure and returns 
.PN ATrue .
(This event is removed from the queue.)
If the predicate procedure finds no match,
.PN AFCheckIfEvent
returns
.PN AFalse ,
and the output buffer will have been flushed.
All earlier events stored in the queue are not discarded.
.LP
The
.PN AFPeekIfEvent
function returns only when the specified predicate
procedure returns 
.PN ATrue
for an event.
After the predicate procedure finds a match,
.PN AFPeekIfEvent
copies the matched event into the client-supplied
.PN AFEvent
structure without removing the event from the queue.
.PN AFPeekIfEvent
flushes the output buffer if it blocks waiting for additional events.
.SH "SEE ALSO"
AFNextEvent(3), AF(1)

.SH BUGS
If you encounter a \fBreproducible\fP bug, please 
submit a problem report to (af-bugs@crl.dec.com).
.SH COPYRIGHT
Copyright 1990-1994, Digital Equipment Corporation.
.br
See \fIAF(1)\fP for a full statement of rights and permissions.
.SH AUTHORS
Digital Cambridge Research Lab
