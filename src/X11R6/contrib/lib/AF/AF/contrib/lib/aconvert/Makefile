# Makefile generated by imake - do not edit!
# $XConsortium: imake.c,v 1.65 91/07/25 17:50:17 rws Exp $

###########################################################################
# Makefile generated from "Imake.tmpl" and <Imakefile>
# $RCS: Imake.tmpl,v 1.77 89/12/18 17:01:37 jim Exp $
#
# Platform-specific parameters may be set in the appropriate .cf
# configuration files.  Site-wide parameters may be set in the file
# site.def.  Full rebuilds are recommended if any parameters are changed.
#
# If your C preprocessor doesn't define any unique symbols, you'll need
# to set BOOTSTRAPCFLAGS when rebuilding imake (usually when doing
# "make Makefile", "make Makefiles", or "make World").
#
# If you absolutely can't get imake to work, you'll need to set the
# variables at the top of each Makefile as well as the dependencies at the
# bottom (makedepend will do this automatically).
#

# -------------------------------------------------------------------------
# site-specific configuration parameters that need to come before
# the platform-specific parameters - edit site.def to change

# -------------------------------------------------------------------------
# platform-specific configuration parameters - edit ultrix.cf to change

# -------------------------------------------------------------------------
# site-specific configuration parameters that go after
# the platform-specific parameters - edit site.def to change

            SHELL = 	/bin/sh

              TOP = ../../../
      CURRENT_DIR = ./lib/aconvert

               AR = ar cq
  BOOTSTRAPCFLAGS =
               CC = cc

         COMPRESS = CompressCmd
              CPP = /lib/cpp $(STD_CPP_DEFINES)
    PREPROCESSCMD = cc -E $(STD_CPP_DEFINES)
          INSTALL = install
               LD = ld
             LINT = lint
      LINTLIBFLAG = -o
         LINTOPTS = -ax
               LN = ln -s
             MAKE = make
               MV = mv
               CP = cp
           RANLIB = ranlib
  RANLIBINSTFLAGS =
               RM = rm -f
     STD_INCLUDES =
  STD_CPP_DEFINES =
      STD_DEFINES =
 EXTRA_LOAD_FLAGS =
  EXTRA_LIBRARIES = -ldnet
             TAGS = ctags

    PROTO_DEFINES =

     INSTPGMFLAGS =

     INSTBINFLAGS = -m 0755
     INSTUIDFLAGS = -m 4755
     INSTLIBFLAGS = -m 0664
     INSTINCFLAGS = -m 0444
     INSTMANFLAGS = -m 0444
     INSTDATFLAGS = -m 0444
    INSTKMEMFLAGS = -m 4755

          DESTDIR =

     TOP_INCLUDES = -I$(TOP)

      CDEBUGFLAGS = -g
        CCOPTIONS = -Wf,-XNh2000 -Olimit 2000
      COMPATFLAGS =

      ALLINCLUDES = $(STD_INCLUDES) $(TOP_INCLUDES) $(INCLUDES) $(EXTRA_INCLUDES)
       ALLDEFINES = $(ALLINCLUDES) $(STD_DEFINES) $(PROTO_DEFINES) $(DEFINES) $(COMPATFLAGS)
           CFLAGS = $(CDEBUGFLAGS) $(CCOPTIONS) $(ALLDEFINES)
        LINTFLAGS = $(LINTOPTS) -DLINT $(ALLDEFINES)
           LDLIBS = $(SYS_LIBRARIES) $(EXTRA_LIBRARIES)
        LDOPTIONS = $(CDEBUGFLAGS) $(CCOPTIONS)
   LDCOMBINEFLAGS = -X -r

        MACROFILE = ultrix.cf
           RM_CMD = $(RM) *.CKP *.ln *.BAK *.bak *.o core errs ,* *~ *.a .emacs_* tags TAGS make.log MakeOut

    IMAKE_DEFINES =

         IRULESRC = $(CONFIGSRC)
        IMAKE_CMD = $(NEWTOP)$(IMAKE) -I$(NEWTOP)$(IRULESRC) $(IMAKE_DEFINES)

     ICONFIGFILES = $(IRULESRC)/Imake.tmpl $(IRULESRC)/Imake.rules \
			$(IRULESRC)/Project.tmpl $(IRULESRC)/site.def \
			$(IRULESRC)/$(MACROFILE) $(EXTRA_ICONFIGFILES)

###########################################################################
# AudioFile Build Parameters

###########################################################################
# AudioFile make variables; this need to be coordinated with rules

          PATHSEP = /
        USRLIBDIR = $(DESTDIR)/crl/audio/lib.mips/
           BINDIR =  $(DESTDIR)/crl/audio/bin.mips/
          INCROOT = $(DESTDIR)/crl/audio/include
     BUILDINCROOT = $(TOP)
      BUILDINCDIR = $(BUILDINCROOT)/AF
      BUILDINCTOP = ..
           INCDIR = $(INCROOT)/AF
           ADMDIR = $(DESTDIR)/usr/adm
           LIBDIR = $(USRLIBDIR)/AF
        CONFIGDIR = $(LIBDIR)/config
       LINTLIBDIR = $(USRLIBDIR)/lint

          MANPATH = $(DESTDIR)/crl/audio/man/
    MANSOURCEPATH = $(MANPATH)/man
        MANSUFFIX = 1
     LIBMANSUFFIX = 3
           MANDIR = $(MANSOURCEPATH)1
        LIBMANDIR = $(MANSOURCEPATH)3
    SOAUDIOLIBREV = 0.0

           LODDIR = /usr/local/lib/AF/lodfiles
      DSPTOOLROOT = /usr/local

            IMAKE = $(IMAKESRC)/imake
           DEPEND = $(DEPENDSRC)/makedepend
        MKDIRHIER = 	/bin/sh $(SCRIPTSRC)/mkdirhier.sh

        CONFIGSRC = $(TOP)/config
        CLIENTSRC = $(TOP)/clients
          DEMOSRC = $(TOP)/demos
           LIBSRC = $(TOP)/lib
       INCLUDESRC = $(TOP)/AF
        SERVERSRC = $(TOP)/server
          UTILSRC = $(TOP)/util
        SCRIPTSRC = $(UTILSRC)/scripts
       EXAMPLESRC = $(TOP)/examples
       CONTRIBSRC = $(TOP)/contrib
           DOCSRC = $(TOP)/doc
        DEPENDSRC = $(UTILSRC)/makedepend
         IMAKESRC = $(CONFIGSRC)
         AFLIBSRC = $(LIBSRC)/AF
     AFUTILLIBSRC = $(LIBSRC)/AFUtil
     EXTENSIONSRC = $(TOP)/extensions

        UIDLIBDIR = $(USRLIBDIR)/uid
        MOTIFBASE = /usr/lib/DXM
           UILSRC = $(MOTIFBASE)/clients/uil
              UIL = $(UILSRC)/uil

     LINTAUDIOLIB =  $(AFLIBSRC)/llib-lAF.ln
        AFLIBONLY =  -L$(AFLIBSRC) -lAF
         DEPAFLIB =  $(AFLIBSRC)/libAF.a
        AFUTILLIB =  -L$(AFUTILLIBSRC) -lAFUtil
     DEPAFUTILLIB =  $(AFUTILLIBSRC)/libAFUtil.a
  DEPEXTENSIONLIB =  $(EXTENSIONSRC)/lib/libAFext.a
     EXTENSIONLIB =  -L$(EXTENSIONSRC)/lib -lAFext
            AFLIB = $(EXTENSIONLIB) $(AFLIBONLY)

         DEPLIBS = $(LOCAL_LIBRARIES)
         DEPLIBS1 = $(DEPLIBS)
         DEPLIBS2 = $(DEPLIBS)
         DEPLIBS3 = $(DEPLIBS)

###########################################################################
# Imake rules for building libraries, programs, scripts, and data files
# rules:  $XConsortium: Imake.rules,v 1.67 89/12/18 17:14:15 jim Exp $

###########################################################################
# start of Imakefile

# $XConsortium: Library.tmpl,v 1.2 89/10/20 10:19:18 jim Exp $

         CC = cc
  CCOPTIONS = -Wf,-XNh2000 -Olimit 2000
STD_DEFINES =
CDEBUGFLAGS = -O

SUBDIRS = sphere

all::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
		(cd $$i ; echo "making" all "in $(CURRENT_DIR)/$$i..."; \
			$(MAKE) $(MFLAGS) 'CDEBUGFLAGS=$(CDEBUGFLAGS)' all); \
	done

depend::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
		(cd $$i ; echo "depending" "in $(CURRENT_DIR)/$$i..."; \
			$(MAKE) $(MFLAGS)   depend); \
	done

       INCLUDES = -I.
   INSTALLFLAGS = $(INSTINCFLAGS)
       LINTLIBS = $(LINTXLIB)
         SPHERE = sphere
           SRCS = chans.c file.c aconvert.c init.c adpcm.c \
                  rasta.c fft.c ima.c
           OBJS = chans.o file.o aconvert.o init.o adpcm.o \
                  rasta.o fft.o ima.o $(SPHERE)/sp_utils.o \
		  $(SPHERE)/spinput.o $(SPHERE)/spoutput.o \
		  $(SPHERE)/stdfield.o $(SPHERE)/spmalloc.o
        HEADERS = aconvert.h aconvertP.h
      MANSUFFIX = 3

all::

.c.o:
	$(RM) $@
	$(CC) -c $(CFLAGS) $*.c

all:: libaconvert.a

libaconvert.a: $(OBJS)
	$(RM) $@
	$(AR) $@ $(OBJS)
	$(RANLIB) $@

lintlib:: llib-laconvert.ln

llib-laconvert.ln: $(SRCS)
	$(RM) $@
	$(LINT) $(LINTLIBFLAG)aconvert $(LINTFLAGS) $(SRCS)

install:: libaconvert.a
	$(INSTALL) -c $(INSTLIBFLAGS) libaconvert.a $(USRLIBDIR)
	$(RANLIB) $(RANLIBINSTFLAGS) $(USRLIBDIR)/libaconvert.a

install.ln:: llib-laconvert.ln
	$(INSTALL) -c $(INSTLIBFLAGS) llib-laconvert.ln $(LINTLIBDIR)

includes::
	$(MKDIRHIER) $(BUILDINCDIR)/.
	@(set -x; cd $(BUILDINCDIR)/.; for i in $(HEADERS); do \
		$(RM) $$i; \
		$(LN) $(BUILDINCTOP)/contrib/$(CURRENT_DIR)/$$i .; \
	done)

install:: $(HEADERS)
	@case '${MFLAGS}' in *[i]*) set +e;; esac; \
	for i in $(HEADERS); do \
		(set -x; $(INSTALL) -c $(INSTALLFLAGS) $$i $(INCDIR)); \
	done

install.man:: AConvert.man
	$(INSTALL) -c $(INSTMANFLAGS) AConvert.man $(LIBMANDIR)/AConvert.$(MANSUFFIX)

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename  $(LIBMANDIR)`/AConvert.$(MANSUFFIX) > $${TMP}; \
	for i in  AConvertError AConvertAllocInit; do \
	   (set -x; \
	   $(INSTALL) -c $(INSTMANFLAGS) $${TMP}  $(LIBMANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename  $(LIBMANDIR)`/AConvert.$(MANSUFFIX) > $${TMP}; \
	for i in  AConvertInit AConvertFiles; do \
	   (set -x; \
	   $(INSTALL) -c $(INSTMANFLAGS) $${TMP}  $(LIBMANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

install.man::
	@(TMP=/tmp/tmp.$$$$; \
	$(RM) $${TMP}; \
	echo .so `basename  $(LIBMANDIR)`/AConvert.$(MANSUFFIX) > $${TMP}; \
	for i in  AConvertStats AConvertClose; do \
	   (set -x; \
	   $(INSTALL) -c $(INSTMANFLAGS) $${TMP}  $(LIBMANDIR)/$$i.$(MANSUFFIX)); \
	done; \
	$(RM) $${TMP})

depend:: $(DEPEND)

$(DEPEND):
	@echo "checking $@ over in $(DEPENDSRC) first..."; \
	cd $(DEPENDSRC); $(MAKE); \
	echo "okay, continuing in $(CURRENT_DIR)"

depend::
	$(DEPEND) -s "# DO NOT DELETE" -- $(ALLDEFINES) -- $(SRCS)

lint::
	$(LINT) $(LINTFLAGS) $(SRCS) $(LINTLIBS)
lint1::
	$(LINT) $(LINTFLAGS) $(FILE) $(LINTLIBS)

###########################################################################
# common rules for all Makefiles - do not edit

emptyrule::

clean::
	$(RM_CMD) "#"*

Makefile:: $(IMAKE)

$(IMAKE):
	@(cd $(IMAKESRC); if [ -f Makefile ]; then \
	echo "checking $@ in $(IMAKESRC) first..."; $(MAKE) all; else \
	echo "bootstrapping $@ from Makefile.ini in $(IMAKESRC) first..."; \
	$(MAKE) -f Makefile.ini BOOTSTRAPCFLAGS=$(BOOTSTRAPCFLAGS); fi; \
	echo "okay, continuing in $(CURRENT_DIR)")

Makefile::
	-@if [ -f Makefile ]; then \
		echo "	$(RM) Makefile.bak; $(MV) Makefile Makefile.bak"; \
		$(RM) Makefile.bak; $(MV) Makefile Makefile.bak; \
	else exit 0; fi
	$(IMAKE_CMD) -DTOPDIR=$(TOP) -DCURDIR=$(CURRENT_DIR)

tags::
	$(TAGS) -w *.[ch]
	$(TAGS) -xw *.[ch] > TAGS

saber:
	#load $(ALLDEFINES) $(SRCS)

osaber:
	#load $(ALLDEFINES) $(OBJS)

###########################################################################
# rules for building in SUBDIRS - do not edit

install::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
		(cd $$i ; echo "installing" "in $(CURRENT_DIR)/$$i..."; \
			$(MAKE) $(MFLAGS) DESTDIR='$(DESTDIR)' install); \
	done

install.man::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
		(cd $$i ; echo "installing man pages" "in $(CURRENT_DIR)/$$i..."; \
			$(MAKE) $(MFLAGS) DESTDIR='$(DESTDIR)' install.man); \
	done

clean::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
		(cd $$i ; echo "cleaning" "in $(CURRENT_DIR)/$$i..."; \
			$(MAKE) $(MFLAGS) RM_CMD='$(RM_CMD)' clean); \
	done

tags::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
		(cd $$i ; echo "tagging" "in $(CURRENT_DIR)/$$i..."; \
			$(MAKE) $(MFLAGS) TAGS='$(TAGS)' tags); \
	done

Makefiles::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
		echo "making Makefiles in $(CURRENT_DIR)/$$i..."; \
		case "$$i" in \
		./?*/?*/?*/?*) newtop=../../../../ sub=subsubsubsub;; \
		./?*/?*/?*) newtop=../../../ sub=subsubsub;; \
		./?*/?*)    newtop=../../ sub=subsub;; \
		./?*)       newtop=../ sub=sub;; \
		*/?*/?*/?*)    newtop=../../../../ sub=subsubsubsub;; \
		*/?*/?*)    newtop=../../../ sub=subsubsub;; \
		*/?*)       newtop=../../ sub=subsub;; \
		*)	    newtop=../ sub=sub;; \
		esac; \
		case "$(TOP)" in \
		/?*) newtop=  upprefix=  ;; \
		*) upprefix=../ ;; \
		esac; \
		$(MAKE) $${sub}dirMakefiles UPPREFIX=$$upprefix NEWTOP=$$newtop \
		MAKEFILE_SUBDIR=$$i NEW_CURRENT_DIR=$(CURRENT_DIR)/$$i;\
	done

subdirMakefiles:
	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then \
	echo "	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak"; \
	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
	else exit 0; fi
	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \
	$(MAKE) $(MFLAGS) Makefiles

subsubdirMakefiles:
	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then \
	echo "	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak"; \
	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
	else exit 0; fi
	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \
	$(MAKE) $(MFLAGS) Makefiles

subsubsubdirMakefiles:
	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then \
	echo "	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak"; \
	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
	else exit 0; fi
	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(UPPREFIX)$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \
	$(MAKE) $(MFLAGS) Makefiles

subsubsubsubdirMakefiles:
	$(RM) $(MAKEFILE_SUBDIR)/Makefile.bak
	-@if [ -f $(MAKEFILE_SUBDIR)/Makefile ]; then \
	echo "	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak"; \
	$(MV) $(MAKEFILE_SUBDIR)/Makefile $(MAKEFILE_SUBDIR)/Makefile.bak; \
	else exit 0; fi
	cd $(MAKEFILE_SUBDIR); $(IMAKE_CMD) -DTOPDIR=$(UPPREFIX)$(UPPREFIX)$(UPPREFIX)$(UPPREFIX)$(TOP) -DCURDIR=$(NEW_CURRENT_DIR); \
	$(MAKE) $(MFLAGS) Makefiles

includes::
	@case '${MFLAGS}' in *[ik]*) set +e;; esac; \
	for i in $(SUBDIRS) ;\
	do \
		(cd $$i ; echo including "in $(CURRENT_DIR)/$$i..."; \
			$(MAKE) $(MFLAGS)   includes); \
	done

###########################################################################
# dependencies generated by makedepend

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             