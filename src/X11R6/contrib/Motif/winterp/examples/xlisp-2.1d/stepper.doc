###############################################################################
#
# File:         stepper.doc
# RCS:          $Header: /users/npm/src/winterp/examples/xlisp-2.1d/RCS/stepper.doc,v 2.3 1994/06/06 15:00:34 npm Exp $
# Description:  Documentation for stepper.lsp
# Author:       Ray Comas (comas@math.lsa.umich.edu)
# Created:      
# Modified:     Mon Jun  6 03:08:00 1994 (Niels Mayer) npm@indeed
# Language:     N/A
# Package:      N/A
# Status:       X11r6 contrib release
# 
# Copyright (C) 1994, Enterprise Integration Technologies Corp. and Niels Mayer.
# WINTERP 1.15-1.99, Copyright (c) 1993, Niels P. Mayer.
# WINTERP 1.0-1.14, Copyright (c) 1989-1992 Hewlett-Packard Co. and Niels Mayer.
# XLISP-STAT 2.1 Copyright (c) 1990, by Luke Tierney
# XLISP version 2.1, Copyright (c) 1989, by David Betz.
# 
# Permission to use, copy, modify, distribute, and sell this software and its
# documentation for any purpose is hereby granted without fee, provided that
# the above copyright notice appear in all copies and that both that
# copyright notice and this permission notice appear in supporting
# documentation, and that the name of Enterprise Integration Technologies,
# Hewlett-Packard Company, Niels Mayer, Luke Tierney and David Betz not be
# used in advertising or publicity pertaining to distribution of the software
# without specific, written prior permission.  Enterprise Integration
# Technologies, Hewlett-Packard Company, Niels Mayer, Luke Tierney and David
# Betz make no representations about the suitability of this software for any
# purpose. It is provided "as is" without express or implied warranty.
# 
# ENTERPRISE INTEGRATION TECHNOLOGIES, HEWLETT-PACKARD COMPANY, NIELS MAYER,
# LUKE TIERNEY AND DAVID BETZ DISCLAIM ALL WARRANTIES WITH REGARD TO THIS
# SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS,
# IN NO EVENT SHALL ENTERPRISE INTEGRATION TECHNOLOGIES, HEWLETT-PACKARD
* COMPANY, NIELS MAYER, LUKE TIERNEY NOR DAVID BETZ BE LIABLE FOR ANY SPECIAL,
# INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
# LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
# OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
# PERFORMANCE OF THIS SOFTWARE.
###############################################################################

This is the latest version of my stepper.   I posted an early version of
it about a year ago;  this differs from the old one as follows:
  o  May change both print depth and print length of forms
	(old version only allowed print depth to be changed)
  o  Uses 'get-key' for user input, (in particular this is PC specific,
	I only use XLISP on PC's;  I use KCL on real computers)
  o  New 'u' command (execute until enclosing form returns)
  o  New 'r' command (use a given expression as the return value
	for the current form)
  o  Correct handling of '(go label)' statements
  o  Uses *debug-io* to determine output stream
 
The attached listing is a step debugger inspired by the "step.lsp"
stepper included with XLISP 2.1, originally written by Jonathan Engdahl
(jengdahl on BIX).  This version has the ability to set/reset
breakpoints, and a few bells and whistles.
 
To invoke the stepper:
	(step (form with args))
 
The stepper will stop and print every form, then wait for user input.
Forms are printed compressed, i.e. to a depth and length of 3.  This
may be changed by assigning the desired depth and length values to
*pdepth* and *plen* before invoking the stepper, or from within the
stepper via the . and # commands.
 
For example, suppose you have the following defined:
 
(defun fib (n)
  (if (or (eql n 1) (eql n 2))
      1
      (+ (fib (- n 2)) (fib (- n 1)))))
 
Then (step (fib 4)) will produce the following:
 
0 >==> (fib 4)
 1 >==> (if (or (eql n 1) (eql n 2)) 1 ...) :
 
The colon is the stepper's prompt.  For a list of commands, type h.
this produces:
 
Stepper Commands
----------------
 n or space - next form
 s or <cr>  - step over form
 f FUNCTION - go until FUNCTION is called
 b FUNCTION - set breakpoint at FUNCTION
 b <list>   - set breakpoint at each function in list
 c FUNCTION - clear breakpoint at FUNCTION
 c <list>   - clear breakpoint at each function in list
 c *all*    - clear all breakpoints
          g - go until a breakpoint is reached
          u - go up; continue until enclosing form is done
          w - where am I? -- backtrace
          t - toggle trace on/off
          q - quit stepper, continue execution
          p - pretty-print current form (uncompressed)
          e - print environment
   x <expr> - execute expression in current environment
   r <expr> - execute and return expression
       # nn - set print depth to nn
       . nn - set print length to nn
          h - print this summary
 
Breakpoints may be set with the b command.  You may set breakpoints at
one function, e.g. b FOO<cr> sets a breakpoint at the function FOO,
or at various functions at once, e.g. b (FOO FIE FUM)<cr> sets
breakpoints at the functions FOO, FIE, and FUM.  Breakpoints are cleared
with the c command in an analogous way.  Furthermore, a special form of
the c command, c *all* <cr>, clears all previously set breakpoints.
Breakpoints are remembered from one invocation of step to the next, so
it is only neccessary to set them once in a debugging session.
 
The g command causes execution to proceed until a breakpoint is reached,
at which time more stepper commands can be entered.
 
The f command sets a temporary breakpoint at one function, and causes
execution to proceed until that function is called.
 
The u command continues execution until the form enlosing the current
form is done, then re-enters the stepper.
 
The w command prints a back trace.
 
The q command quits and causes execution to continue uninterrupted.
 
Entry and exit to functions are traced after a g, f, u, or q command.  To
turn off tracing, use the t command which toggles the trace on/off.
Also, with trace off, the values of function parameters are not printed.
 
The s command causes the current form to be evaluated.
 
The n command steps into the current form.
 
The . and # commands change the compression of displayed forms.  E.g. in the
previous example:
 
 1 >==> (if (or (eql n 1) (eql n 2)) 1 ...) : . 2
 1 >==> (if (or (eql n ...) ...) ...) :
 
changes the print length to 2, and
 
 1 >==> (if (or (eql n ...) ...) ...) : # 2
 1 >==> (if (or #\# ...) ...) :
 
changes the print depth to 2.
 
To print the entire form use the p command, which pretty-prints the
entire form.
 
The e command causes the current environment to be printed;
 
The x command causes an expression to be executed in the current
environment.  Note that this permits the user to alter values while
the program is running, and may affect execution of the program.
 
The r command causes the value of the given expression to be returned,
i.e. makes it the return value of the current form.

Enjoy,
      Ray
