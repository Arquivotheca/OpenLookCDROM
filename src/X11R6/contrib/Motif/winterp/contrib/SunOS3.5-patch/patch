#
# WINTERP Copyright 1989, 1990, 1991 Hewlett-Packard Company (by Niels Mayer).
# XLISP version 2.1, Copyright (c) 1989, by David Betz.
#
# Permission to use, copy, modify, distribute, and sell this software and its
# documentation for any purpose is hereby granted without fee, provided that
# the above copyright notice appear in all copies and that both that
# copyright notice and this permission notice appear in supporting
# documentation, and that the name of Hewlett-Packard and David Betz not be
# used in advertising or publicity pertaining to distribution of the software
# without specific, written prior permission.  Hewlett-Packard and David Betz
# make no representations about the suitability of this software for any
# purpose. It is provided "as is" without express or implied warranty.
#

*** winterp.c.orig	Thu Apr  4 08:05:24 1991
--- winterp.c	Thu Apr  4 08:05:31 1991
***************
*** 57,63 ****
  #endif				/* WINTERP_WANT_INET_SERVER */
  
  #ifdef WINTERP_WANT_UNIX_SERVER
! #include <stdlib.h> /* for unlink() */
  #include <sys/un.h> /* for AF_UNIX sockets */
  #endif				/* WINTERP_WANT_UNIX_SERVER */
  
--- 57,63 ----
  #endif				/* WINTERP_WANT_INET_SERVER */
  
  #ifdef WINTERP_WANT_UNIX_SERVER
! /* #include <stdlib.h>  for unlink() */
  #include <sys/un.h> /* for AF_UNIX sockets */
  #endif				/* WINTERP_WANT_UNIX_SERVER */
  
***************
*** 446,453 ****
    root_win = DefaultRootWindow(display);
    screen = DefaultScreenOfDisplay(display);
    colormap = XDefaultColormapOfScreen(screen);
-   wm_delete_atom = XmInternAtom(display, "WM_DELETE_WINDOW");
  
    /*
     * Setup action table for accelerators and translations.
     */
--- 446,454 ----
    root_win = DefaultRootWindow(display);
    screen = DefaultScreenOfDisplay(display);
    colormap = XDefaultColormapOfScreen(screen);
  
+   wm_delete_atom = XmInternAtom(display, "WM_DELETE_WINDOW", FALSE);
+ 
    /*
     * Setup action table for accelerators and translations.
     */
***************
*** 911,917 ****
    int rdsock;
    int addrlen = sizeof(struct sockaddr_in);
    struct sockaddr_in peeraddr_in; /* for peer socket address */
! #ifdef hpux			
    long lingerOpt = 1L;		/* NOTE: necessary while hpux-version < 8.0 (???) */
  #else
    struct linger lingerOpt;
--- 914,920 ----
    int rdsock;
    int addrlen = sizeof(struct sockaddr_in);
    struct sockaddr_in peeraddr_in; /* for peer socket address */
! #ifdef HACK
    long lingerOpt = 1L;		/* NOTE: necessary while hpux-version < 8.0 (???) */
  #else
    struct linger lingerOpt;
***************
*** 925,931 ****
      xlfatal("Unable to accept() on INET Domain Socket."); /* CLEANUP & EXIT */
    }
    if (setsockopt(rdsock, SOL_SOCKET, SO_LINGER, (char *) &lingerOpt,
! #ifdef hpux
  		 sizeof(long)	/* NOTE: necessary while hpux-version < 8.0 (???) */
  #else
  		 sizeof(struct linger)
--- 928,934 ----
      xlfatal("Unable to accept() on INET Domain Socket."); /* CLEANUP & EXIT */
    }
    if (setsockopt(rdsock, SOL_SOCKET, SO_LINGER, (char *) &lingerOpt,
! #ifdef HACK
  		 sizeof(long)	/* NOTE: necessary while hpux-version < 8.0 (???) */
  #else
  		 sizeof(struct linger)
