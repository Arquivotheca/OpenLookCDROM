.\" Copyright 1994 NEC Corporation, Tokyo, Japan.
.\"
.\" Permission to use, copy, modify, distribute and sell this software
.\" and its documentation for any purpose is hereby granted without
.\" fee, provided that the above copyright notice appear in all copies
.\" and that both that copyright notice and this permission notice
.\" appear in supporting documentation, and that the name of NEC
.\" Corporation not be used in advertising or publicity pertaining to
.\" distribution of the software without specific, written prior
.\" permission.  NEC Corporation makes no representations about the
.\" suitability of this software for any purpose.  It is provided "as
.\" is" without express or implied warranty.
.\"
.\" NEC CORPORATION DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE,
.\" INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS, IN 
.\" NO EVENT SHALL NEC CORPORATION BE LIABLE FOR ANY SPECIAL, INDIRECT OR
.\" CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF 
.\" USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR 
.\" OTHER TORTUOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR 
.\" PERFORMANCE OF THIS SOFTWARE. 
.\"
.\" $Id: uilib.jmn,v 1.3 1994/01/27 11:10:50 kuma Exp $ NEC;
.if t .pn 575
.TH UILIBINTRO 3 "4 April 1991"
.SH "名前"
UILib intro \- ユーザインタフェースライブラリイントロ
.SH "説明"
.PP
ユーザインタフェースライブラリは，１文字の入力，１キーの入力に対応して，
未確定文字列，確定文字列，注目文節位置，ステータス表示のための文字列，
候補一覧のための文字列などを返還するライブラリです．アプリケーションプ
ログラムは，返還された情報によって表示を行います．アプリケーションプロ
グラムは，キー入力以外のトリガーによって(例えばマウスによる選択など)モー
ドの遷移を制御することもできます．
.PP
ユーザインタフェースライブラリでは，TTYベース
でjrKanjiStringおよびjrKanjiControl，Ｘウィンドウベースで
XLookupKanjiStringおよびXKanjiControlを提供します．
.P
ユーザインタフェースライブラリを使用する場合には以下のファイルが必要に
なります．
.IP "・" 3
TTYベース
.RS
.IP "関数" 20
jrKanjiString, jrKanjiControl
.IP "ヘッダファイル" 
canna/jrkanji.h
.IP "ライブラリ"
libcanna.a, libcanna.so
.RE
.IP "・" 3
Xウィンドウベース
.RS
.IP "関数" 20
XLookupKanjiString, XKanjiControl
.IP "ヘッダファイル" 
canna/kanji.h
.IP "ライブラリ"
libXn.a, libXn.so, libcanna.a, libcanna.so
.RE
.SH "概要"
.IP "jrKanjiString" 20
TTYからの入力，Ｘでの入力，基本ウィンドウでの入力など一般的なキーボー
ド入力に対して漢字文字列への変換を行います．
.IP "jrKanjiControl" 20
jrKanjiStringでの制御を指定されたパラメタにより行います．
.IP "XLookupKanjiString" 20
Ｘウィンドウシステムにおいて，キーボード入力(キーイベント)の漢字文字列
への変換を行います．
.IP "XKanjiControl" 20
XLookupKanjiStringでの制御を指定されたパラメタにより行います．
.if t .pn 575
.TH JRKANJISTRING 3 "4 April 1991"
.SH "名前"
jrKanjiString \- 一般的名キーボード入力に対してのかな漢字変換
.SH "形式"
.nf
.B #include <canna/jrkanji.h>
.B int jrKanjiString(\fIcontext_id, ch, buffer_return, bytes_buffer, kanji_status_return\fP)
.B int \fIcontext_id\fP;
.B int \fIch\fP;
.B char \fI*buffer_return\fP;
.B int \fIbytes_buffer\fP;
.B jrKanjiStatus \fI*kanji_status_return\fP;
.fi
.SH "説明"
.PP
jrKanjiStringはTTYからの入力，Ｘでの入力，基本ウィンドウでの入力など，
一般的なキーボード入力に対して漢字文字列への変換を行う関数です．
.PP
jrKanjiStringは，アスキーコードで表されるキー入力を日本語文字列に対応
させる簡易ルーチンで，入力されたキーを表すコードを\fIch\fPにて与えるこ
とにより，表示すべき文字列を返します．jrKanjiStringの内部においてロー
マ字かな変換，かな漢字変換が行われます．
.PP
ファンクションキーや，カーソルキーなどのキーについては，それらのキーの
発生するエスケープシーケンスの
代わりに\fBファンクションキー\fPの項で示す特別の
コードをjrKanjiStringに与えて下さい．
.PP
\fIcontext_id\fPで与えるコンテクスト識別子は，実際にはそのままの値が用
いられるわけではなく，\fIcontext_id\fPで与えられるコンテクスト識別子を
キーとしたコンテクストが作成され，用いられることになります．したがって
アプリケーションプログラマはjrKanjiStringに与えるコンテクスト識別子に
ついては，適当な値を与えれば良く，入力ポートのファイルディスクリプタを
与えるのが適当と考えられます．ただし，0を与えた時は特別で，システムに
デフォルトで準備されているコンテクストが用いられます．コンテクストに特
別の配慮を行わない場合には0を指定するのが適当です．
.PP
入力に対応して，ローマ字かな変換，かな漢字変換の中間結果を表示する必要
がありますが，表示すべき中間結果は\fIkanji_status_return\fPを介して，
アプリケーションに返されます．
.PP
アプリケーションは\fIkanji_status_return\fPに返される情報にしたがって
中間結果を表示しなければなりま
せん．\fIkanji_status_return\fPはjrKanjiStatus型の構造体です．
.PP
jrKanjiStatus構造体は以下のように定義されます．
.sp
.ft CW
.nf
typedef struct {
  unsigned char *echoStr; /* ローカルエコーのための文字列 */
  int           length;   /* ローカルエコー文字列の長さ */
  int           revPos;   /* ローカルエコー文字列のうち反転表示部分へのオフセット */
  int           revLen;   /* ローカルエコー文字列のうち反転表示部分の長さ */
  unsigned long info;     /* その他の情報 */
  unsigned char *mode;    /* モード情報 */
  struct {
    unsigned char *line;  /* 候補一覧の文字列 */
    int           length; /* 候補一覧文字列の長さ */
    int           revPos; /* 候補一覧文字列のうち反転表示部分へのオフセット */
    int           revLen; /* 候補一覧文字列のうち反転表示部分の長さ */
  } gline;                /* 候補一覧に関する情報 */
} jrKanjiStatus;
.fi
.ft
.sp
.PP
かな漢字変換を用いた日本語入力時には変換の対象となる読みなどをローカル
エコーする必要があります．jrKanjiStringはローカルエコーなど表示に関す
ることは何も行わず，代わりにローカルエコーするべき
文字列をjrKanjiStatus構造体を用いてアプリケーション側に返します．
.PP
変換が確定するまでは，ローマ字かな変換されている文字や，変換候補文字な
ど，ローカルエコーすべき(EUC)文字列が\fIechoStr\fPメンバにより返されま
す．このとき，ローカルエコー文字列の長さ，リバース表示の
開始位置と長さ(バイト単位)が，
それぞれ，\fIlength\fPメンバ，revPos，revLenメンバにて返されます．ロー
カルエコーすべき文字列のためのバッファはjrKanjiStringによって自動的に
確保されますが，その領域は読みとりのみに用いられるべきであり，その領域
に文字列を書き込んではいけません．
.PP
ローカルエコーすべき文字列がない場合は\fIlength\fPメンバに０が返ります．
.PP
ローカルエコーすべき内容が前回のjrKanjiStringの呼出しの時と変わらない
場合(例えばコントロール文字が押され，そのキーが無効であった
場合など)は\fIlength\fPメンバに\-1が返ります．
.PP
モードの変更や，候補一覧に関する情報の有無は，\fIinfo\fPメンバによって
渡されます．\fIinfo\fPメンバのKanjiModeInfoビットがonで
あれば，\fImode\fPに新しいモードを示す文字列が返されます．\fIinfo\fPメ
ンバのKanjiGLineInfoビットがonであれば，\fIgline\fP構造体に候補一覧等
の情報が格納されています．
.PP
\fIgline\fP構造体の\fIline\fPメンバには候補一覧表示のための文字列が返
されます．\fIgline\fP構造体の\fIline,revPos,revLen\fPの各メンバは，候
補一覧文字列のそれぞれ，長さ，リバース表示の開始位置，リバース表示の長
さが返されます．
.PP
変換中に確定した(EUC)文字列がある場合は，
その文字列が\fIbuffer_return\fPで指定したバッファに格納され，その文字
列の長さ(バイト単位)が返されます．確定した文字列が無い場合は戻り
値は0になります．確定文字列を格納するバッファ\fIbuffer_return\fPの大き
さを\fIbytes_buffer\fPにて与えます．
確定文字列の長さが\fIbytes_buffer\fPよりも長い場合には，
確定文字列のうち，\fIbytes_buffer\fP分
だけが\fIbuffer_return\fPに格納され，jrKanjiStringの戻り値と
して，\fIbytes_buffer\fPで与えた値が返ります．
.SH "ファンクションキー"
.PP
エスケープシーケンスを発行するようなファンクションキーに関しては，ファ
ンクションキーによるエスケープシーケンスの変わりに以下のマクロ名で示さ
れるコードを\fIch\fPとして与えて下さい．
.IP "論理名" 12
コード
.IP "Nfer" 12
CANNA_KEY_Nfer
.IP "Xfer" 12
CANNA_KEY_Xfer
.IP "Up" 12
CANNA_KEY_Up
.IP "Left" 12
CANNA_KEY_Left
.IP "Right" 12
CANNA_KEY_Right
.IP "Down" 12
CANNA_KEY_Down
.IP "Insert" 12
CANNA_KEY_Insert
.IP "Rollup" 12
CANNA_KEY_Rollup
.IP "Rolldown" 12
CANNA_KEY_Rolldown
.IP "Home" 12
CANNA_KEY_Home
.IP "Help" 12
CANNA_KEY_Help
.IP "S-Nfer" 12
CANNA_KEY_Shift_Nfer
.IP "S-Xfer" 12
CANNA_KEY_Shift_Xfer
.IP "S-Up" 12
CANNA_KEY_Shift_Up
.IP "S-Left" 12
CANNA_KEY_Shift_Left
.IP "S-Right" 12
CANNA_KEY_Shift_Right
.IP "S-Down" 12
CANNA_KEY_Shift_Down
.IP "C-Nfer" 12
CANNA_KEY_Control_Nfer
.IP "C-Xfer" 12
CANNA_KEY_Control_Xfer
.IP "C-Up" 12
CANNA_KEY_Control_Up
.IP "C-Left" 12
CANNA_KEY_Control_Left
.IP "C-Right" 12
CANNA_KEY_Control_Right
.IP "C-Down" 12
CANNA_KEY_Control_Down
.IP "F1" 12
CANNA_KEY_F1
.IP "PF1" 12
CANNA_KEY_PF1
.SH "関連情報"
jrKanjiControl(3)
.SH "戻り値"
.PP
入力処理中何らかのエラーが発生した場合は，この関数の戻り値として\-1が返
され，外部変数(char *)jrKanjiErrorに，エラーメッセージが格納されます．
.PP
この関数の呼出しにより確定した文字列がある場合は確定した文字列のバイト
長が返ります．
.PP
それ以外の場合は0が返ります．
.if t .pn 575
.TH JRKANJICONTROL 3 "4 April 1991"
.SH "名前"
jrKanjiControl \- jrKanjiStringでのモードや，処理の制御を行う
.SH "形式"
.nf
.B #include <canna/jrkanji.h>
.B int jrKanjiControl(\fIcontext_id, request, arg\fP)
.B int \fIcontext_id\fP;
.B int \fIrequest\fP;
.B char \fI*arg\fP;
.fi
.SH "説明"
.PP
jrKanjiControlは\fIcontext_id\fPで示される変換コンテクストに
関して，\fIrequest\fPで示される処理を行います．処理によっては，引数を
伴う場合があり，その場合，引数はargにて与えます．
.PP
jrKanjiControlで制御される機能としては以下の５つがあります．
.IP "\fIrequest\fP名" 18
機能
.IP "KC_INITIALIZE" 18
かな漢字変換を初期化する．
.IP "KC_CHANGEMODE" 18
入力モードを変更する．
.IP "KC_SETWIDTH" 18
候補一覧表示の時の幅を指定する．
.IP "KC_FINALIZE" 18
かな漢字変換の終了処理．
.IP "KC_SETUNDEFKEYFUNCTION" 18
未定義キーに対する機能の設定を行う．
.IP "KC_SETMODEINFOSTYLE" 18
モード情報を数値で表現するかどうかを指定する．
.IP "KC_KAKUTEI" 18
入力中の文字列を確定する．
.IP "KC_KILL" 18
入力中の文字列を削除する．
.IP "KC_QUERYMODE" 18
現在のモードを問い合わせる．
.IP "KC_SETSERVERNAME" 18
接続するサーバを指定する．
.IP "KC_SETINITFILENAME" 18
カスタマイズファイルを指定する．
.IP "KC_CLOSEUICONTEXT" 18
コンテクストをクローズする．
.IP "KC_QUERYMAXMODESTR" 18
モード表示文字列の最大長を求める．
.PP
jrKanjiControlの作用は基本的にはコンテクストで指定されたものに対しての
み作用します．ただし，初期化の処理や終了の処理に関してはその限りではあ
りません．
.PP
jrKanjiControlの操作によって未確定文字列の状態が変化したり，モードの状
態が変わることがあります．そのような可能性がある場合はarg部分に変化し
た情報を格納できるような構造体へのポインタを渡します．その構造体の定義
は以下のようになります．
.sp
.nf
.ft CW
typedef struct {
  int      val;          /* バッファに格納された文字列の長さが返る */
  unsigned char *buffer; /* 確定文字列を格納するためのバッファを与える */
  int      bytes_buffer; /* 上記のバッファの大きさを与える */
  jrKanjiStatus *ks;     /* 未確定文字列の情報を格納する構造体へのポインタ */
} jrKanjiStatusWithValue;
.ft
.fi
.sp
.PP
jrKanjiControlのそれぞれの機能の実行のしかたは以下の通りです．
.IP "(1)" 6
KC_INITIALIZE \- かな漢字変換の初期化
.RS
.PP
KC_INITIALIZEを\fIrequest\fP部で指定することにより，かな漢字変換の初期
化を行います．\fIarg\fPにはwarningメッセージを
格納するための(char **)型の変数へのポインタまたはNULLを指定します．初
期化の処理は基本的にはjrKanjiString(3)が最初に呼ばれた時に自動的に行わ
れますが，jrKanjiControlを用いて初期化する
ことにより，jrKanjiString(3)での初期化処理は行われなくなります．
.PP
jrKanjiString(3)の使用に先立ってjrKanjiControlを用いてかな漢字変換に関
する制御を行う時などは，漢字変換の初期化を行う必要があります．
.PP
正常終了時にはjrKanjiControlの戻り値として0が返り，異常終了時には\-1が
返ります．
.PP
KC_INITIALIZEを行った場合，エラーとまではいかなくとも何らかのwarningが
発生することがあります．warningが発生した場合はargにて与えられた
変数に対してwarning文字列の配列へのポインタが格納され
返されます．warningがないときはNULLが格納され返されます．
.sp
(例)
.nf
.ft CW
  int res; /* エラーが返ってくる場合に備える */
  char **warning;
  .....
  res = jrKanjiControl(0, KC_INITIALIZE, &warning);
  if (warning) {
    char **p;

    for (p = warning ; *p ; p++) {
      fprintf(stderr, "%s\n", *p);
    }
  }
.ft
.fi
.sp
.PP
第３引数に返されるwarningメッセージはライブラリの内部でmallocされます．
これは，次にKC_INITIALIZEやKC_FINALIZEが行われた時に開放されます．アプ
リケーションプログラマが勝手にfreeしてはいけません．warningは今のとこ
ろ最大64メッセージに限定されます．それ以上のメッセージは切捨てられます．
.PP
メッセージに含まれる可能性のあるwarningには以下のものがあります．
.IP "・" 3
カスタマイズファイルがシステムのものも含めてすべて利用できない．
.IP "・" 3
カスタマイズファイルにシンタックスエラーがある．
.IP "・" 3
ローマ字かな変換辞書が利用できない．
.IP "・" 3
かな漢字変換辞書が利用できない．
.IP "・" 3
かな漢字変換サーバに接続できない．
.PP
第３引数としてNULLを指定した場合warningメッセージは捨てられます．
.RE
.IP "(2)" 6
KC_CHANGEMODE \- 入力モードの変更
.RS
.PP
入力モードをアプリケーションから変更します．\fIrequest\fPの
部分にはKC_CHANGEMODEを指定し，\fIarg\fPにjrKanjiStatusWithValue構造体
を指定して下さい．jrKanjiStatusWithValue構造体の\fIval\fPメンバにてモー
ド番号を指定することにより日本語モードが切り替わります．モード番号は以
下のマクロで示されます．
.IP "マクロ番号" 24
モード
.IP "CANNA_MODE_AlphaMode" 24
アルファベットモード
.IP "CANNA_MODE_HenkanMode" 24
変換入力モード
.IP "CANNA_MODE_KigoMode" 24
記号入力モード
.IP "CANNA_MODE_ZenHiraKakuteiMode" 24
全角ひらがな確定入力モード
.IP "CANNA_MODE_ZenKataKakuteiMode" 24
全角カタカナ確定入力モード
.IP "CANNA_MODE_HanKataKakuteiMode" 24
半角カタカナ確定入力モード
.IP "CANNA_MODE_ZenAlphaKakuteiMode" 24
全角アルファベット確定入力モード
.IP "CANNA_MODE_HanAlphaKakuteiMode" 24
半角アルファベット確定入力モード
.IP "CANNA_MODE_HexMode" 24
16進コード入力モード
.IP "CANNA_MODE_BushuMode" 24
部首入力モード
.IP "CANNA_MODE_TorokuMode" 24
単語登録モード
.PP
この機能によりモードを変更するとモード名を始めとして多くの表示が変化を
受けます．表示の変更はargとして指定したjrKanjiStatusWithValue構造体に
て返されます．
.sp
(例)
.ft CW
.nf
  jrKanjiStatus ks;
  jrKanjiStatusWithValue ksv;
  unsigned char buf[SOMESIZE];
  .....
  ksv.ks = &ks;
  ksv.buffer = buf;
  ksv.bytes_buffer = SOMESIZE;
  ksv.val = CANNA_MODE_HexMode;

  jrKanjiControl(context, KC_CHANGEMODE, &ksv);
  len = ksv.val;
  .....
  /* 未確定文字列や確定文字列の情報がksvにより返されます． */
.fi
.ft
.sp
.RE
.IP "(3)" 6
KC_SETWIDTH \- 候補一覧表示のための幅を指定
.RS
.PP
候補一覧のために用いられる領域のコラム数を指定します．１コラムの幅はア
ルファベット文字あるいは半角カタカナ１文字の文字幅であり，全角漢字は２
コラム占めることになります．候補一覧表示のための幅を
指定するために\fIrequest\fP部分に指定する値はKC_SETWIDTHで，
このとき\fIarg\fPにコラム数を指定します．
.sp
(例)
.ft CW
.nf
  jrKanjiControl(0, KC_SETWIDTH, (char *)60);
.fi
.ft
.sp
.RE
.IP "(4)" 6
KC_FINALIZE \- かな漢字変換の終了処理．
.RS
.PP
プログラムを終了するなどの局面でかな漢字変換も終了することを指定します．
かな漢字変換処理を終了させる時は必ずこの処理を行って下さい．終わるにあ
たって今まで学習した内容がファイルに登録されます．\fIrequest\fP部分に
はKC_FINALIZEを指定します．
.PP
正常終了時に0，異常終了時に\-1が戻り値として返ります．
.PP
KC_FINALIZEを行った場合，エラーとまでいかなくとも何らかのwarningが発生
することがあります．warningが発生した場合はargにて与えられた
変数にwarning文字列の配列へのポインタが格納され返されます．warningがな
い場合にはNULLポインタが格納され返されます．
.sp
(例)
.ft CW
.nf
.fi
  int res; /* エラーが返る場合に備える */
  char **warning;
  .....
  res = jrKanjiControl(0, KC_FINALIZE, &warning);
  if (warning) {
    char **p;

    for (p = warning ; *p ; p++) {
      fprintf(stderr, "%s\n", *p);
    }
  }
.ft
.sp
.PP
第３引数に返されるwarningメッセージは，ライブラリの内部でmallocされま
す．これは，次にKC_INITIALIZEやKC_FINALIZEが行われた時に開放されます．
アプリケーションプログラマが勝手にfreeしてはいけません．
.PP
warningは今のところ最大64メッセージに限定されます．それ以上のメッセー
ジは切捨てられます．
.PP
メッセージに含まれる可能性のあるwarningには次のものがあります．
.IP "・" 3
辞書がアンマウントできない．
.PP
第３引数としてNULLを指定した場合，warningメッセージは捨てられます．
.RE
.IP "(5)" 6
KC_SETUNDEFKEYFUNCTION \- 未定義キーに対する機能の設定
.RS
.PP
読みを入力している状態でC-tを打ったときのように未定義キーを入力した時
に取られる処理を指定します．未定義キーに対応して行われる処理としては以
下の処理があります．
.IP "マクロ名" 12
処理
.IP "kc_normal" 12
ビープ
.IP "kc_through" 12
アプリケーションプログラムに渡す
.IP "kc_kakutei" 12
確定しアプリケーションプログラムに渡す
.IP "kc_kill" 12
消去しアプリケーションプログラムに渡す
.PP
kc_normalを指定した場合，外部変数jrBeepFuncに設定された関数が未定義キー
入力時にライブラリによって自動的に呼び出されます．jrBeepFuncに値を設定
しない場合には(jrBeepFunc == NULLの場合には)何も起こりません．
.sp
(例)
.ft CW
.nf
  extern (*jrBeepFunc)(), beep();

  jrBeepFunc = beep;
  jrKanjiControl(0, KC_SETUNDEFKEYFUNCTION, kc_normal);
.fi
.ft
.sp
.RE
.IP "(6)" 6
KC_SETMODEINFOSTYLE \- モード情報の表現
.RS
.PP
モード情報を文字列ではなくビットマップなどのデータで表示したい場合があ
ります．そのような場合にはモード情報として数値データが返ってくると処理
がしやすくなります．jrKanjiControlでKC_SETMODEINFOSTYLEを
指定し，\fIarg\fPに１を渡すことによってそれ以後はjrKanjiStatus構造体
の\fImode\fPメンバにはモードを表す数値に'@'(0x40)を加えた１文字が返さ
れるようになります．モードを表す数値に変換する場合には返ってきた文字列
から'@'(0x40)を引きます．モードを表す数値については入力モードの
変更((2)KC_CHANGEMODE)のこうを参照して下さい．
.RE
.IP "(7)" 6
KC_KAKUTEI，(8) KC_KILL \- 入力中の文字列の放棄
.RS
.PP
入力中の文字列を何らかの都合で放棄したい場合があります．放棄する場合に
入力中の文字列を確定文字列として取り込んでから放棄したい場合と全く捨て
てしまってから放棄したい場合があります．確定する
場合にはjrKanjiControlにてKC_KAKUTEIを指定し，放棄する
場合にはKC_KILLを指定します．
.PP
この処理は表示に影響を与えるので第３引数にはjrKanjiStatusWithValue構造
体を指定しなければなりません．
.sp
(例)
.nf
.ft CW
  jrKanjiStatusWithValue ksv;
  jrKanjiStatus ks;
  unsigned char buf[SOMESIZE];
  .....
  ksv.ks = &ks;
  ksv.buffer = buf;
  ksv.bytes_buffer = SOMESIZE;

  jrKanjiControl(context, KC_KAKUTEI, &ksv);
  len = ksv.val;
  .....
.ft
.fi
.sp
.RE
.IP "(9)" 6
KC_QUERYMODE \- モードの問い合わせ
.RS
.PP
現在のモードを問い合わせるにはjrKanjiControlでKC_QUERYMODEを指定します．
.PP
第３引数にはモード文字列を格納するための文字配列のポインタを指定します．
モード文字列はヌル文字で終わる文字列です．ここに数値が返るようにするに
はjrKanjiControlでKC_SETMODEINFOSTYLEを指定してモード文字列のスタイル
を変更しておきます．
.sp
(例)
.nf
.ft CW
  char currentMode[MAXMODELEN];
  .....
  jrKanjiControl(0, KC_QUERYMODE, currentMode);
  .....
.ft
.fi
.sp
.RE
.IP "(10)" 6
KC_SETSERVERNAME \- サーバの指定
.RS
.PP
かな漢字変換サーバとしてどのサーバを使うかをアプリケーションプログラム
を終了することなしに切替えることが可能です．かな漢字変換サーバとして接
続するべきサーバを指定するにはjrKanjiControlでKC_SETSERVERNAMEを指定し
ます．第３引数には接続したいサーバ名を指定します．
.RE
.IP "(11)" 6
KC_SETINITFILENAME \- カスタマイズファイルの指定
.RS
.PP
カスタマイズファイルをアプリケーションプログラム側から変更することがで
きます．カスタマイズファイルの変更はjrKanjiControlの
第２引数にKC_SETINITFILENAMEを指定し，第３引数にファイル名文字列を指定
することにより行います．この処理を行う場合はKC_INITIALIZEに先立って実
行しておかなければなりません．
.sp
(例)
.nf
.ft CW
  char *inifile = "app-own.canna"
  .....
  jrKanjiControl(0, KC_SETINITFILENAME, initfile);
  .....
.ft
.fi
.sp
.RE
.IP "(12)" 6
KC_CLOSEUICONTEXT \- コンテクストのクローズ
.RS
.PP
変換コンテクストを表すコンテクストIDは任意の整数を割り当てることができ
ます．今まで使われていない
コンテクストIDをjrKanjiStringあるいはjrKanjiControlに与えることが可能
であり，その場合，そのコンテクスト用のイニシャライズが行われ必要なメ
モリが確保されます．
.PP
それまで使用していた入力ポートが使われなくなった場合に，そのポートに割
り当てて使っていたコンテクストID用に確保されたメモリを
開放するにはjrKanjiControlを第２引数にKC_CLOSEUICONTEXTを指定して呼び
出します．
.PP
この処理は表示の変化をともなうので第３引数にはjrKanjiStatusWithValue構
造体を与えます．
.sp
(例)
.nf
.ft CW
  jrKanjiStatusWithValue ksv;
  jrKanjiStatus ks;
  unsigned char buf[SOMESIZE];
  .....
  ksv.ks = &ks;
  ksv.buffer = buf;
  ksv.bytes_buffer = SOMESIZE;

  jrKanjiControl(0, KC_CLOSEUICONTEXT, &ksv);
  .....
.ft
.fi
.sp
.RE
.IP "(13)" 6
KC_QUERYMAXMODESTR \- モード表示文字列の最大長を求める．
.RS
.PP
初期化ファイルにてモード表示文字列がカスタマイズできますが，カスタマイ
ズされた結果モード表示文字列にどれだけの表示領域を確保するかを調べる必
要がある場合があります．jrKanjiControlを第２引数にKC_QUERYMAXMODESTRを
指定して呼び出すことにより，モード表示文字列として何コラム必要かが返り
値として返されます．ここで言うコラムとは半角英数文字の文字幅を１とした
ときの値を示します．
.PP
第３引数は用いられないのでダミー値として0を与えます．
.sp
(例)
.ft CW
.nf
  int max_mode_columns;
  .....
  max_mode_columns = jrKanjiControl(0, KC_QUERYMAXMODESTR, 0);
  .....
.fi
.ft
.sp
.RE
.\" @(#)kanji.man	1.5	89/06/30 09:13:01
.TH XLookupKanjiString 3K "1 September 1988" "X Version 11"
.SH 名称
XLookupKanjiString \- キーボード入力の漢字文字列への変換
.SH 記述形式
.nf
.ft B
#include <X11/Xlib.h>
#include <X11/kanji.h>
.PP
.ft B
int
XLookupKanjiString(\fIevent_struct, buffer_return, bytes_buffer,\fP
                   \fIkeysym_return, status_return, kanji_status_return\fP)
        XKeyEvent \fI*event_struct\fP;
        char \fI*buffer_return\fP;
        int \fIbytes_buffer\fP;
        KeySym \fI*keysym_return\fP;
        XComposeStatus \fI*status_return\fP;
        XKanjiStatus \fI*kanji_status_return\fP;
.fi
.ft R
.SH 引数
.RS
.IP \fIevent_struct\fP 16
キーイベントを指定します。
.IP \fIbuffer_return\fP 16
変換した漢字文字列が返されます。
.IP \fIbytes_buffer\fP 16
バッファの長さを指定します。
.IP \fIkeysym_return\fP 16
キーシンボルを返します。NULLを指定することもできます。
.IP \fIstatus_return\fP 16
XCompose構造体へのポインタを指定します。
.IP \fIkanji_status_return\fP 16
かな漢字変換の様子が返されます。
.RE
.SH 説明
.PP
\fIXLookupKanjiString\fPは、キーイベントを日本語文字列に
対応させる簡易ルーチンで、
キーイベントの修飾キービットを使用してシフト、ロック、
コントロール等の処理を行います。
.PP
\fIXLookupKanjiString\fPによって8bitアルファベット文字
及び16bit日本語文字を取り扱うことができます。
.PP
アルファベット文字の取り扱いについては、
\fIXLookupKanjiString\fPは\fIXLookupString\fPと同様の動作になります。
.PP
日本語文字の取り扱いについては、
この関数の内部においてローマ字かな変換、
かな漢字変換が行われます。
日本語の入力時にXKanjiStatus構造体が用いられます。XKanjiStatus構造体は
以下のように定義されます。
.PP
.nf
	typedef struct _XKanjiStatus {
	    unsigned char *echoStr;     /* local echo string */
	    int length;		        /* length of echo string */
	    int revPos;                 /* reverse position  */
	    int revLen;                 /* reverse length    */
.mc \(br
	    unsigned long info;		/* other informations */
	    unsigned char *mode;	/* mode information */
	    struct {
		unsigned char *line;	/* a grance of Kanji characters */
		int length;		/* length of it */
		int revPos;		/* reverse position of it */
		int revLen;		/* reverse length of it */
	    } gline;			/* a grancing line information */
.mc
	} XKanjiStatus;

.mc \(br
	#define KanjiModeInfo	01
	#define KanjiGLineInfo	02
.mc
.fi
.PP
かな漢字変換を用いた日本語入力時には変換の対象となる読みなどを
ローカルエコーする必要があります。XLookupKanjiStringはローカル
エコーなど表示に関することは何も行わず、代わりにローカルエコー
するべき文字列を\fIXKanjiStatus\fP構造体を用いて
アプリケーション側に返します。
.PP
変換が確定するまでは、ローマ字かな変換されている文字や、
変換候補文字など、ローカルエコーすべき(EUC)
文字列が\fIechoStr\fPメンバに
より返されます。このとき、ローカルエコー文字列の
長さ、リバース表示の開始位置と長さ（バイト単位）が、
それぞれ、\fIlength\fPメンバ、\fIrevPos\fP、\fIrevLen\fPメンバにて
返されます。
ローカルエコーすべき文字列のためのバッファはXLookupKanjiStringに
よって自動的に確保されますが、その領域は読み取りのみに用いられるべきであり、
その領域に文字列を書き込んではいけません。
.PP
ローカルエコーすべき文字列が無い場合は\fIlength\fPメンバに０が返ります。
.PP
ローカルエコーすべき内容が前回のXLookupKanjiStringの呼び出しのときと
変わらない場合（例えばシフトキーが押された場合など）は\fIlength\fPメンバに
−１が返ります。
.mc \(br
.PP
モードの変更や、候補一覧に関する情報の有無は、infoメンバによって渡され
ます。infoメンバのKanjiModeInfoビットがonであれば、modeに新しいモード
を示す文字列が返されます。infoメンバのKanjiGLineInfoビットがonであれば、
gline構造体に候補一覧等の情報が格納されています。
.PP
gline構造体のlineメンバには候補一覧表示のための文字列が返されます。
gline構造体のline,revPos,revLenの各メンバは、候補一覧文字列のそれぞれ、
長さ、リバース表示の開始位置、リバース表示の長さが返されます。
.mc
.PP
変換中に確定した(EUC)文字列がある場合は、
その文字列が\fIbuffer_return\fPに格納され、
その文字列の長さ（バイト単位）がこの関数の戻り値として返されます。
確定した文字列が無い場合は戻り値は０になります。
.if t .pn 575
.TH XKANJICONTROL 3 "4 April 1991"
.SH "名前"
XKanjiControl \- XLookupKanjiStringでのモードや，処理の制御を行う
.SH "形式"
.nf
.B #include <X11/kanji.h>
.B int XKanjiControl(\fIdpy, win, request, arg\fP)
.B Display \fIdpy\fP;
.B Window \fIwin\fP;
.B int \fIrequest\fP;
.B char \fI*arg\fP;
.fi
.SH "説明"
.PP
XKanjiControlは\fIdpy, win\fPで示されるウィンドウにおける日本語入力に
関して，\fIrequest\fPで示される処理を行います．処理によっては，引数を
伴う場合があり，その場合，引数はargにて与えます．
.PP
XKanjiControlで制御される機能としては以下があります．
.IP "\fIrequest\fP名" 18
機能
.IP "KC_INITIALIZE" 18
かな漢字変換を初期化する．
.IP "KC_CHANGEMODE" 18
入力モードを変更する．
.IP "KC_SETWIDTH" 18
候補一覧表示の時の幅を指定する．
.IP "KC_FINALIZE" 18
かな漢字変換の終了処理．
.IP "KC_SETUNDEFKEYFUNCTION" 18
未定義キーに対する機能の設定を行う．
.IP "KC_SETMODEINFOSTYLE" 18
モード情報を数値で表現するかどうかを指定する．
.IP "KC_KAKUTEI" 18
入力中の文字列を確定する．
.IP "KC_KILL" 18
入力中の文字列を削除する．
.IP "KC_QUERYMODE" 18
現在のモードを問い合わせる．
.IP "KC_SETSERVERNAME" 18
接続するサーバを指定する．
.IP "KC_SETINITFILENAME" 18
カスタマイズファイルを指定する．
.IP "KC_CLOSEUICONTEXT" 18
コンテクストをクローズする．
.IP "KC_QUERYMAXMODESTR" 18
モード表示文字列の最大長を求める．
.PP
XKanjiControlの作用は基本的には\fIdpy, win\fPで指定されたウィンドウで
の日本語入力に対しての
み作用します．ただし，初期化の処理や終了の処理に関してはその限りではあ
りません．
.PP
XKanjiControlの操作によって未確定文字列の状態が変化したり，モードの状
態が変わることがあります．そのような可能性がある場合はarg部分に変化し
た情報を格納できるような構造体へのポインタを渡します．その構造体の定義
は以下のようになります．
.sp
.nf
.ft CW
typedef struct {
  int      val;          /* バッファに格納された文字列の長さが返る */
  unsigned char *buffer; /* 確定文字列を格納するためのバッファを与える */
  int      bytes_buffer; /* 上記のバッファの大きさを与える */
  XKanjiStatus *ks;     /* 未確定文字列の情報を格納する構造体へのポインタ */
} XKanjiStatusWithValue;
.ft
.fi
.sp
.PP
XKanjiControlのそれぞれの機能の実行のしかたは以下の通りです．
.IP "(1)" 6
KC_INITIALIZE \- かな漢字変換の初期化
.RS
.PP
KC_INITIALIZEを\fIrequest\fP部で指定することにより，かな漢字変換の初期
化を行います．\fIarg\fPにはwarningメッセージを
格納するための(char **)型の変数へのポインタまたはNULLを指定します．初
期化の処理は基本的にはXKanjiString(3)が最初に呼ばれた時に自動的に行わ
れますが，XKanjiControlを用いて初期化する
ことにより，XKanjiString(3)での初期化処理は行われなくなります．
.PP
XKanjiString(3)の使用に先立ってXKanjiControlを用いてかな漢字変換に関
する制御を行う時などは，漢字変換の初期化を行う必要があります．
.PP
正常終了時にはXKanjiControlの戻り値として0が返り，異常終了時には\-1が
返ります．
.PP
KC_INITIALIZEを行った場合，エラーとまではいかなくとも何らかのwarningが
発生することがあります．warningが発生した場合はargにて与えられた
変数に対してwarning文字列の配列へのポインタが格納され
返されます．warningがないときはNULLが格納され返されます．
.sp
(例)
.nf
.ft CW
  int res; /* エラーが返ってくる場合に備える */
  char **warning;
  .....
  res = XKanjiControl(dpy, win, KC_INITIALIZE, &warning);
  if (warning) {
    char **p;

    for (p = warning ; *p ; p++) {
      fprintf(stderr, "%s\n", *p);
    }
  }
.ft
.fi
.sp
.PP
第4引数に返されるwarningメッセージはライブラリの内部でmallocされます．
これは，次にKC_INITIALIZEやKC_FINALIZEが行われた時に開放されます．アプ
リケーションプログラマが勝手にfreeしてはいけません．warningは今のとこ
ろ最大64メッセージに限定されます．それ以上のメッセージは切捨てられます．
.PP
メッセージに含まれる可能性のあるwarningには以下のものがあります．
.IP "・" 3
カスタマイズファイルがシステムのものも含めてすべて利用できない．
.IP "・" 3
カスタマイズファイルにシンタックスエラーがある．
.IP "・" 3
ローマ字かな変換辞書が利用できない．
.IP "・" 3
かな漢字変換辞書が利用できない．
.IP "・" 3
かな漢字変換サーバに接続できない．
.PP
第4引数としてNULLを指定した場合warningメッセージは捨てられます．
.RE
.IP "(2)" 6
KC_CHANGEMODE \- 入力モードの変更
.RS
.PP
入力モードをアプリケーションから変更します．\fIrequest\fPの
部分にはKC_CHANGEMODEを指定し，\fIarg\fPにXKanjiStatusWithValue構造体
を指定して下さい．XKanjiStatusWithValue構造体の\fIval\fPメンバにてモー
ド番号を指定することにより日本語モードが切り替わります．モード番号は以
下のマクロで示されます．
.IP "マクロ番号" 24
モード
.IP "CANNA_MODE_AlphaMode" 24
アルファベットモード
.IP "CANNA_MODE_HenkanMode" 24
変換入力モード
.IP "CANNA_MODE_KigoMode" 24
記号入力モード
.IP "CANNA_MODE_ZenHiraKakuteiMode" 24
全角ひらがな確定入力モード
.IP "CANNA_MODE_ZenKataKakuteiMode" 24
全角カタカナ確定入力モード
.IP "CANNA_MODE_HanKataKakuteiMode" 24
半角カタカナ確定入力モード
.IP "CANNA_MODE_ZenAlphaKakuteiMode" 24
全角アルファベット確定入力モード
.IP "CANNA_MODE_HanAlphaKakuteiMode" 24
半角アルファベット確定入力モード
.IP "CANNA_MODE_HexMode" 24
16進コード入力モード
.IP "CANNA_MODE_BushuMode" 24
部首入力モード
.IP "CANNA_MODE_TorokuMode" 24
単語登録モード
.PP
この機能によりモードを変更するとモード名を始めとして多くの表示が変化を
受けます．表示の変更はargとして指定したXKanjiStatusWithValue構造体に
て返されます．
.sp
(例)
.ft CW
.nf
  XKanjiStatus ks;
  XKanjiStatusWithValue ksv;
  unsigned char buf[SOMESIZE];
  .....
  ksv.ks = &ks;
  ksv.buffer = buf;
  ksv.bytes_buffer = SOMESIZE;
  ksv.val = CANNA_MODE_HexMode;

  XKanjiControl(dpy, win, KC_CHANGEMODE, &ksv);
  len = ksv.val;
  .....
  /* 未確定文字列や確定文字列の情報がksvにより返されます． */
.fi
.ft
.sp
.RE
.IP "(3)" 6
KC_SETWIDTH \- 候補一覧表示のための幅を指定
.RS
.PP
候補一覧のために用いられる領域のコラム数を指定します．１コラムの幅はア
ルファベット文字あるいは半角カタカナ１文字の文字幅であり，全角漢字は２
コラム占めることになります．候補一覧表示のための幅を
指定するために\fIrequest\fP部分に指定する値はKC_SETWIDTHで，
このとき\fIarg\fPにコラム数を指定します．
.sp
(例)
.ft CW
.nf
  XKanjiControl(dpy, win, KC_SETWIDTH, (char *)60);
.fi
.ft
.sp
.RE
.IP "(4)" 6
KC_FINALIZE \- かな漢字変換の終了処理．
.RS
.PP
プログラムを終了するなどの局面でかな漢字変換も終了することを指定します．
かな漢字変換処理を終了させる時は必ずこの処理を行って下さい．終わるにあ
たって今まで学習した内容がファイルに登録されます．\fIrequest\fP部分に
はKC_FINALIZEを指定します．
.PP
正常終了時に0，異常終了時に\-1が戻り値として返ります．
.PP
KC_FINALIZEを行った場合，エラーとまでいかなくとも何らかのwarningが発生
することがあります．warningが発生した場合はargにて与えられた
変数にwarning文字列の配列へのポインタが格納され返されます．warningがな
い場合にはNULLポインタが格納され返されます．
.sp
(例)
.ft CW
.nf
.fi
  int res; /* エラーが返る場合に備える */
  char **warning;
  .....
  res = XKanjiControl(dpy, win, KC_FINALIZE, &warning);
  if (warning) {
    char **p;

    for (p = warning ; *p ; p++) {
      fprintf(stderr, "%s\n", *p);
    }
  }
.ft
.sp
.PP
第4引数に返されるwarningメッセージは，ライブラリの内部でmallocされま
す．これは，次にKC_INITIALIZEやKC_FINALIZEが行われた時に開放されます．
アプリケーションプログラマが勝手にfreeしてはいけません．
.PP
warningは今のところ最大64メッセージに限定されます．それ以上のメッセー
ジは切捨てられます．
.PP
メッセージに含まれる可能性のあるwarningには次のものがあります．
.IP "・" 3
辞書がアンマウントできない．
.PP
第4引数としてNULLを指定した場合，warningメッセージは捨てられます．
.RE
.IP "(5)" 6
KC_SETUNDEFKEYFUNCTION \- 未定義キーに対する機能の設定
.RS
.PP
読みを入力している状態でC-tを打ったときのように未定義キーを入力した時
に取られる処理を指定します．未定義キーに対応して行われる処理としては以
下の処理があります．
.IP "マクロ名" 12
処理
.IP "kc_normal" 12
ビープ
.IP "kc_through" 12
アプリケーションプログラムに渡す
.IP "kc_kakutei" 12
確定しアプリケーションプログラムに渡す
.IP "kc_kill" 12
消去しアプリケーションプログラムに渡す
.PP
kc_normalを指定した場合，外部変数jrBeepFuncに設定された関数が未定義キー
入力時にライブラリによって自動的に呼び出されます．jrBeepFuncに値を設定
しない場合には(jrBeepFunc == NULLの場合には)何も起こりません．
.sp
(例)
.ft CW
.nf
  extern (*jrBeepFunc)(), beep();

  jrBeepFunc = beep;
  XKanjiControl(dpy, win, KC_SETUNDEFKEYFUNCTION, kc_normal);
.fi
.ft
.sp
.RE
.IP "(6)" 6
KC_SETMODEINFOSTYLE \- モード情報の表現
.RS
.PP
モード情報を文字列ではなくビットマップなどのデータで表示したい場合があ
ります．そのような場合にはモード情報として数値データが返ってくると処理
がしやすくなります．XKanjiControlでKC_SETMODEINFOSTYLEを
指定し，\fIarg\fPに１を渡すことによってそれ以後はXKanjiStatus構造体
の\fImode\fPメンバにはモードを表す数値に'@'(0x40)を加えた１文字が返さ
れるようになります．モードを表す数値に変換する場合には返ってきた文字列
から'@'(0x40)を引きます．モードを表す数値については入力モードの
変更((2)KC_CHANGEMODE)のこうを参照して下さい．
.RE
.IP "(7)" 6
KC_KAKUTEI，(8) KC_KILL \- 入力中の文字列の放棄
.RS
.PP
入力中の文字列を何らかの都合で放棄したい場合があります．放棄する場合に
入力中の文字列を確定文字列として取り込んでから放棄したい場合と全く捨て
てしまってから放棄したい場合があります．確定する
場合にはXKanjiControlにてKC_KAKUTEIを指定し，放棄する
場合にはKC_KILLを指定します．
.PP
この処理は表示に影響を与えるので第4引数にはXKanjiStatusWithValue構造
体を指定しなければなりません．
.sp
.nf
.ft CW
  XKanjiStatusWithValue ksv;
  XKanjiStatus ks;
  unsigned char buf[SOMESIZE];
  .....
  ksv.ks = &ks;
  ksv.buffer = buf;
  ksv.bytes_buffer = SOMESIZE;

  XKanjiControl(dpy, win, KC_KAKUTEI, &ksv);
  len = ksv.val;
  .....
.ft
.fi
.sp
.RE
.IP "(9)" 6
KC_QUERYMODE \- モードの問い合わせ
.RS
.PP
現在のモードを問い合わせるにはXKanjiControlでKC_QUERYMODEを指定します．
.PP
第4引数にはモード文字列を格納するための文字配列のポインタを指定します．
モード文字列はヌル文字で終わる文字列です．ここに数値が返るようにするに
はXKanjiControlでKC_SETMODEINFOSTYLEを指定してモード文字列のスタイル
を変更しておきます．
.sp
(例)
.nf
.ft CW
  char currentMode[MAXMODELEN];
  .....
  XKanjiControl(dpy, win, KC_QUERYMODE, currentMode);
  .....
.ft
.fi
.sp
.RE
.IP "(10)" 6
KC_SETSERVERNAME \- サーバの指定
.RS
.PP
かな漢字変換サーバとしてどのサーバを使うかをアプリケーションプログラム
を終了することなしに切替えることが可能です．かな漢字変換サーバとして接
続するべきサーバを指定するにはXKanjiControlでKC_SETSERVERNAMEを指定し
ます．第4引数には接続したいサーバ名を指定します．
.RE
.IP "(11)" 6
KC_SETINITFILENAME \- カスタマイズファイルの指定
.RS
.PP
カスタマイズファイルをアプリケーションプログラム側から変更することがで
きます．カスタマイズファイルの変更はXKanjiControlの
第3引数にKC_SETINITFILENAMEを指定し，第4引数にファイル名文字列を指定
することにより行います．この処理を行う場合はKC_INITIALIZEに先立って実
行しておかなければなりません．
.sp
(例)
.nf
.ft CW
  char *inifile = "app-own.canna"
  .....
  XKanjiControl(dpy, win, KC_SETINITFILENAME, initfile);
  .....
.ft
.fi
.sp
.RE
.IP "(12)" 6
KC_CLOSEUICONTEXT \- コンテクストのクローズ
.RS
.PP
XKanjiControlやXKanjiStringを呼び出すと，\fIdpy, win\fPの組み合わせに
対してひとつの変換コンテクストを割り当てます．
今まで使われていない\fIdpy, win\fPの
組み合わせをXKanjiStringあるいはXKanjiControlに与えることが可能
であり，その場合，そのウィンドウ用に新たにコンテクストが作成され必要なメ
モリが確保されます．
.PP
それまで使用していたウィンドウが使われなくなった場合に，そのウィンドウに割
り当てて使っていたコンテクスト用に確保されたメモリを
開放するにはXKanjiControlを第3引数にKC_CLOSEUICONTEXTを指定して呼び
出します．
.PP
この処理は表示の変化をともなうので第4引数にはXKanjiStatusWithValue構
造体を与えます．
.sp
(例)
.nf
.ft CW
  XKanjiStatusWithValue ksv;
  XKanjiStatus ks;
  unsigned char buf[SOMESIZE];
  .....
  ksv.ks = &ks;
  ksv.buffer = buf;
  ksv.bytes_buffer = SOMESIZE;

  XKanjiControl(dpy, win, KC_CLOSEUICONTEXT, &ksv);
  .....
.ft
.fi
.sp
.RE
.IP "(13)" 6
KC_QUERYMAXMODESTR \- モード表示文字列の最大長を求める．
.RS
.PP
初期化ファイルにてモード表示文字列がカスタマイズできますが，カスタマイ
ズされた結果モード表示文字列にどれだけの表示領域を確保するかを調べる必
要がある場合があります．XKanjiControlを第3引数にKC_QUERYMAXMODESTRを
指定して呼び出すことにより，モード表示文字列として何コラム必要かが返り
値として返されます．ここで言うコラムとは半角英数文字の文字幅を１とした
ときの値を示します．
.PP
第4引数は用いられないのでダミー値として0を与えます．
.sp
(例)
.ft CW
.nf
  int max_mode_columns;
  .....
  max_mode_columns = XKanjiControl(dpy, win, KC_QUERYMAXMODESTR, 0);
  .....
.fi
.ft
.sp
.RE
