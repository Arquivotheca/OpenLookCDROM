??PHF??

STARTINFOS
version=1
release=2
helpname=File API Programmer's Manual
copyright=Copyright (c) 1994 Bruno Rivas
vendor=Bruno Rivas
year=1994
month=04
day=04
ENDINFOS

!!

STARTRESOURCES
NEWRESOURCE
NUMBER=1
CLASS=Font
TYPE=In
LOADING=AtStart
NAME=-*-helvetica-bold-r-*-*-33-400-*-*-*-*-*-*

NEWRESOURCE
NUMBER=2
CLASS=Font
TYPE=In
LOADING=AtStart
NAME=-*-helvetica-bold-r-*-*-20-*-*-*-*-*-*-*

NEWRESOURCE
NUMBER=3
CLASS=Font
TYPE=In
LOADING=AtStart
NAME=-*-helvetica-bold-r-*-*-*-140-*-*-*-*-*-*

NEWRESOURCE
NUMBER=4
CLASS=Font
TYPE=In
LOADING=AtStart
NAME=8x13


NEWRESOURCE
NUMBER=100
CLASS=Color
TYPE=In
LOADING=AtStart
NAME=Red

NEWRESOURCE
NUMBER=101
CLASS=Color
TYPE=In
LOADING=AtStart
NAME=green4

NEWRESOURCE
NUMBER=102
CLASS=Color
TYPE=In
LOADING=AtStart
NAME=firebrick

ENDRESOURCES
!!
STARTTOPICS

NEWTOPIC
CLASS=MainTopic
NUMBER=0
LOADING=AtStart
NAME=Introduction
STARTITEMS
SetFont=1
SetJustify=Right
NewLine
DrawString=File
NewLine
DrawString=Programmer's Manual
NewLine
DrawString= 
NewLine
DrawString=      
SetJustify=Left
DefaultFont
SetSpacing=2  
NewLine
DefaultFont
DrawString=The File library has been written to abstract file and directory management from one plateform to another. This first release (1.0) should only work with UNIX compatible OS, even thought some DOS compilers (GNU compatible) may compile the library and offer full functionnalities for developpers.
NewLine
DrawString= 
NewLine
DrawString=The Help Server from the 
SetColor=100
DrawString=IMAN Distribution 1.2
DefaultColor
DrawString= makes numerous calls to that library. Next version of IMAN should generalize the use of the File library.
NewLine
DrawString=We heavily encourage programmers to use it instead of OS dependent file functions.
NewLine
DrawString= 
NewLine
DrawString= 
NewLine
SetColor=100
SetFont=3
DrawString=1. Using the File library
SetLeftMargin=30
SetSpacing=3
DefaultColor
DefaultFont
NewLine
StartTopicJumper=11
DrawString=1.1 Structure of the package
EndTopicJumper
NewLine
StartTopicJumper=12
DrawString=1.2 Building the library
EndTopicJumper
NewLine
StartTopicJumper=13
DrawString=1.3 Compiling with the library
EndTopicJumper
NewLine
DrawString= 
SetLeftMargin=0
SetSpacing=2
NewLine
SetColor=100
SetFont=3
DrawString=2. File management
SetLeftMargin=30
SetSpacing=3
DefaultColor
DefaultFont
NewLine
StartTopicJumper=21
DrawString=2.1 Obtaining the number of valid files for a search mask
EndTopicJumper
NewLine
StartTopicJumper=22
DrawString=2.2 Getting the valid files names
EndTopicJumper
NewLine
StartTopicJumper=23
DrawString=2.3 Getting the valid files informations
EndTopicJumper
NewLine
StartTopicJumper=24
DrawString=2.4 Verifying file access
EndTopicJumper
NewLine
StartTopicJumper=25
DrawString=2.5 Extracting path and file name from a string
EndTopicJumper
NewLine
StartTopicJumper=26
DrawString=2.6 Verifying file attributes and modes
EndTopicJumper
NewLine
StartTopicJumper=27
DrawString=2.7 Deleting files
EndTopicJumper
NewLine
SetSpacing=2
DrawString= 
SetLeftMargin=0
NewLine
SetColor=100
SetFont=3
DrawString=3. Directory management
SetLeftMargin=30
DefaultColor
DefaultFont
SetSpacing=3
NewLine
StartTopicJumper=31
DrawString=3.1 Getting current directory
EndTopicJumper
NewLine
StartTopicJumper=32
DrawString=3.2 Setting current directory
EndTopicJumper
NewLine
DrawString= 
SetLeftMargin=0
SetSpacing=2
NewLine
SetColor=100
SetFont=3
DrawString=4. Structure reference
SetLeftMargin=30
SetSpacing=3
DefaultColor
DefaultFont
NewLine
StartTopicJumper=41
DrawString=4.1 FileInfo
EndTopicJumper
ENDITEMS


NEWTOPIC
CLASS=MainTopic
NUMBER=11
LOADING=AtStart
NAME=Structure of the package
STARTITEMS
SetFont=1
SetJustify=Right
NewLine
DrawString=1.1
NewLine
DrawString=Structure of the package
NewLine
DrawString= 
NewLine
DrawString=      
SetJustify=Left
DefaultFont
SetSpacing=2  
NewLine
DefaultFont
DrawString=The File package is distributed with sources and binaries for UNIX-like operating systems. Files are copied in the following directories:
NewLine
DrawString= 
NewLine
DrawString= 
NewLine
SetFont=3
SetColor=101
DrawString=/usr/lib
DefaultFont
DefaultColor
SetLeftMargin=40
NewLine
DrawString= 
NewLine
DrawString=This directory contains the binary library 
SetColor=100
DrawString=libMfile.a 
DefaultColor
DrawString=with wich you must compile and link your application.
NewLine
DrawString= 
SetLeftMargin=0
NewLine
SetFont=3
SetColor=101
DrawString=/usr/include/misc/file
DefaultFont
DefaultColor
SetLeftMargin=40
NewLine
DrawString= 
NewLine
DrawString=This directory contains the header 
SetColor=100
DrawString=file.h 
DefaultColor
DrawString=that you must include in your source code. It may contain some more headers in the future, according to the library evolutions.
NewLine
DrawString= 
SetLeftMargin=0
NewLine
SetFont=3
SetColor=101
DrawString=/usr/lib/iman/help
DefaultFont
DefaultColor
SetLeftMargin=40
NewLine
DrawString= 
NewLine
DrawString=This directory should contain 
SetColor=100
DrawString= fileAPI.phf 
DefaultColor
DrawString=, the programming manual in the PHF format (Portable Help Format) used by the IMAN Help Server. A MAN page will come with next release.
NewLine
DrawString= 
SetLeftMargin=0
NewLine
SetFont=3
SetColor=101
DrawString=/usr/src/iman/libfile
DefaultFont
DefaultColor
SetLeftMargin=40
NewLine
DrawString= 
NewLine
DrawString=This directory contains all the sources of the File library. There are also documentation in ASCII, EZ (Andrew), Postscript and PHF (Portable Help Format). Sources are very easy to modify and you should be able to adapt them any way you want.
DefaultColor
ENDITEMS


NEWTOPIC
CLASS=MainTopic
NUMBER=12
LOADING=AtStart
NAME=Building the library
STARTITEMS
SetFont=1
SetJustify=Right
NewLine
DrawString=1.2
NewLine
DrawString=Building the library
NewLine
DrawString= 
NewLine
DrawString=      
SetJustify=Left
DefaultFont
SetSpacing=2  
NewLine
DefaultFont
DrawString=To build the File library, you must 'cd' to the 
SetColor=100
DrawString= /usr/src/misc/file
DefaultColor
DrawString= directory before doing anything. Be sure that the sources have been copied before.
NewLine
drawString= 
NewLine
DrawString=There is a Make file named 
SetColor=100
DrawString=makefile
DefaultColor
DrawString= that takes care of building and installing the library. If you want to build the library, enter :
NewLine
DrawString=
SetleftMargin=30
NewLine
SetFont=4
DrawString=$ make all
DefaultFont
NewLine
DrawString= 
SetLeftMargin=0
NewLine
DrawString=The library will be compiled and object files will be stored in the local file libMfile.a.
NewLine
DrawString=If you want to install the package once it is built, you can type :
NewLine
DrawString= 
SetLeftMargin=30
NewLine
SetFont=4
DrawString=$ make install
DefaultFont
SetLeftMargin=0
NewLine
DrawString= 
NewLine
DrawString=This procedure will install the headers, the library and the documentation in correct directories.
NewLine
DrawString= 
NewLine
DrawString= 
NewLine
DrawString=As you see, building the File package is very easy.
ENDITEMS


NEWTOPIC
CLASS=MainTopic
NUMBER=13
LOADING=AtStart
NAME=Compiling with the library
STARTITEMS
SetFont=1
SetJustify=Right
NewLine
DrawString=1.3
NewLine
DrawString=Compiling with the library
NewLine
DrawString= 
NewLine
DrawString=      
SetJustify=Left
DefaultFont
SetSpacing=2  
NewLine
SetColor=100
SetFont=3
DrawString=1.3.1 Headers
DefaultFont
DefaultColor
NewLine
DrawString= 
NewLine
DrawString=When you want to use the library functions, you must include the following line in your source code:
SetLeftMargin=40
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=#include <misc/file.h>
DefaultFont
SetLeftMargin=0
NewLine
DrawString= 
NewLine
DrawString=This line includes the library structures and some function prototypes for the compiler. If you forget this line, you may get errors at compilation or execution.
NewLine
DrawString=The compiler may also hang because some data or structures are missing. Here are the standard definition files that the File library needs and that you should include first of all:
SetLeftMargin=40
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=#include <stdio.h>
NewLine
DrawString=#include <fcntl.h>
NewLine
DrawString=#include <sys/types.h>
NewLine
DrawString=#include <dirent.h>
NewLine
DrawString=#include <sys/stat.h>
NewLine
DrawString=#include <time.h>
NewLine
DrawString=#include <errno.h>
NewLine
DrawString=#include <unistd.h>
DefaultFont
SetLeftMargin=0
NewLine
DrawString= 
NewLine
SetColor=100
SetFont=3
DrawString=1.3.2 Linking
DefaultFont
DefaultColor
NewLine
DrawString= 
NewLine
DrawString=At link time, you must explicitly specify the name of the library that holds the file management functions. Its name is 
SetColor=100
DrawString=libMfile.a 
DefaultColor
DrawString=. If you want to compile and link a file named code.c, this is the command line you should type :
SetLeftMargin=40
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=$ cc code.c -lMfile
DefaultFont
SetLeftMargin=0
NewLine
DrawString= 
NewLine
DrawString=In some cases, it may be necessary to add some other libraries like libc.a or libmmalloc.a if errors occur at link time or at run time.
ENDITEMS


NEWTOPIC
CLASS=MainTopic
NUMBER=21
LOADING=AtStart
NAME=Obtaining the number of valid files for a search mask
STARTITEMS
SetFont=1
SetJustify=Right
NewLine
DrawString=2.1
NewLine
DrawString=Number of valid files
NewLine
DrawString= 
NewLine
DrawString=      
SetJustify=Left
DefaultFont
SetSpacing=2  
NewLine
DefaultFont
DefaultColor
DrawString=Before getting the names or informations on a group of files that fit with your search mask, you may want to know how much files will be extracted. The following function returns the number of files found during the search :
SetLeftMargin=20
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=int file_GetNumValidFiles(directory,mask)
NewLine
DrawString=char *directory;
NewLine
DrawString=char *mask;
NewLine
DefaultColor
DefaultFont
SetLeftMargin=0
DrawString= 
NewLine
DrawString=where :
NewLine
DrawString= 
SetLeftMargin=20
NewLine
SetFont=4
DrawString=directory : 
DefaultFont
DrawString=the name of the directory in wich you want to search files.
NewLine
SetFont=4
DrawString=mask      : 
DefaultFont
DrawString=a wildcarded mask that can be composed of letters, periods and asterisks (*).
SetLeftMargin=0
NewLine
DrawString= 
NewLine
DrawString=This is an example to search every help files that have the phf extension (Portable Help Format) in the directory /usr/lib/iman/help:
SetLeftMargin=20
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=int number;
NewLine
DrawString=...
NewLine
DrawString=number=file_GetNumValidFiles("/usr/lib/iman/help","*.phf");
NewLine
DrawString= 
NewLine
DrawString=if(number<0) fprintf(stderr,"Error %d returned \n",number);
NewLine
DrawString=else fprintf(stderr,"%d files found for mask : *.phf\n",number);
SetLeftMargin=0
DefaultFont
NewLine
DrawString= 
NewLine
DrawString=If the function returns a negative number, an unknown error occured during search.
ENDITEMS

NEWTOPIC
CLASS=MainTopic
NUMBER=22
LOADING=AtStart
NAME=Getting the valid files names
STARTITEMS
SetFont=1
SetJustify=Right
NewLine
DrawString=2.2
NewLine
DrawString=Getting the valid files names
NewLine
DrawString= 
NewLine
DrawString=      
SetJustify=Left
DefaultFont
SetSpacing=2  
NewLine
SetFont=3
SetColor=100
DrawString=2.2.1 Getting names
SetLeftMargin=20
DefaultColor
DefaultFont
NewLine
DrawString= 
NewLine
DrawString=When you want to search files names, you can call 2 functions according you want them to be ordered or not in alphabetical order :
SetLeftMargin=40
NewLine
DrawString= 
NewLine
SetFont=4 
DrawString=char **file_GetNames(directory,mask,numf)
NewLine
DrawString=char *directory;
NewLine
DrawString=char *mask;
NewLine
DrawString=int  *numf;       /* RETURN */
NewLine
SetLeftMargin=20
DefaultFont
DrawString= 
NewLine
DrawString=or
SetLeftMargin=40
NewLine
DrawString= 
NewLine
SetFont=4 
DrawString=char **file_GetOrderedNames(directory,mask,numf)
NewLine
DrawString=char *directory;
NewLine
DrawString=char *mask;
NewLine
DrawString=int  *numf;       /* RETURN */
NewLine
SetLeftMargin=20
DefaultFont
DrawString= 
NewLine
DrawString=where :
SetLeftMargin=40
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=directory : 
DefaultFont
DrawString=the name of the directory in wich you want to search files.
NewLine
SetFont=4
DrawString=mask      : 
DefaultFont
DrawString=a wildcarded mask that can be composed of letters, periods and asterisks.
NewLine
SetFont=4
DrawString=numf      : 
DefaultFont
DrawString=a pointer on an integer that will hold the number of found files. If an error occur, a NULL value is returned in 
SetFont=4
DrawString=numf
DefaultFont
DrawString=.
SetLeftMargin=20
NewLine
DrawString= 
NewLine
DrawString=Both functions return a pointer on an array of names. If an error occured during search, the pointer is (char **)NULL.
NewLine
DrawString= 
SetLeftMargin=0
NewLine
SetFont=3
SetColor=100
DrawString=2.2.2 Freeing names
DefaultColor
DefaultFont
SetLeftMargin=20
NewLine
DrawString=
NewLine
DrawString=Names may take a lot of dynamic memory. When you don't need them anymore, you must free them with this function:
SetLeftMargin=40
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=int file_FreeNames(names,numfiles)
NewLine
DrawString=char **names;
NewLine
DrawString=int numfiles;
SetLeftMargin=20
NewLine
DefaultFont
DrawString= 
NewLine
DrawString=where :
NewLine
SetLeftMargin=40
DrawString= 
NewLine
SetFont=4
DrawString=names    : 
DefaultFont
DrawString=pointer on the array of names to free.
NewLine
SetFont=4
DrawString=numfiles : 
DefaultFont
DrawString=number of names to free.
SetLeftMargin=20;
NewLine
DrawString= 
NewLine
DrawString=If 
SetFont=4
DrawString=names
DefaultFont
DrawString= or 
SetFont=4
DrawString=numfiles
DefaultFont
DrawString= are NULL, the function returns a negative value. Else it returns 0.
NewLine
SetLeftMargin=0
DrawString= 
NewLine
SetFont=3
SetColor=100
DrawString=2.2.3 Example
DefaultColor
DefaultFont
SetLeftMargin=20
NewLine
DrawString=
NewLine
DrawString=This is an example to search every help files that have the phf extension (Portable Help Format) in the directory /usr/lib/iman/help:
SetLeftMargin=40 
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=int number;
NewLine
DrawString=int i;
NewLine
DrawString=char **names;
NewLine
DrawString=...
NewLine
DrawString=names=file_GetOrderedNames("/usr/lib/iman/help","*.phf",&number);
NewLine
DrawString= 
NewLine
DrawString=if(number<=0 && names==(char **)NULL)
NewLine
DrawString=  fprintf(stderr,"Error %d returned \n",number);
NewLine
DrawString=else {
NewLine
DrawString=      fprintf(stderr,"%d files found for mask : *.phf\n",number);
NewLine
DrawString=      for(i=0;i<number;i++)
NewLine
DrawString=        fprintf(stderr,"%s\n",names[i]);
NewLine
DrawString=      file_FreeNames(names,number);
NewLine
DrawString=     }
NewLine
ENDITEMS


NEWTOPIC
CLASS=MainTopic
NUMBER=23
LOADING=AtStart
NAME=Getting the valid files infos
STARTITEMS
SetFont=1
SetJustify=Right
NewLine
DrawString=2.3
NewLine
DrawString=Getting the valid files infos
NewLine
DrawString= 
NewLine
DrawString=      
SetJustify=Left
DefaultFont
SetSpacing=2  
NewLine
SetFont=3
SetColor=100
DrawString=2.3.1 Getting informations
SetLeftMargin=20
DefaultColor
DefaultFont
NewLine
DrawString= 
NewLine
DrawString=When you want to extract files informations like size, name or date of last modification, you also have 2 functions to find them:
SetLeftMargin=40
NewLine
DrawString= 
NewLine
SetFont=4 
DrawString=FileInfo **file_GetInfos(directory,mask,numf)
NewLine
DrawString=char *directory;
NewLine
DrawString=char *mask;
NewLine
DrawString=int  *numf;       /* RETURN */
NewLine
SetLeftMargin=20
DefaultFont
DrawString= 
NewLine
DrawString=or
SetLeftMargin=40
NewLine
DrawString= 
NewLine
SetFont=4 
DrawString=FileInfo **file_GetOrderedInfos(directory,mask,numf)
NewLine
DrawString=char *directory;
NewLine
DrawString=char *mask;
NewLine
DrawString=int  *numf;       /* RETURN */
NewLine
SetLeftMargin=20
DefaultFont
DrawString= 
NewLine
DrawString=where :
SetLeftMargin=40
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=directory : 
DefaultFont
DrawString=the name of the directory in wich you want to search files.
NewLine
SetFont=4
DrawString=mask      : 
DefaultFont
DrawString=a wildcarded mask that can be composed of letters, periods and asterisks.
NewLine
SetFont=4
DrawString=numf      : 
DefaultFont
DrawString=a pointer on an integer that will hold the number of found files. If an error occur, a NULL value is returned in 
SetFont=4
DrawString=numf
DefaultFont
DrawString=.
SetLeftMargin=20
NewLine
DrawString= 
NewLine
DrawString=Both functions return a pointer on an array of 
StartTopicJumper=41
DrawString=FileInfo
EndTopicJumper
DrawString= structures. If an error occured during search, the pointer is (FileInfo **)NULL.
NewLine
DrawString= 
SetLeftMargin=0
NewLine
SetFont=3
SetColor=100
DrawString=2.3.2 Freeing informations
DefaultColor
DefaultFont
SetLeftMargin=20
NewLine
DrawString=
NewLine
DrawString=Files informations do take a lot of memory. When you don't need them anymore, you must free them with this function:
SetLeftMargin=40
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=int file_FreeInfos(infos,numfiles)
NewLine
DrawString=FileInfo **infos;
NewLine
DrawString=int numfiles;
SetLeftMargin=20
NewLine
DefaultFont
DrawString= 
NewLine
DrawString=where :
NewLine
SetLeftMargin=40
DrawString= 
NewLine
SetFont=4
DrawString=infos    : 
DefaultFont
DrawString=pointer on the array of infos to be freed.
NewLine
SetFont=4
DrawString=numfiles : 
DefaultFont
DrawString=number of names to free.
SetLeftMargin=20;
NewLine
DrawString= 
NewLine
DrawString=If 
SetFont=4
DrawString=infos
DefaultFont
DrawString= or 
SetFont=4
DrawString=numfiles
DefaultFont
DrawString= are NULL, the function returns a negative value. Else it returns 0.
NewLine
SetLeftMargin=0
DrawString= 
NewLine
SetFont=3
SetColor=100
DrawString=2.3.3 Example
DefaultColor
DefaultFont
SetLeftMargin=20
NewLine
DrawString=
NewLine
DrawString=This is an example to search every help files that have the phf extension (Portable Help Format) in the directory /usr/lib/iman/help and show there size:
SetLeftMargin=40 
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=int number;
NewLine
DrawString=int i;
NewLine
DrawString=FileInfo **infos;
NewLine
DrawString=...
NewLine
DrawString=infos=file_GetOrderedInfos("/usr/lib/iman/help","*.phf",&number);
NewLine
DrawString= 
NewLine
DrawString=if(number<=0 && infos==(char **)NULL)
NewLine
DrawString=  fprintf(stderr,"Error %d returned \n",number);
NewLine
DrawString=else {
NewLine
DrawString=      fprintf(stderr,"%d files found for mask : *.phf\n",number);
NewLine
DrawString=      for(i=0;i<number;i++)
NewLine
DrawString=        fprintf(stderr,"%s : %d\n",infos[i]->name,infos[i]->size);
NewLine
DrawString=      file_FreeInfos(infos,number);
NewLine
DrawString=     }
ENDITEMS


NEWTOPIC
CLASS=MainTopic
NUMBER=24
LOADING=AtStart
NAME=Verifying file access
STARTITEMS
SetFont=1
SetJustify=Right
NewLine
DrawString=2.4
NewLine
DrawString=Verifying file access
NewLine
DrawString= 
NewLine
DrawString=      
SetJustify=Left
DefaultFont
SetSpacing=2  
NewLine
DefaultFont
DefaultColor
DrawString=A file may be inaccessible because of several problems. To be sure it really exists, you must verify its access:
SetLeftMargin=20
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=int file_VerifyAccess(path)
NewLine
DrawString=char *path;
NewLine
DefaultColor
DefaultFont
SetLeftMargin=0
DrawString= 
NewLine
DrawString=where :
NewLine
DrawString= 
SetLeftMargin=20
NewLine
SetFont=4
DrawString=path : 
DefaultFont
DrawString=the name of the directory and the file whose access you want to verify.
SetLeftMargin=0
NewLine
DrawString= 
NewLine
DrawString=The function returns 0 if it is OK, else it returns a negative value and 
SetFont=4
DrawString=errno
DefaultFont
DrawString= is set to indicate the error.
NewLine
DrawString= 
NewLine
DrawString=This is an example to verify a file exists:
SetLeftMargin=20
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=int ret;
NewLine
DrawString=...
NewLine
DrawString=ret=file_VerifyAccess("/usr/lib/iman/help/fileAPI.phf");
NewLine
DrawString= 
NewLine
DrawString=if(ret<0)
NewLine
DrawString=  fprintf(stderr,"File doesn't exist or is out of range : %d \n",errno);
NewLine
DrawString=else fprintf(stderr,"File exists\n");
ENDITEMS


NEWTOPIC
CLASS=MainTopic
NUMBER=25
LOADING=AtStart
NAME=Extracting path and file name from a string
STARTITEMS
SetFont=1
SetJustify=Right
NewLine
DrawString=2.5
NewLine
DrawString=Extraction of path and file name
NewLine
DrawString= 
NewLine
DrawString=      
SetJustify=Left
DefaultFont
SetSpacing=2  
NewLine
DefaultFont
DefaultColor
DrawString=Extracting a path or a file name from a string is always a problem for a programmer. With those function, it should be a very easy task for anybody:
SetLeftMargin=20
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=char *file_ExtractPath(str)
NewLine
DrawString=char *dir;
NewLine
DrawString= 
NewLine
DrawString=char *file_ExtractName(str)
NewLine
DrawString=char *dir;
NewLine
DefaultColor
DefaultFont
SetLeftMargin=0
DrawString= 
NewLine
DrawString=where :
NewLine
DrawString= 
SetLeftMargin=20
NewLine
SetFont=4
DrawString=str : 
DefaultFont
DrawString=the string from which you want to extract the directory name (the path) or the file name.
SetLeftMargin=0
NewLine
DrawString= 
NewLine
DrawString=The function returns NULL if 
SetFont=4
DrawString=str
DefaultFont
DrawString= is NULL, else it returns the extracted name. The returned data should be freed with 
SetFont=4
DrawString=free
DefaultFont
DrawString= once you don't need it anymore.
NewLine
DrawString= 
NewLine
DrawString=This is an example of extraction:
SetLeftMargin=20
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=char *filename;
NewLine
DrawString=char *path;
NewLine
DrawString=...
NewLine
DrawString=path=file_ExtractPath("/usr/src/misc/file/file.c");
NewLine
DrawString=filename=file_ExtractName("/usr/src/misc/file/file.c");
NewLine
DrawString= 
NewLine
DrawString=if(path!=(char *)NULL && filename!=(char *)NULL)
NewLine
DrawString=  fprintf(stderr,"Path=%s  Filename=%s\n",path,filename);
ENDITEMS


NEWTOPIC
CLASS=MainTopic
NUMBER=26
LOADING=AtStart
NAME=Verifying file attributes and mode
STARTITEMS
SetFont=1
SetJustify=Right
NewLine
DrawString=2.6
NewLine
DrawString=Verifying file attributes and mode
NewLine
DrawString= 
NewLine
DrawString=      
SetJustify=Left
DefaultFont
SetSpacing=2  
NewLine
DefaultFont
DefaultColor
DrawString=If you don't have the infos on a file, you may need to check its attributes and its mode another way. The File library has got several functions to do that; they are OS independent for the developper and avoid to compute many specific file attributes definitions :
SetLeftMargin=20
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=int file_IsDirectory(name)
NewLine
DrawString=char *name;
NewLine
DrawString= 
NewLine
DrawString=int file_IsSpecial(name)
NewLine
DrawString=char *name;
NewLine
DrawString= 
NewLine
DrawString=int file_IsNormal(name)
NewLine
DrawString=char *name;
NewLine
DefaultColor
DefaultFont
SetLeftMargin=0
DrawString= 
NewLine
DrawString=where :
NewLine
DrawString= 
SetLeftMargin=20
NewLine
SetFont=4
DrawString=name : 
DefaultFont
DrawString=is the name of the file you want to check. It can contain a path.
SetLeftMargin=0
NewLine
DrawString= 
NewLine
DrawString=The function returns 0 if it's False, 1 for True and a negative value for any error. 
NewLine
SetFont=4
DrawString=file_IsSpecial
DefaultFont
DrawString= returns 1 if the file is a block or a character file; 
SetFont=4
DrawString=file_IsNormal
DefaultFont
DrawString= returns 1 only if the file is not a block file, nor a character file nor a directory.
NewLine
DrawString= 
NewLine 
DrawString=This is an example of mode checking:
SetLeftMargin=20
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=char *filename="file.c";
NewLine
DrawString=int ret;
NewLine
DrawString=...
NewLine
DrawString=ret=file_IsNormal(filename);
NewLine
DrawString= 
NewLine
DrawString=if(ret==1)
NewLine
DrawString=  fprintf(stderr,"%s is a normal file\n",filename);
ENDITEMS


NEWTOPIC
CLASS=MainTopic
NUMBER=27
LOADING=AtStart
NAME=Deleting files
STARTITEMS
SetFont=1
SetJustify=Right
NewLine
DrawString=2.7
NewLine
DrawString=Deleting files
NewLine
DrawString= 
NewLine
DrawString=      
SetJustify=Left
DefaultFont
SetSpacing=2  
NewLine
DefaultFont
DefaultColor
DrawString=This part deals with deleting files. It is a very common but critical point for applications to erase some of there files (temporary, old, back-up files, etc...). One single function allows to remove them:
SetLeftMargin=20
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=int file_Delete(name)
NewLine
DrawString=char *name;
NewLine
DefaultColor
DefaultFont
SetLeftMargin=0
DrawString= 
NewLine
DrawString=where :
NewLine
DrawString= 
SetLeftMargin=20
NewLine
SetFont=4
DrawString=name : 
DefaultFont
DrawString=is the name of the file you want to delete. It can contain a path.
SetLeftMargin=0
NewLine
DrawString= 
NewLine
DrawString=The function returns 0 if it succeeded, else it returns a negative value for any error. 
NewLine
DrawString= 
NewLine 
DrawString=This is an example :
SetLeftMargin=20
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=char *filename="file.c";
NewLine
DrawString=int ret;
NewLine
DrawString=...
NewLine
DrawString=ret=file_Delete(filename);
NewLine
DrawString= 
NewLine
DrawString=if(ret!=0)
NewLine
DrawString=  fprintf(stderr,"Error deleting %s\n",filename);
ENDITEMS


NEWTOPIC
CLASS=MainTopic
NUMBER=31
LOADING=AtStart
NAME=Getting current directory
STARTITEMS
SetFont=1
SetJustify=Right
NewLine
DrawString=3.1
NewLine
DrawString=Getting current directory
NewLine
DrawString= 
NewLine
DrawString=      
SetJustify=Left
DefaultFont
SetSpacing=2  
NewLine
DefaultFont
DefaultColor
DrawString=It's always useful to know in wich directory the program is working. If you need to know in one of your C applications, use the following function:
SetLeftMargin=20
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=char *dir_GetCurrent()
NewLine
DefaultColor
DefaultFont
SetLeftMargin=0
DrawString= 
NewLine
DrawString=The function returns a pointer on the current directory if it succeeded, else it returns a NULL pointer. The string should be freed with
SetFont=4
DrawString= free . 
DefaultFont
NewLine
DrawString= 
NewLine 
DrawString=This is an example of getting the current directory:
SetLeftMargin=20
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=char *cwd;
NewLine
DrawString=...
NewLine
DrawString=cwd=dir_GetCurrent();
NewLine
DrawString= 
NewLine
DrawString=if(cwd==(char *)NULL)
NewLine
DrawString=  fprintf(stderr,"Error getting current directory\n");
NewLine
DrawString=else fprintf(stderr,"Current directory : %s\n",cwd);
NewLine
DrawString= 
NewLine
DrawString=if(cwd!=(char *)NULL) free(cwd);
ENDITEMS


NEWTOPIC
CLASS=MainTopic
NUMBER=32
LOADING=AtStart
NAME=Setting current directory
STARTITEMS
SetFont=1
SetJustify=Right
NewLine
DrawString=3.2
NewLine
DrawString=Setting current directory
NewLine
DrawString= 
NewLine
DrawString=      
SetJustify=Left
DefaultFont
SetSpacing=2  
NewLine
DefaultFont
DefaultColor
DrawString=It's also important to be able to change the current working directory of a program. To do that, use this function:
SetLeftMargin=20
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=int dir_SetCurrent(name)
NewLine
DrawString=char *name;
NewLine
DefaultColor
DefaultFont
SetLeftMargin=0
DrawString= 
NewLine
DrawString=where :
NewLine
DrawString= 
SetLeftMargin=20
NewLine
SetFont=4
DrawString=name :
DefaultFont
DrawString= is the name of the new directory.
SetLeftMargin=0
NewLine
DrawString= 
NewLine
DrawString=The function returns 0 it it's OK, else it returns a negative value and the current directory is not changed.
NewLine
DrawString= 
NewLine 
DrawString=This is an example of setting the current directory:
SetLeftMargin=20
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=char *cwd="/usr";
NewLine
DrawString=int ret;
DrawString=...
NewLine
DrawString=ret=dir_SetCurrent(cwd);
NewLine
DrawString= 
NewLine
DrawString=if(ret<0)
NewLine
DrawString=  fprintf(stderr,"Error setting current directory %s\n",cwd);
NewLine
DrawString=else fprintf(stderr,"Current directory set to %s\n",cwd);
NewLine
DrawString= 
ENDITEMS


NEWTOPIC
CLASS=MainTopic
NUMBER=41
LOADING=WhenFirstNeeded
NAME=FileInfo structure
STARTITEMS
SetFont=1
SetJustify=Right
NewLine
DrawString=4.1
NewLine
DrawString=FileInfo structure
NewLine
DrawString= 
NewLine
DrawString=      
SetJustify=Left
DefaultFont
SetSpacing=2  
NewLine
DefaultFont
DefaultColor
DrawString=The 
SetColor=100
DrawString=FileInfo
DefaultFont
DefaultColor
DrawString= structure is used to store various informations on a file. Its components are OS independent and should be filled correctly on other systems like MS-DOS or OS/2.  Here is the detail of the structure :
SetLeftMargin=20
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=typedef struct
NewLine
DrawString={
NewLine
DrawString=  char *name;
NewLine
DrawString=  unsigned short mode;
NewLine
DrawString=  unsigned short owner;
NewLine
DrawString=  unsigned group;
NewLine
DrawString=  long size;
NewLine
DrawString=  short year, month, day;
NewLine
DrawString=  short hour, minute, seconde;
NewLine
DrawString=}FileInfo;
DefaultFont
SetLeftMargin=0
NewLine
DrawString= 
NewLine
DrawString=where :
NewLine
DrawString= 
SetLeftMargin=20
NewLine
SetFont=4
DrawString=name : 
DefaultFont
DrawString=is the name of the file.
NewLine
SetFont=4
DrawString=mode : 
DefaultFont
DrawString=is the mode and attributes of the file. This is OS-dependent. Under UNIX systems, this is the OR combination of those possible values :
SetLeftMargin=50
NewLine
DrawString= 
NewLine
SetFont=4
DrawString=S_IFIFO  
DefaultFont
DrawString=FIFO-special
NewLine
SetFont=4
DrawString=S_IFCHR  
DefaultFont
DrawString=character special
NewLine
SetFont=4
DrawString=S_IFDIR  
DefaultFont
DrawString=directory node
NewLine
SetFont=4
DrawString=S_IFBLK  
DefaultFont
DrawString=block special
NewLine
SetFont=4
DrawString=S_IFREG  
DefaultFont
DrawString=ordinary file
NewLine
SetFont=4
DrawString=S_ISUID  
DefaultFont
DrawString=set user-ID on execution
NewLine
SetFont=4
DrawString=S_ISGID  
DefaultFont
DrawString=set group-ID on execution
NewLine
SetFont=4
DrawString=S_ISVTX  
DefaultFont
DrawString=(reserved)
NewLine
SetFont=4
DrawString=S_ENFMT  
DefaultFont
DrawString=record-locking enforced
NewLine
SetFont=4
DrawString=S_IRUSR  
DefaultFont
DrawString=read by owner
NewLine
SetFont=4
DrawString=S_IWUSR  
DefaultFont
DrawString=write by owner
NewLine
SetFont=4
DrawString=S_IXUSR  
DefaultFont
DrawString=execute (search) by owner
NewLine
SetFont=4
DrawString=S_IRGRP  
DefaultFont
DrawString=read by group
NewLine
SetFont=4
DrawString=S_IWGRP  
DefaultFont
DrawString=write by group
NewLine
SetFont=4
DrawString=S_IXGRP  
DefaultFont
DrawString=execute (search) by group
NewLine
SetFont=4
DrawString=S_IROTH  
DefaultFont
DrawString=read by others
NewLine
SetFont=4
DrawString=S_IWOTH  
DefaultFont
DrawString=write by others
NewLine
SetFont=4
DrawString=S_IXOTH  
DefaultFont
DrawString=execute (search) by others
NewLine
SetLeftMargin=20
DrawString= 
NewLine
SetFont=4
DrawString=owner : 
DefaultFont
DrawString=user ID of the file's owner
NewLine
SetFont=4
DrawString=group : 
DefaultFont
DrawString=group ID of the file's group
NewLine
SetFont=4
DrawString=size  : 
DefaultFont
DrawString=file size in bytes
NewLine
SetFont=4
DrawString=year  : 
DefaultFont
DrawString=year of last file modification
NewLine
SetFont=4
DrawString=month : 
DefaultFont
DrawString=month of last file modification
NewLine
SetFont=4
DrawString=day   : 
DefaultFont
DrawString=day of last file modification
NewLine
SetFont=4
DrawString=hour  : 
DefaultFont
DrawString=hour of last file modification
NewLine
SetFont=4
DrawString=minute  : 
DefaultFont
DrawString=minute of last file modification
NewLine
SetFont=4
DrawString=seconde : 
DefaultFont
DrawString=seconde of last file modification
NewLine

ENDITEMS


ENDTOPICS
!!

