@begin(header)
author: ackerman=ag@ics.uci.edu
show_author: ShowNone
author_organization: MIT
node_expert: ackerman=ag@ics.uci.edu
expiration_date: 11/06/93
last_modifier: ackerman=ag@ics.uci.edu
last_mod_date: 11/06/91
mod_num: 1
@end(header)
@b<How Answer Garden Works>

Below are excerpts from a working paper on Answer Garden, "Answer
Garden and the Organization of Expertise" (by Mark S. Ackerman),
available from the MIT Center for Coordination Science:

In the following description, two versions of Answer Garden are to be
distinguished.  There is a version that will be employed in the user
study.  This version will be sent out on the MIT X11 release 5
"Contrib" tape.  Additionally, there will be a release version that
will incorporate any changes found to be necessary from the field
study, as well as some additional components.  Internally, Answer
Garden looks like a collection of separate services held together by a
common core:

		(figure omitted)

In Answer Garden, links are stored symbolically in the information
nodes.  The links are resolved at run-time through the Node Service,
which in turn relies on the File Service for access to actual storage.
All data is kept in Ascii for portability.  A flat file implementation
of the File Service is being provided; it is possible to implement a
File Service using a fully relational database.  Each site has a
separate information database, both for convenience and for local
tailorability.  

In terms of what the user sees, Answer Garden is a support mechanism
for a wide variety of user interface presentations, information
retrieval engines, and communication mechanisms.  There are several
built-in presentation objects, including Structured Browser nodes for
questions and for structured text layout, Discussion nodes for
collections of electronic mail, QA nodes to handle large numbers of
questions and answers as well as bug reports and enhancement
announcements, and Code nodes for software examples.  Each has
anywhere from a slightly to a radically different interface
presentation.  The design of Answer Garden is such that sites
requiring additional presentation styles or separate objects can
easily add their own (each in what is called a Sorta-Object).  

In addition, Answer Garden supports (or can support) a wide variety of
information retrieval engines.  The diagnostic questions, shown above,
can be thought of a retrieval engine for computer-sophisticated, but
domain-naive end-users.  There is some evidence that properly
structured questions may ease the burden on naive users of formulating
proper queries (Sebrechts and Swartz 1991).  Other engines include
keyword retrieval and semi-structured retrievals.  As well, Answer
Garden supports the use of a variety of communication engines.  Answer
Garden currently supports two standard Unix electronic mail packages,
but interfaces to MIT's Zephyr synchronous communication package,
voice mail, and video links are planned.  Only keyword retrieval and
standard Unix mail packages are being supported for the user study
version.

			(figure omitted)

The portion of the software shown above is actually just the interface
presented to the end-user.  Usually, this "front-end" is called the
Answer Garden.  More properly, there are actually five components.
The "front-end" interface is combined with an authoring subsystem.
People authoring new information nodes do so in the context of the
Answer Garden itself.  There are (or will be) also some additional
authoring tools, which in the Unix style are stand-alone programs, to
test for dangling references and node completeness, to build the
grapher trees, and to check for pruning requirements.

In a production system, a publish-subscribe server and a
question-answer tracking server would be required.  Assuming a
centralized service, user sites who wished new information would
"subscribe" to Answer Garden answers.  They would want to do so by
Answer Garden subtree since there will be many subtrees that are not
of interest to all sites.  As experts authored new information, they
ould send the answers (and any accompanying diagnostic questions) to
this centralized service.  The service would, then, in turn "publish"
the answers to the subscribers.  The question-answer tracking server
would log in-coming questions, lock questions for individual experts,
and make sure that each question is answered.  It is to employ a
hand-shaking protocol similar to that of TCP-IP but implemented
through electronic mail.  A prototype of the latter server is being
implemented for the user study in Object Lens.  A prototype of the
publish-subscribe server will be built for the release version; there
is no need for it in the user study.  

On the end-user site side, a simple program to show any incoming
Answer Garden answers is required.  Many sites will not permit
incoming files to be placed in their file system without the ability
to manually override.  Of particular concern is that Answer Garden
answers contain code examples; this raises the security hackles of
site administrators.
