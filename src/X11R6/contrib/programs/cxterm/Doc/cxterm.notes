SOME NOTES ON CXTERM -- Chinese xterm for X11R6


This is rev 1 for X11R6 (referred to as version 11.6.1).	(patch-level 0)

--------------

%% PLATFORM:

cxterm has been tested on the following platform:

	Sun3 (SunOS 4.0)
	Sun SPARCs (SunOS 4.1 and SunOS 5.3)
	SGI (IRIX 5.2)
	PC clones (Linux)

--------------

%% CHINESE ENCODING:

cxterm 11.6.1 is encoding independent.  Currently, it supports
both GB (GuoBiao) and BIG5 encoding.  The default encoding is GB.
Options "-BIG5" or "-hz BIG5" will start cxterm in BIG5 encoding.
It also provides minimal support for JIS (Japanese) and KS (Korean).

GB is an *example* of such encodings that in which one Chinese
character is represented by two bytes, and the highest-bits (MSB,
or the 8th-bit) are set (i.e. == 1) in both bytes.

BIG5 is an *example* of such encodings that in which one Chinese
character is represented by two bytes, the highest-bit is set
in the first byte but it may be either set (i.e. == 1) or unset
(i.e. == 0) in the second byte.

There are many implementation of BIG5.  The reference standard
adopted in this cxterm is the implementation by ETen, as in ETen
DOS.  The so-called "HKU-Big5" adopted in X11R5 cxterm is no longer
supported.  A utilities in ../Appl/hku2big5 is provide for you to
converted HKU-Big5 text file to the current BIG5 standard.

--------------

%% FONTS:

cxterm needs one Chinese font, one ASCII (Latin-1) font, and an
optional Chinese bold font and an optional ASCII (Latin-1) bold
font.  The Chinese font should be exactly 2 times as width as the
ASCII font.  To get nice-looking screen, all these fonts should
have the same height, ascent and descent.  The following matching
is good.

	encoding	Chinese font		ASCII font
	--------	------------		----------
	GB		hanzigb16st		 8x16
	GB		hanzigb16fs		 8x16
	GB		hanzigb24st		12x24
	BIG5		hku16et			 8x16

If you feel that lines are too close together, you can set the
spacing between lines using the option "-hls numberOfPixel".

The Chinese font must match the encoding adopted, otherwise all
Chinese characters will become meaningless garbage on the screen.

The default encoding is GB.  The Chinese fonts used with GB encoding
can have encoding name "GB2312.1980-0" or "GB2312.1980-1", which
means the GB2312-80 character set in GL or GR encoding space.
There are three GL Chinese fonts included in X11R6 core distribution.

To use BIG5, use the command

        cxterm -fh hku16et -fn 8x16 -BIG5


--------------

%% INPUT METHODS:

Input methods are stored as external files and are loaded by cxterm
in run-time on demand.  Input methods are distributed in textual
format as "Textual Input Table" files (with filename suffix .tit).
They must be converted to compiled format as "Compiled Input Table"
files (with filename suffix .cit) before used in cxterm.  The program
tit2cit provided in ../utils/ is for this purpose.

The environment variable HZINPUTDIR defines the search path for the
directory containing the .cit files.  Alternative directory names
are separated by a colon (:).  For example, given an input method
name FOO, if HZINPUTDIR is set to

	/usr/local/cxterm/Dict:/home/abc/Dict:.

cxterm will search the following files, until one is found:

	1) /usr/local/lib/cxterm/dict/FOO.cit
	2) /home/abc/Dict/FOO.cit
	3) ./FOO.cit

In case of HZINPUTDIR is undefined, cxterm will search FOO.cit
in the current directory.

Another way to change the search path in run-time is through
cxterm escape sequence, or through command "hzimpath -d".

Input method also has to match the encoding used by cxterm.

For GB encoding, 3 input methods are built-in:
        ASCII   (Normal English),
        IC      (Internal coding represented in 4 hexa-decimals),
        QW      (GB Qui Wei: row number and the position in the row),

For BIG5, JIS, or KS encoding, 2 input methods are built-in:
        ASCII
        IC

Actually, ASCII and IC are good for any encoding.

Special keys to switch between different input methods are in the form
of cxterm resources and can be defined by user.  Normal place to put
these definitions is the file ".Xdefaults" at your home directory,
or sometimes, ".Xresources".  For advanced users, X11R5 manual page
X(1) contains more ways to put user- or machine-specific resources.

Those who don't know the details of X can also use predefined input
methods by appending the file "CXterm.ad" (you can find it in the
cxterm directory) to ~/.Xdefaults; or simply use the built-in key
binding:

        <KeyPress> F1:  switch-HZ-mode(ASCII)   \n\
        <KeyPress> F2:  switch-HZ-mode(IC)      \n\

Here is the resources given in "CXterm.ad" for input method switching:

cxterm*VT100.Translations: #override\
	<KeyPress> F1:	switch-HZ-mode(ASCII)	\n\
 !Shift <KeyPress> F2:	switch-HZ-mode(QW)	\n\
	<KeyPress> F2:	switch-HZ-mode(IC)	\n\
	<KeyPress> F3:	switch-HZ-mode(gb/QJ)		\n\
	<KeyPress> F4:	switch-HZ-mode(gb/Punct)	\n\
 !Shift <KeyPress> F5:	switch-HZ-mode(gb/PY)		\n\
	<KeyPress> F5:	switch-HZ-mode(gb/TONEPY)	\n\
 !Shift <KeyPress> F6:	switch-HZ-mode(gb/CCDOSPY)	\n\
	<KeyPress> F6:	switch-HZ-mode(gb/ZIRANMA)	\n\
 !Shift <KeyPress> F7:	switch-HZ-mode(gb/CangJie)	\n\
	<KeyPress> F7:	switch-HZ-mode(gb/WuBi)		\n\
 !Shift <KeyPress> F8:	switch-HZ-mode(gb/CTLau)	\n\
	<KeyPress> F8:	switch-HZ-mode(gb/English)	\n\
 !Shift <KeyPress> F9:	switch-HZ-mode(gb/QianMa)	\n\
	<KeyPress> F9:	switch-HZ-mode(gb/SW)		\n\
	<KeyPress> F10:	switch-HZ-mode(gb/TeleCode)	\n\
 !Shift <KeyPress> F11:	switch-HZ-mode(gb/KATAKANA)	\n\
	<KeyPress> F11:	switch-HZ-mode(gb/HIRAGANA)	\n\
  ~Meta <KeyPress> Escape:	insert() switch-HZ-mode(ASCII)

In this example, pressing <F2> will switch the current input method
to IC; <F5> will switch again to TONEPY method (an external input
method, requires TONEPY.cit to be in the subdirectory "gb" of the
search paths of .cit files); <shift>+<F5> will switch again to PY
method, and so on.

Note that the last line above is a good setting for those who use the
editor "celvis".  Pressing <ESC> will pass ESC to "celvis" to end
insertion mode, and cause cxterm to switch back to ASCII (so that you
can continue to enter celvis command in ASCII mode).

Each keypress definition in cxterm resources takes the following form:

    [optional_mod_keys] <KeyPress> key_name: switch-HZ-mode(input-method-name)

"\n\" should be appended to the line except when it is the last one.

Examples:

-- <F2> switch to input method named MYNEW:

        <KeyPress> F2: switch-HZ-mode(MYNEW)

-- <Shift-F3> switch to input method IC:

        Shift <KeyPress> F3: switch-HZ-mode(IC)

-- <Ctrl-Meta-F6> switch to input method called CANTONESE:

        Ctrl Meta <KeyPress> F6: switch-HZ-mode(CANTONESE)

Another way to switch current input method is through cxterm
escape sequence, or command "hzimpath" (in ../utils/).

--------------

%% ASSOCIATION INPUT:

Association input is also stored as an external file. It is loaded
only when cxterm starts up.  You cannot change the association
table once loaded, however you can start another cxterm using a
different association input file.  The cxterm will search for the
association file in the same way it searches for the .cit files,
i.e., specified by HZINPUTDIR.

Here is the example as used in "CXterm.ad":

cxterm*hanziAssociation:	gb/simple.lx

This means the association table is in a file "simple.lx" under
a subdirectory "gb", which must be in a path contained in HZINPUTDIR.

--------------

%% ON EIGHT BIT CLEAN SYSTEM:

Cxterm requires an 8-bit clean Unix kernel and 8-bit clean SHELL
(SHELL means any shell program) to run successfully.

Cxterm has made the effect of "stty -strip" when it is started,
thus 8-bit/byte data will pass through kernel and SHELL to cxterm.
However, manually setting the tty to pass all 8 bits is required
in some systems.  The command options are system-dependent.

8-bit hanzi data is often mistakenly input as command to SHELL;
and some SHELL (e.g. C shell) regards the data as end-of-file to
SHELL causing cxterm to exit and the window to vanish.  To
overcome this problem in C shell, the user should use the csh
(or equivalent) command "set ignoreeof".
You won't have this problem in sh or ksh.

--------------

%% WHAT HAS BEEN CHANGED SINCE X11R5

If you have been using X11R5 cxterm, you should have no problem
switching to X11R6 cxterm.  X11R6 cxterm has the following new
features:  phrase input (input more than one hanzi at a time),
new textual input table that supports phrase input, wildcard 
and wildchar input (just like the * and ? in a Unix filename),
association input (after you input a word, some "likely-following"
hanzi or phrase are prompted for a further selection, etc.

The external input methods are reorganized into sub-directories
by their encoding.  More input methods are included.

The cxterm 11.5.1 .cit files can NOT be used in 11.6.1 without
recompile.

The tit2cit, cit2tit, hzimpath are re-located in ../utils/.

--------------

%% BACKGROUND HISTORY:

In 1988, when the authors, Yongguang Zhang and Man-Chi Pong, were with
the ISAS (Institute of Software, Academia Sinica, Beijing, China),
ISAS and ISE (the Institute of System Engineering of the Ministry of 
Electronic Industries, Beijing, China) jointly developed a Chinese
terminal emulator called ccxterm.  It was for X11R2.

X11R3 ccxterm was later modified from X11R2 ccxterm to run under X11R3.
There is no known continue work on ccxterm after this version.

In 1990, Man-Chi developed a new Chinese xterm, starting from the X11R4
xterm.  It was a much better design although part of the input handling
and input methods code were borrowed from ccxterm.  To distinguish
itself from ccxterm, it is called cxterm, version 11.4.1.

Later Yongguang developed a new scheme of haniz input processing and
implemented it in cxterm.  It is then named 11.4.2.  The new scheme
implements hanzi input as a generic tree traversal, with input methods
loaded at run-time and user-defined input method supported.

In 1991, Yongguang rewrote the cxterm based on the X11R5 xterm shortly
after MIT release the X11R5 core distribution.  The hanzi display and
the input area were redesigned to remove all the old ccxterm codes that
were borrowed in X11R4 cxterm.  This version was denoted 11.5.1.

Man-Chi and Yongguang also published a paper in 1992 describing the
design and implementation of X11R4/R5 cxterm:

	cxterm: A Chinese terminal emulator for X Window system,
	Software Practice & Experience
	22(10):809-826, Oct. 1992.

There are two pieces of derived work from cxterm 11.5.1.  One is the
MEPY cxterm by Qing Zhang of Canada, and cxterm NewFace by Xiaokun Zhu
of United Kingdom.  They both provide additional input functions to
cxterm.  MEPY provides some kind of mistype-tolerance, i.e., you don't
have to type exact keystroke to input a hanzi, while NewFace adds
phrase input as well as association input.

There was also separate work on cxterm in HKUST (Hong Kong University of
Science and Technology).  Man-Chi led a research project there to study
various techniques for implementing fast Chinese input on cxterm.  For
those who are interested in some research results and prototype, you
can contact Man-Chi Pong at mcpong@cs.ust.hk.

This new X11R6 cxterm is based on X11R6 xterm.  Most hanzi processing
code is re-designed to accomplish the new features.

--------------

%% IMPLEMENTATION NOTES:

cxterm is modified from X11R6/xc/programs/xterm.  You don't need
the internationalization extension to install and run cxterm. 

Extra compilation flags CFLAGS are -DHANZI.  If -DHANZI is not given
in the compilation, cxterm will be exactly the same as xterm.

Several .c and .h files are added.  Their filenames all begin with
"HZ".  HZInput.c is the interface between cxterm and the rest of xterm.
We tried to minize chances to the xterm files.  HZchList.c maintains
the choice list.  HZfilter.c defines builtin input methods and 
table-driven external input methods.  HZinArea.c maintains the hanzi
input area (such as creation, resize, and display).  HZinCntx.c
uses the concept of Input Context, a data structure for incremental
input conversion.  HZinMthd.c manages the input methods (such as
input method switch, unload, reset, etc.).  HZload.c reads the input
tables and association files.  HZtrie.c is the TRIE data structure
for matching input keys.  HZutil.c has some utility routines.
In addition, HZinput.h defines all the data structure used,
HZtable.h defines the format of the external input methods.

The hanzi input area is designed in the fashion of a widget,
although it isn't a widget yet.  The data structure of input area
is encapsulated in the field "screen.hzIwin".  Only the height of
the input area is used in "screen" as "screen.hzIwin_height".

The overall height of the cxterm window is defined as
"(max_rows+1) * FontHeight(screen) + 2 * border + hzIwin_height";
hzIwin_height is in turn defined as hzIwin.rows * FontHeight(screen)
plus 1, the width of the rule line.

The hanzi input methods are separated from the cxterm program
itself.  Dictionaries are organized in TRIE data structures.

--------------

%% BUGS

There must be some bugs, somewhere.

------------
END OF Notes
------------
