head	1.8;
access;
symbols;
locks; strict;
comment	@ * @;


1.8
date	92.12.13.07.45.03;	author lacey;	state Exp;
branches;
next	1.7;

1.7
date	92.12.12.22.03.41;	author gaubert;	state Exp;
branches;
next	1.6;

1.6
date	92.12.10.17.14.22;	author gaubert;	state Exp;
branches;
next	1.5;

1.5
date	92.12.10.09.03.25;	author gaubert;	state Exp;
branches;
next	1.4;

1.4
date	92.12.09.17.14.07;	author gaubert;	state Exp;
branches;
next	1.3;

1.3
date	92.12.09.17.11.12;	author gaubert;	state Exp;
branches;
next	1.2;

1.2
date	92.12.09.07.56.34;	author gaubert;	state Exp;
branches;
next	1.1;

1.1
date	92.12.08.23.27.27;	author gaubert;	state Exp;
branches;
next	;


desc
@This is the gant chsrt generator
@


1.8
log
@*** empty log message ***
@
text
@/* xplan - project planning tool
 *
 * Copyright (C) 1992 Brian Gaubert, Mark M. Lacey, Richard Malingkas,
 * and Mike Marlow.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License (distributed with this program in the file
 * COPYING) for more details.
 * 
 * If you did not received a copy of the GNU General Public License
 * along with this program, write to the Free Software Foundation,
 * Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * 
 * Since this was a project for a one semester software engineering
 * course, the authors will not be offering support for the product
 * after its release.
 *-----------------------------------------------------------------------------
 * FILE gantt.c ***************************************************************
 *  
 *  DESCRIPTION OF CONTENTS
 *  
 *     This file contains the function generate_gantt_chart(), This
 *  function will be described in the header for the function under
 *  the FUNCTION heading.  
 *  
 * FILE gantt.c */

#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "db.h"
#include "julian.h"
#define TASKS_ON_SHEET 25
#define SUNDAY 6;
static FILE *fp;
extern char export_filename[];

/* FUNCTION generate_gantt_charts()********************************************
 *
 *  PURPOSE
 *
 *  This function will generate latex output of gent charts as shone
 *  in the gantt charts from within the project. In order to generate the
 *  gantt charts, the user must, after the file has been created, type
 *  the command latex <filename>. Then to print the user must type in
 *  dvips <filename> | lpr -P<printer>.
 *
 *  SAMPLE CALL
 *
 *  gantt = generate_gantt_charts();
 *   
 *  INPUTS
 *
 *   none.
 *
 *  OUTPUTS
 *
 *  <filename> - this is the filename of the users choice as he/she
 *               has selected from the user interface.
 *
 *  AUTHOR/AUDITOR/TESTER
 *
 *  Author.... Brian Gaubert Dec, 2, 1992
 *  Auditor... Brian Gaubert Dec, 2, 1992
 *  Tester.... Brian Gaubert Dec, 2, 1992
 *
 *  MODIFICATIONS (most recent to least)
 *
 * FUNCTION generate_gantt_charts() */


int generate_gantt_charts()
{


   /* Initializing all of the variables for the generation of the
      gantt charts */
   int cur_count = 1;
   int begin_count = 1;
   int end_count = 25;
   int first_prj_date = 0;
   int pages_accross = 0;
   int pages_down = 0;
   int task_length = 0;
   int start_of_task = 0;
   int first_date = 0;
   int last_date = 0;
   int number_of_task = 0;
   int total_length = 0;   
   int i = 0, j= 0, k = 0, ii, jj, kk;
   int task_count = 1;
   int top_page = 0;
   int box_height = 10;
   int end_of_task = 0;

   /* This initialization of the two dem. array will be used in printing
      the days of the week to a page in the charts. The reason for the
      same data twice in a row is because when the modulus command is used
      on the julian date, the the range of values is from 0 to 6, and
      if the number that you get when you do the modulus is six then
      six + 1 etc. will give the next date in the week */      
   char weekday[14][4] = {"Mon","Tue","Wed","Thr","Fri","Sat","Sun",\
			    "Mon","Tue","Wed","Thr","Fri","Sat","Sun"};
   int pages_down_count = 1;
   int dummy = 0;   
   struct task_list *temp;
   struct task_node *node;
   struct task_list *temp2;
   struct task_node *node2;
   char c;

   /* Use this task list to get hte number of pages accross and down */
   temp = get_main_task_list();
   node = temp->head;

   /* If the task list is null return 1 */
   if (node == NULL) {
      return 1;
   }

   /* Open the file and setup the filepointer */
   fp = fopen(export_filename,"w");

   /* If the file pointer is NULL, error in the file, then return 1 */
   if (fp == NULL) {
      return 1; 
   }

   /* Get the first date, the last date and the total days of the */
   /* project */
   first_date = node->data->planned_start_date;
   while( node != NULL ) {
	last_date = node->data->planned_end_date;
	number_of_task++;
        node = node->next;
     }
   total_length = abs(last_date - first_date);
  

   /* Calculate the pages accross */
      pages_accross = total_length/14 + 1;
      
   /* Calcualte the number of pages down */
      pages_down = number_of_task/25 + 1;

   /* Use this task list to run throught he list to find out what */
   /* information goes on what page of the gantt charts */
   temp2 = get_main_task_list();
   node2 = temp2->head;
   
   /* Calculate the first prj date of the chart */
   first_prj_date = first_date;

   /* Set uf the critical path of the project in the database */
   calc_critical();
   
   /* Print out the beginning of the latex file */
   fprintf(fp,"\\documentstyle[11pt,fullpage]{article}\n");
   fprintf(fp,"\\begin{document}\n");

   /* Loop until the pages down variable is exhausted */
   for(j=1;j<= pages_down;j++) {

      /* Loop until the pages accross variable is exhausted */
      for(i=1;i <= pages_accross;i++) {

	 /* Set up the top of each page with the days of the week and */
	 /* the start date of the project and the date that follows */
	 /* that date weekly */
	 task_count = 1; 
	 top_page = 600;
	 dummy = first_date % 7;
	 fprintf(fp,"\\begin{picture}(400,600)\n");
	 fprintf(fp,"\\put(50,648){%s}\n",\
		 julian_to_str_date(first_prj_date));
	 fprintf(fp,"\\put(260,648){%s}\n",\
		 julian_to_str_date(first_prj_date + 7));
	 fprintf(fp,"\\multiput(50,620)(210,0){2}{\\framebox(30,20){%s}}\n",\
		 weekday[dummy]);
	 fprintf(fp,"\\multiput(80,620)(210,0){2}{\\framebox(30,20){%s}}\n",\
		 weekday[dummy+1]);
	 fprintf(fp,"\\multiput(110,620)(210,0){2}{\\framebox(30,20){%s}}\n",\
		 weekday[dummy+2]);
	 fprintf(fp,"\\multiput(140,620)(210,0){2}{\\framebox(30,20){%s}}\n",\
		 weekday[dummy+3]);
	 fprintf(fp,"\\multiput(170,620)(210,0){2}{\\framebox(30,20){%s}}\n",\
		 weekday[dummy+4]);
	 fprintf(fp,"\\multiput(200,620)(210,0){2}{\\framebox(30,20){%s}}\n",\
		 weekday[dummy+5]);
	 fprintf(fp,"\\multiput(230,620)(210,0){2}{\\framebox(30,20){%s}}\n",\
		 weekday[dummy+6]);

	 /* Use this task list as the temp pointer for each page */
	 temp = get_main_task_list();
	 node2 = temp->head;

	 /* Go until the list is exhausted */
	 while(node2 != NULL) {

	    /* Set up the variable for the critical path */
	    if (node2->data->critical_path) {
	       c = 'C';
	    }
	    else {
	       c = ' ';
	    }

	    /* This section of code will determine what information */
	    /* goes on what screen and will write that information to */
	    /* the file specified by the user. If the */
	    /* start and end dates of the task are equal then ist is */
	    /* assumed to be a milestone and a diamond will be written */
	    /* to the file. A diamond will also be written to the file */
	    /* if the milestone was selected by the user. but all */
	    /* other information will be latex format to generate bars */
	    /* on the page */
	    if ((task_count >= begin_count)&&(task_count <= end_count)) {
	       
	       start_of_task = node2->data->planned_start_date - first_prj_date;
	       end_of_task = node2->data->planned_end_date - first_prj_date;
	       
	       
	       if ((end_of_task - start_of_task) == 0) {
		  fprintf(fp,"\\put(%d,%d){$\\Diamond$}\n",\
			  (end_of_task*30)+50,top_page);
	       }
	       else {
		  if ((end_of_task <= 14) && (start_of_task >= 1)) {
		     fprintf(fp,"\\put(%d,%d){\\framebox(%d,%d)[rr]{%c  }}\n",\
			     (start_of_task * 30)+50, top_page,\
			     (end_of_task - start_of_task)*30,\
			     box_height,c);       
		     if (node2->data->milestone == 1) {
			fprintf(fp,"\\put(%d,%d){$\\Diamond$}\n",\
				(end_of_task*30)+50,top_page);
		     }
		  }
		  else if ((start_of_task <= 1) && (end_of_task <= 14) \
			   && (end_of_task >= 1)) {
		     fprintf(fp,"\\put(50,%d){\\framebox(%d,%d)[rr]{%c  }}\n",\
			     top_page, end_of_task*30,\
			     box_height,c);
		     if (node2->data->milestone == 1) {
			fprintf(fp,"\\put(%d,%d){$\\Diamond$}\n",\
				(end_of_task*30)+50,top_page);
		     }
		  }		  
		  else if ((end_of_task > 14) && (start_of_task <= 1)) {       
		     fprintf(fp,"\\put(50,%d){\\framebox(420,%d)[rr]{%c  *}}\n",\
			     top_page, box_height,c);         
		  }
		  else if ((end_of_task > 14) && (start_of_task >= 1)\
			   && (start_of_task <= 14)) {
		     if ((14 - start_of_task) == 0 ) {
			fprintf(fp,"\\put(%d,%d){\\framebox(30,%d)[rr]{%c  *}}\n",\
				(start_of_task*30)+50,top_page,box_height,c);
		     }
		     else {
			fprintf(fp,"\\put(%d,%d){\\framebox(%d,%d)[rr]{%c  *}}\n",\
				(start_of_task*30)+50, top_page,(14 - start_of_task)*30,\
				box_height,c);
		     }
		  }
		  else if ((end_of_task == 14) && (start_of_task <= 1)) {       
		     if ((end_of_task - start_of_task) == 0) {
			fprintf(fp,"\\put(50,%d){\\framebox(420,%d)[rr]{%c  }}\n",\
				top_page, box_height,c);         
		     }
		  }
		  else if ((end_of_task == 14) && (start_of_task >= 1)\
			   && (start_of_task <= 14)) {       
		     fprintf(fp,"\\put(%d,%d){\\framebox(%d,%d)[rr]{%c  }}\n",\
			     (start_of_task*30)+50, top_page,(14 - start_of_task)*30,\
			     box_height,c);       
		     
		  }
	       }

	       /* This will print the task number to the left hand */
	       /* side of each and every page of the latex output */
	       fprintf(fp,"\\put(0,%d){\\framebox(50,20){Task %d}}\n",\
		       top_page, task_count);
	       top_page = top_page - 20;
	    }
	    task_count++;
	    node2 = node2->next;
	 }

	 /* This will end this pages information and go on to the next */
	 /* page */
	 fprintf(fp,"\\end{picture}\n");
	 fprintf(fp,"\\clearpage\n");

	 /* The first project date will be updated so that the dates */
	 /* can be printed to the top of the page */
	 first_prj_date = first_prj_date + 14;
	 
      }

      /* We must go until all of the pages down are done also */
      first_prj_date = first_date;
      begin_count = begin_count + 25;
      end_count = end_count + 25;
      
   }

   /* Finaly donw with the pages and we must end the document and */
   /* close the file */
   fprintf(fp,"\\end{document}\n");
   fclose(fp);
}



@


1.7
log
@This  is the final version of this file and it has been documented thourly
@
text
@d2 1
@


1.6
log
@Its a done deal man!!!!!!!!!!!
@
text
@d1 32
d35 1
a35 1

a37 2
#include <stdlib.h>

a39 1

a40 1

d43 34
d80 3
d100 7
d120 2
d125 2
d129 1
a129 1

d134 2
a135 2
   /* There are no tasks in the list */
   
d147 1
a147 2
   
   
d151 2
a152 5
   

   /* Set up the name of the filename to be used */

   /* Use this task list to */
a154 2


a155 1
   
d159 1
a159 1

d166 1
d168 2
d171 4
d176 1
a176 1
	  top_page = 600;
d196 3
a198 2
	    weekday[dummy+6]);
	 
d202 1
a202 2
	 
	 
d204 2
d212 10
d223 1
a223 1
	    
d226 2
a227 2

		  
d283 3
d293 3
d298 3
d304 2
d311 3
@


1.5
log
@this is a version
@
text
@d147 1
a147 1
			     (start_of_task * 30), top_page,\
a163 3
		     else if (node2->data->deliverable == 1) {
			fprintf(fp,"\\put(%d,%d){D}\n",(end_of_task*30)+55,top_page);
		     }	       
d173 1
a173 1
				(start_of_task*30)+50-30,top_page,box_height,c);
d177 1
a177 1
				(start_of_task*30)+50-30, top_page,(14 - start_of_task)*30,\
d190 1
a190 1
			     (start_of_task*30)+50-30, top_page,(14 - start_of_task)*30,\
@


1.4
log
@This is the working version.
@
text
@d43 1
a44 1

d48 4
d54 4
a79 2
   fp = fopen(export_filename,"w");

d86 1
d89 3
d124 3
d128 6
d138 5
a142 13
	       
	       if ((end_of_task <= 14) && (start_of_task >= 1)) {
		  fprintf(fp,"\\put(%d,%d){\\framebox(%d,%d)}\n",\
			  (start_of_task * 30)+50, top_page,\
			  (end_of_task - start_of_task)*30,\
			  box_height);       
		  if (node2->data->milestone == 1) {
		     fprintf(fp,"\\put(%d,%d){$\\Diamond$}\n",\
			     (end_of_task*30)+55,top_page);
		  }
		  else if (node2->data->deliverable == 1) {
		     fprintf(fp,"\\put(%d,%d){D}\n",(end_of_task*30)+55,top_page);
		  }	       
d144 10
a153 8
	       else if ((start_of_task <= 1) && (end_of_task <= 14) \
			&& (end_of_task >= 1)) {
		  fprintf(fp,"\\put(50,%d){\\framebox(%d,%d)[lr]}\n",\
			  top_page, end_of_task*30,\
			  box_height);
		  if (node2->data->milestone == 1) {
		     fprintf(fp,"\\put(%d,%d){$\\Diamond$}\n",\
			     (end_of_task*30)+55,top_page);
d155 42
a196 23
		  else if (node2->data->deliverable == 1) {
		     fprintf(fp,"\\put(%d,%d){D}\n",(end_of_task*30)+55,top_page);
	          }	       
	       }
	       else if ((end_of_task > 14) && (start_of_task <= 1)) {       
		  fprintf(fp,"\\put(50,%d){\\framebox(420,%d)[rr]{*}}\n",\
			  top_page, box_height);         
	       }
	       else if ((end_of_task > 14) && (start_of_task >= 1)\
			&& (start_of_task <= 14)) {       
		  fprintf(fp,"\\put(%d,%d){\\framebox(%d,%d)[rr]{*}}\n",\
		       (start_of_task*30)+50, top_page,(14 - start_of_task)*30,\
			  box_height);       
	       }
	       else if ((end_of_task == 14) && (start_of_task <= 1)) {       
		  fprintf(fp,"\\put(50,%d){\\framebox(420,%d)}\n",\
			  top_page, box_height);         
	       }
	       else if ((end_of_task == 14) && (start_of_task >= 1)\
			&& (start_of_task <= 14)) {       
		  fprintf(fp,"\\put(%d,%d){\\framebox(%d,%d)}\n",\
			  start_of_task*30+50, top_page,(14 - start_of_task)*30,\
			  box_height);       
@


1.3
log
@This is the working version of the gantt charts
@
text
@a49 1
   printf(" got here\n");
a63 1
      printf(" pages accross %d\n",pages_accross);
a79 1
   printf(" got here\n");
a82 1
   printf(" got here\n");
a119 1
	       printf(" got here\n");
@


1.2
log
@This is the gantt generator
@
text
@d8 1
d10 1
d18 3
a20 1

a91 1
      
d93 2
a94 2
	 task_count = pages_down_count;
	 top_page = 600;
d115 1
a115 1
      
d119 1
a119 2
	    start_of_task = node2->data->planned_start_date - first_prj_date;
	    end_of_task = node2->data->planned_end_date - first_prj_date;
d121 16
a136 9
	    printf(" got here\n");
	    if ((end_of_task <= 14) && (start_of_task >= 1)) {
	       fprintf(fp,"\\put(%d,%d){\\framebox(%d,%d)}\n",\
		       start_of_task * 30+50, top_page,\
		       (end_of_task - start_of_task)*30,\
		       box_height);       
	       if (node2->data->milestone == 1) {
		  fprintf(fp,"\\put(%d,%d){$\\Diamond$}\n",\
			  (end_of_task*30)+55,top_page);
d138 12
a149 12
	       else if (node2->data->deliverable == 1) {
		  fprintf(fp,"\\put(%d,%d){D}\n",(end_of_task*30)+55,top_page);
	       }	       
	    }
	    else if ((start_of_task <= 1) && (end_of_task <= 14) \
		     && (end_of_task >= 1)) {
	       fprintf(fp,"\\put(50,%d){\\framebox(%d,%d)[lr]}\n",\
		       top_page, end_of_task*30,\
		       box_height);
	       if (node2->data->milestone == 1) {
		  fprintf(fp,"\\put(%d,%d){$\\Diamond$}\n",\
			  (end_of_task*30)+55,top_page);
d151 23
a173 3
	       else if (node2->data->deliverable == 1) {
		  fprintf(fp,"\\put(%d,%d){D}\n",(end_of_task*30)+55,top_page);
	       }	       
a174 12
	    else if ((end_of_task >= 14) && (start_of_task <= 1)) {       
	       fprintf(fp,"\\put(50,%d){\\framebox(420,%d)[rr]{*}}\n",\
		       top_page, box_height);         
	    }
	    else if ((end_of_task >= 14) && (start_of_task >= 1)\
		     && (start_of_task <= 14)) {       
	       fprintf(fp,"\\put(%d,%d){\\framebox(%d,%d)[rr]{*}}\n",\
		       start_of_task*30+50, top_page,(14 - start_of_task)*30,\
		       box_height);       
	    }
	    fprintf(fp,"\\put(0,%d){\\framebox(50,20){Task %d}}\n",\
		    top_page, task_count);
a175 1
	    top_page = top_page - 20;
d181 1
d183 4
a186 1
      pages_down_count = pages_down_count + 25;
d188 2
a189 2
      fprintf(fp,"\\end{document}\n");
      fclose(fp);
@


1.1
log
@Initial revision
@
text
@d4 3
d8 2
d11 1
d13 1
a13 1
int generate_gantt_charts();
d16 32
d49 121
d171 3
@
