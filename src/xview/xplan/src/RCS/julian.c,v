head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	92.12.13.07.47.14;	author lacey;	state Exp;
branches;
next	1.6;

1.6
date	92.12.11.15.45.50;	author lacey;	state Exp;
branches;
next	1.5;

1.5
date	92.12.10.17.44.35;	author lacey;	state Exp;
branches;
next	1.4;

1.4
date	92.12.10.09.04.47;	author lacey;	state Exp;
branches;
next	1.3;

1.3
date	92.12.03.14.57.44;	author lacey;	state Exp;
branches;
next	1.2;

1.2
date	92.11.21.06.30.34;	author lacey;	state Exp;
branches;
next	1.1;

1.1
date	92.10.27.15.43.01;	author malingka;	state Exp;
branches;
next	;


desc
@Conversion between Julian and Gregorian dates
@


1.7
log
@*** empty log message ***
@
text
@/* FILE julian.c
 *
 * xplan - project planning tool
 * Copyright (C) 1992 Brian Gaubert, Mark M. Lacey, Richard Malingkas,
 * and Mike Marlow.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License (distributed with this program in the file
 * COPYING) for more details.
 * 
 * If you did not received a copy of the GNU General Public License
 * along with this program, write to the Free Software Foundation,
 * Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * 
 * Since this was a project for a one semester software engineering
 * course, the authors will not be offering support for the product
 * after its release.
 *
 * DESCRIPTION OF CONTENTS
 *
 * Functions to manipulate dates.  Unfortunately nobody is certain of
 * the origin of the first two, and we have no references.
 *
 */

#include <stdio.h>
#include "julian.h"

static char buffer[50];

struct date julian_to_date(int jdate)
{
   int m1,y1,m2,d2,y2;
   int x,y,d,m,e;
   struct date temp_date;
   
   x = 4 * jdate - 6884477;
   y = (x / 146097) * 100;
   e = x % 146097;
   d = e / 4;
   
   x = 4 * d + 3;
   y = (x / 1461) + y;
   e = x % 1461;
   d = e / 4 + 1;
   
   x = 5 * d - 3;
   m = x / 153 + 1;
   e = x % 153;
   d = e / 5 + 1;
   
   if( m < 11 )
     temp_date.month = m + 2;
   else
     temp_date.month = m - 10;
   
   
   temp_date.day = d;
   temp_date.year = y + m / 11;
   return (temp_date);
}


int date_to_julian(int month,int day,int year)
{
   int m1,y1,m2,d2,y2;
   long int jdate,a,b,c,d,j1;
   
   if (year < 100)
     year = year + 1900;
   
   if (month > 2)
     {
	m1 = month - 3;
	y1 = year;
     }
   else
     {
	m1 = month + 9;
	y1 = year - 1;
     }
   a = 146097*(y1/100)/4;
   d = y1 % 100;
   b = 1461*d/4;
   c = (153*m1+2)/5+day+1721119;
   j1 = a+b+c;
   return(j1);
}

/* take the string date and convert it to julian */
int str_date_to_julian(char *str)
{
   int m, d, y;

   /* empty string */
   if (strtok(str, " ")==NULL) return 0;

   if (sscanf(str, "%d-%d-%d", &m, &d, &y)!=3) {
      if (sscanf(str, "%d/%d/%d", &m, &d, &y)!=3) {
	 return 0;
      } else {
	 return date_to_julian(m, d, y);
      }
   }
   else {
      return date_to_julian(m, d, y);
   }
}

/* take a julian date and convert it to a string format */
char *julian_to_str_date(int jdate)
{
   struct date newdate;

   if (jdate <= 0) {
      buffer[0]='\0';
   } else {
      newdate = julian_to_date(jdate);
      if (newdate.year > 1900) newdate.year -= 1900;
      
      sprintf(buffer, "%d/%d/%d", newdate.month, newdate.day,
	      newdate.year);
   }
   return buffer;
}

@


1.6
log
@The file we did our final demo with.
@
text
@d1 31
d96 1
d116 1
@


1.5
log
@*** empty log message ***
@
text
@d70 1
a70 1
   if (strtok(str, " ")==NULL) return -1;
@


1.4
log
@*** empty log message ***
@
text
@d70 1
a70 1
   if (strtok(str, " ")==NULL) return 0;
d73 5
a77 3
      printf("ERROR CONVERTING DATE!!!==%s\n", str);
      if (strtok(str, " ")==NULL) printf("empty string folks\n");
      return 0;
d94 1
a94 1
      sprintf(buffer, "%d-%d-%d", newdate.month, newdate.day,
d99 1
@


1.3
log
@Latest revisions before practice demo.
@
text
@d72 1
a72 1
   if (sscanf(str, "%d/%d/%d", &m, &d, &y)!=3) {
a84 3
   
   newdate = julian_to_date(jdate);
   if (newdate.year > 1900) newdate.year -= 1900;
d86 9
a94 1
   sprintf(buffer, "%d/%d/%d", newdate.month, newdate.day, newdate.year);
@


1.2
log
@*** empty log message ***
@
text
@d68 4
a71 1
   
a79 1
   
@


1.1
log
@Initial revision
@
text
@a0 2
/* FILE julian.c ***********************************************

d2 1
a2 1
static int month,day,year;
d4 1
a4 5
struct date julian_to_date(jdate)
     {
      int m1,y1,m2,d2,y2;
      int x,y,d,m,e;
      struct date temp_date;
d6 30
a35 26
      temp_date = malloc (sizeof(struct date));

      x = 4 * jdate - 6884477;
      y = (x / 146097) * 100;
      e = x % 146097;
      d = e / 4;

      x = 4 * d + 3;
      y = (x / 1461) + y;
      e = x % 1461;
      d = e / 4 + 1;

      x = 5 * d - 3;
      m = x / 153 + 1;
      e = x % 153;
      d = e / 5 + 1;

      if( m < 11 )
        temp_date.month = m + 2;
      else
        temp_date.month = m - 10;


      temp_date.day = d;
      temp_date.year = y + m / 11;
      return (temp_date);
d41 23
a63 2
int m1,y1,m2,d2,y2;
long int jdate,a,b,c,d,j1;
d65 8
a72 7
  if (year < 100)
    year = year + 1900;

  if (month > 2)
   {
    m1 = month - 3;
    y1 = year;
d74 2
a75 4
  else
   {
    m1 = month + 9;
    y1 = year - 1;
d77 1
a77 6
  a = 146097*(y1/100)/4;
  d = y1 % 100;
  b = 1461*d/4;
  c = (153*m1+2)/5+day+1721119;
  j1 = a+b+c;
  return(j1);
d80 1
a80 3

#if 0
main()
d82 4
a85 2
   int i, num1;
   int m, d, y, jd;
d87 2
a88 21
   for(i=0;i<=10;i++)
     {
     printf(" Please type in a month\n");
     scanf("%d",&m);

     printf(" Please type in a day\n");
     scanf("%d",&d);

     printf(" Please type in a year\n");
     scanf("%d",&y);

     jd = date_to_julian(m, d, y);
     printf(" Here is the julian date %d for the date of %d - %d - %d \n"
	                              ,jd,m,d,y);
     printf(" Add the amount of days that you would like to add, use +#,\n or subtract, use -#, to the julian date to fine the next\n actual date.\n");
     scanf("%d",&num1);
     jd = jd + num1;
     julian_to_date(jd,m,d,y);
     printf(" Here is the date from the julian date %d-%d-%d\n"
	                             ,month,day,year);
    }
a89 1
#endif
@
