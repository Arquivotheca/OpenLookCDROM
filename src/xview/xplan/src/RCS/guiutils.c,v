head	1.7;
access;
symbols;
locks; strict;
comment	@ * @;


1.7
date	92.12.13.10.31.27;	author lacey;	state Exp;
branches;
next	1.6;

1.6
date	92.12.11.15.45.50;	author lacey;	state Exp;
branches;
next	1.5;

1.5
date	92.12.10.17.44.35;	author lacey;	state Exp;
branches;
next	1.4;

1.4
date	92.12.10.09.04.42;	author lacey;	state Exp;
branches;
next	1.3;

1.3
date	92.12.03.14.57.44;	author lacey;	state Exp;
branches;
next	1.2;

1.2
date	92.11.27.20.34.05;	author lacey;	state Exp;
branches;
next	1.1;

1.1
date	92.11.19.15.30.52;	author lacey;	state Exp;
branches;
next	;


desc
@@


1.7
log
@*** empty log message ***
@
text
@/*
 * xplan - project planning tool
 * Copyright (C) 1992 Brian Gaubert, Mark M. Lacey, Richard Malingkas,
 * and Mike Marlow.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License (distributed with this program in the file
 * COPYING) for more details.
 * 
 * If you did not received a copy of the GNU General Public License
 * along with this program, write to the Free Software Foundation,
 * Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * 
 * Since this was a project for a one semester software engineering
 * course, the authors will not be offering support for the product
 * after its release.
 *
 * DESCRIPTION OF CONTENTS
 *
 * Functions that are used by the GUI frequently
 *
 */
#include <stdio.h>
#include <dirent.h>
#include <sys/param.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <xview/xview.h>
#include <xview/panel.h>
#include <xview/textsw.h>
#include <xview/xv_xrect.h>
#include <xview/dragdrop.h>
#include <xview/cursor.h>
#include <xview/notice.h>
#include <gdd.h>
#include "string_table.h"
#include "db.h"
#include "julian.h"
#include "xplan.h"

extern int selected_dep;
extern struct task_node *current_dep;

extern int selected_res;
extern struct resource_node *current_res;

/* FUNCTION load_data_to_taskinfoPopup ***********************************

   PURPOSE

   Loads the data from a task node into the task info popup.

   SAMPLE CALL

   load_data_to_taskinfoPopup(node);

   INPUTS

   node --- a task node

   AUTHOR/AUDITOR/TESTER

   Author.... Mark M. Lacey, 7 Dec 1992
   Tester.... Mark M. Lacey, 7 Dec 1992

   MODIFICATIONS (most recent to least)

*/
void load_data_to_taskinfoPopup(struct task_node *node)
{
   char *temp;
   int value;

   if (!node) return;

   if (node->data->name != NULL) {
      /* set the name in the popup window */
      xv_set(Taskinfo_taskinfoPopup->name, PANEL_VALUE,
	     node->data->name, NULL);
   } else {
      xv_set(Taskinfo_taskinfoPopup->name, PANEL_VALUE,
	     "", NULL);
   }
   
   if (node->data->desc != NULL) {
      /* set the description in the popup window */
      xv_set(Taskinfo_taskinfoPopup->description, PANEL_VALUE,
	     node->data->desc, NULL);
   } else {
      xv_set(Taskinfo_taskinfoPopup->description, PANEL_VALUE,
	     "", NULL);
   }

   /* set the duration in the popup window */
   xv_set(Taskinfo_taskinfoPopup->duration, PANEL_VALUE,
	  node->data->duration, NULL);

   xv_set(Taskinfo_taskinfoPopup->floatTime, PANEL_VALUE,
	  node->data->float_time, NULL);

   /* we use zero for empty dates throughout */
   if (node->data->planned_start_date==0) {
      xv_set(Taskinfo_taskinfoPopup->plannedStartDate, PANEL_VALUE,
	     "", NULL);
   } else {
      temp = julian_to_str_date(node->data->planned_start_date);
      xv_set(Taskinfo_taskinfoPopup->plannedStartDate, PANEL_VALUE,
	     temp, NULL);
   }

   if (node->data->planned_end_date==0) {
      xv_set(Taskinfo_taskinfoPopup->plannedEndDate, PANEL_VALUE,
	     "", NULL);
   } else {
      temp = julian_to_str_date(node->data->planned_end_date);
      xv_set(Taskinfo_taskinfoPopup->plannedEndDate, PANEL_VALUE,
	     temp, NULL);
   }

   if (node->data->actual_start_date==0) {
      xv_set(Taskinfo_taskinfoPopup->actualStartDate, PANEL_VALUE,
	     "", NULL);
   } else {
      temp = julian_to_str_date(node->data->actual_start_date);
      xv_set(Taskinfo_taskinfoPopup->actualStartDate, PANEL_VALUE,
	     temp, NULL);
   }

   if (node->data->actual_end_date==0) {
      xv_set(Taskinfo_taskinfoPopup->actualEndDate, PANEL_VALUE,
	     "", NULL);
   } else {
      temp = julian_to_str_date(node->data->actual_end_date);
      xv_set(Taskinfo_taskinfoPopup->actualEndDate, PANEL_VALUE,
	     temp, NULL);
   }
      
   if (node->data->forecast_start_date==0) {
      xv_set(Taskinfo_taskinfoPopup->forecastStartDate, PANEL_VALUE,
	     "", NULL);
   } else {
      temp = julian_to_str_date(node->data->forecast_start_date);
      xv_set(Taskinfo_taskinfoPopup->forecastStartDate, PANEL_VALUE,
	     temp, NULL);
   }

   if (node->data->forecast_end_date==0) {
      xv_set(Taskinfo_taskinfoPopup->forecastEndDate, PANEL_VALUE,
	     "", NULL);
   } else {
      temp = julian_to_str_date(node->data->forecast_end_date);
      xv_set(Taskinfo_taskinfoPopup->forecastEndDate, PANEL_VALUE,
	     temp, NULL);
   }

   if (node->data->earliest_start_date==0) {
      xv_set(Taskinfo_taskinfoPopup->earliestStartDate, PANEL_VALUE,
	     "", NULL);
   } else {
      temp = julian_to_str_date(node->data->earliest_start_date);
      xv_set(Taskinfo_taskinfoPopup->earliestStartDate, PANEL_VALUE,
	     temp, NULL);
   }

   if (node->data->earliest_end_date==0) {
      xv_set(Taskinfo_taskinfoPopup->earliestEndDate, PANEL_VALUE,
	     "", NULL);
   } else {
      temp = julian_to_str_date(node->data->earliest_end_date);
      xv_set(Taskinfo_taskinfoPopup->earliestEndDate, PANEL_VALUE,
	     temp, NULL);
   }

   if (node->data->latest_start_date==0) {
      xv_set(Taskinfo_taskinfoPopup->latestStartDate, PANEL_VALUE,
	     "", NULL);
   } else {
      temp = julian_to_str_date(node->data->latest_start_date);
      xv_set(Taskinfo_taskinfoPopup->latestStartDate, PANEL_VALUE,
	     temp, NULL);
   }

   if (node->data->latest_end_date==0) {
      xv_set(Taskinfo_taskinfoPopup->latestEndDate, PANEL_VALUE,
	     "", NULL);
   } else {
      temp = julian_to_str_date(node->data->latest_end_date);
      xv_set(Taskinfo_taskinfoPopup->latestEndDate, PANEL_VALUE,
	     temp, NULL);
   }

   value = node->data->milestone;
   value |= ((int)node->data->deliverable) << 1;
   xv_set(Taskinfo_taskinfoPopup->options, PANEL_VALUE, value, NULL);
}

/* FUNCTION fill_dependency_popup ***********************************

   PURPOSE

   Loads the data from a task node into the dependency popup

   SAMPLE CALL

   fill_dependency_popup(node);

   INPUTS

   node --- a task node

   AUTHOR/AUDITOR/TESTER

   Author.... Mark M. Lacey, 7 Dec 1992
   Tester.... Mark M. Lacey, 7 Dec 1992

   MODIFICATIONS (most recent to least)

*/
void fill_dependency_popup(struct task_node *node)
{
   struct task_node *traverse;
   int nrows, count=0;

   if (!node) return;

   traverse = node->data->dependencies->head;

   /* find the number of rows in the popup */
   nrows = (int)
     xv_get(Dependencies_dependenciesPopup->dependencyList,
	    PANEL_LIST_NROWS);

   /* if it is non-zero, delete them */
   if (nrows != 0)
     xv_set(Dependencies_dependenciesPopup->dependencyList,
	    PANEL_LIST_DELETE_ROWS, 0, nrows, NULL);

   /* traverse the dependencies and list them */
   while (traverse) {
      xv_set(Dependencies_dependenciesPopup->dependencyList,
	     PANEL_LIST_INSERT, count, PANEL_LIST_STRING, count,
	     traverse->data->name, NULL);
      ++count;
      traverse = traverse->next;
   }

   if (count != 0) {
      xv_set(Dependencies_dependenciesPopup->dependencyList,
	     PANEL_LIST_SELECT, 0, TRUE, NULL);
      selected_dep = 0;
   } else {
      selected_dep = -1;
   }
   current_dep = node->data->dependencies->head;
}

/* FUNCTION fill_resource_popup ****************************************

   Loads the data from a task node into the resource popup

   SAMPLE CALL

   fill_resource_popup(node);

   INPUTS

   node --- a task node

   AUTHOR/AUDITOR/TESTER

   Author.... Mark M. Lacey, 7 Dec 1992
   Tester.... Mark M. Lacey, 7 Dec 1992

   MODIFICATIONS (most recent to least)

*/
void fill_resource_popup(struct task_node *node)
{
   struct resource_node *res;
   int nrows, count = 0;

   if (!node) return;

   res = node->data->resources->head;

   nrows = (int)
     xv_get(Resources_resourcesPopup->resourceList,
	    PANEL_LIST_NROWS);

   if (nrows != 0)
     xv_set(Resources_resourcesPopup->resourceList,
	    PANEL_LIST_DELETE_ROWS, 0, nrows, NULL);

   /* for each resource, add it to the list */
   while (res) {
      xv_set(Resources_resourcesPopup->resourceList,
	     PANEL_LIST_INSERT, count, PANEL_LIST_STRING,
	     count, res->data->resource->name, NULL);
      ++count;
      res = res->next;
   }

   if (count != 0) {
      xv_set(Resources_resourcesPopup->resourceList,
	     PANEL_LIST_SELECT, 0, TRUE, NULL);
      selected_res = 0;
   } else {
      selected_res = -1;
   }
   current_res = node->data->resources->head;
}
     
/* FUNCTION store_data_from_taskinfoPopup *********************************

   Retrieves information from task info popup

   SAMPLE CALL

   store_data_from_taskinfoPopup(node);

   INPUTS

   node --- a task node

   AUTHOR/AUDITOR/TESTER

   Author.... Mark M. Lacey, 7 Dec 1992
   Tester.... Mark M. Lacey, 7 Dec 1992

   MODIFICATIONS (most recent to least)

*/
void store_data_from_taskinfoPopup(struct task_node *node)
{
   char
     *name,
     *description,
     *planned_start_date_str,
     *planned_end_date_str,
     *actual_start_date_str,
     *actual_end_date_str,
     *forecast_start_date_str,
     *forecast_end_date_str,
     *str;
   int value, t;
   Xv_notice notice;

   if (!node) return;

   /* Get the task name from the popup window */
   name = (char *) xv_get(Taskinfo_taskinfoPopup->name,
			  PANEL_VALUE);
   if (node->data->name != NULL) free(node->data->name);
   node->data->name = (char *) malloc(strlen(name)+1);
   strcpy(node->data->name, name);

   /* Get the task description from the popup window */
   description = (char *)
     xv_get(Taskinfo_taskinfoPopup->description, PANEL_VALUE);
   
   if (node->data->desc != NULL) free(node->data->desc);
   node->data->desc = (char *) malloc(strlen(description)+1);
   strcpy(node->data->desc, description);

   /* Get the task duration from the popup window */
   node->data->duration = (unsigned)
     xv_get(Taskinfo_taskinfoPopup->duration, PANEL_VALUE);
   
   /* Get the planned start date from the popup window and convert it */
   /* to our internal format */
   str = planned_start_date_str = (char *)
     xv_get(Taskinfo_taskinfoPopup->plannedStartDate, PANEL_VALUE);

   t = str_date_to_julian(planned_start_date_str);
   node->data->planned_start_date = (unsigned) t;
   /* empty string */

   if (!t && (strtok(str, " ")!=NULL)) {
      notice = xv_create(Taskinfo_taskinfoPopup->taskinfoPopup, NOTICE,
			 NOTICE_MESSAGE_STRINGS, 
			 "Planned start date is invalid",
			 NULL,
			 NOTICE_BUTTON_YES, "Continue",
			 XV_SHOW, TRUE,
			 NULL);
      xv_destroy_safe(notice);
      return;
   }


   /* Get the planned end date from the popup window and convert it */
   /* to our internal format */
   str = planned_end_date_str = (char *)
     xv_get(Taskinfo_taskinfoPopup->plannedEndDate, PANEL_VALUE);
   t = str_date_to_julian(planned_end_date_str);
   node->data->planned_end_date = (unsigned) t;
   
   if (!t && (strtok(str, " ")!=NULL)) {
      notice = xv_create(Taskinfo_taskinfoPopup->taskinfoPopup, NOTICE,
			 NOTICE_MESSAGE_STRINGS, 
			 "Planned end date is invalid",
			 NULL,
			 NOTICE_BUTTON_YES, "Continue",
			 XV_SHOW, TRUE,
			 NULL);
      xv_destroy_safe(notice);
      return;
   }
   /* Get the actual start date from the popup window and convert it */
   /* to our internal format */
   str = actual_start_date_str = (char *)
     xv_get(Taskinfo_taskinfoPopup->actualStartDate, PANEL_VALUE);
   t = str_date_to_julian(actual_start_date_str);
   node->data->actual_start_date = (unsigned) t;
   
   if (!t && (strtok(str, " ")!=NULL)) {
      notice = xv_create(Taskinfo_taskinfoPopup->taskinfoPopup, NOTICE,
			 NOTICE_MESSAGE_STRINGS, 
			 "Actual start date is invalid",
			 NULL,
			 NOTICE_BUTTON_YES, "Continue",
			 XV_SHOW, TRUE,
			 NULL);
      xv_destroy_safe(notice);
      return;
   }


   /* Get the actual end date from the popup window and convert it */
   /* to our internal format */
   str = actual_end_date_str = (char *)
     xv_get(Taskinfo_taskinfoPopup->actualEndDate, PANEL_VALUE);
   t = str_date_to_julian(actual_end_date_str);
   node->data->actual_end_date = (unsigned) t;
   
   if (!t && (strtok(str, " ")!=NULL)) {
      notice = xv_create(Taskinfo_taskinfoPopup->taskinfoPopup, NOTICE,
			 NOTICE_MESSAGE_STRINGS, 
			 "Actual end date is invalid",
			 NULL,
			 NOTICE_BUTTON_YES, "Continue",
			 XV_SHOW, TRUE,
			 NULL);
      xv_destroy_safe(notice);
      return;
   }

   /* Get the forecast start date from the popup window and convert it */
   /* to our internal format */
   str = forecast_start_date_str = (char *)
     xv_get(Taskinfo_taskinfoPopup->forecastStartDate, PANEL_VALUE);
   t = str_date_to_julian(forecast_start_date_str);
   node->data->forecast_start_date = (unsigned) t;
   
   if (!t && (strtok(str, " ")!=NULL)) {
      notice = xv_create(Taskinfo_taskinfoPopup->taskinfoPopup, NOTICE,
			 NOTICE_MESSAGE_STRINGS, 
			 "Forecast start date is invalid",
			 NULL,
			 NOTICE_BUTTON_YES, "Continue",
			 XV_SHOW, TRUE,
			 NULL);
      xv_destroy_safe(notice);
      return;
   }
   /* Get the forecast end date from the popup window and convert it */
   /* to our internal format */
   str = forecast_end_date_str = (char *)
     xv_get(Taskinfo_taskinfoPopup->forecastEndDate, PANEL_VALUE);
   t = str_date_to_julian(forecast_end_date_str);
   node->data->forecast_end_date = (unsigned) t;
   
   value = (int) xv_get(Taskinfo_taskinfoPopup->options, PANEL_VALUE);
   
   if (!t && (strtok(str, " ")!=NULL)) {
      notice = xv_create(Taskinfo_taskinfoPopup->taskinfoPopup, NOTICE,
			 NOTICE_MESSAGE_STRINGS, 
			 "Forecast end date is invalid",
			 NULL,
			 NOTICE_BUTTON_YES, "Continue",
			 XV_SHOW, TRUE,
			 NULL);
      xv_destroy_safe(notice);
      return;
   }


   node->data->milestone = value & 1;
   node->data->deliverable = (value & 2) >> 1;
}

/* FUNCTION store_data_from_taskinfoPopup *********************************

   Retrieves information from task info popup

   SAMPLE CALL

   store_data_from_taskinfoPopup(node);

   INPUTS

   node --- a task node

   AUTHOR/AUDITOR/TESTER

   Author.... Mark M. Lacey, 7 Dec 1992
   Tester.... Mark M. Lacey, 7 Dec 1992

   MODIFICATIONS (most recent to least)

*/

/* FUNCTION fill_filelist ****************************************

   PURPOSE

   Fill the filelist with the contents a directory

   SAMPLE CALL

   fill_filelist(path);

   INPUTS

   path --- the directory to read

   AUTHOR/AUDITOR/TESTER

   Author.... Mark M. Lacey, 7 Dec 1992
   Tester.... Mark M. Lacey, 7 Dec 1992

   MODIFICATIONS (most recent to least)

*/
void fill_filelist(char *path)
{
   DIR            *dirp;	/* points to directory structure */
   struct dirent  *dp;	/* points to directory entry structure */
   struct stat     s_buf;	/* points to file stat structure */
   char            buf[MAXNAMLEN + 1];	/* holds directory entry name */
   int             nrows;	/* how many rows in scrolling list */
   char ext[5];
   int len;
   
   if (stat(path, &s_buf) == -1) {
      perror(path);
   }

   /* handle unreadable directory */
   if ((s_buf.st_mode & S_IREAD) == 0) {
      /* do something here */
   } else {
      /* is the path a directory? */
      if (S_ISDIR(s_buf.st_mode)) {
	 /* is the directory openable? */
	 if ((dirp = opendir(path)) == NULL) {
	    perror(path);
	 }
	 nrows = xv_get(File_filePopup->fileList, PANEL_LIST_NROWS);
	 xv_set(File_filePopup->fileList, PANEL_LIST_DELETE_ROWS,
		0, nrows, NULL);

	 /* create a list of selectable items */
	 /* while there are entries in the directory */
	 
	 for (dp = readdir(dirp); dp != NULL; dp = readdir(dirp)) {
	    /* skip if the entry is current dir */
	    if (strcmp(dp->d_name, ".")) {
	       len = strlen(dp->d_name);
	       if (!stat(dp->d_name, &s_buf)) {
		  if (S_ISDIR(s_buf.st_mode)) {
		     /* if it's a directory */
		     strcpy(buf, dp->d_name);
		     strcat(buf, "/");
		     /* add selection to list */
		     xv_set(File_filePopup->fileList,
			    PANEL_LIST_INSERT, 0,
			    PANEL_LIST_STRING, 0, buf,
			    NULL);
		  } else {
		     if (len < 4) continue;
		     /* if it is a project file, add it */
		     if (strcmp(&dp->d_name[len-4], ".prj")==0) {
			/* add selection to list */
			strcpy(buf, dp->d_name);
			xv_set(File_filePopup->fileList,
			       PANEL_LIST_INSERT, 0,
			       PANEL_LIST_STRING, 0, buf,
			       NULL);
		     }
		  }
	       }
	    }
	 }
	 if (closedir(dirp))	/* close the directory */
	   perror();
	 xv_set(File_filePopup->fileList,	/* sort the list,
						 * ascending */
		PANEL_LIST_SORT, PANEL_FORWARD, NULL);
      }
   }
}

@


1.6
log
@The file we did our final demo with.
@
text
@d23 5
d53 22
d107 1
d203 22
d234 1
d239 1
d244 1
d263 20
d300 1
d319 20
d498 43
d588 1
a607 116
}


void print_task_list()
{

 struct task_node *current;
 struct task_node *trav;

 current = get_main_task_list()->head;
   
 printf("begin tasks\n\n");

 while( current != NULL )
  {
   printf("task = {\n");
   if ((current->data->name != NULL)&&\
                                (strlen(current->data->name) != 0))
     printf("\t name = \"%s\";\n", current->data->name);

   if ((current->data->desc != NULL)&&\
                                (strlen(current->data->desc) != 0))
     printf("\t description = \"%s\";\n",current->data->desc);

   if (current->data->duration != 0)
     printf("\t duration = %u;\n",\
	   current->data->duration);

   if (current->data->planned_start_date != 0)
     printf("\t planned_start = %u;\n",\
	   current->data->planned_start_date);

   if (current->data->planned_end_date != 0)
     printf("\t planned_end = %u;\n",\
	   current->data->planned_end_date);

   if (current->data->actual_start_date != 0)
     printf("\t actual_start = %u;\n",\
	   current->data->actual_start_date);

   if (current->data->actual_end_date != 0)
     printf("\t actual_end = %u;\n",\
	   current->data->actual_end_date);

   if (current->data->forecast_start_date != 0)
     printf("\t forecast_start = %u;\n",\
	   current->data->forecast_start_date);

   if (current->data->forecast_end_date != 0)
     printf("\t forecast_end = %u;\n",\
	   current->data->forecast_end_date);

   if (current->data->earliest_start_date != 0)
     printf("\t earliest_start = %u;\n",\
	   current->data->earliest_start_date);

   if (current->data->earliest_end_date != 0)
     printf("\t earliest_end = %u;\n",\
	   current->data->earliest_end_date);

   if (current->data->latest_start_date != 0)
     printf("\t latest_start = %u;\n",\
	   current->data->latest_start_date);

   if (current->data->latest_end_date != 0)
     printf("\t latest_end = %u;\n",\
	   current->data->latest_end_date);

   if (current->data->float_time != 0)
     printf("\t float = %u;\n",\
	   current->data->float_time);

   if (current->data->milestone != 0)
     printf("\t milestone = true;\n");
   else
     printf("\t milestone = false;\n");

   if (current->data->deliverable != 0)
     printf("\t deliverable = true;\n");
   else
     printf("\t deliverable = false;\n");

   trav = current->data->dependencies->head;
   if (trav) {
      printf( "\t begin dependencies\n");
      while (trav) {
	 printf( "\t\t \"%s\"", trav->data->name);
	 if (trav->next) printf( ",\n");
	 else printf( "\n");
	 
	 trav = trav->next;
      }
      printf( "\t end dependencies;\n");
   }

   trav = current->data->dependents->head;
   if (trav) {
      printf( "\t begin dependents\n");
      while (trav) {
	 printf( "\t\t \"%s\"", trav->data->name);
	 if (trav->next) printf( ",\n");
	 else printf( "\n");
	 
	 trav = trav->next;
      }
      printf( "\t end dependents;\n");
   }

   printf( "\t x_pert = %d\n", current->data->x_pert);
   printf( "\t y_pert = %d\n", current->data->y_pert);

   printf("}\n\n");
   current = current->next;

   }
   printf("end tasks.\n");
@


1.5
log
@*** empty log message ***
@
text
@d37 1
d45 3
d180 2
d211 33
a243 1
{}
d255 2
a256 1
     *forecast_end_date_str;
d283 1
a283 1
   planned_start_date_str = (char *)
d288 1
d290 1
a290 1
   if (!t) {
d305 1
a305 1
   planned_end_date_str = (char *)
d310 1
a310 1
   if (!t) {
d323 1
a323 1
   actual_start_date_str = (char *)
d328 1
a328 1
   if (!t) {
d343 1
a343 1
   actual_end_date_str = (char *)
d348 1
a348 1
   if (!t) {
d362 1
a362 1
   forecast_start_date_str = (char *)
d367 1
a367 1
   if (!t) {
d380 1
a380 1
   forecast_end_date_str = (char *)
d387 1
a387 1
   if (!t) {
@


1.4
log
@*** empty log message ***
@
text
@d218 2
a219 1
   int value;
d246 17
a262 3
   node->data->planned_start_date = (unsigned)
     str_date_to_julian(planned_start_date_str);
   
d267 2
a268 2
   node->data->planned_end_date = (unsigned)
     str_date_to_julian(planned_end_date_str);
d270 11
d285 2
a286 2
   node->data->actual_start_date = (unsigned)
     str_date_to_julian(actual_start_date_str);
d288 13
d305 2
a306 2
   node->data->actual_end_date = (unsigned)
     str_date_to_julian(actual_end_date_str);
d308 12
d324 2
a325 2
   node->data->forecast_start_date = (unsigned)
     str_date_to_julian(forecast_start_date_str);
d327 11
d342 2
a343 2
   node->data->forecast_end_date = (unsigned)
     str_date_to_julian(forecast_end_date_str);
d347 13
@


1.3
log
@Latest revisions before practice demo.
@
text
@d1 23
d41 3
d51 17
a67 3
   /* set the name in the popup window */
   xv_set(Taskinfo_taskinfoPopup->name, PANEL_VALUE,
	  node->data->name, NULL);
a68 4
   /* set the description in the popup window */
   xv_set(Taskinfo_taskinfoPopup->description, PANEL_VALUE,
	  node->data->desc, NULL);

d73 3
d130 36
d171 36
d357 115
@


1.2
log
@*** empty log message ***
@
text
@d2 1
d5 1
d12 1
d18 1
a18 1
void load_data_to_taskinfoPopup()
d21 1
d23 1
a23 1
   struct task_node *info = list_current(get_main_task_list());
d25 1
d27 1
a27 1
	  info->data->name, NULL);
d29 1
d31 1
a31 1
	  info->data->desc, NULL);
d33 1
d35 1
a35 1
	  info->data->duration, NULL);
d37 8
a44 3
   temp = julian_to_str_date(info->data->planned_start_date);
   xv_set(Taskinfo_taskinfoPopup->plannedStartDate, PANEL_VALUE,
	  temp, NULL);
d46 8
a53 3
   temp = julian_to_str_date(info->data->planned_end_date);
   xv_set(Taskinfo_taskinfoPopup->plannedEndDate, PANEL_VALUE,
	  temp, NULL);
d55 8
a62 3
   temp = julian_to_str_date(info->data->actual_start_date);
   xv_set(Taskinfo_taskinfoPopup->actualStartDate, PANEL_VALUE,
	  temp, NULL);
d64 17
a80 3
   temp = julian_to_str_date(info->data->actual_end_date);
   xv_set(Taskinfo_taskinfoPopup->actualEndDate, PANEL_VALUE,
	  temp, NULL);
d82 8
a89 3
   temp = julian_to_str_date(info->data->forecast_start_date);
   xv_set(Taskinfo_taskinfoPopup->forecastStartDate, PANEL_VALUE,
	  temp, NULL);
d91 3
a93 3
   temp = julian_to_str_date(info->data->forecast_end_date);
   xv_set(Taskinfo_taskinfoPopup->forecastEndDate, PANEL_VALUE,
	  temp, NULL);
d96 1
a96 1
void store_data_from_taskinfoPopup()
a97 5
   char 
     *name, 
     *description;
   unsigned 
     duration;
d99 2
d107 12
a118 9
   int
     planned_start_date,
     planned_end_date,
     actual_start_date,
     actual_end_date,
     forecast_start_date,
     forecast_end_date;
   
   name = (char *) xv_get(Taskinfo_taskinfoPopup->name, PANEL_VALUE);
d121 4
d126 2
a127 1
   duration = (unsigned)
d129 3
a131 1

d134 1
a134 1
   planned_start_date = (unsigned)
d136 3
a138 1

d141 1
a141 1
   planned_end_date = (unsigned)
d143 3
a145 1

d148 1
a148 1
   actual_start_date = (unsigned)
d150 3
a152 1

d155 1
a155 1
   actual_end_date = (unsigned)
d157 3
a159 1

d162 1
a162 1
   forecast_start_date = (unsigned)
d164 3
a166 1

d169 1
a169 1
   forecast_end_date = (unsigned)
d172 4
a175 28
   change_task_info(list_current(get_main_task_list())->data,
		    name,
		    description,
		    duration,
		    planned_start_date,
		    planned_end_date,
		    actual_start_date,
		    actual_end_date,
		    forecast_start_date,
		    forecast_end_date,
		    0,
		    0,
		    0,
		    0,
		    0,
		    false,
		    false,
		    NULL,
		    NULL,
		    NULL,
		    NULL,
		    NULL,
		    0,
		    0,
		    0,
		    0,
		    0,
		    0);
d177 70
@


1.1
log
@Initial revision
@
text
@d12 1
d17 2
d30 1
d32 1
a32 1
	  info->data->planned_start_date, NULL);
d34 1
d36 1
a36 1
	  info->data->planned_end_date, NULL);
d38 1
d40 1
a40 1
	  info->data->actual_start_date, NULL);
d42 1
d44 1
a44 1
	  info->data->actual_end_date, NULL);
d46 1
d48 1
a48 1
	  info->data->forecast_start_date, NULL);
d50 1
d52 1
a52 1
	  info->data->forecast_end_date, NULL);
d61 9
a69 1
     duration,
d83 3
d87 4
a90 1
     xv_get(Taskinfo_taskinfoPopup->plannedStartDate, PANEL_VALUE);
d92 4
a95 1
     xv_get(Taskinfo_taskinfoPopup->plannedEndDate, PANEL_VALUE);
d97 4
a100 1
     xv_get(Taskinfo_taskinfoPopup->actualStartDate, PANEL_VALUE);
d102 4
a105 1
     xv_get(Taskinfo_taskinfoPopup->actualEndDate, PANEL_VALUE);
d107 4
a110 1
     xv_get(Taskinfo_taskinfoPopup->forecastStartDate, PANEL_VALUE);
d112 2
a113 2
     xv_get(Taskinfo_taskinfoPopup->forecastEndDate, PANEL_VALUE);

@
