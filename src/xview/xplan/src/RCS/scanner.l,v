head	1.11;
access;
symbols;
locks; strict;
comment	@ * @;


1.11
date	92.12.13.10.51.00;	author lacey;	state Exp;
branches;
next	1.10;

1.10
date	92.12.11.15.55.45;	author lacey;	state Exp;
branches;
next	1.9;

1.9
date	92.12.07.22.03.53;	author lacey;	state Exp;
branches;
next	1.8;

1.8
date	92.12.06.15.19.48;	author lacey;	state Exp;
branches;
next	1.7;

1.7
date	92.12.03.14.58.25;	author lacey;	state Exp;
branches;
next	1.6;

1.6
date	92.11.27.20.36.41;	author lacey;	state Exp;
branches;
next	1.5;

1.5
date	92.11.24.01.05.14;	author gaubert;	state Exp;
branches;
next	1.4;

1.4
date	92.11.19.07.30.41;	author gaubert;	state Exp;
branches;
next	1.3;

1.3
date	92.11.03.03.57.36;	author lacey;	state Exp;
branches;
next	1.2;

1.2
date	92.10.26.09.07.43;	author lacey;	state Exp;
branches;
next	1.1;

1.1
date	92.10.26.04.58.33;	author lacey;	state Exp;
branches;
next	;


desc
@@


1.11
log
@*** empty log message ***
@
text
@/* FILE scanner.l **************************************************
 *
 * xplan - project planning tool
 * Copyright (C) 1992 Brian Gaubert, Mark M. Lacey, Richard Malingkas,
 * and Mike Marlow.
 * 
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation.
 * 
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * General Public License (distributed with this program in the file
 * COPYING) for more details.
 * 
 * If you did not received a copy of the GNU General Public License
 * along with this program, write to the Free Software Foundation,
 * Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 * 
 * Since this was a project for a one semester software engineering
 * course, the authors will not be offering support for the product
 * after its release.
 *
 * AUTHORS/TESTERS
 *
 * Authors...
 *   Mark M. Lacey, 20 Nov 1992 --- Code derived from compiler project
 *   Brian Gaubert, 25 Nov 1992 --- Modified further to suit our needs 
 *
 */
%{

#include <stdlib.h>
#include <search.h>
#include <string.h>
#include "semantic_stack.h"
#include "parser.h"

#define NUM_KW 25

struct string_entry {
   char *string;
} keywords[NUM_KW] = {
   "actual_end", "actual_start", "begin", "deliverable", "dependencies",
   "description", "duration", "earliest_end", "earliest_start",
   "end", "false", "float", "forecast_end", "forecast_start", "latest_end",
   "latest_start", "milestone", "name", "parent", "planned_end", 
   "planned_start", "resources", "task", "tasks", "true"
};

/* tokens for our keywords */
int keytoks[NUM_KW] = {
   ACTUALEND, ACTUALSTART, BEG, DELIVERABLE, DEPENDENCIES,
   DESCRIPTION, DURATION, EARLIESTEND, EARLIESTSTART,
   END, FALSE, FLOAT, FORECASTEND, FORECASTSTART, LATESTEND,
   LATESTSTART, MILESTONE, NAME, PARENT, PLANNEDEND,
   PLANNEDSTART, RESOURCES, TASK, TASKS, TRUE
};

/* prototypes */
int iskeyword(char *);
int compare(struct string_entry *, struct string_entry *);

extern char *filename;
extern stack_t yylval;
static tok;
static char checkbuf[20];
static char *tmp;
static indx;
static count;
char temp[800];
int lineno=1;

%}

DIGIT    [0-9]
LETTER   [a-zA-Z]

%%

{DIGIT}+				{ /* decimal integer constant */
   /* call strtol to convert */
   yylval.uint = strtol( yytext, NULL, 10 );
   return UNSIGNED;
}

\"([^\"])*\"	{ /* string constant */
   yylval.str = (char *) malloc(yyleng - 2 + 1);
   strncpy(yylval.str, yytext+1, yyleng - 2);
   yylval.str[yyleng-2] = '\0';
   return STRING;
}

=					{ return '='; }
;					{ return ';'; }
,					{ return ','; }
\.					{ return '.'; }

{LETTER}({LETTER}|{DIGIT}|_)*		{ 
   if ( tok = iskeyword( yytext ) ) {
      return tok;
   } else {
   }
}

[ \t]					{ /* whitespace */ }

\n					{ /* newline */ ++lineno; }

.					{ 
/* Any character that we do not expect */
	return yytext[0];
}

%%

/*
  Perform a binary search on the list of keywords to see if this
  word is present.  If it is, return the token value for it.  If not,
  just return 0, to tell the calling routine that this is an identifier.
  */
  iskeyword( char *lexeme )
{
   int indx;
   struct string_entry tmp;
   struct string_entry *retval;
   
   tmp.string = lexeme;
   
   retval = (struct string_entry *)
     bsearch((char *)&tmp, (char *)keywords, NUM_KW, 
	     sizeof(struct string_entry), compare);
   
   if ( retval == NULL ) return 0;
   
   indx =  ((int) retval- (int) keywords)/(sizeof(struct
						  string_entry));
   
   return keytoks[indx];
}

int compare(struct string_entry *s1, struct string_entry *s2)
{
   return strcmp(s1->string, s2->string);
}


@


1.10
log
@*** empty log message ***
@
text
@d24 7
@


1.9
log
@Fixed spelling error.
@
text
@a29 1
#include "str-table.h"
@


1.8
log
@Added copyright message.
@
text
@d23 1
a23 1
 * after it's release.
@


1.7
log
@Latest revisions before practice demo.
@
text
@d1 24
a24 2
/* Top Level Code: Group 7 scanner.l */

@


1.6
log
@*** empty log message ***
@
text
@a55 1
   yylval.token_code = UNSIGNED;
a56 2
/*   printf(" This is the unsigned %d \n",yylval.uint);*/

d61 3
a63 3
   yylval.token_code = STRING;
   yylval.str_table = insert_string(yytext);

a73 1
      yylval.token_code = tok;
@


1.5
log
@*** empty log message ***
@
text
@a5 3
#include <stdio.h>
#include <errno.h>
#include <math.h>
a7 2
#include <limits.h>
#include <float.h>
d10 1
a10 1
#include "parser.tab.h"
@


1.4
log
@*** empty log message ***
@
text
@d63 1
a63 1
   printf(" This is the unsigned %d \n",yylval.uint);
@


1.3
log
@*** empty log message ***
@
text
@d13 1
d43 1
a43 1

d49 1
a49 5

/*strhashtable *scontbl_ptr;
strhashtable *idtbl_ptr;
realhashtable *rcontbl_ptr;
*/
d62 2
a63 1
   yylval.val.uint = strtol( yytext, NULL, 10 );
d70 2
a71 3
   yylval.val.str = (char *) malloc(yyleng-1);
   strncpy(yylval.val.str, yytext, yyleng-2);
   yylval.val.str[yyleng-1] = '\0';
@


1.2
log
@*** empty log message ***
@
text
@d1 2
@


1.1
log
@Initial revision
@
text
@d12 1
a12 1
#include "fileread.tab.h"
d14 1
a14 1
#define NUM_KW 22
d19 1
a19 1
   "actual_end", "actual_start", "deliverable", "dependencies",
d21 1
a21 1
   "false", "float", "forecast_end", "forecast_start", "latest_end",
d23 1
a23 1
   "planned_start", "resources", "task", "true"
d28 1
a28 1
   ACTUALEND, ACTUALSTART, DEVLIVERABLE, DEPENDENCIES,
d30 1
a30 1
   FLASE, FLOAT, FORECASTEND, FORECASTSTART, LATESTEND,
d32 1
a32 1
   PLANNEDSTART, RESOURCES, TASK, TRUE
d47 1
a47 1
strhashtable *scontbl_ptr;
d50 1
a50 1

d63 1
a63 1
   yylval.val.uint = strtoul( yytext, NULL, 10 );
d70 3
d79 1
@
