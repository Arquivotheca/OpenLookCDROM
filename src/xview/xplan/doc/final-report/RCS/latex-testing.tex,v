head	1.7;
access;
symbols;
locks; strict;
comment	@% @;


1.7
date	92.12.14.09.45.05;	author lacey;	state Exp;
branches;
next	1.6;

1.6
date	92.12.14.07.44.48;	author lacey;	state Exp;
branches;
next	1.5;

1.5
date	92.12.14.05.44.17;	author gaubert;	state Exp;
branches;
next	1.4;

1.4
date	92.12.14.02.35.52;	author gaubert;	state Exp;
branches;
next	1.3;

1.3
date	92.12.14.02.18.20;	author gaubert;	state Exp;
branches;
next	1.2;

1.2
date	92.12.14.01.24.38;	author lacey;	state Exp;
branches;
next	1.1;

1.1
date	92.12.14.00.03.09;	author lacey;	state Exp;
branches;
next	;


desc
@@


1.7
log
@*** empty log message ***
@
text
@\subsection{\LaTeX\ generate-gantt-charts}
\begin{description}
\item[{\bf Test Data}]

 This is the procedure that eventually came from the detailed design.
The testing for this function consisted of calculating the positions
of the bars on the page, putting the header of the days of the week
and task number on the side of the page, breaking up the pages across
and down. The first test case was to put the headers on the page for
the amount of tasks there were in the database. Next, to test to make
sure that the Gantt bars were put on the correct page. This includes
the starting and ending of bars on one to how ever many pages across
it needed to end the task. Then finally, the test to make sure that
the generator could handle tasks that would allow for pages down.

\item[{\bf Expected Results}]

There was a check on the calculations that would show the page,
position, and length of the bar for a particular task. Next, the
routine should break up the pages across for bars, tasks, that extend
for a number of pages. This should go across as many pages necessary
to accommodate the length of the task. Finally, this routine should go
for any number of tasks. This will break up the pages down.


\item[{\bf Actual Results}]

The calculations put the bar for a particular task on the correct page
in the latex output. For the tasks that exceeded the page, the bars
extended to the next page, and so on until the page that ended the task.
Lastly, the the amount pages extended downward to accommodate the tasks
that exceeded the first page, and this could go for any number of tasks.
\end{description}



\subsection{\LaTeX\ generate-latex-pert-pages}
\begin{description}
\item[{\bf Test Data}]
The test data used was from our own project plan.
\item[{\bf Expected Results}]
We expected PERT charts to be formatted in a similar manner to what
MS-Project produced.
\item[{\bf Actual Results}]
Boxes were generated correctly, but the lines never came out quite
right.  There is a problem with splitting lines over pages.
\end{description}
@


1.6
log
@*** empty log message ***
@
text
@d22 1
a22 1
to accomodate the length of the task. Finally, this routine should go
d31 1
a31 1
Lastly, the the amount pages extended downward to accomodate the tasks
@


1.5
log
@*** empty log message ***
@
text
@d40 1
d42 2
d45 2
a46 18
\end{description}
\subsection{\LaTeX\ calculate-latex-pert-pages}
\begin{description}
\item[{\bf Test Data}]
\item[{\bf Expected Results}]
\item[{\bf Actual Results}]
\end{description}
\subsection{\LaTeX\ breaklines}
\begin{description}
\item[{\bf Test Data}]
\item[{\bf Expected Results}]
\item[{\bf Actual Results}]
\end{description}
\subsection{\LaTeX\ write-pert-chart}
\begin{description}
\item[{\bf Test Data}]
\item[{\bf Expected Results}]
\item[{\bf Actual Results}]
@


1.4
log
@*** empty log message ***
@
text
@d11 1
a11 1
sure that the gant bars were put on the correct page. This includes
d22 1
a22 1
to accomidate the lenght of the task. Finally, this routine should go
d29 1
a29 1
in the latex output. For the tasks that exceded the page, the bars
d31 2
a32 2
Lastly, the the amount pages extended downward to accomidate the tasks
that exceded the first page, and this could go for any number of tasks.
@


1.3
log
@*** empty log message ***
@
text
@d34 27
@


1.2
log
@*** empty log message ***
@
text
@d1 33
a33 1
\subsection{\LaTeX\ Module}
@


1.1
log
@Initial revision
@
text
@d1 1
a1 11
\subsection{Database Module}
%
% If your testing specifications were correct, then you can
% include the text for the test data description and expected 	
% results. Otherwise, incorporate the corrected descriptions.
%
\begin{description}
\item[{Test Data: }]
\item[{Expected Results: }]
\item[{Actual Results: }] 
\end{description}
@
