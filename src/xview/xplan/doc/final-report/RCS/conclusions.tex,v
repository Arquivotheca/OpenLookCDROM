head	1.3;
access;
symbols;
locks; strict;
comment	@% @;


1.3
date	92.12.14.09.45.05;	author lacey;	state Exp;
branches;
next	1.2;

1.2
date	92.12.14.07.44.48;	author lacey;	state Exp;
branches;
next	1.1;

1.1
date	92.12.14.00.03.09;	author lacey;	state Exp;
branches;
next	;


desc
@@


1.3
log
@*** empty log message ***
@
text
@
%
% conclusions and future work
%
\chapter{Conclusions and Future Investigations}

%
% Describe functionality that does not work completely in your system.
% Explain why you were not able to completely implement the respective
% features. You may include shortcomings of the system as you have
% determined from testing.
%
\section{Functionality Limitations}

%
% What are the limitations of the system? (Why do they exist?)
%
\subsection{System Limitations}

  The \xplan\ software is limited in the number of PERT/Gantt charts that can
be displayed to the graphics display terminal of the SPARCstation. That is
because of the physical number of points allowed to be drawn on an X Windows 
canvas. Furthermore, the amount of memory available will limit \xplan\ in
regards to how much information can be supplied to it regarding a project.
For example, memory space is created and freed dynamically as necessary in
\xplan.  If every project task has millions of resources, the total memory 
available to \xplan\ is limited by the system \xplan\ is installed on.
\xplan\ was designed to expect valid input data. \xplan\ was not
designed to prevent a user from intentionally entering faulty data
with the intent of crashing the software.  Finally, the size of the
amount of a PERT/Gantt chart that can be viewed at the same time is
limited by the size of the graphics display terminal.  However,
vertical and horizontal scroll bars are provided for the user when the
PERT/Gantt chart is large than the viewable area on the display
terminal.

  The user must input correct data at all times for \xplan\ to
function correctly.  For example, To correctly calculate the dates of
a project's PERT/Gantt charts, it is necessary that all tasks between
the very first and the very last have dependencies, and be a
dependency of at least one other task.  That is because there is only
one starting point, and one ending point on the critical path.  The
PERT chart display of \xplan\ will show dangling tasks, but the
calculated dates will not be correct. The vertical display of task
boxes on the canvas window for the PERT chart is about 200 tasks. The
horizontal display of task boxes on the canvas window for the PERT
chart is also about 200.  Note that if a large number of tasks are
entered, such as 150 or more, scrolling through the canvas displays
will be slower because of there are more graphics items displayed.
However, that also depends on the system load of the machine running
\xplan\ too.  Generally, a Sun SPARCstation 2 is recommended.  The
Gantt chart task time box calculations depends on the planed start and
end dates of the task.  If the user does not specify planned start and
end dates for a task, the calculate dates function of \xplan's main
window will fill in the planned start and end date fields.  However,
this is dependent on correct user input.  For example, the total task
path time dependency must not be more than the time allowed for the
project as specified by the planned start date of the first project
task, and the planned end date of the last project task.  The user
must input correct time durations for tasks to avoid faulty
calculations.

%
% What are the properties of the system that make it
% usable?
%
\subsection{Properties Facilitating System Use}

  \xplan\ is a very usable tool because of the design of its graphical user 
interface.  The menus and control buttons are laid out in a self explanatory
style.  Furthermore, the online help facility can be called at anytime by 
clicking the help key on the SPARCstations keyboard and using the mouse to 
click on the GUI item the user wants an explanation of.  Furthermore, \xplan\
can be a valuable tool when incorporated with the \LaTeX\ document processing 
system.  The PERT/Gantt chart information generated by \xplan\ can then be
incorporated in documents produced with \LaTeX\ and then laser printed paper 
and overhead slide hard copies can be made. Also, \LaTeX\ could put a document
with PERT/Gantt chart information into Postscript file format so that project
reports could be distributed electronically over a computer network like an 
office LAN or the Internet.  Finally, \xplan\ is provided as freeware
according to the Free Software Foundations policies, so the budget 
conscious user can have a powerful project management and project document
processing system since \LaTeX\ is also free software. 

%
% If you had it to do all over again, what would you do differently?
%
\section{Reflections of Project}

  The design of \xplan\ was a tedious process because our group was
learning the methods, tools, and techniques of software engineering.
Also, much time was spent learning and using the implementation
environment.  For example, since we are students, more time is spent
on detecting and fixing logical errors, syntax errors, learning tools,
etc... If we were to do another design project, we would be much more
efficient in this area.  Furthermore, if we did another design project
and had more CASE tools for tasks such as creating data dictionaries,
data flow diagrams, and control flow diagrams, we could produce
documentation faster because those items would have a tool for
consistently creating them and putting them into a \LaTeX\ format.

    In terms of designing a better \xplan\ software solution to the
PERT/Gantt chart generator application, an object oriented design and
implementation could be tried.  For example, the ideas discussed in
Section~\ref{futinv} of this document could be implemented easier in
an object oriented design and implementation environment.  The
concepts of class hierarchies, and object libraries could be applied
to specifically design a piece of software with the intent of being
modified for future feature enhancements and modifications.  For
example, objects describing particular types of tasks in a format
specific to them could be created, and then selected by the user when
using \xplan.  For instance, if a task like ``test circuit design''
has a different set of steps than a task like ``audit project
budget'', different objects could be placed in the object library as
\xplan was applied to organizations that had different ways of doing
tasks.  Thus, the object oriented implementation of software
facilitates future modification of it.

   If \xplan\ were to be redesigned, a better graphical display of
PERT charts could be developed.  Currently, they are large simple
boxes whose aesthetics could be improved.  Also, \xplan\ could be
modified to allow the user to click on a box in the PERT chart to see
the Task Information window popup.  That would be helpful for viewing
very large charts with lots of tasks, instead of having to look at the
main \xplan\ window to be able to click on a task name and have its
information displayed.  Furthermore, a tool such as ispell could be
integrated with \xplan\ to allow the user to check the spelling of
task descriptions, which may be quite long.


%
%
%
% Describe extensions to your project that you might have incorporated
% into your system if given enough time. 
%
\section{Future Investigations}
\label{futinv}

   The \xplan\ user could extend the software in several ways.  First,
the original design called for the calculation of PERT/Gantt chart
information for subtasks of a task, so large tasks could be managed
with \xplan\ the same way the project is managed.  That way, more
information could be stored in one project file, instead of the
current method of needing separate projects.  Furthermore, additional
features and data items could be added to \xplan\ and it's graphical
user interface.  For instance, the task information window could be
revised to store information specifically regarding personnel working
on a task, and contact information about them such as office location,
phone number. Currently, we just have a single list of resources that
are stored in the order they are entered by the user.  The resources
list could be modified into an entire extension to the \xplan\
software to classify resources in terms of hardware, software, tools,
and other things needed in accounting for resources.  The way \xplan\
is implemented with the graphical user interface built with
OpenWindows Developers Guide 3.0 tool, further add-ons to \xplan\ is
possible by a knowledgeable developer.  Finally, the \xplan\ user
could use the OpenWindow's Developer Guide 3.0 tool to translate the
English language labeling of \xplan's GUI items into another language
which can be written with the ASCII character set, so \xplan\ could be
made available in foreign countries.
@


1.2
log
@*** empty log message ***
@
text
@d29 1
a29 1
designed to prevent a user from intentionally inputing faulty data
d70 1
a70 1
interface.  The menus and control buttons are layed out in a self explanatory
d74 1
a74 1
can be a valuable tool when incorporated with the LaTeX document processing 
d76 2
a77 2
incorporated in documents produced with LaTeX and then laser printed paper 
and overhead slide hardcopies can be made. Also, LaTeX could put a document
d83 1
a83 1
processing system since LaTeX is also free software. 
d100 1
a100 1
consistently creating them and putting them into a LaTeX format.
d156 1
a156 1
OpenWindows Developers Guide 3.0 tool, further add ons to \xplan\ is
@


1.1
log
@Initial revision
@
text
@a6 2
  What does Dr. Cheng expect for this?

d20 1
a20 1
  The xplan software is limited in the number of PERT/Gantt charts which can
d23 1
a23 1
canvas. Furthermore, the amount of memory available will limit xplan in
d26 9
a34 8
xplan.  If every project task has millions of resources, the total memory 
available to xplan is limited by the system xplan is installed on. xplan was 
designed to expect valid input data. xplan was not designed to prevent a user 
from intentionally inputing faulty data with the intent of crashing the
software.  Finally, the size of the amount of a PERT/Gantt chart which can be
viewed at the same time is limited by the size of the graphics display 
terminal.  However, vertical and horizontal scroll bars are provided for the 
user when the PERT/Gantt chart is large than the viewable area on the display
d37 25
a61 22
  The user must input correct data at all times for xplan to function 
correctly.  For example, To correctly calculate the dates of a project's
PERT/Gantt charts, it is necessary that all tasks between the very first
and the very last have dependencies, and be a dependency of at least one
other task.  That is because there is only one starting point, and one ending
point on the critical path.  The PERT chart display of xplan will show
dangling tasks, but the calculated dates will not be correct. The vertical
display of task boxes on the canvas window for the PERT chart is about 200
tasks. The horizontal display of task boxes on the canvas window for the PERT
chart is also about 200.  Note that if a large number of tasks are entered, such
as 150 or more, scrolling through the canvas displays will be slower because
of there are more graphics items displayed.  However, that also depends on 
the system load of the machine running xplan too.  Generally, a Sun 
SPARCstation 2 is recommended.  The Gantt chart task time box calculations
depends on the planed start and end dates of the task.  If the user does not
specify planned start and end dates for a task, the calculate dates function
of xplan's main window will fill in the planned start and end date fields.
However, this is dependent on correct user input.  For example, the total
task path time dependency must not be more than the time allowed for the
project as specified by the planned start date of the first project task, and
the planned end date of the last project task.  Basically, the user must 
input correct time durations for tasks to avoid faulty calculations.
d69 1
a69 1
  xplan is a very usable tool because of the design of its graphical user 
d73 1
a73 1
click on the GUI item the user wants an explanation of.  Furthermore, xplan
d75 1
a75 1
system.  The PERT/Gantt chart information generated by xplan can then be
d80 2
a81 2
office LAN or the Internet.  Finally, xplan is provided as freeware according 
to the Free Software Foundations policies, so the budget 
d90 11
a100 10
  The design of xplan was a tedious process because our group was learning the 
methods, tools, and techniques of software engineering.  Also, much time was 
spent learning and using the implementation environment.  For example, since
we are students, more time is spent on detecting and fixing logical errors,
syntax errors, learning tools, etc... If we were to do another design project,
we would be much more efficient in this area.  Furthermore, if we did another
design project and had more CASE tools such for things like data flow 
dictionaries, data flow diagrams, and control flow diagrams, we could produce
documentation faster because those items would have a tool for consistently
creating them and putting them into a LaTeX format. 
d102 16
a117 15
    In terms of designing a better xplan software solution to the PERT/Gantt 
chart generator application, an object oriented design and implementation could
be tried.  For example, the ideas discussed in the Future Investigations
 portion 
of this document could be implemented easier in an object oriented design 
and implementation environment.  The concepts of class hierarchies, and object
libraries could be applied to specifically design a piece of software with the
intent of being modified for future feature enhancements and modifications.
For example, objects describing particular types of tasks in a format specific
to them could be created, and then selected by the user when using xplan.
For instance, if a task like ``test circuit design'' has a different set of 
steps than a task like ``audit project budget'', different object could be
placed in the object library as xplan was applied to organizations which had
different ways of doing tasks.  Thus, the object oriented implementation of
software facilitates future modification of it.
d119 10
a128 9
   If xplan were to be redesigned, a better graphical display of PERT charts
could be developed.  Currently, they are large simple boxes whose aesthetics 
could be improved.  Also, xplan could be modified to allow the user to click
on a box in the PERT chart to see the Task Information window popup.  That
would be helpful for viewing very large charts with lots of tasks, instead
of having to look at the main xplan window to be able to click on a task 
name and have its information displayed.  Furthermore, a tool such as ispell
could be integrated with xplan to allow the user to check the spelling of 
task descriptions which may be quite long.
d138 24
a161 19
   The xplan user could extend the software in several ways.  First, the 
original design called for the calculation of PERT/Gantt chart information for
subtasks of a task, so large tasks could be managed with xplan the same way
the project is managed.  That way, more information could be stored in one
project file, instead of the current method of needing separate project.
Furthermore, additional features and data items could be added to xplan and 
it's graphical user interface.  For instance, the Task Windows could be
revised to store information specifically regarding personnel working on a
task, and contact information about them such as office location, phone
number, etc...  Currently, we just have a single list of resources which is 
not stored in any particular order.  The resources list could be modified into
an entire extension to the xplan software to classify resources in terms of 
hardware, software, tools, budget accounting, etc... The way xplan is 
implemented with the graphical user interface built with OpenWindows
Developers Guide 3.0 tool, further add  ons to xplan is possible by a
knowledgeable developer.  Finally, the xplan user could use the OpenWindow's
Developer Guide 3.0 tool to translate the English language labeling of 
xplan's GUI items into another language which can be written with the ASCII
character set, so xplan could be made available in foreign countries.
@
