head	1.3;
access;
symbols;
locks; strict;
comment	@% @;


1.3
date	92.11.11.01.35.37;	author gaubert;	state Exp;
branches;
next	1.2;

1.2
date	92.11.11.01.09.56;	author gaubert;	state Exp;
branches;
next	1.1;

1.1
date	92.11.10.19.48.39;	author gaubert;	state Exp;
branches;
next	;


desc
@This is part of the order of integration for the testing spec
@


1.3
log
@This is the updated v of it
@
text
@%
%   This is Brians read module explaining the integration of this module
%  with the modules that it calls and the integration of the modules that
%  calls it 
%
\paragraph{Read-File Module}

  The read-file module will be used to set up the file pointer yyin
and to call the function yyparse. This module will also perform error
checking on the file to make sure that the file exists and that it is
a valid file, rather than a directory.  After the file pointer is set
up, the function yyparse is called. This function will call yylex a
number of times until the file is successfully scanned or until there
is an error. If there is an error in either the scanning or the
parsing of the file, the function yyparse will return a value of 1 to
its caller. Thus at this time the read-file module will notify the
user that the file used is an invalid file.  At the time that the read
is taking place, the functions create-task-list , create-task-node,
add-task-to-end, pop to get the node from the stack, push to put the node onto
the stack, to create-task-info, and to create-resource-info will be called.

  Since yyparse is automatically set up for
calling the yylex function, there will be little testing for integration
for these modules. Integration tests will be used in the call to yyparse
from the read-file module and tests will be made to insure that the
file is getting scanned and parsed correctly. Moreover, the database
functions will be coded and tested before the read functions will be
integrated. The read function will also be tested with a driver
function and stubs for the database functions that it calls. This
testing will be done before the integration of the read file 
and database functions.

  Integration of the read file module and all of the modules that it
calls, with the exception of the database functions, will done after a
unit test of each of the modules are complete. Test cases for the
integration of these modules will show the values of the parameters
that the function passes from one function to another. The functions
used will consist of basic pop and push routines used in processing
the subtask for the main task and storing the main task. Tests will
also be made within the yyparse and yylex functions. Within the
scanner, yylex, the token code numbers will printed out to the screen.
Within the function yyparse, the number of the production rule that
applies to the particular grammar recognized in the file will be
printed. The integration test between the yyparse and yylex functions
will consist of making sure the parser is receiving the correct tokens
for the production rules that it passes over within the file. The used
of hand made test files will be made for these tests.
@


1.2
log
@This is the next version of the read file integration module
@
text
@d2 1
a2 1
%   This is Brians read module explaning the integration of this module
d23 1
a23 1
calling the yylex function, there will be little testing for intergration
d34 2
a35 2
calls, with the exception of the database functions,  will done after
a unit test of each of the modules are complete. Test cases for the
d39 9
a47 9
the subtask for the main task and storing the main task. Tests will also be made
within the yyparse and yylex functions. Within the scanner, yylex, the
token code numbers will printed out to the screen. Within the function
yyparse, the number of the production rule that applies to the
particular grammar requnized in the file will be printed. The integration test
between the yyparse and yylex functions will consist of making sure the parser
is recieving the correct tokens for the production rules that it
passes over within the file. The used of hand made test files will be
made for these tests. 
@


1.1
log
@Initial revision
@
text
@d6 2
a7 1
\paragraph{Read File Module}
d9 12
a20 12
and to call the function yyparse. This module will also error check
the file to make sure that the file exist and that it is a valid file.
After the file pointer is set up, the function yyparse is called. This
function will call yylex a number of times until the file is
successfully scanned or until there is an error. If there should be an
error in either the scanning or the parsing of the file, the function
yyparse will return a value of 1 to its caller. Thus at this time the
read-file module will notify the user that the file used is an invalid
file.  At the time that the read is taking place, the functions create
a list, create a node, add to the end of the list, to pop the node
from the stack, push the node onto the stack, to create task info, to
create a resource list, and add to the resource list will be called.
d22 3
a24 3
  Since the Bison tool function yyparse is automatically set up for
calling the yylex function, there will be no test for intergration
here. However, integration test will be used in the call to yyparse
d26 1
a26 1
file is getting scanned and parsed correctly. More over, the database
d35 1
a35 1
a unit test of each of the modules are made. Test cases for the
d37 3
a39 2
that the function passes from one function to another. These functions
will consist of the pop and push routines. Tests will also be made
d43 1
a43 1
particular event from the file will be printed. The integration test
@
