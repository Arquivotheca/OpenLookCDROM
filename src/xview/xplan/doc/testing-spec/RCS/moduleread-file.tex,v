head	1.3;
access;
symbols;
locks; strict;
comment	@% @;


1.3
date	92.11.11.01.56.00;	author gaubert;	state Exp;
branches;
next	1.2;

1.2
date	92.11.11.01.48.06;	author gaubert;	state Exp;
branches;
next	1.1;

1.1
date	92.11.09.23.49.26;	author gaubert;	state Exp;
branches;
next	;


desc
@This is teh testing spec for the read file module
@


1.3
log
@uwefiofhjiweo
@
text
@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The following subsubsection should be repeated for each module that
% is invoked by the top-level module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Unit tests for module Read-file} 
\begin{description}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Describe the test for the module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\item[{\bf Description of test for module Read-file:}] \hfill \\
 The Read-file module will be the first module to be tested from all of
the read modules because it will first be invoked by the user
interface and then open the file that the functions yylex and
yyparse read from. The module contains error recovery conditions, a
call to open the file, and a call to yyparse. The testing will be to test
all of the different errors that can occur when reading in a file.
These test will evolve from the yyin assignment to the file. A test
will be computed next to make sure that the function yyparse is called.
This routine will be returning a ``0'' for a good parse and a
``1'' for any other errors that may arise in parsing the file.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Use of stubs or other software to facilitate the test
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\item[{\bf Overhead software description:}] \hfill \\
A stub for the function yyparse will be made that will return a
random error number.  A dummy file will be made to see if the yyin
file pointer accurately opens the file. The file pointer yyin will
also be used to open a file that does not exits to see if the code
will display the correct error message. A driver program, main, will
be made that accepts the filename from the read-file module and that
invoke the testing for the read-file module.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% What data did you use to conduct the tests?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\item[{\bf Test case data:}] \hfill \\
  Data that will be used to test the read-file module will be made up
of the following cases. Case one will be to send the read-file routine
the filename of a file that exists. Case two will be to send the
routine a filename of a file that does not exist. Case three will be
conducted to call the function yyparse as many times necessary to
fulfill all of the error conditions that can happen. 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Briefly, what type of results do you expect?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\item[{Expected Results:}] \hfill \\
  For case one of the testing procedure for the read-file module, the
expected result will be that the file was opened successfully. Case
two's results will display a message that the file doesn't exist. Case
three will be in the form of a while loop where all of the error
cases will be displayed to the screen.
\end{description}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DO NOT FILL OUT THE FOLLOWING SECTION FOR THE TESTING SPEC DELIVERABLE!!
% The testing results will be turned when the practice demo is given.
%
% For each top level module, describe the testing results.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
%\subsubsection{Actual Test Results}
@


1.2
log
@This is the revistions of the previous edit.
@
text
@d14 1
a14 1
the read modules because it will first be involked by the user
d33 1
a33 1
invoks the testing for the read-file module.
d50 1
a50 1
expected result will be that the file was opened sucessfully. Case
@


1.1
log
@Initial revision
@
text
@d15 3
a17 3
interface and then open the file to which the functions yylex and
yyparse read from. The module contains error recovery conditions, an
open call to yyin, and a call to yyparse. The testing will be to test
d20 3
a22 3
will be bade next to make sure that the function yyparse is called.
This routine will be returning a 0 for a good parse and the numbers
1,2,... for any other errors that may arise in parsing the file.
d27 8
a34 8
  A stub for the function yyparse will be made that will return a
andom error number according to the number of error recovery messages
that can happen. A dummy file will be made to see if the yyin file
pointer accurately opens the file. The file pointer yyin will also
open a file that is not there to see if the code will display the
correct error message. A driver progran, main, will be made that
accepts the filename from rhe read-file module and that involks the
testing for the read-file module.
d41 1
a41 1
the filename of a file that exist. Case two will be to sent the
d48 2
a49 2
\item[{Expected Results:}] \hfill \
  From case one of the testing procedure for the read-file module, the
d52 1
a52 1
three will be in the forma of a while loop where all of the error
@
