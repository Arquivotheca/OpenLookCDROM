head	1.2;
access;
symbols;
locks; strict;
comment	@% @;


1.2
date	92.11.11.02.41.26;	author gaubert;	state Exp;
branches;
next	1.1;

1.1
date	92.11.10.03.00.55;	author gaubert;	state Exp;
branches;
next	;


desc
@This is the write file module for the test Spec.
@


1.2
log
@This is the jilwfe;ergjwkplvet;w
@
text
@%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% The following subsubsection should be repeated for each module that
% is invoked by the top-level module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\subsubsection{Unit tests for module write-file} 
\begin{description}


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Describe the test for the module.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\item[{\bf Description of test for module write-file:}] \hfill \\

  The write-file module will use the node from the main-task-list to
write tasks from the database to a file. The file pointer will be set
up in the write-file-setup. This routine will write out the tasks from
the database to a file. If a subtask should be encountered in a task
the function will call itself until the subtask list is null. At this
point, the subtask pointer will return to the top of the task that it
was currently working on and both pointers will will be incremented to
the next task in the main task list.
  

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Use of stubs or other software to facilitate the test
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\item[{\bf Overhead software description:}] \hfill \\
  The database functions must be coded and tested before this function
can be tested. This function will need the database function
get-main-task-list and will use the pointers from the database struct
to traverse the main task list to print out the tasks to the file.
For this function to be tested correctly, the read-file routines must
be coded and tested also. The write-file-setup must be in working
order to call the write-file routine.




%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% What data did you use to conduct the tests?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\item[{\bf Test case data:}] \hfill \\
  The first test case for this routine will involve printing the output tasks
to the screen. This will ensure that the task are being formatted correctly.
The next test case will store the tasks to the file. Each of
the entities of the task list will be checked for format and
completeness. This test case will be done several times with different
test data so that a broad range of output files are created. The last
test will consist of creating a task file, and then reading that same
file to make sure that the the file-read is the same as that which was written.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Briefly, what type of results do you expect?
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\item[{Expected Results:}] \hfill \\
 The expected results for the first case will include all of the tasks
formatted for the screen and in the same order as they were stored into the
list. The second case will involve the same results as the
first, however the output will be in the file. The last case will
write the file in the same way that it reads it. The task will be
correctly filled into the database after the read-file routines have
been processed.



\end{description}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DO NOT FILL OUT THE FOLLOWING SECTION FOR THE TESTING SPEC DELIVERABLE!!
% The testing results will be turned when the practice demo is given.
%
% For each top level module, describe the testing results.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% 
%\subsubsection{Actual Test Results}
@


1.1
log
@Initial revision
@
text
@d13 9
a21 9
  The write-file module will use the node given to it from its
parameter, to set up a format to write tasks from the database to a
file. The filepointer will be set up in the write-file-setup. This
routine will write out the tasks from the database to a file. If a
subtask should be encountered in a task the function will call itself
until the subtask list is null. At this point, the subtask pointer
will return to the top of the task that it was currently working od
and both pointers will will be incremented to the next task in the
main task list.
d44 2
a45 2
to the screen. This will ensure that the task are being printed out
right. The next test case will print the tasks to the file. Each of
d47 2
a48 2
completeness. This test case will be done over and over with different
senerios so that a broad range of output files are created. The last
d50 1
a50 2
file to make sure that the outputs of the file is correct in format
and completeness.
d56 4
a59 4
\item[{Expected Results:}] \hfill \
 The expected results for the first case will include all of the task
formated for the screen and in the same order as it was put into the
list. The second case will envolve the same testing checks as the
@
