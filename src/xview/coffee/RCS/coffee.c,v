head     1.5;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.5
date     92.08.27.14.40.06;  author ian;  state Exp;
branches ;
next     1.4;

1.4
date     92.08.27.14.26.55;  author ian;  state Exp;
branches ;
next     1.3;

1.3
date     92.08.18.14.49.32;  author ian;  state Exp;
branches ;
next     1.2;

1.2
date     92.08.17.11.43.15;  author ian;  state Exp;
branches ;
next     1.1;

1.1
date     92.08.14.18.09.06;  author ian;  state Exp;
branches ;
next     ;


desc
@Main program for xcoff. Contains NO X code -- keep it that way!!
@


1.5
log
@Rename some functions; add local change_icon that does caching
and calls the window system set icon routine.
@
text
@/*
 * coffee -- network display monitor to show status of the office coffee pot
 */

#include <stdio.h>

#include "xcoff.h"

/* These must be all the same size AND in the same order as "stat". */
char states[][SSIZE+1] = {	/* thou shalt not omit the null byte */
	"?!!?",
	"full",
	"half",
	"ugh!",
	"em-t"
};
int Nstates = sizeof(states)/sizeof(states[0]);

char *progname = "xcoff";

static change_icon(enum coff_stat status, char *who, long when);

void
usage()
{
	fprintf(stderr, "Usage: %s [new|half|ugh|empty]|X|[xview-options]\n",
		progname);
}

print_status()
{
	struct info *p = get_info();
	if (p != NULL)
		printf("Coffee status %s, updated by %s at %s",
			p->sstat, p->uname, ctime(&(p->mtime)));
	else
		printf("Coffee status unknown (can't read file)\n");
}

/* This is the timer-driven callback; check for changes in the file or 
 * aging of the brew, and update accordingly.
 * Your window system code MUST arrange to call this every 30 seconds or so.
 */
void
checker()
{
	static struct info *p;
	long currtime = time(0);

	p = get_info();		/* read current status */

	if (!p) {
		change_icon(UNINIT, "read fail", currtime);
		return;
	}
	switch(p->nstat) {
	case UNINIT:
		change_icon(p->nstat, p->uname, p->mtime);
		break;		/* nothing to do */
	case FULL:
		if (currtime - p->mtime > HALFLIFE)
			change_icon(HALF, "expired", currtime);
		else
			change_icon(p->nstat, p->uname, p->mtime);
		/*FALLTHROUGH*/
	case HALF:
		if (currtime - p->mtime > DEATHTIME)
			change_icon(UGHH, "expired", currtime);
		else
			change_icon(p->nstat, p->uname, p->mtime);
		break;
	case UGHH:
		change_icon(p->nstat, p->uname, p->mtime);
		break;		/* nothing to do */
	case EMPTY:
		change_icon(p->nstat, p->uname, p->mtime);
		break;          /* nothing to do */
	}
}


/* These are convenience functions; they're also callable from X, and
 * in turn call iconify() in X, which must check for inittedness.
 */
void
set_full()
{
	set_file(FULL);
	iconify();
}

void
set_half()
{
	set_file(HALF);
	iconify();
}

void
set_ugh()
{
	set_file(UGHH);
	iconify();
}

void
set_empty()
{
	set_file(EMPTY);
	iconify();
}

main(int argc, char **argv)
{

	progname = argv[0];

	if (argc == 1) {
		usage();
		exit(0);
	}

	/* First check for non-X usage: command line option to set status */

	if (argc > 1) {
		char *firstarg = argv[1];
		if (strcmp(firstarg, "new") == 0) {
			set_full();
			exit(0);
		}
		if (strcmp(firstarg, "full") == 0) {
			set_full();
			exit(0);
		}
		if (strcmp(firstarg, "half") == 0) {
			set_half();
			exit(0);
		}
		if (strcmp(firstarg, "ugh") == 0) {
			set_ugh();
			exit(0);
		}
		if (strcmp(firstarg, "empty") == 0) {
			set_empty();
			exit(0);
		}
		if (strcmp(firstarg, "status") == 0) {
			print_status();
			exit(0);
		}
	}

	/* Else call an X routine that watches the file and keeps
	 * the requisite icon on the screen.
	 */
	WSinit(&argc, argv);
	WSrun();
	/*NOTREACHED*/

	/* The X routine never terminates unless the X server is shutdown */
}

static
change_icon(enum coff_stat status, char *who, long when)
{
	static enum coff_stat old_stat = UNINIT;
	static char old_who[128] = "nOnEsEnSe";
	static long old_when = 0;

	if (status != old_stat ||
		strcmp(who, old_who) != 0 ||
		when != old_when) {
		WSset_icon(old_stat=stat,
			strncpy(old_who, who, sizeof old_who-1),
			old_when = when);
}
@


1.4
log
@Evolution in action.
@
text
@d1 3
a3 1
/* xcoff -- display status of the coffee pot */
d21 2
d81 1
d156 2
a157 2

	do_X(&argc, argv);
d163 14
@


1.3
log
@Numerous small changes. Do_X() now takes &argc, argv as args. Renamed
several enum members. Major change: new function checker() called from
the window system code checks for changes and/or expiries, and updates
the icon accordingly.
@
text
@d22 1
a22 1
	fprintf(stderr, "Usage: %s [new|half|ugh|empty]|[Xv-options]\n",
d28 2
a29 3
	int fd = open(STAT_FILE, 0);
	struct info *p = get_info(fd);
	if (fd >= 0 && p != NULL)
a33 1
	(void)close(fd);
a43 1
	int fd = open(STAT_FILE, 0);
d46 1
a46 1
	p = get_info(fd);		/* read current status */
a74 1
	close(fd);
d77 31
a109 1
	enum coff_stat status = UNINIT;
d123 1
a123 1
			set_file(status = FULL);
d127 1
a127 1
			set_file(status = FULL);
d131 1
a131 1
			set_file(status = HALF);
d135 1
a135 1
			set_file(status = UGHH);
d139 1
a139 1
			set_file(status = EMPTY);
@


1.2
log
@Move set_file function to new util.c; use "firstarg" instead of argv[1];
add "stat" checking and call print_status if found.
@
text
@d8 1
a8 1
char states[][SSIZE] = {
d15 1
d32 1
a32 1
		p->status, p->uname, p->mtime);
d34 2
a35 1
		printf("Coffee status unknown\n");
d38 43
d97 1
a97 1
			set_file(status = NEW);
d101 1
a101 1
			set_file(status = NEW);
d109 1
a109 1
			set_file(status = SORDID);
d116 1
a116 1
		if (strcmp(firstarg, "stat") == 0) {
d126 1
a126 1
	do_X();
@


1.1
log
@Initial revision
@
text
@d25 11
d38 1
a38 1
	enum stat status = UNINIT;
d50 2
a51 1
		if (strcmp(argv[1], "new") == 0) {
d55 1
a55 1
		if (strcmp(argv[1], "full") == 0) {
d59 1
a59 1
		if (strcmp(argv[1], "half") == 0) {
d63 1
a63 1
		if (strcmp(argv[1], "ugh") == 0) {
d67 1
a67 1
		if (strcmp(argv[1], "empty") == 0) {
d71 4
a84 17
}

void
set_file(enum stat st)
{
	int fd;

	printf("set file status to %d\n", st);
	if ((fd = creat(STAT_FILE, 0644)) < 0) {
		perror(STAT_FILE);
		exit(0);
	}
	if (write(fd, states[(int)st], SSIZE) != SSIZE) {
		perror("write");
		exit(1);
	}
	(void) close(fd);
@
