head     1.5;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.5
date     92.08.27.14.42.27;  author ian;  state Exp;
branches ;
next     1.4;

1.4
date     92.08.27.14.18.12;  author ian;  state Exp;
branches ;
next     1.3;

1.3
date     92.08.25.13.40.15;  author ian;  state Exp;
branches ;
next     1.2;

1.2
date     92.08.18.14.53.09;  author ian;  state Exp;
branches ;
next     1.1;

1.1
date     92.08.14.18.09.21;  author ian;  state Exp;
branches ;
next     ;


desc
@Model X code for xcoff program.
@


1.5
log
@Change the global function names; move the functions into logical(?) order.
@
text
@#include <xview/xview.h>
#include <xview/frame.h>
#include <xview/panel.h>
#include <xview/icon.h>
#include "xcoff.h"

/*
 * This file contains all the window-system dependant code.
 *
 * To write an alternate window interface (Motif, XVT, mgr, or whatever),
 * you'd have to write a file called (say) xm.c, with the following four
 * functions: WSinit, WSrun, WSiconify, and WSset_icon.
 * Declare the pushbutton callbacks shown below and the timer callback.
 * The routine WSinit() does all the work of creating windows, buttons, etc.,
 * The routine WSrun() manages the window system event loop.
 * The routine WSiconify() is called (whether window system or not!) from
 *	mainline code, to close the window to an icon.
 * The routine WSchange_icon() is called from main to change the icon.
 *
 * Obviously this could be simpler if you wanted to smush the main line
 * code and the window system together into one larger, less portable mess.
 */

/* Global (to this file) window system variables (widgets, baseFrames, etc). */
static Frame frame;
static Panel panel;
static Icon frame_icon;
struct bitmaps {
	Server_image image;
	unsigned short bits[256];
} bitmaps[NSTATES] = {
	{ 0,  {
#include "unkn.icon"
	} },
	{ 0,  {
#include "full.icon"
	} },
	{ 0,  {
#include "half.icon"
	} },
	{ 0,  {
#include "yuch.icon"
	} },
	{ 0,  {
#include "empty.icon"
	} },
	};

/* These are the push-button callbacks */
extern void set_full(), set_half(), set_ugh(), set_empty();
/* And the timer callback */
extern void checker();

/* Tell window system to call us periodically, to check the status. */
static int itime_interval = 10 /*30*/;

static void
start_timer()
{
	static struct itimerval timer;
	extern void checker();

	timer.it_value.tv_sec = itime_interval;
	timer.it_interval.tv_sec = itime_interval;
	notify_set_itimer_func(frame,
		(Notify_func)checker,
		ITIMER_REAL, &timer, NULL);
}

static int WindowSystemRunning = 0;

/*
 * This routine sets up the windows and controls (buttons, etc.)
 */
void
WSinit(int *argc, char **argv)
{
	int i, fd;
	struct info *curr_state;

	printf("Starting X-coffee...\n");

	xv_init(XV_INIT_ARGC_PTR_ARGV, argc, argv, NULL);

	Xrunning = 1;

	frame = xv_create(NULL, FRAME,
		FRAME_CLOSED, TRUE,
		XV_LABEL, "X-Coffee Status",
		XV_NULL);

	panel = xv_create(frame, PANEL,
		XV_NULL);

	(void) xv_create(panel, PANEL_BUTTON,
		PANEL_LABEL_STRING,	"Full",
		PANEL_NOTIFY_PROC,	set_full,
		XV_NULL);
	(void) xv_create(panel, PANEL_BUTTON,
		PANEL_LABEL_STRING,	"Half",
		PANEL_NOTIFY_PROC,	set_half,
		XV_NULL);
	(void) xv_create(panel, PANEL_BUTTON,
		PANEL_LABEL_STRING,	"Ugh",
		PANEL_NOTIFY_PROC,	set_ugh,
		XV_NULL);
	(void) xv_create(panel, PANEL_BUTTON,
		PANEL_LABEL_STRING,	"Empty",
		PANEL_NOTIFY_PROC,	set_empty,
		XV_NULL);

	/* Trim the sizes of the panel and frame to the above controls */
	window_fit(panel);
	window_fit(frame);

	/*
	 * Icon stuff: make up a server image for each state, stuff 1 into
	 * the "frame_icon" (will switch them around later), then
	 * connect the icon onto the baseFrame.
	 */
	for (i=0; i<NSTATES; i++)
	    bitmaps[i].image = xv_create(XV_NULL, SERVER_IMAGE,
		SERVER_IMAGE_DEPTH, 1,
		SERVER_IMAGE_BITS, bitmaps[i].bits,
		XV_WIDTH, 64,
		XV_HEIGHT, 64,
		NULL);

	frame_icon = xv_create(XV_NULL, ICON,
		XV_NULL);

	xv_set(frame,
		FRAME_ICON, frame_icon,
		XV_NULL);

	checker();		/* set it to right icon initially */

	start_timer();
}

/*
 * This routine drives the event loop.
 */
void
WSrun()
{
	xv_main_loop(frame);

}


/* Called from mainline to set the icon */
void
WSset_icon(enum coff_stat status, char *who, long when)
{
	xv_set(frame_icon,
		ICON_IMAGE, bitmaps[status].image,
		ICON_LABEL, who,
		XV_NULL);
}

/* Called from mainline to close the window to an icon */
void
WSiconify()
{
	struct info *curr_state;

	if (!WindowSystemRunning)
		return;
	
	checker();		/* Ensure the icon is up to date */

	xv_set(frame,
		FRAME_CLOSED,	TRUE,
		XV_NULL);
}

@


1.4
log
@Add substantial commentary to assist in moving to new window environments.
@
text
@d11 2
a12 2
 * you'd have to write a file called (say) xm.c, with the following three
 * functions: doX, iconify, and set_icon.
d14 3
a16 3
 * The routine do_X() does all the work of creating windows, buttons, etc.,
 *	AND manages the event loop.
 * The routine iconify() is called (whether window system or not!) from
d18 1
a18 1
 * The routine change_icon() is called from main to change the icon.
a71 16
/* Called from mainline to close the window to an icon */
void
iconify()
{
	struct info *curr_state;

	if (!WindowSystemRunning)
		return;
	
	checker();

	xv_set(frame,
		FRAME_CLOSED,	TRUE,
		XV_NULL);
}

d73 1
a73 1
 * This routine sets up the windows AND contains the X event loop.
d76 1
a76 1
do_X(int *argc, char **argv)
d112 4
d139 1
d141 6
a146 2
	window_fit(panel);
	window_fit(frame);
d152 1
d154 1
a154 1
change_icon(enum coff_stat status, char *who, long when)
d161 17
@


1.3
log
@Do the open and close in get_status(). Window_fit the frame so it's small
when open. Add buttons and notify procs to the panel.
Add iconify() callback.
@
text
@d7 18
d49 1
d51 2
d54 1
a54 3
void change_icon(enum coff_stat status, char *who, long when);

/* Tell xview to call us periodically, to check the status. */
d70 1
a70 1
static int Xrunning = 0;
d72 1
d78 1
a78 1
	if (!Xrunning)
d88 3
a153 1

@


1.2
log
@First real version: creates a window, keeps it closed, puts the 
correct icon in it, has bitmaps for all five states, etc.
@
text
@d3 1
d8 1
d24 1
a24 1
#include "ughh.icon"
d31 2
d51 2
d54 15
d78 2
d85 20
a117 3
#if	0
	fd = open(STAT_FILE, 0);
	curr_state = get_info(fd);
a118 1
		ICON_IMAGE, bitmaps[curr_state->nstat].image,
a119 6
	close(fd);
#else
	frame_icon = xv_create(XV_NULL, ICON,
		ICON_IMAGE, bitmaps[0].image,
		XV_NULL);
#endif
d125 2
d129 3
a142 3
		XV_NULL);
	xv_set(frame,
		FRAME_CLOSED,	TRUE,	/* in case somebody de-iconified us */
@


1.1
log
@Initial revision
@
text
@d1 3
d6 41
d48 1
a48 1
do_X()
d50 59
a108 1
	printf("doing the X thing...\n");
@
