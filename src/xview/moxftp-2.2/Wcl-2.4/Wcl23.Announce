Wcl 2.03 is Now Available
*************************

A new update of Wcl is now available.  A few enhancements have been
made, and the never-ending-effort to make Wcl easier to build on a 
wider range of platforms has resulted in a couple more minor tweaks.

Changes and New Capabilities:
-----------------------------

    o	Greatly improved mechanism for finding and loading resource files.

    o	Bug fixes to XmpTable to handle Gadgets correctly (for those of
	you who still use those stupid Gadgets).  The bug caused core dumps
	in certain situations.

    o	Table widget geometry management tweaks to avoid redundant resizing
	of widgets: those with XmScrolledWindows in there interfaces may
	notice an improvement.

    o   Experimental external interface to the LateBinder mechanism, which
	is intended to support people using Wcl to provide interfaces to
	interpretive environments (like perl).

    o   Man pages which can be installed on SCO machines.

    o   For the benefit of C++ users, `extern "C" {' is now in all includes.


Resource File Loading Support Improvements:
-------------------------------------------

Wcl has supported a command line option and resource specifications 
to load resource files for some time now.  However, the algorithm used
to find the files was always rather deficient.

Wcl 2.3 now uses a complete mechanism to fully complement the way
Xt loads the initial resource database in XtOpenDisplay().   

    1.	If the resource file name begins with tilda, then the file 
        is looked as a path from a user's home directory (~/foo/bar 
	or ~fred/bar etc).  If not found, a warning is given and
	the search stops.

    2.	If the resource file name begins with '/' or '.' then the 
	file name is used as an absolute path or a relative path 
	from the current working directory (./foo or ./foo/bar or
	../foo/bar or /foo/bar etc).  If not found, a warning is 
	given and the search stops.

    3.	If the filename can be found as a path from the current 
	directory (foo or foo/bar etc), then the search stops here.  
	This allows developers to very easily limit searches to the 
	local directory, or sub-directories of the local directory.

    4.  Otherwise, we look for both a "system" applications default
	file and a "user" app-defaults file.  The first "system" file
	and first "user" file are merged into the resource database
	applicable to the application shell.  The files are
	found using the same algorithm used by R3, R4, or R5 Xt
	(whichever is appropriate).  XFILESEARCHPATH and the
	compiled in path (generally /usr/lib/X11/app-defaults) are
	used to find the "system" file, and XUSERFILESEARCHPATH
	or XAPPLRESDIR or the default ($HOME) are used to find the 
	"user" file.

The result is that you may have wclResFiles specifications like this:

myApp.wclResFiles:	myApp/dialog1 myApp/dialog2 myApp/dialog3

and have the files found in subdirectories of /usr/lib/X11/app-defaults
and ~/app-defaults, which makes it easier to manage applications with
large and complex interfaces.

