head     1.8;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.8
date     91.10.30.11.46.33;  author ian;  state Exp;
branches ;
next     1.7;

1.7
date     91.10.30.11.32.18;  author ian;  state Exp;
branches ;
next     1.6;

1.6
date     91.10.30.10.59.28;  author ian;  state Exp;
branches ;
next     1.5;

1.5
date     91.10.28.18.10.05;  author ian;  state Exp;
branches ;
next     1.4;

1.4
date     91.10.28.15.11.59;  author ian;  state Exp;
branches ;
next     1.3;

1.3
date     91.10.28.15.11.28;  author ian;  state Exp;
branches ;
next     1.2;

1.2
date     91.10.09.16.42.36;  author ian;  state Exp;
branches ;
next     1.1;

1.1
date     91.10.09.14.32.33;  author ian;  state Exp;
branches ;
next     ;


desc
@Main() and other interface routines for genix.
@


1.8
log
@Change default name to genix.dat (like geneal.dat).
@
text
@/*
 * genix_stubs.c - Notify and event callback function stubs.
 * This file was generated by `gxv' from `genix.G'.
 * and has since been hand edited. Gxv (release 3) merges changes
 * when rewriting this file.
 */

#include <stdio.h>
#include <group.h>
#include <sys/param.h>
#include <sys/types.h>
#include <xview/xview.h>
#include <xview/panel.h>
#include <xview/textsw.h>
#include <xview/xv_xrect.h>
#include "genix_ui.h"
#include "genix.h"

#ifndef	lint
static char ident[] = "$Id: genix_stubs.c,v 1.7 91/10/30 11:32:18 ian Exp $";
#endif

/*
 * Global object definitions.
 * Keep in sync with declarations in "genix.h".
 */
genix_rootsWindow_objects	*Genix_rootsWindow;
genix_relationsWindow_objects	*Genix_relationsWindow;
genix_treeWindow_objects	*Genix_treeWindow;
genix_locateWindow_objects	*Genix_locateWindow;

#ifdef MAIN
void		CallFunction();

/*
 * Instance XV_KEY_DATA key.  An instance is a set of related
 * user interface objects.  A pointer to an object's instance
 * is stored under this key in every object.  This must be a
 * global variable.
 */
Attr_attribute	INSTANCE;

main(argc, argv)
	int	argc;
	char	**argv;
{
	/*
	 * Initialize XView.
	 */
	xv_init(XV_INIT_ARGC_PTR_ARGV, &argc, argv, NULL);
	INSTANCE = xv_unique_key();
	
	/*
	 * Initialize user interface components.
	 * Do NOT edit the object initializations by hand.
	 */
	Genix_rootsWindow = genix_rootsWindow_objects_initialize(NULL, NULL);
	Genix_relationsWindow = genix_relationsWindow_objects_initialize(NULL, Genix_rootsWindow->rootsWindow);
	Genix_treeWindow = genix_treeWindow_objects_initialize(NULL, Genix_rootsWindow->rootsWindow);
	Genix_locateWindow = genix_locateWindow_objects_initialize(NULL, Genix_rootsWindow->rootsWindow);

	/* If a filename given on command line, load it. */
	readObjs("genix.dat");

	/*
	 * Turn control over to XView.
	 */
	xv_main_loop(Genix_rootsWindow->rootsWindow);

	exit(0);
}

#endif


/*
 * Menu handler for `fileMenu (Save)'.
 */
Menu_item
globalSave(item, op)
	Menu_item	item;
	Menu_generate	op;
{
	genix_rootsWindow_objects * ip = (genix_rootsWindow_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	
	switch (op) {
	case MENU_DISPLAY:
		break;

	case MENU_DISPLAY_DONE:
		break;

	case MENU_NOTIFY:
		fputs("genix: globalSave: MENU_NOTIFY\n", stderr);
		
		/* gxv_start_connections DO NOT EDIT THIS SECTION */

		/* gxv_end_connections */

		writeObjs("genix.dat");
		break;

	case MENU_NOTIFY_DONE:
		break;
	}
	return item;
}

/*
 * Notify callback function for `locateButton'.
 */
void
personLocate(item, event)
	Panel_item	item;
	Event		*event;
{
	genix_rootsWindow_objects *ip = (genix_rootsWindow_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	
	fputs("genix: personLocate\n", stderr);
	
	/* gxv_start_connections DO NOT EDIT THIS SECTION */

	/* gxv_end_connections */

}

/*
 * Notify callback function for `applyButton'.
 */
void
personApply(item, event)
	Panel_item	item;
	Event		*event;
{
	genix_rootsWindow_objects *ip = (genix_rootsWindow_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	PERSON *this, *person_get(), *getPersonFromScreen();
	
	fprintf(stderr, "genix: personApply\n");
	this = getPersonFromScreen(ip);
	insertPerson(this, 1);
	fprintf(stderr, "Person %s, bdate %s\n", this->gname, this->bdate);
	
	/* gxv_start_connections DO NOT EDIT THIS SECTION */

	/* gxv_end_connections */

}

/*
 * Menu handler for `fileMenu (Load)'.
 */
Menu_item
globalLoad(item, op)
	Menu_item	item;
	Menu_generate	op;
{
	genix_rootsWindow_objects * ip = (genix_rootsWindow_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	
	switch (op) {
	case MENU_DISPLAY:
		break;

	case MENU_DISPLAY_DONE:
		break;

	case MENU_NOTIFY:
		fputs("genix: globalLoad: MENU_NOTIFY\n", stderr);
		
		/* gxv_start_connections DO NOT EDIT THIS SECTION */

		/* gxv_end_connections */

		break;

	case MENU_NOTIFY_DONE:
		break;
	}
	return item;
}

/*
 * Menu handler for `viewMenu'.
 */
Menu
genix_viewMenu_menu_callback(menu, op)
	Menu		menu;
	Menu_generate	op;
{
	genix_rootsWindow_objects * ip = (genix_rootsWindow_objects *) xv_get(menu, XV_KEY_DATA, INSTANCE);
	
	switch (op) {
	case MENU_DISPLAY:
		break;

	case MENU_DISPLAY_DONE:
		break;

	case MENU_NOTIFY:
		fputs("genix: genix_viewMenu_menu_callback: MENU_NOTIFY\n", stderr);
		
		/* gxv_start_connections DO NOT EDIT THIS SECTION */

		xv_set(Genix_relationsWindow->relationsWindow, XV_SHOW, TRUE, NULL);
		
		/* gxv_end_connections */

		break;

	case MENU_NOTIFY_DONE:
		break;
	}
	return menu;
}

/*
 * Menu handler for `viewMenu (Relations)'.
 */
Menu_item
genix_viewMenu_Relations_callback(item, op)
	Menu_item	item;
	Menu_generate	op;
{
	genix_rootsWindow_objects * ip = (genix_rootsWindow_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	
	switch (op) {
	case MENU_DISPLAY:
		break;

	case MENU_DISPLAY_DONE:
		break;

	case MENU_NOTIFY:
		fputs("genix: genix_viewMenu_Relations_callback: MENU_NOTIFY\n", stderr);
		
		/* gxv_start_connections DO NOT EDIT THIS SECTION */

		xv_set(Genix_relationsWindow->relationsWindow, XV_SHOW, TRUE, NULL);
		
		/* gxv_end_connections */

		break;

	case MENU_NOTIFY_DONE:
		break;
	}
	return item;
}

/*
 * Menu handler for `fileMenu (Exit)'.
 */
Menu_item
globalExit(item, op)
	Menu_item	item;
	Menu_generate	op;
{
	genix_rootsWindow_objects * ip = (genix_rootsWindow_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	
	switch (op) {
	case MENU_DISPLAY:
		break;

	case MENU_DISPLAY_DONE:
		break;

	case MENU_NOTIFY:
		fputs("genix: globalExit: MENU_NOTIFY\n", stderr);
		
		/* gxv_start_connections DO NOT EDIT THIS SECTION */

		/* gxv_end_connections */

		if (Changed)
			writeObjs("genix.hup");

		exit(0);
		/*NOTREACHED*/
		break;

	case MENU_NOTIFY_DONE:
		break;
	}
	return item;
}

/*
 * Menu handler for `viewMenu (Tree)'.
 */
Menu_item
genix_viewMenu_Tree_callback(item, op)
	Menu_item	item;
	Menu_generate	op;
{
	genix_rootsWindow_objects * ip = (genix_rootsWindow_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	
	switch (op) {
	case MENU_DISPLAY:
		break;

	case MENU_DISPLAY_DONE:
		break;

	case MENU_NOTIFY:
		fputs("genix: genix_viewMenu_Tree_callback: MENU_NOTIFY\n", stderr);
		
		/* gxv_start_connections DO NOT EDIT THIS SECTION */

		xv_set(Genix_treeWindow->treeWindow, XV_SHOW, TRUE, NULL);
		
		/* gxv_end_connections */

		break;

	case MENU_NOTIFY_DONE:
		break;
	}
	return item;
}

/*
 * Notify callback function for `locateButton'.
 */
void
genix_rootsWindow_locateButton_notify_callback(item, event)
	Panel_item	item;
	Event		*event;
{
	genix_rootsWindow_objects *ip = (genix_rootsWindow_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	
	fputs("genix: genix_rootsWindow_locateButton_notify_callback\n", stderr);
	
	/* gxv_start_connections DO NOT EDIT THIS SECTION */

	xv_set(Genix_locateWindow->locateWindow, XV_SHOW, TRUE, NULL);
	
	/* gxv_end_connections */

}

/*
 * User-defined action for `locateButton'.
 */
void
CallFunction(item, event)
	Panel_item	item;
	Event		*event;
{
	fputs("genix: CallFunction\n", stderr);
}

/*
 * Menu handler for `editMenu (Relations)'.
 */
Menu_item
genix_editMenu_Relations_callback(item, op)
	Menu_item	item;
	Menu_generate	op;
{
	genix_rootsWindow_objects * ip = (genix_rootsWindow_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	
	switch (op) {
	case MENU_DISPLAY:
		break;

	case MENU_DISPLAY_DONE:
		break;

	case MENU_NOTIFY:
		fputs("genix: genix_editMenu_Relations_callback: MENU_NOTIFY\n", stderr);
		
		/* gxv_start_connections DO NOT EDIT THIS SECTION */

		xv_set(Genix_relationsWindow->relationsWindow, XV_SHOW, TRUE, NULL);
		
		/* gxv_end_connections */

		break;

	case MENU_NOTIFY_DONE:
		break;
	}
	return item;
}

void
warning(s)
char *s;
{
	/* notice_prompt( ... */
	fprintf(stderr, "%s\n", s);
}

void
error(s)
char *s;
{
	warning(s);
	if (Changed)
		writeObjs("genix.hup");
	exit(1);
}
@


1.7
log
@Make error() and warning() void for now.
@
text
@d20 1
a20 1
static char ident[] = "$Id: genix_stubs.c,v 1.6 91/10/30 10:59:28 ian Exp $";
d63 1
a63 1
	readObjs("genix.out");
d99 2
a100 1
		writeObjs("genix.out");
a401 1

@


1.6
log
@"Relations" now from Edit button; Locate button pops up dummy window.
@
text
@d20 1
a20 1
static char ident[] = "$Id: genix_stubs.c,v 1.5 91/10/28 18:10:05 ian Exp $";
d384 1
d392 1
@


1.5
log
@call getPersonFromScreen and insertPerson.
@
text
@a7 4
#ifndef	lint
static char ident[] = "$Id: genix_stubs.c,v 1.4 91/10/28 15:11:59 ian Exp $";
#endif

d9 1
d19 4
d30 1
d33 1
d60 1
d135 1
a135 1
	PERSON *this, *person_get();
d202 1
a202 3
		{
				xv_set(Genix_relationsWindow, XV_SHOW, TRUE, XV_NULL);
		}
d318 82
@


1.4
log
@Try it again.
@
text
@d9 1
a9 1
static char ident[] = "$Id$";
d24 1
d131 1
d133 4
a136 1
	fputs("genix: personApply\n", stderr);
@


1.3
log
@Add RCS ident.
@
text
@d9 1
a9 1
static char ident[] = "$Id";
@


1.2
log
@Move global vars to genix_vars.c.
@
text
@d8 4
d57 3
a59 1
	
@


1.1
log
@Initial revision
@
text
@a23 2
int Changed = 0;		/* If any "Apply" since last Save. */
PERSON root = { "Darwin", "Ian", 0, 0};
@
