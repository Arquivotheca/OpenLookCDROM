head     1.6;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.6
date     92.06.02.13.24.07;  author ian;  state Exp;
branches ;
next     1.5;

1.5
date     91.12.02.16.27.29;  author ian;  state Exp;
branches 1.5.1.1;
next     1.4;

1.4
date     91.11.28.15.55.12;  author ian;  state Exp;
branches ;
next     1.3;

1.3
date     91.11.28.13.47.17;  author ian;  state Exp;
branches ;
next     1.2;

1.2
date     91.11.28.12.55.35;  author ian;  state Exp;
branches ;
next     1.1;

1.1
date     91.11.28.12.52.29;  author ian;  state Exp;
branches ;
next     ;

1.5.1.1
date     92.05.07.20.01.24;  author ian;  state Exp;
branches ;
next     ;


desc
@Code to maintain the logfile for timeRecorder program.
@


1.6
log
@Minor change in format.
@
text
@/*
 * Code to open and write, etc. the timeRecorder program.
 * $Id: logfile.c,v 1.5 91/12/02 16:27:29 ian Exp $
 */

#include <stdio.h>
#include <sys/types.h>
#include <sys/time.h>
#include <malloc.h>
#if	0
#include <xview/xview.h>
#include <xview/panel.h>
#include "timer_ui.h"
extern timer_baseFrame_objects	*Timer_baseFrame;
#endif

static char *curlogfile;
static char *DOTFILE = ".timelog";
static FILE *fp;
extern char *progname;

openLog()
{
	char *h, *getenv();
	static char *p;

	if ((h = getenv("HOME")) == NULL) {
		fprintf(stderr, "%s: No HOME in environment!\n", progname);
		exit(1);
	}
	if (!p) {
		p = malloc(strlen(h)+strlen(DOTFILE)+2);
		strcpy(p, h);
		strcat(p, "/");
		strcat(p, DOTFILE);

		curlogfile = p;
	}

	if ((fp = fopen(p, "a")) == NULL) {
		extern int errno;
		int e = errno;
		fprintf(stderr,
			"%s: can't append to time log file ",
			progname);
		errno = e;
		perror(curlogfile);
		exit(1);
	}
}

closeLog()
{
	(void) fclose(fp);
}

/* Timestamp and Write an action (start, stop) and
 * a topic to the logfile.
 */
writeLog(a, t)
char *a, *t;
{
	time_t tl;
	struct tm *lt, *localtime();

	openLog();
	time(&tl);
	lt = localtime(&tl);
	fprintf(fp, "%4d/%02d/%02d\t%02d:%02d\t%s\t%s\n", 
		lt->tm_year+1900, lt->tm_mon+1, lt->tm_mday,
		lt->tm_hour, lt->tm_min, a, t);
	closeLog();
}

@


1.5
log
@Don't try to keep .timelog file open across writes, so the user
can update it at any time with ye editor.
@
text
@d3 1
a3 1
 * $Id: logfile.c,v 1.4 91/11/28 15:55:12 ian Exp $
d69 1
a69 1
	fprintf(fp, "%4d/%02d/%02d %02d:%02d %s %s\n", 
@


1.5.1.1
log
@Write the timestamp in binary, not in ctime-modified format.
@
text
@d3 1
a3 1
 * $Id: logfile.c,v 1.5 91/12/02 16:27:29 ian Exp $
d64 1
d68 4
a71 1
	fprintf(fp, "%d\t%s\t%s\n", tl, a, t);
@


1.4
log
@Add leading zeroes to format codes for month, day, hour, minute
so they print with leading zeroes if single digit.
@
text
@d3 1
a3 1
 * $Id: logfile.c,v 1.3 91/11/28 13:47:17 ian Exp $
d24 2
a25 1
	char *h, *p, *getenv();
d31 5
a35 4
	p = malloc(strlen(h)+strlen(DOTFILE)+2);
	strcpy(p, h);
	strcat(p, "/");
	strcat(p, DOTFILE);
d37 2
a38 1
	curlogfile = p;
d44 2
a45 1
			"%s: can't append to time log file ", progname);
a49 1

d66 1
d70 1
a70 1
		lt->tm_year+1900, lt->tm_mon, lt->tm_mday,
d72 1
a72 1
	fflush(fp);
@


1.3
log
@Nuke environment variable; file must be in ~. Slightly improve
the reporting of errors.
@
text
@d3 1
a3 1
 * $Id: logfile.c,v 1.2 91/11/28 12:55:35 ian Exp $
d65 1
a65 1
	fprintf(fp, "%d/%d/%d %d:%2d %s %s\n", 
@


1.2
log
@Add RCS ID.
@
text
@d3 1
a3 1
 * $Id$
d20 1
d24 1
a24 1
	char *h, *p, *getenv(), buf[512];
d26 3
a28 9
	if ((p=getenv("TIMELOGFILE")) == NULL) {
		if ((h = getenv("HOME")) == NULL) {
			printf("No HOME in env\n");
			exit(1);
		}
		p = malloc(strlen(h)+strlen(DOTFILE)+2);
		strcpy(p, h);
		strcat(p, "/");
		strcat(p, DOTFILE);
d30 4
d40 2
a41 1
		printf("can't append to time log file ");
@


1.1
log
@Initial revision
@
text
@d2 2
a3 1
 * Code to read, write, update, etc. the topics list.
@
