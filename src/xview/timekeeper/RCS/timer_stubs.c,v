head     1.15;
branch   ;
access   ;
symbols  ;
locks    ;
comment  @ * @;


1.15
date     92.06.24.12.04.38;  author ian;  state Exp;
branches ;
next     1.14;

1.14
date     92.06.24.11.35.08;  author ian;  state Exp;
branches ;
next     1.13;

1.13
date     92.06.02.13.15.13;  author ian;  state Exp;
branches ;
next     1.12;

1.12
date     92.06.02.11.15.04;  author ian;  state Exp;
branches ;
next     1.11;

1.11
date     92.06.02.10.45.47;  author ian;  state Exp;
branches ;
next     1.10;

1.10
date     92.06.02.10.22.55;  author ian;  state Exp;
branches ;
next     1.9;

1.9
date     92.06.01.14.07.09;  author ian;  state Exp;
branches ;
next     1.8;

1.8
date     92.05.29.11.41.47;  author ian;  state Exp;
branches ;
next     1.7;

1.7
date     92.05.29.11.11.25;  author ian;  state Exp;
branches ;
next     1.6;

1.6
date     91.12.02.16.29.06;  author ian;  state Exp;
branches ;
next     1.5;

1.5
date     91.11.28.16.36.10;  author ian;  state Exp;
branches ;
next     1.4;

1.4
date     91.11.28.15.53.58;  author ian;  state Exp;
branches ;
next     1.3;

1.3
date     91.11.28.13.48.29;  author ian;  state Exp;
branches ;
next     1.2;

1.2
date     91.11.28.12.55.43;  author ian;  state Exp;
branches ;
next     1.1;

1.1
date     91.11.28.12.53.14;  author ian;  state Exp;
branches ;
next     ;


desc
@Main() program and user stubs for the timeRecorder program.
@


1.15
log
@Auto-iconify after setting topic.
@
text
@/*
 * timer_stubs.c - Notify and event callback function stubs.
 * This file was generated by `gxv' from `timer.G'.
 * and has since been hand edited. Gxv (release 3) merges changes
 * when rewriting this file.
 *
 * $Id: timer_stubs.c,v 1.14 92/06/24 11:35:08 ian Exp $
 */

#include <stdio.h>
#include <sys/param.h>
#include <sys/types.h>
#include <xview/xview.h>
#include <xview/panel.h>
#include <xview/textsw.h>
#include <xview/xv_xrect.h>
#include "timer_ui.h"
#include "timekeeper.h"
#include <group.h>

void		addTopic();
void		delTopic();

/*
 * Global object definitions.
 */
timer_baseFrame_objects	*Timer_baseFrame;

#ifdef MAIN

/*
 * Instance XV_KEY_DATA key.  An instance is a set of related
 * user interface objects.  A pointer to an object's instance
 * is stored under this key in every object.  This must be a
 * global variable.
 */
Attr_attribute	INSTANCE;

char *progname;
char *curTopic = NULL;
void shutdown();
static Server_image normal_image, nobilling_image;
static Icon frame_icon;
static unsigned short	normal_bits[] = {
#include "punchclock.icon"
	}, nobilling_bits[] = {
#include "nobilling.icon"
	};

main(argc, argv)
	int	argc;
	char	**argv;
{
	
	progname = *argv;

	/*
	 * Initialize XView.
	 */
	xv_init(XV_INIT_ARGC_PTR_ARGV, &argc, argv, NULL);
	INSTANCE = xv_unique_key();

	/*
	 * Initialize user interface components.
	 * Do NOT edit the object initializations by hand.
	 */
	Timer_baseFrame = timer_baseFrame_objects_initialize(NULL, NULL);
	
	/*
	 * Icon stuff: make up two server images, stuff one into
	 * the "frame_icon" (will switch them around later), then
	 * connect the icon onto the baseFrame.
	 */
	normal_image = xv_create(XV_NULL, SERVER_IMAGE,
		SERVER_IMAGE_DEPTH, 1,
		SERVER_IMAGE_BITS, normal_bits,
		XV_WIDTH, 64,
		XV_HEIGHT, 64,
		NULL);
	
	nobilling_image = xv_create(XV_NULL, SERVER_IMAGE,
		SERVER_IMAGE_DEPTH, 1,
		SERVER_IMAGE_BITS, nobilling_bits,
		XV_WIDTH, 64,
		XV_HEIGHT, 64,
		NULL);

	frame_icon = xv_create(XV_NULL, ICON,
		ICON_IMAGE, nobilling_image,
		XV_NULL);

	xv_set(Timer_baseFrame->baseFrame,
		FRAME_LEFT_FOOTER, NOTOPICMSG,
		FRAME_ICON, frame_icon,
		XV_NULL);

	readTopics();
#ifdef	SNOOPY
	writeLog("Start", "RECORDING");
#endif

	signal(SIGTERM, shutdown);	/* always catch */
	if (signal(SIGINT, shutdown) == SIG_IGN)	/* catch correctly */
		signal(SIGINT, SIG_IGN);
	
	/*
	 * Turn control over to XView.
	 */
	xv_main_loop(Timer_baseFrame->baseFrame);

	writeLog("End", "RECORDING");
	exit(0);
}

void
shutdown(i)
int i;
{
	char buf[128];

	sprintf(buf, "Caught signal %d", i);
	writeLog(buf, "");
	writeLog("End", "RECORDING");
	exit(1);
}


void
settopic(s)
char *s;
{
	writeLog("Start", s);
	xv_set(frame_icon,
		ICON_LABEL, s,
		ICON_IMAGE, normal_image,
		XV_NULL);
	xv_set(Timer_baseFrame->baseFrame,
		FRAME_LEFT_FOOTER, s,
#ifndef		NO_AUTO_CLOSE
		FRAME_CLOSED,	TRUE,
#endif
		XV_NULL);
	curTopic = s;
}

#endif


/*
 * Notify callback function for `startButton'.
 */
void
startTopic(item, event)
	Panel_item	item;
	Event		*event;
{
	timer_baseFrame_objects *ip = (timer_baseFrame_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	int inewTopic;
	char *getTopic(/*int i*/), *newTopic;
	
	inewTopic = xv_get(Timer_baseFrame->topicList,
		PANEL_LIST_FIRST_SELECTED);

	settopic(newTopic = getTopic(inewTopic));

	/* gxv_start_connections DO NOT EDIT THIS SECTION */

	/* gxv_end_connections */

}

/*
 * Notify callback function for `stopButton'.
 */
void
stopTopic(item, event)
	Panel_item	item;
	Event		*event;
{
	int newtopic;
	timer_baseFrame_objects *ip = (timer_baseFrame_objects *)
		xv_get(item, XV_KEY_DATA, INSTANCE);

	newtopic = xv_get(ip->topicList,
		PANEL_LIST_FIRST_SELECTED);
	if (newtopic)
		writeLog("End", getTopic(newtopic));
	else if (curTopic)
		writeLog("End", curTopic);
	xv_set(frame_icon,
		ICON_LABEL, "",
		ICON_IMAGE, nobilling_image,
		XV_NULL);
	xv_set(ip->baseFrame,
		FRAME_LEFT_FOOTER, NOTOPICMSG,
		XV_NULL);
	
	/* gxv_start_connections DO NOT EDIT THIS SECTION */

	/* gxv_end_connections */

}

/*
 * Notify callback function for `addButton'.
 */
void
timer_baseFrame_addButton_notify_callback(item, event)
	Panel_item	item;
	Event		*event;
{
	timer_baseFrame_objects *ip = (timer_baseFrame_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	
	/* gxv_start_connections DO NOT EDIT THIS SECTION */

	addTopic(item, event);
	
	/* gxv_end_connections */

}

/*
 * User-defined action for `addButton'.
 */
void
addTopic(item, event)
	Panel_item	item;
	Event		*event;
{
	timer_baseFrame_objects *ip = (timer_baseFrame_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	char *newtopic;

	newtopic = (char*)xv_get(ip->newTextfield, PANEL_VALUE);
	if (newtopic) {
		insertTopic(newtopic);
		writeTopics();
	}
}

/*
 * Notify callback function for `deleteButton'.
 */
void
timer_baseFrame_deleteButton_notify_callback(item, event)
	Panel_item	item;
	Event		*event;
{
	timer_baseFrame_objects *ip = (timer_baseFrame_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	
	
	/* gxv_start_connections DO NOT EDIT THIS SECTION */

	delTopic(item, event);
	
	/* gxv_end_connections */

}

/*
 * User-defined action for `deleteButton'.
 */
void
delTopic(item, event)
	Panel_item	item;
	Event		*event;
{
	fputs("timer: delTopic not written yet.\n", stderr);
}

/*
 * Notify callback function for `rereadButton'.
 */
void
rereadTopics(item, event)
	Panel_item	item;
	Event		*event;
{
	timer_baseFrame_objects *ip = (timer_baseFrame_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	
	readTopics();
	
	/* gxv_start_connections DO NOT EDIT THIS SECTION */

	/* gxv_end_connections */

}

/*
 * Notify callback function for `topicList'.
 */
int
timer_baseFrame_topicList_notify_callback(item, string, client_data, op, event, row)
	Panel_item	item;
	char		*string;
	Xv_opaque	client_data;
	Panel_list_op	op;
	Event		*event;
	int		row;
{
	timer_baseFrame_objects *ip = (timer_baseFrame_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	static int selectcount = 0;
	
	switch(op) {
	case PANEL_LIST_OP_DESELECT:
		if (selectcount == 1) {
			settopic(string);
			selectcount = 0;
		}
		break;

	case PANEL_LIST_OP_SELECT:
		selectcount = 1;
		break;
	
	case PANEL_LIST_OP_VALIDATE:
		fprintf(stderr, "timer: timer_baseFrame_topicList_notify_callback: PANEL_LIST_OP_VALIDATE: %s\n",string);
		break;

	case PANEL_LIST_OP_DELETE:
		fprintf(stderr, "timer: timer_baseFrame_topicList_notify_callback: PANEL_LIST_OP_DELETE: %s\n",string);
		break;
	}
	
	/* gxv_start_connections DO NOT EDIT THIS SECTION */

	xv_set(Timer_baseFrame->topicList, XV_SHOW, TRUE, NULL);
	
	/* gxv_end_connections */

	return XV_OK;
}
@


1.14
log
@Do the "xvset(icon, ICON_IMAGE, image NULL)" thing (tnx for hint to s'marks)
to set the icon to normal or nobilling as appropriate. You can't change the
icon, but you can change its icon_image, to change it on the fly.
@
text
@d7 1
a7 1
 * $Id: timer_stubs.c,v 1.13 92/06/02 13:15:13 ian Exp $
d139 3
@


1.13
log
@Properly set the icon to "nobilling" both at startup and whenever needed.
@
text
@d7 1
a7 1
 * $Id: timer_stubs.c,v 1.12 92/06/02 11:15:04 ian Exp $
d42 7
a48 2
static Xv_opaque normal_image, nobilling_image;
static Icon normal_icon, nobilling_icon;
a53 5
	static unsigned short	normal_bits[] = {
#include "punchclock.icon"
	}, nobilling_bits[] = {
#include "nobilling.icon"
	};
d69 5
a76 1
		XV_LABEL, "TimeKeeper",
a80 5
	normal_icon = xv_create(XV_NULL, ICON,
		ICON_IMAGE, normal_image,
		ICON_LABEL, "TimeKeeper",
		XV_NULL);

d87 2
a88 1
	nobilling_icon = xv_create(XV_NULL, ICON,
d90 1
a90 1
		NULL);
d94 1
a94 1
		FRAME_ICON, nobilling_icon,
d98 1
d100 1
a126 12
void
my_icon_set(icon)
Icon icon;
{
	/* Unmap and map the window to make the Window Mangler notice
	 * that we changed the icon.
	 */
	xv_set(Timer_baseFrame->baseFrame,
		XV_SHOW, FALSE,
		FRAME_ICON, icon,
		XV_SHOW, TRUE,
		XV_NULL);
a127 2
}

d133 1
a133 1
	xv_set(normal_icon,
d135 1
a136 1
	my_icon_set(normal_icon);
d187 4
a190 1
	my_icon_set(nobilling_icon);
@


1.12
log
@Remove extraneous label from icon.
@
text
@d6 2
a7 1
 * $Id: timer_stubs.c,v 1.11 92/06/02 10:45:47 ian Exp $
d49 1
a49 1
	static unsigned short	baseFrame_bits[] = {
d71 1
a71 1
		SERVER_IMAGE_BITS, baseFrame_bits,
d126 15
d148 1
a149 1
		FRAME_ICON, normal_icon,
a151 1

d199 1
a201 1
		FRAME_ICON,	nobilling_icon,
@


1.11
log
@Add a "nobilling" icon, suggested by Liam.
@
text
@d6 1
a6 1
 * $Id: timer_stubs.c,v 1.10 92/06/02 10:22:55 ian Exp $
a88 1
		ICON_LABEL, "NOT BILLING",
a128 3
	xv_set(Timer_baseFrame->baseFrame,
		FRAME_LEFT_FOOTER, s,
		XV_NULL);
d134 1
@


1.10
log
@Do the Icon stuff myself, so it's easier to change; change
the icon label to whatever the current topic is.
@
text
@d6 1
a6 1
 * $Id: timer_stubs.c,v 1.9 92/06/01 14:07:09 ian Exp $
d41 2
a42 2
static Xv_opaque baseFrame_image;	/* used for icon */
static Icon icon;
d50 2
d68 1
a68 1
	baseFrame_image = xv_create(XV_NULL, SERVER_IMAGE,
d76 16
d94 1
a94 4
		FRAME_ICON, icon = xv_create(XV_NULL, ICON,
			ICON_IMAGE, baseFrame_image,
			ICON_LABEL, "TimeKeeper",
			NULL),
d133 1
a133 1
	xv_set(icon,
d136 3
d189 1
@


1.9
log
@Set the ICON_LABEL when setting a topic; suggested by rph.
@
text
@d6 1
a6 1
 * $Id: timer_stubs.c,v 1.8 92/05/29 11:41:47 ian Exp $
d41 2
d48 4
d53 1
d59 1
a59 1
	
d66 8
d76 4
d117 2
a120 1

@


1.8
log
@Add code for double-clicking on topic to make it current.
@
text
@d6 1
a6 1
 * $Id: timer_stubs.c,v 1.7 92/05/29 11:11:25 ian Exp $
d98 1
d100 1
@


1.7
log
@Use instance_pointer several places. Add NO_TOPIC__MSG to footer after STOP.
Catch SIGINT correctly.
@
text
@d6 1
a6 1
 * $Id: timer_stubs.c,v 1.6 91/12/02 16:29:06 ian Exp $
d91 12
d115 2
a116 2
	int newtopic;
	char *getTopic();
d118 1
a118 1
	newtopic = xv_get(Timer_baseFrame->topicList,
a119 7
	if (curTopic)
		writeLog("End", "");	/* close off previous */
	curTopic = getTopic(newtopic);
	writeLog("Start", curTopic);
	xv_set(ip->baseFrame,
		FRAME_LEFT_FOOTER, curTopic,
		XV_NULL);
d121 2
d239 45
@


1.6
log
@Catch sigterm, and close down if you get it.
@
text
@d6 1
a6 1
 * $Id: timer_stubs.c,v 1.5 91/11/28 16:36:10 ian Exp $
d17 1
d59 4
d66 3
a68 1
	signal(SIGTERM, shutdown);
d109 1
a109 1
		writeLog("End", curTopic);	/* close off previous */
d112 1
a112 1
	xv_set(Timer_baseFrame->baseFrame,
d131 4
a134 3
	timer_baseFrame_objects *ip = (timer_baseFrame_objects *) xv_get(item, XV_KEY_DATA, INSTANCE);
	
	newtopic = xv_get(Timer_baseFrame->topicList,
d138 5
d176 1
d179 1
a179 1
	newtopic = (char*)xv_get(Timer_baseFrame->newTextfield, PANEL_VALUE);
@


1.5
log
@Drop unnecessary SHOW FOOTER setting; new rereadTopics().
@
text
@d6 1
a6 1
 * $Id: timer_stubs.c,v 1.4 91/11/28 15:53:58 ian Exp $
d39 1
a58 1
	openLog();
d60 2
a68 1
	closeLog();
d70 12
@


1.4
log
@Automatically End previous topic if a new one started.
Also, put topic into Left Footer when starting it.
@
text
@d6 1
a6 1
 * $Id: timer_stubs.c,v 1.3 91/11/28 13:48:29 ian Exp $
d17 1
a92 1
		FRAME_SHOW_FOOTER, TRUE,
d187 18
@


1.3
log
@Add and set progname for use in reporting.
@
text
@d6 1
a6 1
 * $Id: timer_stubs.c,v 1.2 91/11/28 12:55:43 ian Exp $
d37 1
d83 1
d87 8
a94 2
	if (newtopic)
		writeLog("Start", getTopic(newtopic));
@


1.2
log
@Add RCS ID.
@
text
@d6 1
a6 1
 * $Id$
d20 1
d36 2
d42 1
@


1.1
log
@Initial revision
@
text
@d6 1
@
